// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_api_2eproto__INCLUDED
#define PROTOBUF_api_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#pragma push_macro("assert")
#undef assert

namespace server {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_api_2eproto();
void protobuf_InitDefaults_api_2eproto();
void protobuf_AssignDesc_api_2eproto();
void protobuf_ShutdownFile_api_2eproto();

class AuthenticateRequest;
class AuthenticateRequest_Email;
class AuthenticateRequest_GameCenter;
class AuthenticateResponse;
class AuthenticateResponse_Error;
class AuthenticateResponse_Session;
class Envelope;
class Error;
class Friend;
class Group;
class GroupUser;
class Heartbeat;
class Leaderboard;
class LeaderboardRecord;
class Logout;
class Match;
class MatchData;
class MatchDataSend;
class MatchPresence;
class MatchmakeFilter;
class MatchmakeFilter_RangeFilter;
class MatchmakeFilter_TermFilter;
class MatchmakeMatched;
class MatchmakeMatched_UserProperty;
class Notification;
class Notifications;
class PropertyPair;
class PropertyPair_StringSet;
class Self;
class TFriends;
class TFriendsAdd;
class TFriendsAdd_FriendsAdd;
class TFriendsBlock;
class TFriendsList;
class TFriendsRemove;
class TGroupUsers;
class TGroupUsersAdd;
class TGroupUsersAdd_GroupUserAdd;
class TGroupUsersKick;
class TGroupUsersKick_GroupUserKick;
class TGroupUsersList;
class TGroupUsersPromote;
class TGroupUsersPromote_GroupUserPromote;
class TGroups;
class TGroupsCreate;
class TGroupsCreate_GroupCreate;
class TGroupsFetch;
class TGroupsFetch_GroupFetch;
class TGroupsJoin;
class TGroupsLeave;
class TGroupsList;
class TGroupsRemove;
class TGroupsSelf;
class TGroupsSelfList;
class TGroupsSelf_GroupSelf;
class TGroupsUpdate;
class TGroupsUpdate_GroupUpdate;
class TLeaderboardRecords;
class TLeaderboardRecordsFetch;
class TLeaderboardRecordsList;
class TLeaderboardRecordsList_Owners;
class TLeaderboardRecordsWrite;
class TLeaderboardRecordsWrite_LeaderboardRecordWrite;
class TLeaderboards;
class TLeaderboardsList;
class TLink;
class TMatch;
class TMatchCreate;
class TMatches;
class TMatchesJoin;
class TMatchesJoin_MatchJoin;
class TMatchesLeave;
class TMatchmakeAdd;
class TMatchmakeRemove;
class TMatchmakeTicket;
class TNotifications;
class TNotificationsList;
class TNotificationsRemove;
class TPurchaseRecord;
class TPurchaseValidation;
class TPurchaseValidation_ApplePurchase;
class TPurchaseValidation_GooglePurchase;
class TRpc;
class TSelf;
class TSelfFetch;
class TSelfUpdate;
class TStorageData;
class TStorageData_StorageData;
class TStorageFetch;
class TStorageFetch_StorageKey;
class TStorageKeys;
class TStorageKeys_StorageKey;
class TStorageList;
class TStorageRemove;
class TStorageRemove_StorageKey;
class TStorageUpdate;
class TStorageUpdate_StorageUpdate;
class TStorageUpdate_StorageUpdate_StorageKey;
class TStorageUpdate_StorageUpdate_UpdateOp;
class TStorageWrite;
class TStorageWrite_StorageData;
class TTopicMessageAck;
class TTopicMessageSend;
class TTopicMessages;
class TTopicMessagesList;
class TTopics;
class TTopicsJoin;
class TTopicsJoin_TopicJoin;
class TTopicsLeave;
class TTopics_Topic;
class TUnlink;
class TUsers;
class TUsersFetch;
class TUsersFetch_UsersFetch;
class TopicId;
class TopicMessage;
class TopicPresence;
class User;
class UserPresence;

enum Error_Code {
  Error_Code_RUNTIME_EXCEPTION = 0,
  Error_Code_UNRECOGNIZED_PAYLOAD = 1,
  Error_Code_MISSING_PAYLOAD = 2,
  Error_Code_BAD_INPUT = 3,
  Error_Code_AUTH_ERROR = 4,
  Error_Code_USER_NOT_FOUND = 5,
  Error_Code_USER_REGISTER_INUSE = 6,
  Error_Code_USER_LINK_INUSE = 7,
  Error_Code_USER_LINK_PROVIDER_UNAVAILABLE = 8,
  Error_Code_USER_UNLINK_DISALLOWED = 9,
  Error_Code_USER_HANDLE_INUSE = 10,
  Error_Code_GROUP_NAME_INUSE = 11,
  Error_Code_GROUP_LAST_ADMIN = 12,
  Error_Code_STORAGE_REJECTED = 13,
  Error_Code_MATCH_NOT_FOUND = 14,
  Error_Code_RUNTIME_FUNCTION_NOT_FOUND = 15,
  Error_Code_RUNTIME_FUNCTION_EXCEPTION = 16,
  Error_Code_Error_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_Code_Error_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_Code_IsValid(int value);
const Error_Code Error_Code_Code_MIN = Error_Code_RUNTIME_EXCEPTION;
const Error_Code Error_Code_Code_MAX = Error_Code_RUNTIME_FUNCTION_EXCEPTION;
const int Error_Code_Code_ARRAYSIZE = Error_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor();
inline const ::std::string& Error_Code_Name(Error_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Code_descriptor(), value);
}
inline bool Error_Code_Parse(
    const ::std::string& name, Error_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Code>(
    Error_Code_descriptor(), name, value);
}
enum TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode {
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_ADD = 0,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_APPEND = 1,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COPY = 2,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INCR = 3,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INIT = 4,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MERGE = 5,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MOVE = 6,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_PATCH = 7,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REMOVE = 8,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REPLACE = 9,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TEST = 10,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COMPARE = 11,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_IsValid(int value);
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MIN = TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_ADD;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MAX = TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COMPARE;
const int TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_ARRAYSIZE = TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor();
inline const ::std::string& TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Name(TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor(), value);
}
inline bool TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Parse(
    const ::std::string& name, TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode>(
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor(), name, value);
}
enum StoragePermissionRead {
  NO_READ = 0,
  OWNER_READ = 1,
  PUBLIC_READ = 2,
  StoragePermissionRead_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StoragePermissionRead_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StoragePermissionRead_IsValid(int value);
const StoragePermissionRead StoragePermissionRead_MIN = NO_READ;
const StoragePermissionRead StoragePermissionRead_MAX = PUBLIC_READ;
const int StoragePermissionRead_ARRAYSIZE = StoragePermissionRead_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoragePermissionRead_descriptor();
inline const ::std::string& StoragePermissionRead_Name(StoragePermissionRead value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoragePermissionRead_descriptor(), value);
}
inline bool StoragePermissionRead_Parse(
    const ::std::string& name, StoragePermissionRead* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoragePermissionRead>(
    StoragePermissionRead_descriptor(), name, value);
}
enum StoragePermissionWrite {
  NO_WRITE = 0,
  OWNER_WRITE = 1,
  StoragePermissionWrite_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StoragePermissionWrite_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StoragePermissionWrite_IsValid(int value);
const StoragePermissionWrite StoragePermissionWrite_MIN = NO_WRITE;
const StoragePermissionWrite StoragePermissionWrite_MAX = OWNER_WRITE;
const int StoragePermissionWrite_ARRAYSIZE = StoragePermissionWrite_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoragePermissionWrite_descriptor();
inline const ::std::string& StoragePermissionWrite_Name(StoragePermissionWrite value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoragePermissionWrite_descriptor(), value);
}
inline bool StoragePermissionWrite_Parse(
    const ::std::string& name, StoragePermissionWrite* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoragePermissionWrite>(
    StoragePermissionWrite_descriptor(), name, value);
}
// ===================================================================

class Heartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Heartbeat) */ {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Heartbeat& default_instance();

  static const Heartbeat* internal_default_instance();

  void Swap(Heartbeat* other);

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const { return New(NULL); }

  Heartbeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Heartbeat* other);
  void UnsafeMergeFrom(const Heartbeat& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.Heartbeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat> Heartbeat_default_instance_;

// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static const Error* internal_default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  void UnsafeMergeFrom(const Error& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Error_Code Code;
  static const Code RUNTIME_EXCEPTION =
    Error_Code_RUNTIME_EXCEPTION;
  static const Code UNRECOGNIZED_PAYLOAD =
    Error_Code_UNRECOGNIZED_PAYLOAD;
  static const Code MISSING_PAYLOAD =
    Error_Code_MISSING_PAYLOAD;
  static const Code BAD_INPUT =
    Error_Code_BAD_INPUT;
  static const Code AUTH_ERROR =
    Error_Code_AUTH_ERROR;
  static const Code USER_NOT_FOUND =
    Error_Code_USER_NOT_FOUND;
  static const Code USER_REGISTER_INUSE =
    Error_Code_USER_REGISTER_INUSE;
  static const Code USER_LINK_INUSE =
    Error_Code_USER_LINK_INUSE;
  static const Code USER_LINK_PROVIDER_UNAVAILABLE =
    Error_Code_USER_LINK_PROVIDER_UNAVAILABLE;
  static const Code USER_UNLINK_DISALLOWED =
    Error_Code_USER_UNLINK_DISALLOWED;
  static const Code USER_HANDLE_INUSE =
    Error_Code_USER_HANDLE_INUSE;
  static const Code GROUP_NAME_INUSE =
    Error_Code_GROUP_NAME_INUSE;
  static const Code GROUP_LAST_ADMIN =
    Error_Code_GROUP_LAST_ADMIN;
  static const Code STORAGE_REJECTED =
    Error_Code_STORAGE_REJECTED;
  static const Code MATCH_NOT_FOUND =
    Error_Code_MATCH_NOT_FOUND;
  static const Code RUNTIME_FUNCTION_NOT_FOUND =
    Error_Code_RUNTIME_FUNCTION_NOT_FOUND;
  static const Code RUNTIME_FUNCTION_EXCEPTION =
    Error_Code_RUNTIME_FUNCTION_EXCEPTION;
  static inline bool Code_IsValid(int value) {
    return Error_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Error_Code_Code_MIN;
  static const Code Code_MAX =
    Error_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Error_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Error_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Error_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Error_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:server.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Error> Error_default_instance_;

// -------------------------------------------------------------------

class AuthenticateRequest_Email : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateRequest.Email) */ {
 public:
  AuthenticateRequest_Email();
  virtual ~AuthenticateRequest_Email();

  AuthenticateRequest_Email(const AuthenticateRequest_Email& from);

  inline AuthenticateRequest_Email& operator=(const AuthenticateRequest_Email& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateRequest_Email& default_instance();

  static const AuthenticateRequest_Email* internal_default_instance();

  void Swap(AuthenticateRequest_Email* other);

  // implements Message ----------------------------------------------

  inline AuthenticateRequest_Email* New() const { return New(NULL); }

  AuthenticateRequest_Email* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticateRequest_Email& from);
  void MergeFrom(const AuthenticateRequest_Email& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticateRequest_Email* other);
  void UnsafeMergeFrom(const AuthenticateRequest_Email& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:server.AuthenticateRequest.Email)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest_Email> AuthenticateRequest_Email_default_instance_;

// -------------------------------------------------------------------

class AuthenticateRequest_GameCenter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateRequest.GameCenter) */ {
 public:
  AuthenticateRequest_GameCenter();
  virtual ~AuthenticateRequest_GameCenter();

  AuthenticateRequest_GameCenter(const AuthenticateRequest_GameCenter& from);

  inline AuthenticateRequest_GameCenter& operator=(const AuthenticateRequest_GameCenter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateRequest_GameCenter& default_instance();

  static const AuthenticateRequest_GameCenter* internal_default_instance();

  void Swap(AuthenticateRequest_GameCenter* other);

  // implements Message ----------------------------------------------

  inline AuthenticateRequest_GameCenter* New() const { return New(NULL); }

  AuthenticateRequest_GameCenter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticateRequest_GameCenter& from);
  void MergeFrom(const AuthenticateRequest_GameCenter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticateRequest_GameCenter* other);
  void UnsafeMergeFrom(const AuthenticateRequest_GameCenter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string player_id = 1;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  const ::std::string& player_id() const;
  void set_player_id(const ::std::string& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  ::std::string* mutable_player_id();
  ::std::string* release_player_id();
  void set_allocated_player_id(::std::string* player_id);

  // optional string bundle_id = 2;
  void clear_bundle_id();
  static const int kBundleIdFieldNumber = 2;
  const ::std::string& bundle_id() const;
  void set_bundle_id(const ::std::string& value);
  void set_bundle_id(const char* value);
  void set_bundle_id(const char* value, size_t size);
  ::std::string* mutable_bundle_id();
  ::std::string* release_bundle_id();
  void set_allocated_bundle_id(::std::string* bundle_id);

  // optional int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional string salt = 4;
  void clear_salt();
  static const int kSaltFieldNumber = 4;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  void set_salt(const char* value);
  void set_salt(const char* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // optional string signature = 5;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string public_key_url = 6;
  void clear_public_key_url();
  static const int kPublicKeyUrlFieldNumber = 6;
  const ::std::string& public_key_url() const;
  void set_public_key_url(const ::std::string& value);
  void set_public_key_url(const char* value);
  void set_public_key_url(const char* value, size_t size);
  ::std::string* mutable_public_key_url();
  ::std::string* release_public_key_url();
  void set_allocated_public_key_url(::std::string* public_key_url);

  // @@protoc_insertion_point(class_scope:server.AuthenticateRequest.GameCenter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr player_id_;
  ::google::protobuf::internal::ArenaStringPtr bundle_id_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr public_key_url_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest_GameCenter> AuthenticateRequest_GameCenter_default_instance_;

// -------------------------------------------------------------------

class AuthenticateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateRequest) */ {
 public:
  AuthenticateRequest();
  virtual ~AuthenticateRequest();

  AuthenticateRequest(const AuthenticateRequest& from);

  inline AuthenticateRequest& operator=(const AuthenticateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateRequest& default_instance();

  enum IdCase {
    kEmail = 2,
    kFacebook = 3,
    kGoogle = 4,
    kGameCenter = 5,
    kSteam = 6,
    kDevice = 7,
    kCustom = 8,
    ID_NOT_SET = 0,
  };

  static const AuthenticateRequest* internal_default_instance();

  void Swap(AuthenticateRequest* other);

  // implements Message ----------------------------------------------

  inline AuthenticateRequest* New() const { return New(NULL); }

  AuthenticateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticateRequest& from);
  void MergeFrom(const AuthenticateRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticateRequest* other);
  void UnsafeMergeFrom(const AuthenticateRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AuthenticateRequest_Email Email;
  typedef AuthenticateRequest_GameCenter GameCenter;

  // accessors -------------------------------------------------------

  // optional string collationId = 1;
  void clear_collationid();
  static const int kCollationIdFieldNumber = 1;
  const ::std::string& collationid() const;
  void set_collationid(const ::std::string& value);
  void set_collationid(const char* value);
  void set_collationid(const char* value, size_t size);
  ::std::string* mutable_collationid();
  ::std::string* release_collationid();
  void set_allocated_collationid(::std::string* collationid);

  // optional .server.AuthenticateRequest.Email email = 2;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::server::AuthenticateRequest_Email& email() const;
  ::server::AuthenticateRequest_Email* mutable_email();
  ::server::AuthenticateRequest_Email* release_email();
  void set_allocated_email(::server::AuthenticateRequest_Email* email);

  // optional string facebook = 3;
  private:
  bool has_facebook() const;
  public:
  void clear_facebook();
  static const int kFacebookFieldNumber = 3;
  const ::std::string& facebook() const;
  void set_facebook(const ::std::string& value);
  void set_facebook(const char* value);
  void set_facebook(const char* value, size_t size);
  ::std::string* mutable_facebook();
  ::std::string* release_facebook();
  void set_allocated_facebook(::std::string* facebook);

  // optional string google = 4;
  private:
  bool has_google() const;
  public:
  void clear_google();
  static const int kGoogleFieldNumber = 4;
  const ::std::string& google() const;
  void set_google(const ::std::string& value);
  void set_google(const char* value);
  void set_google(const char* value, size_t size);
  ::std::string* mutable_google();
  ::std::string* release_google();
  void set_allocated_google(::std::string* google);

  // optional .server.AuthenticateRequest.GameCenter game_center = 5;
  bool has_game_center() const;
  void clear_game_center();
  static const int kGameCenterFieldNumber = 5;
  const ::server::AuthenticateRequest_GameCenter& game_center() const;
  ::server::AuthenticateRequest_GameCenter* mutable_game_center();
  ::server::AuthenticateRequest_GameCenter* release_game_center();
  void set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center);

  // optional string steam = 6;
  private:
  bool has_steam() const;
  public:
  void clear_steam();
  static const int kSteamFieldNumber = 6;
  const ::std::string& steam() const;
  void set_steam(const ::std::string& value);
  void set_steam(const char* value);
  void set_steam(const char* value, size_t size);
  ::std::string* mutable_steam();
  ::std::string* release_steam();
  void set_allocated_steam(::std::string* steam);

  // optional string device = 7;
  private:
  bool has_device() const;
  public:
  void clear_device();
  static const int kDeviceFieldNumber = 7;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // optional string custom = 8;
  private:
  bool has_custom() const;
  public:
  void clear_custom();
  static const int kCustomFieldNumber = 8;
  const ::std::string& custom() const;
  void set_custom(const ::std::string& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  ::std::string* mutable_custom();
  ::std::string* release_custom();
  void set_allocated_custom(::std::string* custom);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.AuthenticateRequest)
 private:
  inline void set_has_email();
  inline void set_has_facebook();
  inline void set_has_google();
  inline void set_has_game_center();
  inline void set_has_steam();
  inline void set_has_device();
  inline void set_has_custom();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr collationid_;
  union IdUnion {
    IdUnion() {}
    ::server::AuthenticateRequest_Email* email_;
    ::google::protobuf::internal::ArenaStringPtr facebook_;
    ::google::protobuf::internal::ArenaStringPtr google_;
    ::server::AuthenticateRequest_GameCenter* game_center_;
    ::google::protobuf::internal::ArenaStringPtr steam_;
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr custom_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest> AuthenticateRequest_default_instance_;

// -------------------------------------------------------------------

class AuthenticateResponse_Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateResponse.Session) */ {
 public:
  AuthenticateResponse_Session();
  virtual ~AuthenticateResponse_Session();

  AuthenticateResponse_Session(const AuthenticateResponse_Session& from);

  inline AuthenticateResponse_Session& operator=(const AuthenticateResponse_Session& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateResponse_Session& default_instance();

  static const AuthenticateResponse_Session* internal_default_instance();

  void Swap(AuthenticateResponse_Session* other);

  // implements Message ----------------------------------------------

  inline AuthenticateResponse_Session* New() const { return New(NULL); }

  AuthenticateResponse_Session* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticateResponse_Session& from);
  void MergeFrom(const AuthenticateResponse_Session& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticateResponse_Session* other);
  void UnsafeMergeFrom(const AuthenticateResponse_Session& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional string udp_token = 2;
  void clear_udp_token();
  static const int kUdpTokenFieldNumber = 2;
  const ::std::string& udp_token() const;
  void set_udp_token(const ::std::string& value);
  void set_udp_token(const char* value);
  void set_udp_token(const char* value, size_t size);
  ::std::string* mutable_udp_token();
  ::std::string* release_udp_token();
  void set_allocated_udp_token(::std::string* udp_token);

  // @@protoc_insertion_point(class_scope:server.AuthenticateResponse.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr udp_token_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse_Session> AuthenticateResponse_Session_default_instance_;

// -------------------------------------------------------------------

class AuthenticateResponse_Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateResponse.Error) */ {
 public:
  AuthenticateResponse_Error();
  virtual ~AuthenticateResponse_Error();

  AuthenticateResponse_Error(const AuthenticateResponse_Error& from);

  inline AuthenticateResponse_Error& operator=(const AuthenticateResponse_Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateResponse_Error& default_instance();

  static const AuthenticateResponse_Error* internal_default_instance();

  void Swap(AuthenticateResponse_Error* other);

  // implements Message ----------------------------------------------

  inline AuthenticateResponse_Error* New() const { return New(NULL); }

  AuthenticateResponse_Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticateResponse_Error& from);
  void MergeFrom(const AuthenticateResponse_Error& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticateResponse_Error* other);
  void UnsafeMergeFrom(const AuthenticateResponse_Error& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .server.AuthenticateRequest request = 3;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  const ::server::AuthenticateRequest& request() const;
  ::server::AuthenticateRequest* mutable_request();
  ::server::AuthenticateRequest* release_request();
  void set_allocated_request(::server::AuthenticateRequest* request);

  // @@protoc_insertion_point(class_scope:server.AuthenticateResponse.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::server::AuthenticateRequest* request_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse_Error> AuthenticateResponse_Error_default_instance_;

// -------------------------------------------------------------------

class AuthenticateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateResponse) */ {
 public:
  AuthenticateResponse();
  virtual ~AuthenticateResponse();

  AuthenticateResponse(const AuthenticateResponse& from);

  inline AuthenticateResponse& operator=(const AuthenticateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateResponse& default_instance();

  enum IdCase {
    kSession = 2,
    kError = 3,
    ID_NOT_SET = 0,
  };

  static const AuthenticateResponse* internal_default_instance();

  void Swap(AuthenticateResponse* other);

  // implements Message ----------------------------------------------

  inline AuthenticateResponse* New() const { return New(NULL); }

  AuthenticateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticateResponse& from);
  void MergeFrom(const AuthenticateResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticateResponse* other);
  void UnsafeMergeFrom(const AuthenticateResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AuthenticateResponse_Session Session;
  typedef AuthenticateResponse_Error Error;

  // accessors -------------------------------------------------------

  // optional string collation_id = 1;
  void clear_collation_id();
  static const int kCollationIdFieldNumber = 1;
  const ::std::string& collation_id() const;
  void set_collation_id(const ::std::string& value);
  void set_collation_id(const char* value);
  void set_collation_id(const char* value, size_t size);
  ::std::string* mutable_collation_id();
  ::std::string* release_collation_id();
  void set_allocated_collation_id(::std::string* collation_id);

  // optional .server.AuthenticateResponse.Session session = 2;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 2;
  const ::server::AuthenticateResponse_Session& session() const;
  ::server::AuthenticateResponse_Session* mutable_session();
  ::server::AuthenticateResponse_Session* release_session();
  void set_allocated_session(::server::AuthenticateResponse_Session* session);

  // optional .server.AuthenticateResponse.Error error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::server::AuthenticateResponse_Error& error() const;
  ::server::AuthenticateResponse_Error* mutable_error();
  ::server::AuthenticateResponse_Error* release_error();
  void set_allocated_error(::server::AuthenticateResponse_Error* error);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.AuthenticateResponse)
 private:
  inline void set_has_session();
  inline void set_has_error();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr collation_id_;
  union IdUnion {
    IdUnion() {}
    ::server::AuthenticateResponse_Session* session_;
    ::server::AuthenticateResponse_Error* error_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse> AuthenticateResponse_default_instance_;

// -------------------------------------------------------------------

class Envelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Envelope) */ {
 public:
  Envelope();
  virtual ~Envelope();

  Envelope(const Envelope& from);

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Envelope& default_instance();

  enum PayloadCase {
    kError = 2,
    kHeartbeat = 3,
    kLogout = 4,
    kLink = 5,
    kUnlink = 6,
    kSelfFetch = 7,
    kSelfUpdate = 8,
    kUsersFetch = 9,
    kSelf = 10,
    kUsers = 11,
    kFriendsAdd = 12,
    kFriendsRemove = 13,
    kFriendsBlock = 14,
    kFriendsList = 15,
    kFriends = 16,
    kGroupsCreate = 17,
    kGroupsUpdate = 18,
    kGroupsRemove = 19,
    kGroupsFetch = 20,
    kGroupsList = 21,
    kGroupsSelfList = 22,
    kGroupUsersList = 23,
    kGroupsJoin = 24,
    kGroupsLeave = 25,
    kGroupUsersAdd = 26,
    kGroupUsersKick = 27,
    kGroupUsersPromote = 28,
    kGroups = 29,
    kGroupsSelf = 30,
    kGroupUsers = 31,
    kTopicsJoin = 32,
    kTopicsLeave = 33,
    kTopicMessageSend = 34,
    kTopicMessagesList = 35,
    kTopics = 36,
    kTopicMessageAck = 37,
    kTopicMessage = 38,
    kTopicMessages = 39,
    kTopicPresence = 40,
    kMatchCreate = 41,
    kMatchesJoin = 42,
    kMatchesLeave = 43,
    kMatchDataSend = 44,
    kMatch = 45,
    kMatches = 46,
    kMatchData = 47,
    kMatchPresence = 48,
    kStorageList = 49,
    kStorageFetch = 50,
    kStorageWrite = 51,
    kStorageUpdate = 52,
    kStorageRemove = 53,
    kStorageData = 54,
    kStorageKeys = 55,
    kLeaderboardsList = 56,
    kLeaderboardRecordsWrite = 57,
    kLeaderboardRecordsFetch = 58,
    kLeaderboardRecordsList = 59,
    kLeaderboards = 60,
    kLeaderboardRecords = 61,
    kMatchmakeAdd = 62,
    kMatchmakeRemove = 63,
    kMatchmakeTicket = 64,
    kMatchmakeMatched = 65,
    kRpc = 66,
    kPurchase = 67,
    kPurchaseRecord = 68,
    kNotificationsList = 69,
    kNotificationsRemove = 70,
    kNotifications = 71,
    kLiveNotifications = 72,
    PAYLOAD_NOT_SET = 0,
  };

  static const Envelope* internal_default_instance();

  void Swap(Envelope* other);

  // implements Message ----------------------------------------------

  inline Envelope* New() const { return New(NULL); }

  Envelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Envelope& from);
  void MergeFrom(const Envelope& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Envelope* other);
  void UnsafeMergeFrom(const Envelope& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collation_id = 1;
  void clear_collation_id();
  static const int kCollationIdFieldNumber = 1;
  const ::std::string& collation_id() const;
  void set_collation_id(const ::std::string& value);
  void set_collation_id(const char* value);
  void set_collation_id(const char* value, size_t size);
  ::std::string* mutable_collation_id();
  ::std::string* release_collation_id();
  void set_allocated_collation_id(::std::string* collation_id);

  // optional .server.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::server::Error& error() const;
  ::server::Error* mutable_error();
  ::server::Error* release_error();
  void set_allocated_error(::server::Error* error);

  // optional .server.Heartbeat heartbeat = 3;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 3;
  const ::server::Heartbeat& heartbeat() const;
  ::server::Heartbeat* mutable_heartbeat();
  ::server::Heartbeat* release_heartbeat();
  void set_allocated_heartbeat(::server::Heartbeat* heartbeat);

  // optional .server.Logout logout = 4;
  bool has_logout() const;
  void clear_logout();
  static const int kLogoutFieldNumber = 4;
  const ::server::Logout& logout() const;
  ::server::Logout* mutable_logout();
  ::server::Logout* release_logout();
  void set_allocated_logout(::server::Logout* logout);

  // optional .server.TLink link = 5;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 5;
  const ::server::TLink& link() const;
  ::server::TLink* mutable_link();
  ::server::TLink* release_link();
  void set_allocated_link(::server::TLink* link);

  // optional .server.TUnlink unlink = 6;
  bool has_unlink() const;
  void clear_unlink();
  static const int kUnlinkFieldNumber = 6;
  const ::server::TUnlink& unlink() const;
  ::server::TUnlink* mutable_unlink();
  ::server::TUnlink* release_unlink();
  void set_allocated_unlink(::server::TUnlink* unlink);

  // optional .server.TSelfFetch self_fetch = 7;
  bool has_self_fetch() const;
  void clear_self_fetch();
  static const int kSelfFetchFieldNumber = 7;
  const ::server::TSelfFetch& self_fetch() const;
  ::server::TSelfFetch* mutable_self_fetch();
  ::server::TSelfFetch* release_self_fetch();
  void set_allocated_self_fetch(::server::TSelfFetch* self_fetch);

  // optional .server.TSelfUpdate self_update = 8;
  bool has_self_update() const;
  void clear_self_update();
  static const int kSelfUpdateFieldNumber = 8;
  const ::server::TSelfUpdate& self_update() const;
  ::server::TSelfUpdate* mutable_self_update();
  ::server::TSelfUpdate* release_self_update();
  void set_allocated_self_update(::server::TSelfUpdate* self_update);

  // optional .server.TUsersFetch users_fetch = 9;
  bool has_users_fetch() const;
  void clear_users_fetch();
  static const int kUsersFetchFieldNumber = 9;
  const ::server::TUsersFetch& users_fetch() const;
  ::server::TUsersFetch* mutable_users_fetch();
  ::server::TUsersFetch* release_users_fetch();
  void set_allocated_users_fetch(::server::TUsersFetch* users_fetch);

  // optional .server.TSelf self = 10;
  bool has_self() const;
  void clear_self();
  static const int kSelfFieldNumber = 10;
  const ::server::TSelf& self() const;
  ::server::TSelf* mutable_self();
  ::server::TSelf* release_self();
  void set_allocated_self(::server::TSelf* self);

  // optional .server.TUsers users = 11;
  bool has_users() const;
  void clear_users();
  static const int kUsersFieldNumber = 11;
  const ::server::TUsers& users() const;
  ::server::TUsers* mutable_users();
  ::server::TUsers* release_users();
  void set_allocated_users(::server::TUsers* users);

  // optional .server.TFriendsAdd friends_add = 12;
  bool has_friends_add() const;
  void clear_friends_add();
  static const int kFriendsAddFieldNumber = 12;
  const ::server::TFriendsAdd& friends_add() const;
  ::server::TFriendsAdd* mutable_friends_add();
  ::server::TFriendsAdd* release_friends_add();
  void set_allocated_friends_add(::server::TFriendsAdd* friends_add);

  // optional .server.TFriendsRemove friends_remove = 13;
  bool has_friends_remove() const;
  void clear_friends_remove();
  static const int kFriendsRemoveFieldNumber = 13;
  const ::server::TFriendsRemove& friends_remove() const;
  ::server::TFriendsRemove* mutable_friends_remove();
  ::server::TFriendsRemove* release_friends_remove();
  void set_allocated_friends_remove(::server::TFriendsRemove* friends_remove);

  // optional .server.TFriendsBlock friends_block = 14;
  bool has_friends_block() const;
  void clear_friends_block();
  static const int kFriendsBlockFieldNumber = 14;
  const ::server::TFriendsBlock& friends_block() const;
  ::server::TFriendsBlock* mutable_friends_block();
  ::server::TFriendsBlock* release_friends_block();
  void set_allocated_friends_block(::server::TFriendsBlock* friends_block);

  // optional .server.TFriendsList friends_list = 15;
  bool has_friends_list() const;
  void clear_friends_list();
  static const int kFriendsListFieldNumber = 15;
  const ::server::TFriendsList& friends_list() const;
  ::server::TFriendsList* mutable_friends_list();
  ::server::TFriendsList* release_friends_list();
  void set_allocated_friends_list(::server::TFriendsList* friends_list);

  // optional .server.TFriends friends = 16;
  bool has_friends() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 16;
  const ::server::TFriends& friends() const;
  ::server::TFriends* mutable_friends();
  ::server::TFriends* release_friends();
  void set_allocated_friends(::server::TFriends* friends);

  // optional .server.TGroupsCreate groups_create = 17;
  bool has_groups_create() const;
  void clear_groups_create();
  static const int kGroupsCreateFieldNumber = 17;
  const ::server::TGroupsCreate& groups_create() const;
  ::server::TGroupsCreate* mutable_groups_create();
  ::server::TGroupsCreate* release_groups_create();
  void set_allocated_groups_create(::server::TGroupsCreate* groups_create);

  // optional .server.TGroupsUpdate groups_update = 18;
  bool has_groups_update() const;
  void clear_groups_update();
  static const int kGroupsUpdateFieldNumber = 18;
  const ::server::TGroupsUpdate& groups_update() const;
  ::server::TGroupsUpdate* mutable_groups_update();
  ::server::TGroupsUpdate* release_groups_update();
  void set_allocated_groups_update(::server::TGroupsUpdate* groups_update);

  // optional .server.TGroupsRemove groups_remove = 19;
  bool has_groups_remove() const;
  void clear_groups_remove();
  static const int kGroupsRemoveFieldNumber = 19;
  const ::server::TGroupsRemove& groups_remove() const;
  ::server::TGroupsRemove* mutable_groups_remove();
  ::server::TGroupsRemove* release_groups_remove();
  void set_allocated_groups_remove(::server::TGroupsRemove* groups_remove);

  // optional .server.TGroupsFetch groups_fetch = 20;
  bool has_groups_fetch() const;
  void clear_groups_fetch();
  static const int kGroupsFetchFieldNumber = 20;
  const ::server::TGroupsFetch& groups_fetch() const;
  ::server::TGroupsFetch* mutable_groups_fetch();
  ::server::TGroupsFetch* release_groups_fetch();
  void set_allocated_groups_fetch(::server::TGroupsFetch* groups_fetch);

  // optional .server.TGroupsList groups_list = 21;
  bool has_groups_list() const;
  void clear_groups_list();
  static const int kGroupsListFieldNumber = 21;
  const ::server::TGroupsList& groups_list() const;
  ::server::TGroupsList* mutable_groups_list();
  ::server::TGroupsList* release_groups_list();
  void set_allocated_groups_list(::server::TGroupsList* groups_list);

  // optional .server.TGroupsSelfList groups_self_list = 22;
  bool has_groups_self_list() const;
  void clear_groups_self_list();
  static const int kGroupsSelfListFieldNumber = 22;
  const ::server::TGroupsSelfList& groups_self_list() const;
  ::server::TGroupsSelfList* mutable_groups_self_list();
  ::server::TGroupsSelfList* release_groups_self_list();
  void set_allocated_groups_self_list(::server::TGroupsSelfList* groups_self_list);

  // optional .server.TGroupUsersList group_users_list = 23;
  bool has_group_users_list() const;
  void clear_group_users_list();
  static const int kGroupUsersListFieldNumber = 23;
  const ::server::TGroupUsersList& group_users_list() const;
  ::server::TGroupUsersList* mutable_group_users_list();
  ::server::TGroupUsersList* release_group_users_list();
  void set_allocated_group_users_list(::server::TGroupUsersList* group_users_list);

  // optional .server.TGroupsJoin groups_join = 24;
  bool has_groups_join() const;
  void clear_groups_join();
  static const int kGroupsJoinFieldNumber = 24;
  const ::server::TGroupsJoin& groups_join() const;
  ::server::TGroupsJoin* mutable_groups_join();
  ::server::TGroupsJoin* release_groups_join();
  void set_allocated_groups_join(::server::TGroupsJoin* groups_join);

  // optional .server.TGroupsLeave groups_leave = 25;
  bool has_groups_leave() const;
  void clear_groups_leave();
  static const int kGroupsLeaveFieldNumber = 25;
  const ::server::TGroupsLeave& groups_leave() const;
  ::server::TGroupsLeave* mutable_groups_leave();
  ::server::TGroupsLeave* release_groups_leave();
  void set_allocated_groups_leave(::server::TGroupsLeave* groups_leave);

  // optional .server.TGroupUsersAdd group_users_add = 26;
  bool has_group_users_add() const;
  void clear_group_users_add();
  static const int kGroupUsersAddFieldNumber = 26;
  const ::server::TGroupUsersAdd& group_users_add() const;
  ::server::TGroupUsersAdd* mutable_group_users_add();
  ::server::TGroupUsersAdd* release_group_users_add();
  void set_allocated_group_users_add(::server::TGroupUsersAdd* group_users_add);

  // optional .server.TGroupUsersKick group_users_kick = 27;
  bool has_group_users_kick() const;
  void clear_group_users_kick();
  static const int kGroupUsersKickFieldNumber = 27;
  const ::server::TGroupUsersKick& group_users_kick() const;
  ::server::TGroupUsersKick* mutable_group_users_kick();
  ::server::TGroupUsersKick* release_group_users_kick();
  void set_allocated_group_users_kick(::server::TGroupUsersKick* group_users_kick);

  // optional .server.TGroupUsersPromote group_users_promote = 28;
  bool has_group_users_promote() const;
  void clear_group_users_promote();
  static const int kGroupUsersPromoteFieldNumber = 28;
  const ::server::TGroupUsersPromote& group_users_promote() const;
  ::server::TGroupUsersPromote* mutable_group_users_promote();
  ::server::TGroupUsersPromote* release_group_users_promote();
  void set_allocated_group_users_promote(::server::TGroupUsersPromote* group_users_promote);

  // optional .server.TGroups groups = 29;
  bool has_groups() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 29;
  const ::server::TGroups& groups() const;
  ::server::TGroups* mutable_groups();
  ::server::TGroups* release_groups();
  void set_allocated_groups(::server::TGroups* groups);

  // optional .server.TGroupsSelf groups_self = 30;
  bool has_groups_self() const;
  void clear_groups_self();
  static const int kGroupsSelfFieldNumber = 30;
  const ::server::TGroupsSelf& groups_self() const;
  ::server::TGroupsSelf* mutable_groups_self();
  ::server::TGroupsSelf* release_groups_self();
  void set_allocated_groups_self(::server::TGroupsSelf* groups_self);

  // optional .server.TGroupUsers group_users = 31;
  bool has_group_users() const;
  void clear_group_users();
  static const int kGroupUsersFieldNumber = 31;
  const ::server::TGroupUsers& group_users() const;
  ::server::TGroupUsers* mutable_group_users();
  ::server::TGroupUsers* release_group_users();
  void set_allocated_group_users(::server::TGroupUsers* group_users);

  // optional .server.TTopicsJoin topics_join = 32;
  bool has_topics_join() const;
  void clear_topics_join();
  static const int kTopicsJoinFieldNumber = 32;
  const ::server::TTopicsJoin& topics_join() const;
  ::server::TTopicsJoin* mutable_topics_join();
  ::server::TTopicsJoin* release_topics_join();
  void set_allocated_topics_join(::server::TTopicsJoin* topics_join);

  // optional .server.TTopicsLeave topics_leave = 33;
  bool has_topics_leave() const;
  void clear_topics_leave();
  static const int kTopicsLeaveFieldNumber = 33;
  const ::server::TTopicsLeave& topics_leave() const;
  ::server::TTopicsLeave* mutable_topics_leave();
  ::server::TTopicsLeave* release_topics_leave();
  void set_allocated_topics_leave(::server::TTopicsLeave* topics_leave);

  // optional .server.TTopicMessageSend topic_message_send = 34;
  bool has_topic_message_send() const;
  void clear_topic_message_send();
  static const int kTopicMessageSendFieldNumber = 34;
  const ::server::TTopicMessageSend& topic_message_send() const;
  ::server::TTopicMessageSend* mutable_topic_message_send();
  ::server::TTopicMessageSend* release_topic_message_send();
  void set_allocated_topic_message_send(::server::TTopicMessageSend* topic_message_send);

  // optional .server.TTopicMessagesList topic_messages_list = 35;
  bool has_topic_messages_list() const;
  void clear_topic_messages_list();
  static const int kTopicMessagesListFieldNumber = 35;
  const ::server::TTopicMessagesList& topic_messages_list() const;
  ::server::TTopicMessagesList* mutable_topic_messages_list();
  ::server::TTopicMessagesList* release_topic_messages_list();
  void set_allocated_topic_messages_list(::server::TTopicMessagesList* topic_messages_list);

  // optional .server.TTopics topics = 36;
  bool has_topics() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 36;
  const ::server::TTopics& topics() const;
  ::server::TTopics* mutable_topics();
  ::server::TTopics* release_topics();
  void set_allocated_topics(::server::TTopics* topics);

  // optional .server.TTopicMessageAck topic_message_ack = 37;
  bool has_topic_message_ack() const;
  void clear_topic_message_ack();
  static const int kTopicMessageAckFieldNumber = 37;
  const ::server::TTopicMessageAck& topic_message_ack() const;
  ::server::TTopicMessageAck* mutable_topic_message_ack();
  ::server::TTopicMessageAck* release_topic_message_ack();
  void set_allocated_topic_message_ack(::server::TTopicMessageAck* topic_message_ack);

  // optional .server.TopicMessage topic_message = 38;
  bool has_topic_message() const;
  void clear_topic_message();
  static const int kTopicMessageFieldNumber = 38;
  const ::server::TopicMessage& topic_message() const;
  ::server::TopicMessage* mutable_topic_message();
  ::server::TopicMessage* release_topic_message();
  void set_allocated_topic_message(::server::TopicMessage* topic_message);

  // optional .server.TTopicMessages topic_messages = 39;
  bool has_topic_messages() const;
  void clear_topic_messages();
  static const int kTopicMessagesFieldNumber = 39;
  const ::server::TTopicMessages& topic_messages() const;
  ::server::TTopicMessages* mutable_topic_messages();
  ::server::TTopicMessages* release_topic_messages();
  void set_allocated_topic_messages(::server::TTopicMessages* topic_messages);

  // optional .server.TopicPresence topic_presence = 40;
  bool has_topic_presence() const;
  void clear_topic_presence();
  static const int kTopicPresenceFieldNumber = 40;
  const ::server::TopicPresence& topic_presence() const;
  ::server::TopicPresence* mutable_topic_presence();
  ::server::TopicPresence* release_topic_presence();
  void set_allocated_topic_presence(::server::TopicPresence* topic_presence);

  // optional .server.TMatchCreate match_create = 41;
  bool has_match_create() const;
  void clear_match_create();
  static const int kMatchCreateFieldNumber = 41;
  const ::server::TMatchCreate& match_create() const;
  ::server::TMatchCreate* mutable_match_create();
  ::server::TMatchCreate* release_match_create();
  void set_allocated_match_create(::server::TMatchCreate* match_create);

  // optional .server.TMatchesJoin matches_join = 42;
  bool has_matches_join() const;
  void clear_matches_join();
  static const int kMatchesJoinFieldNumber = 42;
  const ::server::TMatchesJoin& matches_join() const;
  ::server::TMatchesJoin* mutable_matches_join();
  ::server::TMatchesJoin* release_matches_join();
  void set_allocated_matches_join(::server::TMatchesJoin* matches_join);

  // optional .server.TMatchesLeave matches_leave = 43;
  bool has_matches_leave() const;
  void clear_matches_leave();
  static const int kMatchesLeaveFieldNumber = 43;
  const ::server::TMatchesLeave& matches_leave() const;
  ::server::TMatchesLeave* mutable_matches_leave();
  ::server::TMatchesLeave* release_matches_leave();
  void set_allocated_matches_leave(::server::TMatchesLeave* matches_leave);

  // optional .server.MatchDataSend match_data_send = 44;
  bool has_match_data_send() const;
  void clear_match_data_send();
  static const int kMatchDataSendFieldNumber = 44;
  const ::server::MatchDataSend& match_data_send() const;
  ::server::MatchDataSend* mutable_match_data_send();
  ::server::MatchDataSend* release_match_data_send();
  void set_allocated_match_data_send(::server::MatchDataSend* match_data_send);

  // optional .server.TMatch match = 45;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 45;
  const ::server::TMatch& match() const;
  ::server::TMatch* mutable_match();
  ::server::TMatch* release_match();
  void set_allocated_match(::server::TMatch* match);

  // optional .server.TMatches matches = 46;
  bool has_matches() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 46;
  const ::server::TMatches& matches() const;
  ::server::TMatches* mutable_matches();
  ::server::TMatches* release_matches();
  void set_allocated_matches(::server::TMatches* matches);

  // optional .server.MatchData match_data = 47;
  bool has_match_data() const;
  void clear_match_data();
  static const int kMatchDataFieldNumber = 47;
  const ::server::MatchData& match_data() const;
  ::server::MatchData* mutable_match_data();
  ::server::MatchData* release_match_data();
  void set_allocated_match_data(::server::MatchData* match_data);

  // optional .server.MatchPresence match_presence = 48;
  bool has_match_presence() const;
  void clear_match_presence();
  static const int kMatchPresenceFieldNumber = 48;
  const ::server::MatchPresence& match_presence() const;
  ::server::MatchPresence* mutable_match_presence();
  ::server::MatchPresence* release_match_presence();
  void set_allocated_match_presence(::server::MatchPresence* match_presence);

  // optional .server.TStorageList storage_list = 49;
  bool has_storage_list() const;
  void clear_storage_list();
  static const int kStorageListFieldNumber = 49;
  const ::server::TStorageList& storage_list() const;
  ::server::TStorageList* mutable_storage_list();
  ::server::TStorageList* release_storage_list();
  void set_allocated_storage_list(::server::TStorageList* storage_list);

  // optional .server.TStorageFetch storage_fetch = 50;
  bool has_storage_fetch() const;
  void clear_storage_fetch();
  static const int kStorageFetchFieldNumber = 50;
  const ::server::TStorageFetch& storage_fetch() const;
  ::server::TStorageFetch* mutable_storage_fetch();
  ::server::TStorageFetch* release_storage_fetch();
  void set_allocated_storage_fetch(::server::TStorageFetch* storage_fetch);

  // optional .server.TStorageWrite storage_write = 51;
  bool has_storage_write() const;
  void clear_storage_write();
  static const int kStorageWriteFieldNumber = 51;
  const ::server::TStorageWrite& storage_write() const;
  ::server::TStorageWrite* mutable_storage_write();
  ::server::TStorageWrite* release_storage_write();
  void set_allocated_storage_write(::server::TStorageWrite* storage_write);

  // optional .server.TStorageUpdate storage_update = 52;
  bool has_storage_update() const;
  void clear_storage_update();
  static const int kStorageUpdateFieldNumber = 52;
  const ::server::TStorageUpdate& storage_update() const;
  ::server::TStorageUpdate* mutable_storage_update();
  ::server::TStorageUpdate* release_storage_update();
  void set_allocated_storage_update(::server::TStorageUpdate* storage_update);

  // optional .server.TStorageRemove storage_remove = 53;
  bool has_storage_remove() const;
  void clear_storage_remove();
  static const int kStorageRemoveFieldNumber = 53;
  const ::server::TStorageRemove& storage_remove() const;
  ::server::TStorageRemove* mutable_storage_remove();
  ::server::TStorageRemove* release_storage_remove();
  void set_allocated_storage_remove(::server::TStorageRemove* storage_remove);

  // optional .server.TStorageData storage_data = 54;
  bool has_storage_data() const;
  void clear_storage_data();
  static const int kStorageDataFieldNumber = 54;
  const ::server::TStorageData& storage_data() const;
  ::server::TStorageData* mutable_storage_data();
  ::server::TStorageData* release_storage_data();
  void set_allocated_storage_data(::server::TStorageData* storage_data);

  // optional .server.TStorageKeys storage_keys = 55;
  bool has_storage_keys() const;
  void clear_storage_keys();
  static const int kStorageKeysFieldNumber = 55;
  const ::server::TStorageKeys& storage_keys() const;
  ::server::TStorageKeys* mutable_storage_keys();
  ::server::TStorageKeys* release_storage_keys();
  void set_allocated_storage_keys(::server::TStorageKeys* storage_keys);

  // optional .server.TLeaderboardsList leaderboards_list = 56;
  bool has_leaderboards_list() const;
  void clear_leaderboards_list();
  static const int kLeaderboardsListFieldNumber = 56;
  const ::server::TLeaderboardsList& leaderboards_list() const;
  ::server::TLeaderboardsList* mutable_leaderboards_list();
  ::server::TLeaderboardsList* release_leaderboards_list();
  void set_allocated_leaderboards_list(::server::TLeaderboardsList* leaderboards_list);

  // optional .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
  bool has_leaderboard_records_write() const;
  void clear_leaderboard_records_write();
  static const int kLeaderboardRecordsWriteFieldNumber = 57;
  const ::server::TLeaderboardRecordsWrite& leaderboard_records_write() const;
  ::server::TLeaderboardRecordsWrite* mutable_leaderboard_records_write();
  ::server::TLeaderboardRecordsWrite* release_leaderboard_records_write();
  void set_allocated_leaderboard_records_write(::server::TLeaderboardRecordsWrite* leaderboard_records_write);

  // optional .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
  bool has_leaderboard_records_fetch() const;
  void clear_leaderboard_records_fetch();
  static const int kLeaderboardRecordsFetchFieldNumber = 58;
  const ::server::TLeaderboardRecordsFetch& leaderboard_records_fetch() const;
  ::server::TLeaderboardRecordsFetch* mutable_leaderboard_records_fetch();
  ::server::TLeaderboardRecordsFetch* release_leaderboard_records_fetch();
  void set_allocated_leaderboard_records_fetch(::server::TLeaderboardRecordsFetch* leaderboard_records_fetch);

  // optional .server.TLeaderboardRecordsList leaderboard_records_list = 59;
  bool has_leaderboard_records_list() const;
  void clear_leaderboard_records_list();
  static const int kLeaderboardRecordsListFieldNumber = 59;
  const ::server::TLeaderboardRecordsList& leaderboard_records_list() const;
  ::server::TLeaderboardRecordsList* mutable_leaderboard_records_list();
  ::server::TLeaderboardRecordsList* release_leaderboard_records_list();
  void set_allocated_leaderboard_records_list(::server::TLeaderboardRecordsList* leaderboard_records_list);

  // optional .server.TLeaderboards leaderboards = 60;
  bool has_leaderboards() const;
  void clear_leaderboards();
  static const int kLeaderboardsFieldNumber = 60;
  const ::server::TLeaderboards& leaderboards() const;
  ::server::TLeaderboards* mutable_leaderboards();
  ::server::TLeaderboards* release_leaderboards();
  void set_allocated_leaderboards(::server::TLeaderboards* leaderboards);

  // optional .server.TLeaderboardRecords leaderboard_records = 61;
  bool has_leaderboard_records() const;
  void clear_leaderboard_records();
  static const int kLeaderboardRecordsFieldNumber = 61;
  const ::server::TLeaderboardRecords& leaderboard_records() const;
  ::server::TLeaderboardRecords* mutable_leaderboard_records();
  ::server::TLeaderboardRecords* release_leaderboard_records();
  void set_allocated_leaderboard_records(::server::TLeaderboardRecords* leaderboard_records);

  // optional .server.TMatchmakeAdd matchmake_add = 62;
  bool has_matchmake_add() const;
  void clear_matchmake_add();
  static const int kMatchmakeAddFieldNumber = 62;
  const ::server::TMatchmakeAdd& matchmake_add() const;
  ::server::TMatchmakeAdd* mutable_matchmake_add();
  ::server::TMatchmakeAdd* release_matchmake_add();
  void set_allocated_matchmake_add(::server::TMatchmakeAdd* matchmake_add);

  // optional .server.TMatchmakeRemove matchmake_remove = 63;
  bool has_matchmake_remove() const;
  void clear_matchmake_remove();
  static const int kMatchmakeRemoveFieldNumber = 63;
  const ::server::TMatchmakeRemove& matchmake_remove() const;
  ::server::TMatchmakeRemove* mutable_matchmake_remove();
  ::server::TMatchmakeRemove* release_matchmake_remove();
  void set_allocated_matchmake_remove(::server::TMatchmakeRemove* matchmake_remove);

  // optional .server.TMatchmakeTicket matchmake_ticket = 64;
  bool has_matchmake_ticket() const;
  void clear_matchmake_ticket();
  static const int kMatchmakeTicketFieldNumber = 64;
  const ::server::TMatchmakeTicket& matchmake_ticket() const;
  ::server::TMatchmakeTicket* mutable_matchmake_ticket();
  ::server::TMatchmakeTicket* release_matchmake_ticket();
  void set_allocated_matchmake_ticket(::server::TMatchmakeTicket* matchmake_ticket);

  // optional .server.MatchmakeMatched matchmake_matched = 65;
  bool has_matchmake_matched() const;
  void clear_matchmake_matched();
  static const int kMatchmakeMatchedFieldNumber = 65;
  const ::server::MatchmakeMatched& matchmake_matched() const;
  ::server::MatchmakeMatched* mutable_matchmake_matched();
  ::server::MatchmakeMatched* release_matchmake_matched();
  void set_allocated_matchmake_matched(::server::MatchmakeMatched* matchmake_matched);

  // optional .server.TRpc rpc = 66;
  bool has_rpc() const;
  void clear_rpc();
  static const int kRpcFieldNumber = 66;
  const ::server::TRpc& rpc() const;
  ::server::TRpc* mutable_rpc();
  ::server::TRpc* release_rpc();
  void set_allocated_rpc(::server::TRpc* rpc);

  // optional .server.TPurchaseValidation purchase = 67;
  bool has_purchase() const;
  void clear_purchase();
  static const int kPurchaseFieldNumber = 67;
  const ::server::TPurchaseValidation& purchase() const;
  ::server::TPurchaseValidation* mutable_purchase();
  ::server::TPurchaseValidation* release_purchase();
  void set_allocated_purchase(::server::TPurchaseValidation* purchase);

  // optional .server.TPurchaseRecord purchase_record = 68;
  bool has_purchase_record() const;
  void clear_purchase_record();
  static const int kPurchaseRecordFieldNumber = 68;
  const ::server::TPurchaseRecord& purchase_record() const;
  ::server::TPurchaseRecord* mutable_purchase_record();
  ::server::TPurchaseRecord* release_purchase_record();
  void set_allocated_purchase_record(::server::TPurchaseRecord* purchase_record);

  // optional .server.TNotificationsList notifications_list = 69;
  bool has_notifications_list() const;
  void clear_notifications_list();
  static const int kNotificationsListFieldNumber = 69;
  const ::server::TNotificationsList& notifications_list() const;
  ::server::TNotificationsList* mutable_notifications_list();
  ::server::TNotificationsList* release_notifications_list();
  void set_allocated_notifications_list(::server::TNotificationsList* notifications_list);

  // optional .server.TNotificationsRemove notifications_remove = 70;
  bool has_notifications_remove() const;
  void clear_notifications_remove();
  static const int kNotificationsRemoveFieldNumber = 70;
  const ::server::TNotificationsRemove& notifications_remove() const;
  ::server::TNotificationsRemove* mutable_notifications_remove();
  ::server::TNotificationsRemove* release_notifications_remove();
  void set_allocated_notifications_remove(::server::TNotificationsRemove* notifications_remove);

  // optional .server.TNotifications notifications = 71;
  bool has_notifications() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 71;
  const ::server::TNotifications& notifications() const;
  ::server::TNotifications* mutable_notifications();
  ::server::TNotifications* release_notifications();
  void set_allocated_notifications(::server::TNotifications* notifications);

  // optional .server.Notifications live_notifications = 72;
  bool has_live_notifications() const;
  void clear_live_notifications();
  static const int kLiveNotificationsFieldNumber = 72;
  const ::server::Notifications& live_notifications() const;
  ::server::Notifications* mutable_live_notifications();
  ::server::Notifications* release_live_notifications();
  void set_allocated_live_notifications(::server::Notifications* live_notifications);

  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:server.Envelope)
 private:
  inline void set_has_error();
  inline void set_has_heartbeat();
  inline void set_has_logout();
  inline void set_has_link();
  inline void set_has_unlink();
  inline void set_has_self_fetch();
  inline void set_has_self_update();
  inline void set_has_users_fetch();
  inline void set_has_self();
  inline void set_has_users();
  inline void set_has_friends_add();
  inline void set_has_friends_remove();
  inline void set_has_friends_block();
  inline void set_has_friends_list();
  inline void set_has_friends();
  inline void set_has_groups_create();
  inline void set_has_groups_update();
  inline void set_has_groups_remove();
  inline void set_has_groups_fetch();
  inline void set_has_groups_list();
  inline void set_has_groups_self_list();
  inline void set_has_group_users_list();
  inline void set_has_groups_join();
  inline void set_has_groups_leave();
  inline void set_has_group_users_add();
  inline void set_has_group_users_kick();
  inline void set_has_group_users_promote();
  inline void set_has_groups();
  inline void set_has_groups_self();
  inline void set_has_group_users();
  inline void set_has_topics_join();
  inline void set_has_topics_leave();
  inline void set_has_topic_message_send();
  inline void set_has_topic_messages_list();
  inline void set_has_topics();
  inline void set_has_topic_message_ack();
  inline void set_has_topic_message();
  inline void set_has_topic_messages();
  inline void set_has_topic_presence();
  inline void set_has_match_create();
  inline void set_has_matches_join();
  inline void set_has_matches_leave();
  inline void set_has_match_data_send();
  inline void set_has_match();
  inline void set_has_matches();
  inline void set_has_match_data();
  inline void set_has_match_presence();
  inline void set_has_storage_list();
  inline void set_has_storage_fetch();
  inline void set_has_storage_write();
  inline void set_has_storage_update();
  inline void set_has_storage_remove();
  inline void set_has_storage_data();
  inline void set_has_storage_keys();
  inline void set_has_leaderboards_list();
  inline void set_has_leaderboard_records_write();
  inline void set_has_leaderboard_records_fetch();
  inline void set_has_leaderboard_records_list();
  inline void set_has_leaderboards();
  inline void set_has_leaderboard_records();
  inline void set_has_matchmake_add();
  inline void set_has_matchmake_remove();
  inline void set_has_matchmake_ticket();
  inline void set_has_matchmake_matched();
  inline void set_has_rpc();
  inline void set_has_purchase();
  inline void set_has_purchase_record();
  inline void set_has_notifications_list();
  inline void set_has_notifications_remove();
  inline void set_has_notifications();
  inline void set_has_live_notifications();

  inline bool has_payload() const;
  void clear_payload();
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr collation_id_;
  union PayloadUnion {
    PayloadUnion() {}
    ::server::Error* error_;
    ::server::Heartbeat* heartbeat_;
    ::server::Logout* logout_;
    ::server::TLink* link_;
    ::server::TUnlink* unlink_;
    ::server::TSelfFetch* self_fetch_;
    ::server::TSelfUpdate* self_update_;
    ::server::TUsersFetch* users_fetch_;
    ::server::TSelf* self_;
    ::server::TUsers* users_;
    ::server::TFriendsAdd* friends_add_;
    ::server::TFriendsRemove* friends_remove_;
    ::server::TFriendsBlock* friends_block_;
    ::server::TFriendsList* friends_list_;
    ::server::TFriends* friends_;
    ::server::TGroupsCreate* groups_create_;
    ::server::TGroupsUpdate* groups_update_;
    ::server::TGroupsRemove* groups_remove_;
    ::server::TGroupsFetch* groups_fetch_;
    ::server::TGroupsList* groups_list_;
    ::server::TGroupsSelfList* groups_self_list_;
    ::server::TGroupUsersList* group_users_list_;
    ::server::TGroupsJoin* groups_join_;
    ::server::TGroupsLeave* groups_leave_;
    ::server::TGroupUsersAdd* group_users_add_;
    ::server::TGroupUsersKick* group_users_kick_;
    ::server::TGroupUsersPromote* group_users_promote_;
    ::server::TGroups* groups_;
    ::server::TGroupsSelf* groups_self_;
    ::server::TGroupUsers* group_users_;
    ::server::TTopicsJoin* topics_join_;
    ::server::TTopicsLeave* topics_leave_;
    ::server::TTopicMessageSend* topic_message_send_;
    ::server::TTopicMessagesList* topic_messages_list_;
    ::server::TTopics* topics_;
    ::server::TTopicMessageAck* topic_message_ack_;
    ::server::TopicMessage* topic_message_;
    ::server::TTopicMessages* topic_messages_;
    ::server::TopicPresence* topic_presence_;
    ::server::TMatchCreate* match_create_;
    ::server::TMatchesJoin* matches_join_;
    ::server::TMatchesLeave* matches_leave_;
    ::server::MatchDataSend* match_data_send_;
    ::server::TMatch* match_;
    ::server::TMatches* matches_;
    ::server::MatchData* match_data_;
    ::server::MatchPresence* match_presence_;
    ::server::TStorageList* storage_list_;
    ::server::TStorageFetch* storage_fetch_;
    ::server::TStorageWrite* storage_write_;
    ::server::TStorageUpdate* storage_update_;
    ::server::TStorageRemove* storage_remove_;
    ::server::TStorageData* storage_data_;
    ::server::TStorageKeys* storage_keys_;
    ::server::TLeaderboardsList* leaderboards_list_;
    ::server::TLeaderboardRecordsWrite* leaderboard_records_write_;
    ::server::TLeaderboardRecordsFetch* leaderboard_records_fetch_;
    ::server::TLeaderboardRecordsList* leaderboard_records_list_;
    ::server::TLeaderboards* leaderboards_;
    ::server::TLeaderboardRecords* leaderboard_records_;
    ::server::TMatchmakeAdd* matchmake_add_;
    ::server::TMatchmakeRemove* matchmake_remove_;
    ::server::TMatchmakeTicket* matchmake_ticket_;
    ::server::MatchmakeMatched* matchmake_matched_;
    ::server::TRpc* rpc_;
    ::server::TPurchaseValidation* purchase_;
    ::server::TPurchaseRecord* purchase_record_;
    ::server::TNotificationsList* notifications_list_;
    ::server::TNotificationsRemove* notifications_remove_;
    ::server::TNotifications* notifications_;
    ::server::Notifications* live_notifications_;
  } payload_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Envelope> Envelope_default_instance_;

// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Logout) */ {
 public:
  Logout();
  virtual ~Logout();

  Logout(const Logout& from);

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();

  static const Logout* internal_default_instance();

  void Swap(Logout* other);

  // implements Message ----------------------------------------------

  inline Logout* New() const { return New(NULL); }

  Logout* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Logout* other);
  void UnsafeMergeFrom(const Logout& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.Logout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Logout> Logout_default_instance_;

// -------------------------------------------------------------------

class TLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLink) */ {
 public:
  TLink();
  virtual ~TLink();

  TLink(const TLink& from);

  inline TLink& operator=(const TLink& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLink& default_instance();

  enum IdCase {
    kEmail = 1,
    kFacebook = 2,
    kGoogle = 3,
    kGameCenter = 4,
    kSteam = 5,
    kDevice = 6,
    kCustom = 7,
    ID_NOT_SET = 0,
  };

  static const TLink* internal_default_instance();

  void Swap(TLink* other);

  // implements Message ----------------------------------------------

  inline TLink* New() const { return New(NULL); }

  TLink* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLink& from);
  void MergeFrom(const TLink& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLink* other);
  void UnsafeMergeFrom(const TLink& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.AuthenticateRequest.Email email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::server::AuthenticateRequest_Email& email() const;
  ::server::AuthenticateRequest_Email* mutable_email();
  ::server::AuthenticateRequest_Email* release_email();
  void set_allocated_email(::server::AuthenticateRequest_Email* email);

  // optional string facebook = 2;
  private:
  bool has_facebook() const;
  public:
  void clear_facebook();
  static const int kFacebookFieldNumber = 2;
  const ::std::string& facebook() const;
  void set_facebook(const ::std::string& value);
  void set_facebook(const char* value);
  void set_facebook(const char* value, size_t size);
  ::std::string* mutable_facebook();
  ::std::string* release_facebook();
  void set_allocated_facebook(::std::string* facebook);

  // optional string google = 3;
  private:
  bool has_google() const;
  public:
  void clear_google();
  static const int kGoogleFieldNumber = 3;
  const ::std::string& google() const;
  void set_google(const ::std::string& value);
  void set_google(const char* value);
  void set_google(const char* value, size_t size);
  ::std::string* mutable_google();
  ::std::string* release_google();
  void set_allocated_google(::std::string* google);

  // optional .server.AuthenticateRequest.GameCenter game_center = 4;
  bool has_game_center() const;
  void clear_game_center();
  static const int kGameCenterFieldNumber = 4;
  const ::server::AuthenticateRequest_GameCenter& game_center() const;
  ::server::AuthenticateRequest_GameCenter* mutable_game_center();
  ::server::AuthenticateRequest_GameCenter* release_game_center();
  void set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center);

  // optional string steam = 5;
  private:
  bool has_steam() const;
  public:
  void clear_steam();
  static const int kSteamFieldNumber = 5;
  const ::std::string& steam() const;
  void set_steam(const ::std::string& value);
  void set_steam(const char* value);
  void set_steam(const char* value, size_t size);
  ::std::string* mutable_steam();
  ::std::string* release_steam();
  void set_allocated_steam(::std::string* steam);

  // optional string device = 6;
  private:
  bool has_device() const;
  public:
  void clear_device();
  static const int kDeviceFieldNumber = 6;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // optional string custom = 7;
  private:
  bool has_custom() const;
  public:
  void clear_custom();
  static const int kCustomFieldNumber = 7;
  const ::std::string& custom() const;
  void set_custom(const ::std::string& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  ::std::string* mutable_custom();
  ::std::string* release_custom();
  void set_allocated_custom(::std::string* custom);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TLink)
 private:
  inline void set_has_email();
  inline void set_has_facebook();
  inline void set_has_google();
  inline void set_has_game_center();
  inline void set_has_steam();
  inline void set_has_device();
  inline void set_has_custom();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::server::AuthenticateRequest_Email* email_;
    ::google::protobuf::internal::ArenaStringPtr facebook_;
    ::google::protobuf::internal::ArenaStringPtr google_;
    ::server::AuthenticateRequest_GameCenter* game_center_;
    ::google::protobuf::internal::ArenaStringPtr steam_;
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr custom_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLink> TLink_default_instance_;

// -------------------------------------------------------------------

class TUnlink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TUnlink) */ {
 public:
  TUnlink();
  virtual ~TUnlink();

  TUnlink(const TUnlink& from);

  inline TUnlink& operator=(const TUnlink& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnlink& default_instance();

  enum IdCase {
    kEmail = 1,
    kFacebook = 2,
    kGoogle = 3,
    kGameCenter = 4,
    kSteam = 5,
    kDevice = 6,
    kCustom = 7,
    ID_NOT_SET = 0,
  };

  static const TUnlink* internal_default_instance();

  void Swap(TUnlink* other);

  // implements Message ----------------------------------------------

  inline TUnlink* New() const { return New(NULL); }

  TUnlink* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnlink& from);
  void MergeFrom(const TUnlink& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TUnlink* other);
  void UnsafeMergeFrom(const TUnlink& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email = 1;
  private:
  bool has_email() const;
  public:
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string facebook = 2;
  private:
  bool has_facebook() const;
  public:
  void clear_facebook();
  static const int kFacebookFieldNumber = 2;
  const ::std::string& facebook() const;
  void set_facebook(const ::std::string& value);
  void set_facebook(const char* value);
  void set_facebook(const char* value, size_t size);
  ::std::string* mutable_facebook();
  ::std::string* release_facebook();
  void set_allocated_facebook(::std::string* facebook);

  // optional string google = 3;
  private:
  bool has_google() const;
  public:
  void clear_google();
  static const int kGoogleFieldNumber = 3;
  const ::std::string& google() const;
  void set_google(const ::std::string& value);
  void set_google(const char* value);
  void set_google(const char* value, size_t size);
  ::std::string* mutable_google();
  ::std::string* release_google();
  void set_allocated_google(::std::string* google);

  // optional string game_center = 4;
  private:
  bool has_game_center() const;
  public:
  void clear_game_center();
  static const int kGameCenterFieldNumber = 4;
  const ::std::string& game_center() const;
  void set_game_center(const ::std::string& value);
  void set_game_center(const char* value);
  void set_game_center(const char* value, size_t size);
  ::std::string* mutable_game_center();
  ::std::string* release_game_center();
  void set_allocated_game_center(::std::string* game_center);

  // optional string steam = 5;
  private:
  bool has_steam() const;
  public:
  void clear_steam();
  static const int kSteamFieldNumber = 5;
  const ::std::string& steam() const;
  void set_steam(const ::std::string& value);
  void set_steam(const char* value);
  void set_steam(const char* value, size_t size);
  ::std::string* mutable_steam();
  ::std::string* release_steam();
  void set_allocated_steam(::std::string* steam);

  // optional string device = 6;
  private:
  bool has_device() const;
  public:
  void clear_device();
  static const int kDeviceFieldNumber = 6;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // optional string custom = 7;
  private:
  bool has_custom() const;
  public:
  void clear_custom();
  static const int kCustomFieldNumber = 7;
  const ::std::string& custom() const;
  void set_custom(const ::std::string& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  ::std::string* mutable_custom();
  ::std::string* release_custom();
  void set_allocated_custom(::std::string* custom);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TUnlink)
 private:
  inline void set_has_email();
  inline void set_has_facebook();
  inline void set_has_google();
  inline void set_has_game_center();
  inline void set_has_steam();
  inline void set_has_device();
  inline void set_has_custom();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr facebook_;
    ::google::protobuf::internal::ArenaStringPtr google_;
    ::google::protobuf::internal::ArenaStringPtr game_center_;
    ::google::protobuf::internal::ArenaStringPtr steam_;
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr custom_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TUnlink> TUnlink_default_instance_;

// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static const User* internal_default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  inline User* New() const { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  void UnsafeMergeFrom(const User& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string handle = 2;
  void clear_handle();
  static const int kHandleFieldNumber = 2;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // optional string fullname = 3;
  void clear_fullname();
  static const int kFullnameFieldNumber = 3;
  const ::std::string& fullname() const;
  void set_fullname(const ::std::string& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  ::std::string* mutable_fullname();
  ::std::string* release_fullname();
  void set_allocated_fullname(::std::string* fullname);

  // optional string avatar_url = 4;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 4;
  const ::std::string& avatar_url() const;
  void set_avatar_url(const ::std::string& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  ::std::string* mutable_avatar_url();
  ::std::string* release_avatar_url();
  void set_allocated_avatar_url(::std::string* avatar_url);

  // optional string lang = 5;
  void clear_lang();
  static const int kLangFieldNumber = 5;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional string location = 6;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string timezone = 7;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 7;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string metadata = 8;
  void clear_metadata();
  static const int kMetadataFieldNumber = 8;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // optional int64 created_at = 9;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 9;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // optional int64 updated_at = 10;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 10;
  ::google::protobuf::int64 updated_at() const;
  void set_updated_at(::google::protobuf::int64 value);

  // optional int64 last_online_at = 11;
  void clear_last_online_at();
  static const int kLastOnlineAtFieldNumber = 11;
  ::google::protobuf::int64 last_online_at() const;
  void set_last_online_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr fullname_;
  ::google::protobuf::internal::ArenaStringPtr avatar_url_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 updated_at_;
  ::google::protobuf::int64 last_online_at_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

// -------------------------------------------------------------------

class Self : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Self) */ {
 public:
  Self();
  virtual ~Self();

  Self(const Self& from);

  inline Self& operator=(const Self& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Self& default_instance();

  static const Self* internal_default_instance();

  void Swap(Self* other);

  // implements Message ----------------------------------------------

  inline Self* New() const { return New(NULL); }

  Self* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Self& from);
  void MergeFrom(const Self& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Self* other);
  void UnsafeMergeFrom(const Self& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::server::User& user() const;
  ::server::User* mutable_user();
  ::server::User* release_user();
  void set_allocated_user(::server::User* user);

  // optional bool verified = 2;
  void clear_verified();
  static const int kVerifiedFieldNumber = 2;
  bool verified() const;
  void set_verified(bool value);

  // optional string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // repeated string device_ids = 4;
  int device_ids_size() const;
  void clear_device_ids();
  static const int kDeviceIdsFieldNumber = 4;
  const ::std::string& device_ids(int index) const;
  ::std::string* mutable_device_ids(int index);
  void set_device_ids(int index, const ::std::string& value);
  void set_device_ids(int index, const char* value);
  void set_device_ids(int index, const char* value, size_t size);
  ::std::string* add_device_ids();
  void add_device_ids(const ::std::string& value);
  void add_device_ids(const char* value);
  void add_device_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& device_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_ids();

  // optional string facebook_id = 5;
  void clear_facebook_id();
  static const int kFacebookIdFieldNumber = 5;
  const ::std::string& facebook_id() const;
  void set_facebook_id(const ::std::string& value);
  void set_facebook_id(const char* value);
  void set_facebook_id(const char* value, size_t size);
  ::std::string* mutable_facebook_id();
  ::std::string* release_facebook_id();
  void set_allocated_facebook_id(::std::string* facebook_id);

  // optional string google_id = 6;
  void clear_google_id();
  static const int kGoogleIdFieldNumber = 6;
  const ::std::string& google_id() const;
  void set_google_id(const ::std::string& value);
  void set_google_id(const char* value);
  void set_google_id(const char* value, size_t size);
  ::std::string* mutable_google_id();
  ::std::string* release_google_id();
  void set_allocated_google_id(::std::string* google_id);

  // optional string gamecenter_id = 7;
  void clear_gamecenter_id();
  static const int kGamecenterIdFieldNumber = 7;
  const ::std::string& gamecenter_id() const;
  void set_gamecenter_id(const ::std::string& value);
  void set_gamecenter_id(const char* value);
  void set_gamecenter_id(const char* value, size_t size);
  ::std::string* mutable_gamecenter_id();
  ::std::string* release_gamecenter_id();
  void set_allocated_gamecenter_id(::std::string* gamecenter_id);

  // optional string steam_id = 8;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 8;
  const ::std::string& steam_id() const;
  void set_steam_id(const ::std::string& value);
  void set_steam_id(const char* value);
  void set_steam_id(const char* value, size_t size);
  ::std::string* mutable_steam_id();
  ::std::string* release_steam_id();
  void set_allocated_steam_id(::std::string* steam_id);

  // optional string custom_id = 9;
  void clear_custom_id();
  static const int kCustomIdFieldNumber = 9;
  const ::std::string& custom_id() const;
  void set_custom_id(const ::std::string& value);
  void set_custom_id(const char* value);
  void set_custom_id(const char* value, size_t size);
  ::std::string* mutable_custom_id();
  ::std::string* release_custom_id();
  void set_allocated_custom_id(::std::string* custom_id);

  // @@protoc_insertion_point(class_scope:server.Self)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> device_ids_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr facebook_id_;
  ::google::protobuf::internal::ArenaStringPtr google_id_;
  ::google::protobuf::internal::ArenaStringPtr gamecenter_id_;
  ::google::protobuf::internal::ArenaStringPtr steam_id_;
  ::google::protobuf::internal::ArenaStringPtr custom_id_;
  ::server::User* user_;
  bool verified_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Self> Self_default_instance_;

// -------------------------------------------------------------------

class TSelfFetch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TSelfFetch) */ {
 public:
  TSelfFetch();
  virtual ~TSelfFetch();

  TSelfFetch(const TSelfFetch& from);

  inline TSelfFetch& operator=(const TSelfFetch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSelfFetch& default_instance();

  static const TSelfFetch* internal_default_instance();

  void Swap(TSelfFetch* other);

  // implements Message ----------------------------------------------

  inline TSelfFetch* New() const { return New(NULL); }

  TSelfFetch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSelfFetch& from);
  void MergeFrom(const TSelfFetch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TSelfFetch* other);
  void UnsafeMergeFrom(const TSelfFetch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TSelfFetch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TSelfFetch> TSelfFetch_default_instance_;

// -------------------------------------------------------------------

class TSelf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TSelf) */ {
 public:
  TSelf();
  virtual ~TSelf();

  TSelf(const TSelf& from);

  inline TSelf& operator=(const TSelf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSelf& default_instance();

  static const TSelf* internal_default_instance();

  void Swap(TSelf* other);

  // implements Message ----------------------------------------------

  inline TSelf* New() const { return New(NULL); }

  TSelf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSelf& from);
  void MergeFrom(const TSelf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TSelf* other);
  void UnsafeMergeFrom(const TSelf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.Self self = 1;
  bool has_self() const;
  void clear_self();
  static const int kSelfFieldNumber = 1;
  const ::server::Self& self() const;
  ::server::Self* mutable_self();
  ::server::Self* release_self();
  void set_allocated_self(::server::Self* self);

  // @@protoc_insertion_point(class_scope:server.TSelf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server::Self* self_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TSelf> TSelf_default_instance_;

// -------------------------------------------------------------------

class TSelfUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TSelfUpdate) */ {
 public:
  TSelfUpdate();
  virtual ~TSelfUpdate();

  TSelfUpdate(const TSelfUpdate& from);

  inline TSelfUpdate& operator=(const TSelfUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSelfUpdate& default_instance();

  static const TSelfUpdate* internal_default_instance();

  void Swap(TSelfUpdate* other);

  // implements Message ----------------------------------------------

  inline TSelfUpdate* New() const { return New(NULL); }

  TSelfUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSelfUpdate& from);
  void MergeFrom(const TSelfUpdate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TSelfUpdate* other);
  void UnsafeMergeFrom(const TSelfUpdate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // optional string fullname = 2;
  void clear_fullname();
  static const int kFullnameFieldNumber = 2;
  const ::std::string& fullname() const;
  void set_fullname(const ::std::string& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  ::std::string* mutable_fullname();
  ::std::string* release_fullname();
  void set_allocated_fullname(::std::string* fullname);

  // optional string timezone = 3;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 3;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string location = 4;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string lang = 5;
  void clear_lang();
  static const int kLangFieldNumber = 5;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional string metadata = 6;
  void clear_metadata();
  static const int kMetadataFieldNumber = 6;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // optional string avatar_url = 7;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 7;
  const ::std::string& avatar_url() const;
  void set_avatar_url(const ::std::string& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  ::std::string* mutable_avatar_url();
  ::std::string* release_avatar_url();
  void set_allocated_avatar_url(::std::string* avatar_url);

  // @@protoc_insertion_point(class_scope:server.TSelfUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr fullname_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::internal::ArenaStringPtr avatar_url_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TSelfUpdate> TSelfUpdate_default_instance_;

// -------------------------------------------------------------------

class TUsersFetch_UsersFetch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TUsersFetch.UsersFetch) */ {
 public:
  TUsersFetch_UsersFetch();
  virtual ~TUsersFetch_UsersFetch();

  TUsersFetch_UsersFetch(const TUsersFetch_UsersFetch& from);

  inline TUsersFetch_UsersFetch& operator=(const TUsersFetch_UsersFetch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUsersFetch_UsersFetch& default_instance();

  enum IdCase {
    kUserId = 1,
    kHandle = 2,
    ID_NOT_SET = 0,
  };

  static const TUsersFetch_UsersFetch* internal_default_instance();

  void Swap(TUsersFetch_UsersFetch* other);

  // implements Message ----------------------------------------------

  inline TUsersFetch_UsersFetch* New() const { return New(NULL); }

  TUsersFetch_UsersFetch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUsersFetch_UsersFetch& from);
  void MergeFrom(const TUsersFetch_UsersFetch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TUsersFetch_UsersFetch* other);
  void UnsafeMergeFrom(const TUsersFetch_UsersFetch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  private:
  bool has_user_id() const;
  public:
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string handle = 2;
  private:
  bool has_handle() const;
  public:
  void clear_handle();
  static const int kHandleFieldNumber = 2;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TUsersFetch.UsersFetch)
 private:
  inline void set_has_user_id();
  inline void set_has_handle();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr handle_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TUsersFetch_UsersFetch> TUsersFetch_UsersFetch_default_instance_;

// -------------------------------------------------------------------

class TUsersFetch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TUsersFetch) */ {
 public:
  TUsersFetch();
  virtual ~TUsersFetch();

  TUsersFetch(const TUsersFetch& from);

  inline TUsersFetch& operator=(const TUsersFetch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUsersFetch& default_instance();

  static const TUsersFetch* internal_default_instance();

  void Swap(TUsersFetch* other);

  // implements Message ----------------------------------------------

  inline TUsersFetch* New() const { return New(NULL); }

  TUsersFetch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUsersFetch& from);
  void MergeFrom(const TUsersFetch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TUsersFetch* other);
  void UnsafeMergeFrom(const TUsersFetch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TUsersFetch_UsersFetch UsersFetch;

  // accessors -------------------------------------------------------

  // repeated .server.TUsersFetch.UsersFetch users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::server::TUsersFetch_UsersFetch& users(int index) const;
  ::server::TUsersFetch_UsersFetch* mutable_users(int index);
  ::server::TUsersFetch_UsersFetch* add_users();
  ::google::protobuf::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >&
      users() const;

  // @@protoc_insertion_point(class_scope:server.TUsersFetch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TUsersFetch_UsersFetch > users_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TUsersFetch> TUsersFetch_default_instance_;

// -------------------------------------------------------------------

class TUsers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TUsers) */ {
 public:
  TUsers();
  virtual ~TUsers();

  TUsers(const TUsers& from);

  inline TUsers& operator=(const TUsers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUsers& default_instance();

  static const TUsers* internal_default_instance();

  void Swap(TUsers* other);

  // implements Message ----------------------------------------------

  inline TUsers* New() const { return New(NULL); }

  TUsers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUsers& from);
  void MergeFrom(const TUsers& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TUsers* other);
  void UnsafeMergeFrom(const TUsers& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.User users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::server::User& users(int index) const;
  ::server::User* mutable_users(int index);
  ::server::User* add_users();
  ::google::protobuf::RepeatedPtrField< ::server::User >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::server::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:server.TUsers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::User > users_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TUsers> TUsers_default_instance_;

// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Friend) */ {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  static const Friend* internal_default_instance();

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  inline Friend* New() const { return New(NULL); }

  Friend* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Friend* other);
  void UnsafeMergeFrom(const Friend& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::server::User& user() const;
  ::server::User* mutable_user();
  ::server::User* release_user();
  void set_allocated_user(::server::User* user);

  // optional int64 state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.Friend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server::User* user_;
  ::google::protobuf::int64 state_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Friend> Friend_default_instance_;

// -------------------------------------------------------------------

class TFriendsAdd_FriendsAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TFriendsAdd.FriendsAdd) */ {
 public:
  TFriendsAdd_FriendsAdd();
  virtual ~TFriendsAdd_FriendsAdd();

  TFriendsAdd_FriendsAdd(const TFriendsAdd_FriendsAdd& from);

  inline TFriendsAdd_FriendsAdd& operator=(const TFriendsAdd_FriendsAdd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendsAdd_FriendsAdd& default_instance();

  enum IdCase {
    kUserId = 1,
    kHandle = 2,
    ID_NOT_SET = 0,
  };

  static const TFriendsAdd_FriendsAdd* internal_default_instance();

  void Swap(TFriendsAdd_FriendsAdd* other);

  // implements Message ----------------------------------------------

  inline TFriendsAdd_FriendsAdd* New() const { return New(NULL); }

  TFriendsAdd_FriendsAdd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendsAdd_FriendsAdd& from);
  void MergeFrom(const TFriendsAdd_FriendsAdd& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFriendsAdd_FriendsAdd* other);
  void UnsafeMergeFrom(const TFriendsAdd_FriendsAdd& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  private:
  bool has_user_id() const;
  public:
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string handle = 2;
  private:
  bool has_handle() const;
  public:
  void clear_handle();
  static const int kHandleFieldNumber = 2;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TFriendsAdd.FriendsAdd)
 private:
  inline void set_has_user_id();
  inline void set_has_handle();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr handle_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TFriendsAdd_FriendsAdd> TFriendsAdd_FriendsAdd_default_instance_;

// -------------------------------------------------------------------

class TFriendsAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TFriendsAdd) */ {
 public:
  TFriendsAdd();
  virtual ~TFriendsAdd();

  TFriendsAdd(const TFriendsAdd& from);

  inline TFriendsAdd& operator=(const TFriendsAdd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendsAdd& default_instance();

  static const TFriendsAdd* internal_default_instance();

  void Swap(TFriendsAdd* other);

  // implements Message ----------------------------------------------

  inline TFriendsAdd* New() const { return New(NULL); }

  TFriendsAdd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendsAdd& from);
  void MergeFrom(const TFriendsAdd& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFriendsAdd* other);
  void UnsafeMergeFrom(const TFriendsAdd& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TFriendsAdd_FriendsAdd FriendsAdd;

  // accessors -------------------------------------------------------

  // repeated .server.TFriendsAdd.FriendsAdd friends = 1;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 1;
  const ::server::TFriendsAdd_FriendsAdd& friends(int index) const;
  ::server::TFriendsAdd_FriendsAdd* mutable_friends(int index);
  ::server::TFriendsAdd_FriendsAdd* add_friends();
  ::google::protobuf::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >*
      mutable_friends();
  const ::google::protobuf::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >&
      friends() const;

  // @@protoc_insertion_point(class_scope:server.TFriendsAdd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd > friends_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TFriendsAdd> TFriendsAdd_default_instance_;

// -------------------------------------------------------------------

class TFriendsRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TFriendsRemove) */ {
 public:
  TFriendsRemove();
  virtual ~TFriendsRemove();

  TFriendsRemove(const TFriendsRemove& from);

  inline TFriendsRemove& operator=(const TFriendsRemove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendsRemove& default_instance();

  static const TFriendsRemove* internal_default_instance();

  void Swap(TFriendsRemove* other);

  // implements Message ----------------------------------------------

  inline TFriendsRemove* New() const { return New(NULL); }

  TFriendsRemove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendsRemove& from);
  void MergeFrom(const TFriendsRemove& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFriendsRemove* other);
  void UnsafeMergeFrom(const TFriendsRemove& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string user_ids = 1;
  int user_ids_size() const;
  void clear_user_ids();
  static const int kUserIdsFieldNumber = 1;
  const ::std::string& user_ids(int index) const;
  ::std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const ::std::string& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  ::std::string* add_user_ids();
  void add_user_ids(const ::std::string& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& user_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_ids();

  // @@protoc_insertion_point(class_scope:server.TFriendsRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TFriendsRemove> TFriendsRemove_default_instance_;

// -------------------------------------------------------------------

class TFriendsBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TFriendsBlock) */ {
 public:
  TFriendsBlock();
  virtual ~TFriendsBlock();

  TFriendsBlock(const TFriendsBlock& from);

  inline TFriendsBlock& operator=(const TFriendsBlock& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendsBlock& default_instance();

  static const TFriendsBlock* internal_default_instance();

  void Swap(TFriendsBlock* other);

  // implements Message ----------------------------------------------

  inline TFriendsBlock* New() const { return New(NULL); }

  TFriendsBlock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendsBlock& from);
  void MergeFrom(const TFriendsBlock& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFriendsBlock* other);
  void UnsafeMergeFrom(const TFriendsBlock& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string user_ids = 1;
  int user_ids_size() const;
  void clear_user_ids();
  static const int kUserIdsFieldNumber = 1;
  const ::std::string& user_ids(int index) const;
  ::std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const ::std::string& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  ::std::string* add_user_ids();
  void add_user_ids(const ::std::string& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& user_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_ids();

  // @@protoc_insertion_point(class_scope:server.TFriendsBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TFriendsBlock> TFriendsBlock_default_instance_;

// -------------------------------------------------------------------

class TFriendsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TFriendsList) */ {
 public:
  TFriendsList();
  virtual ~TFriendsList();

  TFriendsList(const TFriendsList& from);

  inline TFriendsList& operator=(const TFriendsList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendsList& default_instance();

  static const TFriendsList* internal_default_instance();

  void Swap(TFriendsList* other);

  // implements Message ----------------------------------------------

  inline TFriendsList* New() const { return New(NULL); }

  TFriendsList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendsList& from);
  void MergeFrom(const TFriendsList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFriendsList* other);
  void UnsafeMergeFrom(const TFriendsList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TFriendsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TFriendsList> TFriendsList_default_instance_;

// -------------------------------------------------------------------

class TFriends : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TFriends) */ {
 public:
  TFriends();
  virtual ~TFriends();

  TFriends(const TFriends& from);

  inline TFriends& operator=(const TFriends& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriends& default_instance();

  static const TFriends* internal_default_instance();

  void Swap(TFriends* other);

  // implements Message ----------------------------------------------

  inline TFriends* New() const { return New(NULL); }

  TFriends* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriends& from);
  void MergeFrom(const TFriends& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFriends* other);
  void UnsafeMergeFrom(const TFriends& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.Friend friends = 1;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 1;
  const ::server::Friend& friends(int index) const;
  ::server::Friend* mutable_friends(int index);
  ::server::Friend* add_friends();
  ::google::protobuf::RepeatedPtrField< ::server::Friend >*
      mutable_friends();
  const ::google::protobuf::RepeatedPtrField< ::server::Friend >&
      friends() const;

  // @@protoc_insertion_point(class_scope:server.TFriends)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::Friend > friends_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TFriends> TFriends_default_instance_;

// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  static const Group* internal_default_instance();

  void Swap(Group* other);

  // implements Message ----------------------------------------------

  inline Group* New() const { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Group* other);
  void UnsafeMergeFrom(const Group& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bool private = 2;
  void clear_private_();
  static const int kPrivateFieldNumber = 2;
  bool private_() const;
  void set_private_(bool value);

  // optional string creator_id = 3;
  void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  const ::std::string& creator_id() const;
  void set_creator_id(const ::std::string& value);
  void set_creator_id(const char* value);
  void set_creator_id(const char* value, size_t size);
  ::std::string* mutable_creator_id();
  ::std::string* release_creator_id();
  void set_allocated_creator_id(::std::string* creator_id);

  // optional string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string avatar_url = 6;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 6;
  const ::std::string& avatar_url() const;
  void set_avatar_url(const ::std::string& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  ::std::string* mutable_avatar_url();
  ::std::string* release_avatar_url();
  void set_allocated_avatar_url(::std::string* avatar_url);

  // optional string lang = 7;
  void clear_lang();
  static const int kLangFieldNumber = 7;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional int64 utc_offset_ms = 8;
  void clear_utc_offset_ms();
  static const int kUtcOffsetMsFieldNumber = 8;
  ::google::protobuf::int64 utc_offset_ms() const;
  void set_utc_offset_ms(::google::protobuf::int64 value);

  // optional string metadata = 9;
  void clear_metadata();
  static const int kMetadataFieldNumber = 9;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // optional int64 count = 10;
  void clear_count();
  static const int kCountFieldNumber = 10;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // optional int64 created_at = 11;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 11;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // optional int64 updated_at = 12;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 12;
  ::google::protobuf::int64 updated_at() const;
  void set_updated_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr creator_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr avatar_url_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::int64 utc_offset_ms_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 updated_at_;
  bool private__;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Group> Group_default_instance_;

// -------------------------------------------------------------------

class TGroupsCreate_GroupCreate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsCreate.GroupCreate) */ {
 public:
  TGroupsCreate_GroupCreate();
  virtual ~TGroupsCreate_GroupCreate();

  TGroupsCreate_GroupCreate(const TGroupsCreate_GroupCreate& from);

  inline TGroupsCreate_GroupCreate& operator=(const TGroupsCreate_GroupCreate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsCreate_GroupCreate& default_instance();

  static const TGroupsCreate_GroupCreate* internal_default_instance();

  void Swap(TGroupsCreate_GroupCreate* other);

  // implements Message ----------------------------------------------

  inline TGroupsCreate_GroupCreate* New() const { return New(NULL); }

  TGroupsCreate_GroupCreate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsCreate_GroupCreate& from);
  void MergeFrom(const TGroupsCreate_GroupCreate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsCreate_GroupCreate* other);
  void UnsafeMergeFrom(const TGroupsCreate_GroupCreate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string avatar_url = 3;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 3;
  const ::std::string& avatar_url() const;
  void set_avatar_url(const ::std::string& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  ::std::string* mutable_avatar_url();
  ::std::string* release_avatar_url();
  void set_allocated_avatar_url(::std::string* avatar_url);

  // optional string lang = 4;
  void clear_lang();
  static const int kLangFieldNumber = 4;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional string metadata = 5;
  void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // optional bool private = 6;
  void clear_private_();
  static const int kPrivateFieldNumber = 6;
  bool private_() const;
  void set_private_(bool value);

  // @@protoc_insertion_point(class_scope:server.TGroupsCreate.GroupCreate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr avatar_url_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  bool private__;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsCreate_GroupCreate> TGroupsCreate_GroupCreate_default_instance_;

// -------------------------------------------------------------------

class TGroupsCreate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsCreate) */ {
 public:
  TGroupsCreate();
  virtual ~TGroupsCreate();

  TGroupsCreate(const TGroupsCreate& from);

  inline TGroupsCreate& operator=(const TGroupsCreate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsCreate& default_instance();

  static const TGroupsCreate* internal_default_instance();

  void Swap(TGroupsCreate* other);

  // implements Message ----------------------------------------------

  inline TGroupsCreate* New() const { return New(NULL); }

  TGroupsCreate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsCreate& from);
  void MergeFrom(const TGroupsCreate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsCreate* other);
  void UnsafeMergeFrom(const TGroupsCreate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGroupsCreate_GroupCreate GroupCreate;

  // accessors -------------------------------------------------------

  // repeated .server.TGroupsCreate.GroupCreate groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::server::TGroupsCreate_GroupCreate& groups(int index) const;
  ::server::TGroupsCreate_GroupCreate* mutable_groups(int index);
  ::server::TGroupsCreate_GroupCreate* add_groups();
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >&
      groups() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsCreate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate > groups_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsCreate> TGroupsCreate_default_instance_;

// -------------------------------------------------------------------

class TGroupsUpdate_GroupUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsUpdate.GroupUpdate) */ {
 public:
  TGroupsUpdate_GroupUpdate();
  virtual ~TGroupsUpdate_GroupUpdate();

  TGroupsUpdate_GroupUpdate(const TGroupsUpdate_GroupUpdate& from);

  inline TGroupsUpdate_GroupUpdate& operator=(const TGroupsUpdate_GroupUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsUpdate_GroupUpdate& default_instance();

  static const TGroupsUpdate_GroupUpdate* internal_default_instance();

  void Swap(TGroupsUpdate_GroupUpdate* other);

  // implements Message ----------------------------------------------

  inline TGroupsUpdate_GroupUpdate* New() const { return New(NULL); }

  TGroupsUpdate_GroupUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsUpdate_GroupUpdate& from);
  void MergeFrom(const TGroupsUpdate_GroupUpdate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsUpdate_GroupUpdate* other);
  void UnsafeMergeFrom(const TGroupsUpdate_GroupUpdate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional bool private = 2;
  void clear_private_();
  static const int kPrivateFieldNumber = 2;
  bool private_() const;
  void set_private_(bool value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string avatar_url = 5;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 5;
  const ::std::string& avatar_url() const;
  void set_avatar_url(const ::std::string& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  ::std::string* mutable_avatar_url();
  ::std::string* release_avatar_url();
  void set_allocated_avatar_url(::std::string* avatar_url);

  // optional string lang = 6;
  void clear_lang();
  static const int kLangFieldNumber = 6;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional string metadata = 7;
  void clear_metadata();
  static const int kMetadataFieldNumber = 7;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // @@protoc_insertion_point(class_scope:server.TGroupsUpdate.GroupUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr avatar_url_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  bool private__;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsUpdate_GroupUpdate> TGroupsUpdate_GroupUpdate_default_instance_;

// -------------------------------------------------------------------

class TGroupsUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsUpdate) */ {
 public:
  TGroupsUpdate();
  virtual ~TGroupsUpdate();

  TGroupsUpdate(const TGroupsUpdate& from);

  inline TGroupsUpdate& operator=(const TGroupsUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsUpdate& default_instance();

  static const TGroupsUpdate* internal_default_instance();

  void Swap(TGroupsUpdate* other);

  // implements Message ----------------------------------------------

  inline TGroupsUpdate* New() const { return New(NULL); }

  TGroupsUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsUpdate& from);
  void MergeFrom(const TGroupsUpdate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsUpdate* other);
  void UnsafeMergeFrom(const TGroupsUpdate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGroupsUpdate_GroupUpdate GroupUpdate;

  // accessors -------------------------------------------------------

  // repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::server::TGroupsUpdate_GroupUpdate& groups(int index) const;
  ::server::TGroupsUpdate_GroupUpdate* mutable_groups(int index);
  ::server::TGroupsUpdate_GroupUpdate* add_groups();
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >&
      groups() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate > groups_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsUpdate> TGroupsUpdate_default_instance_;

// -------------------------------------------------------------------

class TGroupsRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsRemove) */ {
 public:
  TGroupsRemove();
  virtual ~TGroupsRemove();

  TGroupsRemove(const TGroupsRemove& from);

  inline TGroupsRemove& operator=(const TGroupsRemove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsRemove& default_instance();

  static const TGroupsRemove* internal_default_instance();

  void Swap(TGroupsRemove* other);

  // implements Message ----------------------------------------------

  inline TGroupsRemove* New() const { return New(NULL); }

  TGroupsRemove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsRemove& from);
  void MergeFrom(const TGroupsRemove& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsRemove* other);
  void UnsafeMergeFrom(const TGroupsRemove& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string group_ids = 1;
  int group_ids_size() const;
  void clear_group_ids();
  static const int kGroupIdsFieldNumber = 1;
  const ::std::string& group_ids(int index) const;
  ::std::string* mutable_group_ids(int index);
  void set_group_ids(int index, const ::std::string& value);
  void set_group_ids(int index, const char* value);
  void set_group_ids(int index, const char* value, size_t size);
  ::std::string* add_group_ids();
  void add_group_ids(const ::std::string& value);
  void add_group_ids(const char* value);
  void add_group_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& group_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_ids();

  // @@protoc_insertion_point(class_scope:server.TGroupsRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsRemove> TGroupsRemove_default_instance_;

// -------------------------------------------------------------------

class TGroupsSelfList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsSelfList) */ {
 public:
  TGroupsSelfList();
  virtual ~TGroupsSelfList();

  TGroupsSelfList(const TGroupsSelfList& from);

  inline TGroupsSelfList& operator=(const TGroupsSelfList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsSelfList& default_instance();

  static const TGroupsSelfList* internal_default_instance();

  void Swap(TGroupsSelfList* other);

  // implements Message ----------------------------------------------

  inline TGroupsSelfList* New() const { return New(NULL); }

  TGroupsSelfList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsSelfList& from);
  void MergeFrom(const TGroupsSelfList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsSelfList* other);
  void UnsafeMergeFrom(const TGroupsSelfList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TGroupsSelfList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsSelfList> TGroupsSelfList_default_instance_;

// -------------------------------------------------------------------

class TGroupsFetch_GroupFetch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsFetch.GroupFetch) */ {
 public:
  TGroupsFetch_GroupFetch();
  virtual ~TGroupsFetch_GroupFetch();

  TGroupsFetch_GroupFetch(const TGroupsFetch_GroupFetch& from);

  inline TGroupsFetch_GroupFetch& operator=(const TGroupsFetch_GroupFetch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsFetch_GroupFetch& default_instance();

  enum IdCase {
    kGroupId = 1,
    kName = 2,
    ID_NOT_SET = 0,
  };

  static const TGroupsFetch_GroupFetch* internal_default_instance();

  void Swap(TGroupsFetch_GroupFetch* other);

  // implements Message ----------------------------------------------

  inline TGroupsFetch_GroupFetch* New() const { return New(NULL); }

  TGroupsFetch_GroupFetch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsFetch_GroupFetch& from);
  void MergeFrom(const TGroupsFetch_GroupFetch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsFetch_GroupFetch* other);
  void UnsafeMergeFrom(const TGroupsFetch_GroupFetch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  private:
  bool has_group_id() const;
  public:
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional string name = 2;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TGroupsFetch.GroupFetch)
 private:
  inline void set_has_group_id();
  inline void set_has_name();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr group_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsFetch_GroupFetch> TGroupsFetch_GroupFetch_default_instance_;

// -------------------------------------------------------------------

class TGroupsFetch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsFetch) */ {
 public:
  TGroupsFetch();
  virtual ~TGroupsFetch();

  TGroupsFetch(const TGroupsFetch& from);

  inline TGroupsFetch& operator=(const TGroupsFetch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsFetch& default_instance();

  static const TGroupsFetch* internal_default_instance();

  void Swap(TGroupsFetch* other);

  // implements Message ----------------------------------------------

  inline TGroupsFetch* New() const { return New(NULL); }

  TGroupsFetch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsFetch& from);
  void MergeFrom(const TGroupsFetch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsFetch* other);
  void UnsafeMergeFrom(const TGroupsFetch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGroupsFetch_GroupFetch GroupFetch;

  // accessors -------------------------------------------------------

  // repeated .server.TGroupsFetch.GroupFetch groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::server::TGroupsFetch_GroupFetch& groups(int index) const;
  ::server::TGroupsFetch_GroupFetch* mutable_groups(int index);
  ::server::TGroupsFetch_GroupFetch* add_groups();
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >&
      groups() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsFetch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch > groups_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsFetch> TGroupsFetch_default_instance_;

// -------------------------------------------------------------------

class TGroupsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsList) */ {
 public:
  TGroupsList();
  virtual ~TGroupsList();

  TGroupsList(const TGroupsList& from);

  inline TGroupsList& operator=(const TGroupsList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsList& default_instance();

  enum FilterCase {
    kLang = 3,
    kCreatedAt = 4,
    kCount = 5,
    FILTER_NOT_SET = 0,
  };

  static const TGroupsList* internal_default_instance();

  void Swap(TGroupsList* other);

  // implements Message ----------------------------------------------

  inline TGroupsList* New() const { return New(NULL); }

  TGroupsList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsList& from);
  void MergeFrom(const TGroupsList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsList* other);
  void UnsafeMergeFrom(const TGroupsList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 page_limit = 1;
  void clear_page_limit();
  static const int kPageLimitFieldNumber = 1;
  ::google::protobuf::int64 page_limit() const;
  void set_page_limit(::google::protobuf::int64 value);

  // optional bool order_by_asc = 2;
  void clear_order_by_asc();
  static const int kOrderByAscFieldNumber = 2;
  bool order_by_asc() const;
  void set_order_by_asc(bool value);

  // optional string lang = 3;
  private:
  bool has_lang() const;
  public:
  void clear_lang();
  static const int kLangFieldNumber = 3;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional int64 created_at = 4;
  private:
  bool has_created_at() const;
  public:
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 4;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // optional int64 count = 5;
  private:
  bool has_count() const;
  public:
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // optional string cursor = 7;
  void clear_cursor();
  static const int kCursorFieldNumber = 7;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  FilterCase filter_case() const;
  // @@protoc_insertion_point(class_scope:server.TGroupsList)
 private:
  inline void set_has_lang();
  inline void set_has_created_at();
  inline void set_has_count();

  inline bool has_filter() const;
  void clear_filter();
  inline void clear_has_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  ::google::protobuf::int64 page_limit_;
  bool order_by_asc_;
  union FilterUnion {
    FilterUnion() {}
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::int64 created_at_;
    ::google::protobuf::int64 count_;
  } filter_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsList> TGroupsList_default_instance_;

// -------------------------------------------------------------------

class TGroups : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroups) */ {
 public:
  TGroups();
  virtual ~TGroups();

  TGroups(const TGroups& from);

  inline TGroups& operator=(const TGroups& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroups& default_instance();

  static const TGroups* internal_default_instance();

  void Swap(TGroups* other);

  // implements Message ----------------------------------------------

  inline TGroups* New() const { return New(NULL); }

  TGroups* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroups& from);
  void MergeFrom(const TGroups& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroups* other);
  void UnsafeMergeFrom(const TGroups& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.Group groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::server::Group& groups(int index) const;
  ::server::Group* mutable_groups(int index);
  ::server::Group* add_groups();
  ::google::protobuf::RepeatedPtrField< ::server::Group >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::server::Group >&
      groups() const;

  // optional string cursor = 2;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // @@protoc_insertion_point(class_scope:server.TGroups)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::Group > groups_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroups> TGroups_default_instance_;

// -------------------------------------------------------------------

class TGroupsSelf_GroupSelf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsSelf.GroupSelf) */ {
 public:
  TGroupsSelf_GroupSelf();
  virtual ~TGroupsSelf_GroupSelf();

  TGroupsSelf_GroupSelf(const TGroupsSelf_GroupSelf& from);

  inline TGroupsSelf_GroupSelf& operator=(const TGroupsSelf_GroupSelf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsSelf_GroupSelf& default_instance();

  static const TGroupsSelf_GroupSelf* internal_default_instance();

  void Swap(TGroupsSelf_GroupSelf* other);

  // implements Message ----------------------------------------------

  inline TGroupsSelf_GroupSelf* New() const { return New(NULL); }

  TGroupsSelf_GroupSelf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsSelf_GroupSelf& from);
  void MergeFrom(const TGroupsSelf_GroupSelf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsSelf_GroupSelf* other);
  void UnsafeMergeFrom(const TGroupsSelf_GroupSelf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.Group group = 1;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::server::Group& group() const;
  ::server::Group* mutable_group();
  ::server::Group* release_group();
  void set_allocated_group(::server::Group* group);

  // optional int64 state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.TGroupsSelf.GroupSelf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server::Group* group_;
  ::google::protobuf::int64 state_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsSelf_GroupSelf> TGroupsSelf_GroupSelf_default_instance_;

// -------------------------------------------------------------------

class TGroupsSelf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsSelf) */ {
 public:
  TGroupsSelf();
  virtual ~TGroupsSelf();

  TGroupsSelf(const TGroupsSelf& from);

  inline TGroupsSelf& operator=(const TGroupsSelf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsSelf& default_instance();

  static const TGroupsSelf* internal_default_instance();

  void Swap(TGroupsSelf* other);

  // implements Message ----------------------------------------------

  inline TGroupsSelf* New() const { return New(NULL); }

  TGroupsSelf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsSelf& from);
  void MergeFrom(const TGroupsSelf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsSelf* other);
  void UnsafeMergeFrom(const TGroupsSelf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGroupsSelf_GroupSelf GroupSelf;

  // accessors -------------------------------------------------------

  // repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
  int groups_self_size() const;
  void clear_groups_self();
  static const int kGroupsSelfFieldNumber = 1;
  const ::server::TGroupsSelf_GroupSelf& groups_self(int index) const;
  ::server::TGroupsSelf_GroupSelf* mutable_groups_self(int index);
  ::server::TGroupsSelf_GroupSelf* add_groups_self();
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >*
      mutable_groups_self();
  const ::google::protobuf::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >&
      groups_self() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsSelf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf > groups_self_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsSelf> TGroupsSelf_default_instance_;

// -------------------------------------------------------------------

class GroupUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.GroupUser) */ {
 public:
  GroupUser();
  virtual ~GroupUser();

  GroupUser(const GroupUser& from);

  inline GroupUser& operator=(const GroupUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupUser& default_instance();

  static const GroupUser* internal_default_instance();

  void Swap(GroupUser* other);

  // implements Message ----------------------------------------------

  inline GroupUser* New() const { return New(NULL); }

  GroupUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupUser& from);
  void MergeFrom(const GroupUser& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupUser* other);
  void UnsafeMergeFrom(const GroupUser& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::server::User& user() const;
  ::server::User* mutable_user();
  ::server::User* release_user();
  void set_allocated_user(::server::User* user);

  // optional int64 state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.GroupUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server::User* user_;
  ::google::protobuf::int64 state_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GroupUser> GroupUser_default_instance_;

// -------------------------------------------------------------------

class TGroupUsersList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersList) */ {
 public:
  TGroupUsersList();
  virtual ~TGroupUsersList();

  TGroupUsersList(const TGroupUsersList& from);

  inline TGroupUsersList& operator=(const TGroupUsersList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsersList& default_instance();

  static const TGroupUsersList* internal_default_instance();

  void Swap(TGroupUsersList* other);

  // implements Message ----------------------------------------------

  inline TGroupUsersList* New() const { return New(NULL); }

  TGroupUsersList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsersList& from);
  void MergeFrom(const TGroupUsersList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsersList* other);
  void UnsafeMergeFrom(const TGroupUsersList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:server.TGroupUsersList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersList> TGroupUsersList_default_instance_;

// -------------------------------------------------------------------

class TGroupUsers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsers) */ {
 public:
  TGroupUsers();
  virtual ~TGroupUsers();

  TGroupUsers(const TGroupUsers& from);

  inline TGroupUsers& operator=(const TGroupUsers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsers& default_instance();

  static const TGroupUsers* internal_default_instance();

  void Swap(TGroupUsers* other);

  // implements Message ----------------------------------------------

  inline TGroupUsers* New() const { return New(NULL); }

  TGroupUsers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsers& from);
  void MergeFrom(const TGroupUsers& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsers* other);
  void UnsafeMergeFrom(const TGroupUsers& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.GroupUser users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::server::GroupUser& users(int index) const;
  ::server::GroupUser* mutable_users(int index);
  ::server::GroupUser* add_users();
  ::google::protobuf::RepeatedPtrField< ::server::GroupUser >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::server::GroupUser >&
      users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::GroupUser > users_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsers> TGroupUsers_default_instance_;

// -------------------------------------------------------------------

class TGroupsJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsJoin) */ {
 public:
  TGroupsJoin();
  virtual ~TGroupsJoin();

  TGroupsJoin(const TGroupsJoin& from);

  inline TGroupsJoin& operator=(const TGroupsJoin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsJoin& default_instance();

  static const TGroupsJoin* internal_default_instance();

  void Swap(TGroupsJoin* other);

  // implements Message ----------------------------------------------

  inline TGroupsJoin* New() const { return New(NULL); }

  TGroupsJoin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsJoin& from);
  void MergeFrom(const TGroupsJoin& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsJoin* other);
  void UnsafeMergeFrom(const TGroupsJoin& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string group_ids = 1;
  int group_ids_size() const;
  void clear_group_ids();
  static const int kGroupIdsFieldNumber = 1;
  const ::std::string& group_ids(int index) const;
  ::std::string* mutable_group_ids(int index);
  void set_group_ids(int index, const ::std::string& value);
  void set_group_ids(int index, const char* value);
  void set_group_ids(int index, const char* value, size_t size);
  ::std::string* add_group_ids();
  void add_group_ids(const ::std::string& value);
  void add_group_ids(const char* value);
  void add_group_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& group_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_ids();

  // @@protoc_insertion_point(class_scope:server.TGroupsJoin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsJoin> TGroupsJoin_default_instance_;

// -------------------------------------------------------------------

class TGroupsLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupsLeave) */ {
 public:
  TGroupsLeave();
  virtual ~TGroupsLeave();

  TGroupsLeave(const TGroupsLeave& from);

  inline TGroupsLeave& operator=(const TGroupsLeave& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupsLeave& default_instance();

  static const TGroupsLeave* internal_default_instance();

  void Swap(TGroupsLeave* other);

  // implements Message ----------------------------------------------

  inline TGroupsLeave* New() const { return New(NULL); }

  TGroupsLeave* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupsLeave& from);
  void MergeFrom(const TGroupsLeave& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupsLeave* other);
  void UnsafeMergeFrom(const TGroupsLeave& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string group_ids = 1;
  int group_ids_size() const;
  void clear_group_ids();
  static const int kGroupIdsFieldNumber = 1;
  const ::std::string& group_ids(int index) const;
  ::std::string* mutable_group_ids(int index);
  void set_group_ids(int index, const ::std::string& value);
  void set_group_ids(int index, const char* value);
  void set_group_ids(int index, const char* value, size_t size);
  ::std::string* add_group_ids();
  void add_group_ids(const ::std::string& value);
  void add_group_ids(const char* value);
  void add_group_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& group_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_ids();

  // @@protoc_insertion_point(class_scope:server.TGroupsLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupsLeave> TGroupsLeave_default_instance_;

// -------------------------------------------------------------------

class TGroupUsersAdd_GroupUserAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersAdd.GroupUserAdd) */ {
 public:
  TGroupUsersAdd_GroupUserAdd();
  virtual ~TGroupUsersAdd_GroupUserAdd();

  TGroupUsersAdd_GroupUserAdd(const TGroupUsersAdd_GroupUserAdd& from);

  inline TGroupUsersAdd_GroupUserAdd& operator=(const TGroupUsersAdd_GroupUserAdd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsersAdd_GroupUserAdd& default_instance();

  static const TGroupUsersAdd_GroupUserAdd* internal_default_instance();

  void Swap(TGroupUsersAdd_GroupUserAdd* other);

  // implements Message ----------------------------------------------

  inline TGroupUsersAdd_GroupUserAdd* New() const { return New(NULL); }

  TGroupUsersAdd_GroupUserAdd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsersAdd_GroupUserAdd& from);
  void MergeFrom(const TGroupUsersAdd_GroupUserAdd& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsersAdd_GroupUserAdd* other);
  void UnsafeMergeFrom(const TGroupUsersAdd_GroupUserAdd& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:server.TGroupUsersAdd.GroupUserAdd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersAdd_GroupUserAdd> TGroupUsersAdd_GroupUserAdd_default_instance_;

// -------------------------------------------------------------------

class TGroupUsersAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersAdd) */ {
 public:
  TGroupUsersAdd();
  virtual ~TGroupUsersAdd();

  TGroupUsersAdd(const TGroupUsersAdd& from);

  inline TGroupUsersAdd& operator=(const TGroupUsersAdd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsersAdd& default_instance();

  static const TGroupUsersAdd* internal_default_instance();

  void Swap(TGroupUsersAdd* other);

  // implements Message ----------------------------------------------

  inline TGroupUsersAdd* New() const { return New(NULL); }

  TGroupUsersAdd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsersAdd& from);
  void MergeFrom(const TGroupUsersAdd& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsersAdd* other);
  void UnsafeMergeFrom(const TGroupUsersAdd& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGroupUsersAdd_GroupUserAdd GroupUserAdd;

  // accessors -------------------------------------------------------

  // repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
  int group_users_size() const;
  void clear_group_users();
  static const int kGroupUsersFieldNumber = 1;
  const ::server::TGroupUsersAdd_GroupUserAdd& group_users(int index) const;
  ::server::TGroupUsersAdd_GroupUserAdd* mutable_group_users(int index);
  ::server::TGroupUsersAdd_GroupUserAdd* add_group_users();
  ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >*
      mutable_group_users();
  const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >&
      group_users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsersAdd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd > group_users_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersAdd> TGroupUsersAdd_default_instance_;

// -------------------------------------------------------------------

class TGroupUsersKick_GroupUserKick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersKick.GroupUserKick) */ {
 public:
  TGroupUsersKick_GroupUserKick();
  virtual ~TGroupUsersKick_GroupUserKick();

  TGroupUsersKick_GroupUserKick(const TGroupUsersKick_GroupUserKick& from);

  inline TGroupUsersKick_GroupUserKick& operator=(const TGroupUsersKick_GroupUserKick& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsersKick_GroupUserKick& default_instance();

  static const TGroupUsersKick_GroupUserKick* internal_default_instance();

  void Swap(TGroupUsersKick_GroupUserKick* other);

  // implements Message ----------------------------------------------

  inline TGroupUsersKick_GroupUserKick* New() const { return New(NULL); }

  TGroupUsersKick_GroupUserKick* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsersKick_GroupUserKick& from);
  void MergeFrom(const TGroupUsersKick_GroupUserKick& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsersKick_GroupUserKick* other);
  void UnsafeMergeFrom(const TGroupUsersKick_GroupUserKick& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:server.TGroupUsersKick.GroupUserKick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersKick_GroupUserKick> TGroupUsersKick_GroupUserKick_default_instance_;

// -------------------------------------------------------------------

class TGroupUsersKick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersKick) */ {
 public:
  TGroupUsersKick();
  virtual ~TGroupUsersKick();

  TGroupUsersKick(const TGroupUsersKick& from);

  inline TGroupUsersKick& operator=(const TGroupUsersKick& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsersKick& default_instance();

  static const TGroupUsersKick* internal_default_instance();

  void Swap(TGroupUsersKick* other);

  // implements Message ----------------------------------------------

  inline TGroupUsersKick* New() const { return New(NULL); }

  TGroupUsersKick* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsersKick& from);
  void MergeFrom(const TGroupUsersKick& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsersKick* other);
  void UnsafeMergeFrom(const TGroupUsersKick& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGroupUsersKick_GroupUserKick GroupUserKick;

  // accessors -------------------------------------------------------

  // repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
  int group_users_size() const;
  void clear_group_users();
  static const int kGroupUsersFieldNumber = 1;
  const ::server::TGroupUsersKick_GroupUserKick& group_users(int index) const;
  ::server::TGroupUsersKick_GroupUserKick* mutable_group_users(int index);
  ::server::TGroupUsersKick_GroupUserKick* add_group_users();
  ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >*
      mutable_group_users();
  const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >&
      group_users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsersKick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick > group_users_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersKick> TGroupUsersKick_default_instance_;

// -------------------------------------------------------------------

class TGroupUsersPromote_GroupUserPromote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersPromote.GroupUserPromote) */ {
 public:
  TGroupUsersPromote_GroupUserPromote();
  virtual ~TGroupUsersPromote_GroupUserPromote();

  TGroupUsersPromote_GroupUserPromote(const TGroupUsersPromote_GroupUserPromote& from);

  inline TGroupUsersPromote_GroupUserPromote& operator=(const TGroupUsersPromote_GroupUserPromote& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsersPromote_GroupUserPromote& default_instance();

  static const TGroupUsersPromote_GroupUserPromote* internal_default_instance();

  void Swap(TGroupUsersPromote_GroupUserPromote* other);

  // implements Message ----------------------------------------------

  inline TGroupUsersPromote_GroupUserPromote* New() const { return New(NULL); }

  TGroupUsersPromote_GroupUserPromote* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsersPromote_GroupUserPromote& from);
  void MergeFrom(const TGroupUsersPromote_GroupUserPromote& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsersPromote_GroupUserPromote* other);
  void UnsafeMergeFrom(const TGroupUsersPromote_GroupUserPromote& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:server.TGroupUsersPromote.GroupUserPromote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersPromote_GroupUserPromote> TGroupUsersPromote_GroupUserPromote_default_instance_;

// -------------------------------------------------------------------

class TGroupUsersPromote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersPromote) */ {
 public:
  TGroupUsersPromote();
  virtual ~TGroupUsersPromote();

  TGroupUsersPromote(const TGroupUsersPromote& from);

  inline TGroupUsersPromote& operator=(const TGroupUsersPromote& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupUsersPromote& default_instance();

  static const TGroupUsersPromote* internal_default_instance();

  void Swap(TGroupUsersPromote* other);

  // implements Message ----------------------------------------------

  inline TGroupUsersPromote* New() const { return New(NULL); }

  TGroupUsersPromote* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupUsersPromote& from);
  void MergeFrom(const TGroupUsersPromote& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TGroupUsersPromote* other);
  void UnsafeMergeFrom(const TGroupUsersPromote& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TGroupUsersPromote_GroupUserPromote GroupUserPromote;

  // accessors -------------------------------------------------------

  // repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
  int group_users_size() const;
  void clear_group_users();
  static const int kGroupUsersFieldNumber = 1;
  const ::server::TGroupUsersPromote_GroupUserPromote& group_users(int index) const;
  ::server::TGroupUsersPromote_GroupUserPromote* mutable_group_users(int index);
  ::server::TGroupUsersPromote_GroupUserPromote* add_group_users();
  ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >*
      mutable_group_users();
  const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >&
      group_users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsersPromote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote > group_users_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersPromote> TGroupUsersPromote_default_instance_;

// -------------------------------------------------------------------

class TopicId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TopicId) */ {
 public:
  TopicId();
  virtual ~TopicId();

  TopicId(const TopicId& from);

  inline TopicId& operator=(const TopicId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicId& default_instance();

  enum IdCase {
    kDm = 1,
    kRoom = 2,
    kGroupId = 3,
    ID_NOT_SET = 0,
  };

  static const TopicId* internal_default_instance();

  void Swap(TopicId* other);

  // implements Message ----------------------------------------------

  inline TopicId* New() const { return New(NULL); }

  TopicId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicId& from);
  void MergeFrom(const TopicId& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicId* other);
  void UnsafeMergeFrom(const TopicId& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dm = 1;
  private:
  bool has_dm() const;
  public:
  void clear_dm();
  static const int kDmFieldNumber = 1;
  const ::std::string& dm() const;
  void set_dm(const ::std::string& value);
  void set_dm(const char* value);
  void set_dm(const char* value, size_t size);
  ::std::string* mutable_dm();
  ::std::string* release_dm();
  void set_allocated_dm(::std::string* dm);

  // optional string room = 2;
  private:
  bool has_room() const;
  public:
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // optional string group_id = 3;
  private:
  bool has_group_id() const;
  public:
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TopicId)
 private:
  inline void set_has_dm();
  inline void set_has_room();
  inline void set_has_group_id();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr dm_;
    ::google::protobuf::internal::ArenaStringPtr room_;
    ::google::protobuf::internal::ArenaStringPtr group_id_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TopicId> TopicId_default_instance_;

// -------------------------------------------------------------------

class UserPresence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.UserPresence) */ {
 public:
  UserPresence();
  virtual ~UserPresence();

  UserPresence(const UserPresence& from);

  inline UserPresence& operator=(const UserPresence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPresence& default_instance();

  static const UserPresence* internal_default_instance();

  void Swap(UserPresence* other);

  // implements Message ----------------------------------------------

  inline UserPresence* New() const { return New(NULL); }

  UserPresence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPresence& from);
  void MergeFrom(const UserPresence& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserPresence* other);
  void UnsafeMergeFrom(const UserPresence& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string handle = 3;
  void clear_handle();
  static const int kHandleFieldNumber = 3;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // @@protoc_insertion_point(class_scope:server.UserPresence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UserPresence> UserPresence_default_instance_;

// -------------------------------------------------------------------

class TTopicsJoin_TopicJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopicsJoin.TopicJoin) */ {
 public:
  TTopicsJoin_TopicJoin();
  virtual ~TTopicsJoin_TopicJoin();

  TTopicsJoin_TopicJoin(const TTopicsJoin_TopicJoin& from);

  inline TTopicsJoin_TopicJoin& operator=(const TTopicsJoin_TopicJoin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopicsJoin_TopicJoin& default_instance();

  enum IdCase {
    kUserId = 1,
    kRoom = 2,
    kGroupId = 3,
    ID_NOT_SET = 0,
  };

  static const TTopicsJoin_TopicJoin* internal_default_instance();

  void Swap(TTopicsJoin_TopicJoin* other);

  // implements Message ----------------------------------------------

  inline TTopicsJoin_TopicJoin* New() const { return New(NULL); }

  TTopicsJoin_TopicJoin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopicsJoin_TopicJoin& from);
  void MergeFrom(const TTopicsJoin_TopicJoin& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopicsJoin_TopicJoin* other);
  void UnsafeMergeFrom(const TTopicsJoin_TopicJoin& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  private:
  bool has_user_id() const;
  public:
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string room = 2;
  private:
  bool has_room() const;
  public:
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // optional string group_id = 3;
  private:
  bool has_group_id() const;
  public:
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TTopicsJoin.TopicJoin)
 private:
  inline void set_has_user_id();
  inline void set_has_room();
  inline void set_has_group_id();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr room_;
    ::google::protobuf::internal::ArenaStringPtr group_id_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopicsJoin_TopicJoin> TTopicsJoin_TopicJoin_default_instance_;

// -------------------------------------------------------------------

class TTopicsJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopicsJoin) */ {
 public:
  TTopicsJoin();
  virtual ~TTopicsJoin();

  TTopicsJoin(const TTopicsJoin& from);

  inline TTopicsJoin& operator=(const TTopicsJoin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopicsJoin& default_instance();

  static const TTopicsJoin* internal_default_instance();

  void Swap(TTopicsJoin* other);

  // implements Message ----------------------------------------------

  inline TTopicsJoin* New() const { return New(NULL); }

  TTopicsJoin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopicsJoin& from);
  void MergeFrom(const TTopicsJoin& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopicsJoin* other);
  void UnsafeMergeFrom(const TTopicsJoin& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TTopicsJoin_TopicJoin TopicJoin;

  // accessors -------------------------------------------------------

  // repeated .server.TTopicsJoin.TopicJoin joins = 1;
  int joins_size() const;
  void clear_joins();
  static const int kJoinsFieldNumber = 1;
  const ::server::TTopicsJoin_TopicJoin& joins(int index) const;
  ::server::TTopicsJoin_TopicJoin* mutable_joins(int index);
  ::server::TTopicsJoin_TopicJoin* add_joins();
  ::google::protobuf::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >*
      mutable_joins();
  const ::google::protobuf::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >&
      joins() const;

  // @@protoc_insertion_point(class_scope:server.TTopicsJoin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin > joins_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopicsJoin> TTopicsJoin_default_instance_;

// -------------------------------------------------------------------

class TTopics_Topic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopics.Topic) */ {
 public:
  TTopics_Topic();
  virtual ~TTopics_Topic();

  TTopics_Topic(const TTopics_Topic& from);

  inline TTopics_Topic& operator=(const TTopics_Topic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopics_Topic& default_instance();

  static const TTopics_Topic* internal_default_instance();

  void Swap(TTopics_Topic* other);

  // implements Message ----------------------------------------------

  inline TTopics_Topic* New() const { return New(NULL); }

  TTopics_Topic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopics_Topic& from);
  void MergeFrom(const TTopics_Topic& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopics_Topic* other);
  void UnsafeMergeFrom(const TTopics_Topic& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.TopicId topic = 1;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::server::TopicId& topic() const;
  ::server::TopicId* mutable_topic();
  ::server::TopicId* release_topic();
  void set_allocated_topic(::server::TopicId* topic);

  // repeated .server.UserPresence presences = 2;
  int presences_size() const;
  void clear_presences();
  static const int kPresencesFieldNumber = 2;
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* mutable_presences(int index);
  ::server::UserPresence* add_presences();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // optional .server.UserPresence self = 3;
  bool has_self() const;
  void clear_self();
  static const int kSelfFieldNumber = 3;
  const ::server::UserPresence& self() const;
  ::server::UserPresence* mutable_self();
  ::server::UserPresence* release_self();
  void set_allocated_self(::server::UserPresence* self);

  // @@protoc_insertion_point(class_scope:server.TTopics.Topic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > presences_;
  ::server::TopicId* topic_;
  ::server::UserPresence* self_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopics_Topic> TTopics_Topic_default_instance_;

// -------------------------------------------------------------------

class TTopics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopics) */ {
 public:
  TTopics();
  virtual ~TTopics();

  TTopics(const TTopics& from);

  inline TTopics& operator=(const TTopics& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopics& default_instance();

  static const TTopics* internal_default_instance();

  void Swap(TTopics* other);

  // implements Message ----------------------------------------------

  inline TTopics* New() const { return New(NULL); }

  TTopics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopics& from);
  void MergeFrom(const TTopics& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopics* other);
  void UnsafeMergeFrom(const TTopics& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TTopics_Topic Topic;

  // accessors -------------------------------------------------------

  // repeated .server.TTopics.Topic topics = 1;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 1;
  const ::server::TTopics_Topic& topics(int index) const;
  ::server::TTopics_Topic* mutable_topics(int index);
  ::server::TTopics_Topic* add_topics();
  ::google::protobuf::RepeatedPtrField< ::server::TTopics_Topic >*
      mutable_topics();
  const ::google::protobuf::RepeatedPtrField< ::server::TTopics_Topic >&
      topics() const;

  // @@protoc_insertion_point(class_scope:server.TTopics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TTopics_Topic > topics_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopics> TTopics_default_instance_;

// -------------------------------------------------------------------

class TTopicsLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopicsLeave) */ {
 public:
  TTopicsLeave();
  virtual ~TTopicsLeave();

  TTopicsLeave(const TTopicsLeave& from);

  inline TTopicsLeave& operator=(const TTopicsLeave& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopicsLeave& default_instance();

  static const TTopicsLeave* internal_default_instance();

  void Swap(TTopicsLeave* other);

  // implements Message ----------------------------------------------

  inline TTopicsLeave* New() const { return New(NULL); }

  TTopicsLeave* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopicsLeave& from);
  void MergeFrom(const TTopicsLeave& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopicsLeave* other);
  void UnsafeMergeFrom(const TTopicsLeave& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.TopicId topics = 1;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 1;
  const ::server::TopicId& topics(int index) const;
  ::server::TopicId* mutable_topics(int index);
  ::server::TopicId* add_topics();
  ::google::protobuf::RepeatedPtrField< ::server::TopicId >*
      mutable_topics();
  const ::google::protobuf::RepeatedPtrField< ::server::TopicId >&
      topics() const;

  // @@protoc_insertion_point(class_scope:server.TTopicsLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TopicId > topics_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopicsLeave> TTopicsLeave_default_instance_;

// -------------------------------------------------------------------

class TTopicMessageSend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessageSend) */ {
 public:
  TTopicMessageSend();
  virtual ~TTopicMessageSend();

  TTopicMessageSend(const TTopicMessageSend& from);

  inline TTopicMessageSend& operator=(const TTopicMessageSend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopicMessageSend& default_instance();

  static const TTopicMessageSend* internal_default_instance();

  void Swap(TTopicMessageSend* other);

  // implements Message ----------------------------------------------

  inline TTopicMessageSend* New() const { return New(NULL); }

  TTopicMessageSend* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopicMessageSend& from);
  void MergeFrom(const TTopicMessageSend& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopicMessageSend* other);
  void UnsafeMergeFrom(const TTopicMessageSend& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.TopicId topic = 1;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::server::TopicId& topic() const;
  ::server::TopicId* mutable_topic();
  ::server::TopicId* release_topic();
  void set_allocated_topic(::server::TopicId* topic);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:server.TTopicMessageSend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::server::TopicId* topic_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopicMessageSend> TTopicMessageSend_default_instance_;

// -------------------------------------------------------------------

class TTopicMessageAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessageAck) */ {
 public:
  TTopicMessageAck();
  virtual ~TTopicMessageAck();

  TTopicMessageAck(const TTopicMessageAck& from);

  inline TTopicMessageAck& operator=(const TTopicMessageAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopicMessageAck& default_instance();

  static const TTopicMessageAck* internal_default_instance();

  void Swap(TTopicMessageAck* other);

  // implements Message ----------------------------------------------

  inline TTopicMessageAck* New() const { return New(NULL); }

  TTopicMessageAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopicMessageAck& from);
  void MergeFrom(const TTopicMessageAck& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopicMessageAck* other);
  void UnsafeMergeFrom(const TTopicMessageAck& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // optional int64 created_at = 2;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 2;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // optional int64 expires_at = 3;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 3;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // optional string handle = 4;
  void clear_handle();
  static const int kHandleFieldNumber = 4;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // @@protoc_insertion_point(class_scope:server.TTopicMessageAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 expires_at_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopicMessageAck> TTopicMessageAck_default_instance_;

// -------------------------------------------------------------------

class TopicMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TopicMessage) */ {
 public:
  TopicMessage();
  virtual ~TopicMessage();

  TopicMessage(const TopicMessage& from);

  inline TopicMessage& operator=(const TopicMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicMessage& default_instance();

  static const TopicMessage* internal_default_instance();

  void Swap(TopicMessage* other);

  // implements Message ----------------------------------------------

  inline TopicMessage* New() const { return New(NULL); }

  TopicMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicMessage& from);
  void MergeFrom(const TopicMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicMessage* other);
  void UnsafeMergeFrom(const TopicMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.TopicId topic = 1;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::server::TopicId& topic() const;
  ::server::TopicId* mutable_topic();
  ::server::TopicId* release_topic();
  void set_allocated_topic(::server::TopicId* topic);

  // optional string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string message_id = 3;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // optional int64 created_at = 4;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 4;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // optional int64 expires_at = 5;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 5;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // optional string handle = 6;
  void clear_handle();
  static const int kHandleFieldNumber = 6;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // optional int64 type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::int64 type() const;
  void set_type(::google::protobuf::int64 value);

  // optional string data = 8;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:server.TopicMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::server::TopicId* topic_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 expires_at_;
  ::google::protobuf::int64 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TopicMessage> TopicMessage_default_instance_;

// -------------------------------------------------------------------

class TTopicMessagesList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessagesList) */ {
 public:
  TTopicMessagesList();
  virtual ~TTopicMessagesList();

  TTopicMessagesList(const TTopicMessagesList& from);

  inline TTopicMessagesList& operator=(const TTopicMessagesList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopicMessagesList& default_instance();

  enum IdCase {
    kUserId = 1,
    kRoom = 2,
    kGroupId = 3,
    ID_NOT_SET = 0,
  };

  static const TTopicMessagesList* internal_default_instance();

  void Swap(TTopicMessagesList* other);

  // implements Message ----------------------------------------------

  inline TTopicMessagesList* New() const { return New(NULL); }

  TTopicMessagesList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopicMessagesList& from);
  void MergeFrom(const TTopicMessagesList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopicMessagesList* other);
  void UnsafeMergeFrom(const TTopicMessagesList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  private:
  bool has_user_id() const;
  public:
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string room = 2;
  private:
  bool has_room() const;
  public:
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // optional string group_id = 3;
  private:
  bool has_group_id() const;
  public:
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional string cursor = 4;
  void clear_cursor();
  static const int kCursorFieldNumber = 4;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // optional bool forward = 5;
  void clear_forward();
  static const int kForwardFieldNumber = 5;
  bool forward() const;
  void set_forward(bool value);

  // optional int64 limit = 6;
  void clear_limit();
  static const int kLimitFieldNumber = 6;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TTopicMessagesList)
 private:
  inline void set_has_user_id();
  inline void set_has_room();
  inline void set_has_group_id();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  ::google::protobuf::int64 limit_;
  bool forward_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr room_;
    ::google::protobuf::internal::ArenaStringPtr group_id_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopicMessagesList> TTopicMessagesList_default_instance_;

// -------------------------------------------------------------------

class TTopicMessages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessages) */ {
 public:
  TTopicMessages();
  virtual ~TTopicMessages();

  TTopicMessages(const TTopicMessages& from);

  inline TTopicMessages& operator=(const TTopicMessages& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTopicMessages& default_instance();

  static const TTopicMessages* internal_default_instance();

  void Swap(TTopicMessages* other);

  // implements Message ----------------------------------------------

  inline TTopicMessages* New() const { return New(NULL); }

  TTopicMessages* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTopicMessages& from);
  void MergeFrom(const TTopicMessages& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TTopicMessages* other);
  void UnsafeMergeFrom(const TTopicMessages& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.TopicMessage messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::server::TopicMessage& messages(int index) const;
  ::server::TopicMessage* mutable_messages(int index);
  ::server::TopicMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::server::TopicMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::server::TopicMessage >&
      messages() const;

  // optional string cursor = 2;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // @@protoc_insertion_point(class_scope:server.TTopicMessages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TopicMessage > messages_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TTopicMessages> TTopicMessages_default_instance_;

// -------------------------------------------------------------------

class TopicPresence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TopicPresence) */ {
 public:
  TopicPresence();
  virtual ~TopicPresence();

  TopicPresence(const TopicPresence& from);

  inline TopicPresence& operator=(const TopicPresence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicPresence& default_instance();

  static const TopicPresence* internal_default_instance();

  void Swap(TopicPresence* other);

  // implements Message ----------------------------------------------

  inline TopicPresence* New() const { return New(NULL); }

  TopicPresence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicPresence& from);
  void MergeFrom(const TopicPresence& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicPresence* other);
  void UnsafeMergeFrom(const TopicPresence& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.TopicId topic = 1;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::server::TopicId& topic() const;
  ::server::TopicId* mutable_topic();
  ::server::TopicId* release_topic();
  void set_allocated_topic(::server::TopicId* topic);

  // repeated .server.UserPresence joins = 2;
  int joins_size() const;
  void clear_joins();
  static const int kJoinsFieldNumber = 2;
  const ::server::UserPresence& joins(int index) const;
  ::server::UserPresence* mutable_joins(int index);
  ::server::UserPresence* add_joins();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_joins();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      joins() const;

  // repeated .server.UserPresence leaves = 3;
  int leaves_size() const;
  void clear_leaves();
  static const int kLeavesFieldNumber = 3;
  const ::server::UserPresence& leaves(int index) const;
  ::server::UserPresence* mutable_leaves(int index);
  ::server::UserPresence* add_leaves();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_leaves();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      leaves() const;

  // @@protoc_insertion_point(class_scope:server.TopicPresence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > joins_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > leaves_;
  ::server::TopicId* topic_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TopicPresence> TopicPresence_default_instance_;

// -------------------------------------------------------------------

class PropertyPair_StringSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.PropertyPair.StringSet) */ {
 public:
  PropertyPair_StringSet();
  virtual ~PropertyPair_StringSet();

  PropertyPair_StringSet(const PropertyPair_StringSet& from);

  inline PropertyPair_StringSet& operator=(const PropertyPair_StringSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyPair_StringSet& default_instance();

  static const PropertyPair_StringSet* internal_default_instance();

  void Swap(PropertyPair_StringSet* other);

  // implements Message ----------------------------------------------

  inline PropertyPair_StringSet* New() const { return New(NULL); }

  PropertyPair_StringSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyPair_StringSet& from);
  void MergeFrom(const PropertyPair_StringSet& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropertyPair_StringSet* other);
  void UnsafeMergeFrom(const PropertyPair_StringSet& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:server.PropertyPair.StringSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PropertyPair_StringSet> PropertyPair_StringSet_default_instance_;

// -------------------------------------------------------------------

class PropertyPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.PropertyPair) */ {
 public:
  PropertyPair();
  virtual ~PropertyPair();

  PropertyPair(const PropertyPair& from);

  inline PropertyPair& operator=(const PropertyPair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyPair& default_instance();

  enum ValueCase {
    kStringSet = 2,
    kBoolValue = 3,
    kIntValue = 4,
    VALUE_NOT_SET = 0,
  };

  static const PropertyPair* internal_default_instance();

  void Swap(PropertyPair* other);

  // implements Message ----------------------------------------------

  inline PropertyPair* New() const { return New(NULL); }

  PropertyPair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyPair& from);
  void MergeFrom(const PropertyPair& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropertyPair* other);
  void UnsafeMergeFrom(const PropertyPair& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PropertyPair_StringSet StringSet;

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .server.PropertyPair.StringSet stringSet = 2;
  bool has_stringset() const;
  void clear_stringset();
  static const int kStringSetFieldNumber = 2;
  const ::server::PropertyPair_StringSet& stringset() const;
  ::server::PropertyPair_StringSet* mutable_stringset();
  ::server::PropertyPair_StringSet* release_stringset();
  void set_allocated_stringset(::server::PropertyPair_StringSet* stringset);

  // optional bool boolValue = 3;
  private:
  bool has_boolvalue() const;
  public:
  void clear_boolvalue();
  static const int kBoolValueFieldNumber = 3;
  bool boolvalue() const;
  void set_boolvalue(bool value);

  // optional int64 intValue = 4;
  private:
  bool has_intvalue() const;
  public:
  void clear_intvalue();
  static const int kIntValueFieldNumber = 4;
  ::google::protobuf::int64 intvalue() const;
  void set_intvalue(::google::protobuf::int64 value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:server.PropertyPair)
 private:
  inline void set_has_stringset();
  inline void set_has_boolvalue();
  inline void set_has_intvalue();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  union ValueUnion {
    ValueUnion() {}
    ::server::PropertyPair_StringSet* stringset_;
    bool boolvalue_;
    ::google::protobuf::int64 intvalue_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PropertyPair> PropertyPair_default_instance_;

// -------------------------------------------------------------------

class MatchmakeFilter_TermFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeFilter.TermFilter) */ {
 public:
  MatchmakeFilter_TermFilter();
  virtual ~MatchmakeFilter_TermFilter();

  MatchmakeFilter_TermFilter(const MatchmakeFilter_TermFilter& from);

  inline MatchmakeFilter_TermFilter& operator=(const MatchmakeFilter_TermFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchmakeFilter_TermFilter& default_instance();

  static const MatchmakeFilter_TermFilter* internal_default_instance();

  void Swap(MatchmakeFilter_TermFilter* other);

  // implements Message ----------------------------------------------

  inline MatchmakeFilter_TermFilter* New() const { return New(NULL); }

  MatchmakeFilter_TermFilter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchmakeFilter_TermFilter& from);
  void MergeFrom(const MatchmakeFilter_TermFilter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchmakeFilter_TermFilter* other);
  void UnsafeMergeFrom(const MatchmakeFilter_TermFilter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string terms = 1;
  int terms_size() const;
  void clear_terms();
  static const int kTermsFieldNumber = 1;
  const ::std::string& terms(int index) const;
  ::std::string* mutable_terms(int index);
  void set_terms(int index, const ::std::string& value);
  void set_terms(int index, const char* value);
  void set_terms(int index, const char* value, size_t size);
  ::std::string* add_terms();
  void add_terms(const ::std::string& value);
  void add_terms(const char* value);
  void add_terms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& terms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_terms();

  // optional bool matchAllTerms = 2;
  void clear_matchallterms();
  static const int kMatchAllTermsFieldNumber = 2;
  bool matchallterms() const;
  void set_matchallterms(bool value);

  // @@protoc_insertion_point(class_scope:server.MatchmakeFilter.TermFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> terms_;
  bool matchallterms_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchmakeFilter_TermFilter> MatchmakeFilter_TermFilter_default_instance_;

// -------------------------------------------------------------------

class MatchmakeFilter_RangeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeFilter.RangeFilter) */ {
 public:
  MatchmakeFilter_RangeFilter();
  virtual ~MatchmakeFilter_RangeFilter();

  MatchmakeFilter_RangeFilter(const MatchmakeFilter_RangeFilter& from);

  inline MatchmakeFilter_RangeFilter& operator=(const MatchmakeFilter_RangeFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchmakeFilter_RangeFilter& default_instance();

  static const MatchmakeFilter_RangeFilter* internal_default_instance();

  void Swap(MatchmakeFilter_RangeFilter* other);

  // implements Message ----------------------------------------------

  inline MatchmakeFilter_RangeFilter* New() const { return New(NULL); }

  MatchmakeFilter_RangeFilter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchmakeFilter_RangeFilter& from);
  void MergeFrom(const MatchmakeFilter_RangeFilter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchmakeFilter_RangeFilter* other);
  void UnsafeMergeFrom(const MatchmakeFilter_RangeFilter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lower_bound = 1;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 1;
  ::google::protobuf::int64 lower_bound() const;
  void set_lower_bound(::google::protobuf::int64 value);

  // optional int64 upper_bound = 2;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 2;
  ::google::protobuf::int64 upper_bound() const;
  void set_upper_bound(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.MatchmakeFilter.RangeFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 lower_bound_;
  ::google::protobuf::int64 upper_bound_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchmakeFilter_RangeFilter> MatchmakeFilter_RangeFilter_default_instance_;

// -------------------------------------------------------------------

class MatchmakeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeFilter) */ {
 public:
  MatchmakeFilter();
  virtual ~MatchmakeFilter();

  MatchmakeFilter(const MatchmakeFilter& from);

  inline MatchmakeFilter& operator=(const MatchmakeFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchmakeFilter& default_instance();

  enum ValueCase {
    kTerm = 2,
    kRange = 3,
    kCheck = 4,
    VALUE_NOT_SET = 0,
  };

  static const MatchmakeFilter* internal_default_instance();

  void Swap(MatchmakeFilter* other);

  // implements Message ----------------------------------------------

  inline MatchmakeFilter* New() const { return New(NULL); }

  MatchmakeFilter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchmakeFilter& from);
  void MergeFrom(const MatchmakeFilter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchmakeFilter* other);
  void UnsafeMergeFrom(const MatchmakeFilter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MatchmakeFilter_TermFilter TermFilter;
  typedef MatchmakeFilter_RangeFilter RangeFilter;

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .server.MatchmakeFilter.TermFilter term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  const ::server::MatchmakeFilter_TermFilter& term() const;
  ::server::MatchmakeFilter_TermFilter* mutable_term();
  ::server::MatchmakeFilter_TermFilter* release_term();
  void set_allocated_term(::server::MatchmakeFilter_TermFilter* term);

  // optional .server.MatchmakeFilter.RangeFilter range = 3;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 3;
  const ::server::MatchmakeFilter_RangeFilter& range() const;
  ::server::MatchmakeFilter_RangeFilter* mutable_range();
  ::server::MatchmakeFilter_RangeFilter* release_range();
  void set_allocated_range(::server::MatchmakeFilter_RangeFilter* range);

  // optional bool check = 4;
  private:
  bool has_check() const;
  public:
  void clear_check();
  static const int kCheckFieldNumber = 4;
  bool check() const;
  void set_check(bool value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:server.MatchmakeFilter)
 private:
  inline void set_has_term();
  inline void set_has_range();
  inline void set_has_check();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::server::MatchmakeFilter_TermFilter* term_;
    ::server::MatchmakeFilter_RangeFilter* range_;
    bool check_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchmakeFilter> MatchmakeFilter_default_instance_;

// -------------------------------------------------------------------

class TMatchmakeAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatchmakeAdd) */ {
 public:
  TMatchmakeAdd();
  virtual ~TMatchmakeAdd();

  TMatchmakeAdd(const TMatchmakeAdd& from);

  inline TMatchmakeAdd& operator=(const TMatchmakeAdd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatchmakeAdd& default_instance();

  static const TMatchmakeAdd* internal_default_instance();

  void Swap(TMatchmakeAdd* other);

  // implements Message ----------------------------------------------

  inline TMatchmakeAdd* New() const { return New(NULL); }

  TMatchmakeAdd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatchmakeAdd& from);
  void MergeFrom(const TMatchmakeAdd& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatchmakeAdd* other);
  void UnsafeMergeFrom(const TMatchmakeAdd& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 required_count = 1;
  void clear_required_count();
  static const int kRequiredCountFieldNumber = 1;
  ::google::protobuf::int64 required_count() const;
  void set_required_count(::google::protobuf::int64 value);

  // repeated .server.MatchmakeFilter filters = 2;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 2;
  const ::server::MatchmakeFilter& filters(int index) const;
  ::server::MatchmakeFilter* mutable_filters(int index);
  ::server::MatchmakeFilter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >&
      filters() const;

  // repeated .server.PropertyPair properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::server::PropertyPair& properties(int index) const;
  ::server::PropertyPair* mutable_properties(int index);
  ::server::PropertyPair* add_properties();
  ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >&
      properties() const;

  // @@protoc_insertion_point(class_scope:server.TMatchmakeAdd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter > filters_;
  ::google::protobuf::RepeatedPtrField< ::server::PropertyPair > properties_;
  ::google::protobuf::int64 required_count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatchmakeAdd> TMatchmakeAdd_default_instance_;

// -------------------------------------------------------------------

class TMatchmakeTicket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatchmakeTicket) */ {
 public:
  TMatchmakeTicket();
  virtual ~TMatchmakeTicket();

  TMatchmakeTicket(const TMatchmakeTicket& from);

  inline TMatchmakeTicket& operator=(const TMatchmakeTicket& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatchmakeTicket& default_instance();

  static const TMatchmakeTicket* internal_default_instance();

  void Swap(TMatchmakeTicket* other);

  // implements Message ----------------------------------------------

  inline TMatchmakeTicket* New() const { return New(NULL); }

  TMatchmakeTicket* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatchmakeTicket& from);
  void MergeFrom(const TMatchmakeTicket& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatchmakeTicket* other);
  void UnsafeMergeFrom(const TMatchmakeTicket& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:server.TMatchmakeTicket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatchmakeTicket> TMatchmakeTicket_default_instance_;

// -------------------------------------------------------------------

class TMatchmakeRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatchmakeRemove) */ {
 public:
  TMatchmakeRemove();
  virtual ~TMatchmakeRemove();

  TMatchmakeRemove(const TMatchmakeRemove& from);

  inline TMatchmakeRemove& operator=(const TMatchmakeRemove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatchmakeRemove& default_instance();

  static const TMatchmakeRemove* internal_default_instance();

  void Swap(TMatchmakeRemove* other);

  // implements Message ----------------------------------------------

  inline TMatchmakeRemove* New() const { return New(NULL); }

  TMatchmakeRemove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatchmakeRemove& from);
  void MergeFrom(const TMatchmakeRemove& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatchmakeRemove* other);
  void UnsafeMergeFrom(const TMatchmakeRemove& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:server.TMatchmakeRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatchmakeRemove> TMatchmakeRemove_default_instance_;

// -------------------------------------------------------------------

class MatchmakeMatched_UserProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeMatched.UserProperty) */ {
 public:
  MatchmakeMatched_UserProperty();
  virtual ~MatchmakeMatched_UserProperty();

  MatchmakeMatched_UserProperty(const MatchmakeMatched_UserProperty& from);

  inline MatchmakeMatched_UserProperty& operator=(const MatchmakeMatched_UserProperty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchmakeMatched_UserProperty& default_instance();

  static const MatchmakeMatched_UserProperty* internal_default_instance();

  void Swap(MatchmakeMatched_UserProperty* other);

  // implements Message ----------------------------------------------

  inline MatchmakeMatched_UserProperty* New() const { return New(NULL); }

  MatchmakeMatched_UserProperty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchmakeMatched_UserProperty& from);
  void MergeFrom(const MatchmakeMatched_UserProperty& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchmakeMatched_UserProperty* other);
  void UnsafeMergeFrom(const MatchmakeMatched_UserProperty& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // repeated .server.PropertyPair properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  const ::server::PropertyPair& properties(int index) const;
  ::server::PropertyPair* mutable_properties(int index);
  ::server::PropertyPair* add_properties();
  ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >&
      properties() const;

  // repeated .server.MatchmakeFilter filters = 3;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 3;
  const ::server::MatchmakeFilter& filters(int index) const;
  ::server::MatchmakeFilter* mutable_filters(int index);
  ::server::MatchmakeFilter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:server.MatchmakeMatched.UserProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::PropertyPair > properties_;
  ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter > filters_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchmakeMatched_UserProperty> MatchmakeMatched_UserProperty_default_instance_;

// -------------------------------------------------------------------

class MatchmakeMatched : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeMatched) */ {
 public:
  MatchmakeMatched();
  virtual ~MatchmakeMatched();

  MatchmakeMatched(const MatchmakeMatched& from);

  inline MatchmakeMatched& operator=(const MatchmakeMatched& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchmakeMatched& default_instance();

  static const MatchmakeMatched* internal_default_instance();

  void Swap(MatchmakeMatched* other);

  // implements Message ----------------------------------------------

  inline MatchmakeMatched* New() const { return New(NULL); }

  MatchmakeMatched* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchmakeMatched& from);
  void MergeFrom(const MatchmakeMatched& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchmakeMatched* other);
  void UnsafeMergeFrom(const MatchmakeMatched& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MatchmakeMatched_UserProperty UserProperty;

  // accessors -------------------------------------------------------

  // optional string ticket = 1;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // repeated .server.UserPresence presences = 3;
  int presences_size() const;
  void clear_presences();
  static const int kPresencesFieldNumber = 3;
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* mutable_presences(int index);
  ::server::UserPresence* add_presences();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // optional .server.UserPresence self = 4;
  bool has_self() const;
  void clear_self();
  static const int kSelfFieldNumber = 4;
  const ::server::UserPresence& self() const;
  ::server::UserPresence* mutable_self();
  ::server::UserPresence* release_self();
  void set_allocated_self(::server::UserPresence* self);

  // repeated .server.MatchmakeMatched.UserProperty properties = 5;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  const ::server::MatchmakeMatched_UserProperty& properties(int index) const;
  ::server::MatchmakeMatched_UserProperty* mutable_properties(int index);
  ::server::MatchmakeMatched_UserProperty* add_properties();
  ::google::protobuf::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:server.MatchmakeMatched)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > presences_;
  ::google::protobuf::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty > properties_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::server::UserPresence* self_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchmakeMatched> MatchmakeMatched_default_instance_;

// -------------------------------------------------------------------

class Match : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Match) */ {
 public:
  Match();
  virtual ~Match();

  Match(const Match& from);

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Match& default_instance();

  static const Match* internal_default_instance();

  void Swap(Match* other);

  // implements Message ----------------------------------------------

  inline Match* New() const { return New(NULL); }

  Match* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Match* other);
  void UnsafeMergeFrom(const Match& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string match_id = 1;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // repeated .server.UserPresence presences = 2;
  int presences_size() const;
  void clear_presences();
  static const int kPresencesFieldNumber = 2;
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* mutable_presences(int index);
  ::server::UserPresence* add_presences();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // optional .server.UserPresence self = 3;
  bool has_self() const;
  void clear_self();
  static const int kSelfFieldNumber = 3;
  const ::server::UserPresence& self() const;
  ::server::UserPresence* mutable_self();
  ::server::UserPresence* release_self();
  void set_allocated_self(::server::UserPresence* self);

  // @@protoc_insertion_point(class_scope:server.Match)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > presences_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::server::UserPresence* self_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Match> Match_default_instance_;

// -------------------------------------------------------------------

class MatchPresence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchPresence) */ {
 public:
  MatchPresence();
  virtual ~MatchPresence();

  MatchPresence(const MatchPresence& from);

  inline MatchPresence& operator=(const MatchPresence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchPresence& default_instance();

  static const MatchPresence* internal_default_instance();

  void Swap(MatchPresence* other);

  // implements Message ----------------------------------------------

  inline MatchPresence* New() const { return New(NULL); }

  MatchPresence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchPresence& from);
  void MergeFrom(const MatchPresence& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchPresence* other);
  void UnsafeMergeFrom(const MatchPresence& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string match_id = 1;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // repeated .server.UserPresence joins = 2;
  int joins_size() const;
  void clear_joins();
  static const int kJoinsFieldNumber = 2;
  const ::server::UserPresence& joins(int index) const;
  ::server::UserPresence* mutable_joins(int index);
  ::server::UserPresence* add_joins();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_joins();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      joins() const;

  // repeated .server.UserPresence leaves = 3;
  int leaves_size() const;
  void clear_leaves();
  static const int kLeavesFieldNumber = 3;
  const ::server::UserPresence& leaves(int index) const;
  ::server::UserPresence* mutable_leaves(int index);
  ::server::UserPresence* add_leaves();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_leaves();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      leaves() const;

  // @@protoc_insertion_point(class_scope:server.MatchPresence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > joins_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > leaves_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchPresence> MatchPresence_default_instance_;

// -------------------------------------------------------------------

class TMatchCreate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatchCreate) */ {
 public:
  TMatchCreate();
  virtual ~TMatchCreate();

  TMatchCreate(const TMatchCreate& from);

  inline TMatchCreate& operator=(const TMatchCreate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatchCreate& default_instance();

  static const TMatchCreate* internal_default_instance();

  void Swap(TMatchCreate* other);

  // implements Message ----------------------------------------------

  inline TMatchCreate* New() const { return New(NULL); }

  TMatchCreate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatchCreate& from);
  void MergeFrom(const TMatchCreate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatchCreate* other);
  void UnsafeMergeFrom(const TMatchCreate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TMatchCreate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatchCreate> TMatchCreate_default_instance_;

// -------------------------------------------------------------------

class TMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatch) */ {
 public:
  TMatch();
  virtual ~TMatch();

  TMatch(const TMatch& from);

  inline TMatch& operator=(const TMatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatch& default_instance();

  static const TMatch* internal_default_instance();

  void Swap(TMatch* other);

  // implements Message ----------------------------------------------

  inline TMatch* New() const { return New(NULL); }

  TMatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatch& from);
  void MergeFrom(const TMatch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatch* other);
  void UnsafeMergeFrom(const TMatch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server.Match match = 1;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::server::Match& match() const;
  ::server::Match* mutable_match();
  ::server::Match* release_match();
  void set_allocated_match(::server::Match* match);

  // @@protoc_insertion_point(class_scope:server.TMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server::Match* match_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatch> TMatch_default_instance_;

// -------------------------------------------------------------------

class TMatchesJoin_MatchJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatchesJoin.MatchJoin) */ {
 public:
  TMatchesJoin_MatchJoin();
  virtual ~TMatchesJoin_MatchJoin();

  TMatchesJoin_MatchJoin(const TMatchesJoin_MatchJoin& from);

  inline TMatchesJoin_MatchJoin& operator=(const TMatchesJoin_MatchJoin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatchesJoin_MatchJoin& default_instance();

  enum IdCase {
    kMatchId = 1,
    kToken = 2,
    ID_NOT_SET = 0,
  };

  static const TMatchesJoin_MatchJoin* internal_default_instance();

  void Swap(TMatchesJoin_MatchJoin* other);

  // implements Message ----------------------------------------------

  inline TMatchesJoin_MatchJoin* New() const { return New(NULL); }

  TMatchesJoin_MatchJoin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatchesJoin_MatchJoin& from);
  void MergeFrom(const TMatchesJoin_MatchJoin& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatchesJoin_MatchJoin* other);
  void UnsafeMergeFrom(const TMatchesJoin_MatchJoin& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string match_id = 1;
  private:
  bool has_match_id() const;
  public:
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional string token = 2;
  private:
  bool has_token() const;
  public:
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TMatchesJoin.MatchJoin)
 private:
  inline void set_has_match_id();
  inline void set_has_token();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr match_id_;
    ::google::protobuf::internal::ArenaStringPtr token_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatchesJoin_MatchJoin> TMatchesJoin_MatchJoin_default_instance_;

// -------------------------------------------------------------------

class TMatchesJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatchesJoin) */ {
 public:
  TMatchesJoin();
  virtual ~TMatchesJoin();

  TMatchesJoin(const TMatchesJoin& from);

  inline TMatchesJoin& operator=(const TMatchesJoin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatchesJoin& default_instance();

  static const TMatchesJoin* internal_default_instance();

  void Swap(TMatchesJoin* other);

  // implements Message ----------------------------------------------

  inline TMatchesJoin* New() const { return New(NULL); }

  TMatchesJoin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatchesJoin& from);
  void MergeFrom(const TMatchesJoin& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatchesJoin* other);
  void UnsafeMergeFrom(const TMatchesJoin& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TMatchesJoin_MatchJoin MatchJoin;

  // accessors -------------------------------------------------------

  // repeated .server.TMatchesJoin.MatchJoin matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  const ::server::TMatchesJoin_MatchJoin& matches(int index) const;
  ::server::TMatchesJoin_MatchJoin* mutable_matches(int index);
  ::server::TMatchesJoin_MatchJoin* add_matches();
  ::google::protobuf::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >&
      matches() const;

  // @@protoc_insertion_point(class_scope:server.TMatchesJoin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin > matches_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatchesJoin> TMatchesJoin_default_instance_;

// -------------------------------------------------------------------

class TMatches : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatches) */ {
 public:
  TMatches();
  virtual ~TMatches();

  TMatches(const TMatches& from);

  inline TMatches& operator=(const TMatches& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatches& default_instance();

  static const TMatches* internal_default_instance();

  void Swap(TMatches* other);

  // implements Message ----------------------------------------------

  inline TMatches* New() const { return New(NULL); }

  TMatches* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatches& from);
  void MergeFrom(const TMatches& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatches* other);
  void UnsafeMergeFrom(const TMatches& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.Match matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  const ::server::Match& matches(int index) const;
  ::server::Match* mutable_matches(int index);
  ::server::Match* add_matches();
  ::google::protobuf::RepeatedPtrField< ::server::Match >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::server::Match >&
      matches() const;

  // @@protoc_insertion_point(class_scope:server.TMatches)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::Match > matches_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatches> TMatches_default_instance_;

// -------------------------------------------------------------------

class MatchDataSend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchDataSend) */ {
 public:
  MatchDataSend();
  virtual ~MatchDataSend();

  MatchDataSend(const MatchDataSend& from);

  inline MatchDataSend& operator=(const MatchDataSend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchDataSend& default_instance();

  static const MatchDataSend* internal_default_instance();

  void Swap(MatchDataSend* other);

  // implements Message ----------------------------------------------

  inline MatchDataSend* New() const { return New(NULL); }

  MatchDataSend* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchDataSend& from);
  void MergeFrom(const MatchDataSend& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchDataSend* other);
  void UnsafeMergeFrom(const MatchDataSend& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string match_id = 1;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional int64 op_code = 2;
  void clear_op_code();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::int64 op_code() const;
  void set_op_code(::google::protobuf::int64 value);

  // optional bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // repeated .server.UserPresence presences = 4;
  int presences_size() const;
  void clear_presences();
  static const int kPresencesFieldNumber = 4;
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* mutable_presences(int index);
  ::server::UserPresence* add_presences();
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // @@protoc_insertion_point(class_scope:server.MatchDataSend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::UserPresence > presences_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 op_code_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchDataSend> MatchDataSend_default_instance_;

// -------------------------------------------------------------------

class MatchData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.MatchData) */ {
 public:
  MatchData();
  virtual ~MatchData();

  MatchData(const MatchData& from);

  inline MatchData& operator=(const MatchData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchData& default_instance();

  static const MatchData* internal_default_instance();

  void Swap(MatchData* other);

  // implements Message ----------------------------------------------

  inline MatchData* New() const { return New(NULL); }

  MatchData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchData& from);
  void MergeFrom(const MatchData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchData* other);
  void UnsafeMergeFrom(const MatchData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string match_id = 1;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  const ::std::string& match_id() const;
  void set_match_id(const ::std::string& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  ::std::string* mutable_match_id();
  ::std::string* release_match_id();
  void set_allocated_match_id(::std::string* match_id);

  // optional .server.UserPresence presence = 2;
  bool has_presence() const;
  void clear_presence();
  static const int kPresenceFieldNumber = 2;
  const ::server::UserPresence& presence() const;
  ::server::UserPresence* mutable_presence();
  ::server::UserPresence* release_presence();
  void set_allocated_presence(::server::UserPresence* presence);

  // optional int64 op_code = 3;
  void clear_op_code();
  static const int kOpCodeFieldNumber = 3;
  ::google::protobuf::int64 op_code() const;
  void set_op_code(::google::protobuf::int64 value);

  // optional bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:server.MatchData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::server::UserPresence* presence_;
  ::google::protobuf::int64 op_code_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchData> MatchData_default_instance_;

// -------------------------------------------------------------------

class TMatchesLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TMatchesLeave) */ {
 public:
  TMatchesLeave();
  virtual ~TMatchesLeave();

  TMatchesLeave(const TMatchesLeave& from);

  inline TMatchesLeave& operator=(const TMatchesLeave& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMatchesLeave& default_instance();

  static const TMatchesLeave* internal_default_instance();

  void Swap(TMatchesLeave* other);

  // implements Message ----------------------------------------------

  inline TMatchesLeave* New() const { return New(NULL); }

  TMatchesLeave* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMatchesLeave& from);
  void MergeFrom(const TMatchesLeave& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TMatchesLeave* other);
  void UnsafeMergeFrom(const TMatchesLeave& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string match_ids = 1;
  int match_ids_size() const;
  void clear_match_ids();
  static const int kMatchIdsFieldNumber = 1;
  const ::std::string& match_ids(int index) const;
  ::std::string* mutable_match_ids(int index);
  void set_match_ids(int index, const ::std::string& value);
  void set_match_ids(int index, const char* value);
  void set_match_ids(int index, const char* value, size_t size);
  ::std::string* add_match_ids();
  void add_match_ids(const ::std::string& value);
  void add_match_ids(const char* value);
  void add_match_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& match_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_match_ids();

  // @@protoc_insertion_point(class_scope:server.TMatchesLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> match_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TMatchesLeave> TMatchesLeave_default_instance_;

// -------------------------------------------------------------------

class TStorageList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageList) */ {
 public:
  TStorageList();
  virtual ~TStorageList();

  TStorageList(const TStorageList& from);

  inline TStorageList& operator=(const TStorageList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageList& default_instance();

  static const TStorageList* internal_default_instance();

  void Swap(TStorageList* other);

  // implements Message ----------------------------------------------

  inline TStorageList* New() const { return New(NULL); }

  TStorageList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageList& from);
  void MergeFrom(const TStorageList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageList* other);
  void UnsafeMergeFrom(const TStorageList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string bucket = 2;
  void clear_bucket();
  static const int kBucketFieldNumber = 2;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // optional string collection = 3;
  void clear_collection();
  static const int kCollectionFieldNumber = 3;
  const ::std::string& collection() const;
  void set_collection(const ::std::string& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  ::std::string* mutable_collection();
  ::std::string* release_collection();
  void set_allocated_collection(::std::string* collection);

  // optional int64 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // optional string cursor = 5;
  void clear_cursor();
  static const int kCursorFieldNumber = 5;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // @@protoc_insertion_point(class_scope:server.TStorageList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr collection_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  ::google::protobuf::int64 limit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageList> TStorageList_default_instance_;

// -------------------------------------------------------------------

class TStorageFetch_StorageKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageFetch.StorageKey) */ {
 public:
  TStorageFetch_StorageKey();
  virtual ~TStorageFetch_StorageKey();

  TStorageFetch_StorageKey(const TStorageFetch_StorageKey& from);

  inline TStorageFetch_StorageKey& operator=(const TStorageFetch_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageFetch_StorageKey& default_instance();

  static const TStorageFetch_StorageKey* internal_default_instance();

  void Swap(TStorageFetch_StorageKey* other);

  // implements Message ----------------------------------------------

  inline TStorageFetch_StorageKey* New() const { return New(NULL); }

  TStorageFetch_StorageKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageFetch_StorageKey& from);
  void MergeFrom(const TStorageFetch_StorageKey& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageFetch_StorageKey* other);
  void UnsafeMergeFrom(const TStorageFetch_StorageKey& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // optional string collection = 2;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  const ::std::string& collection() const;
  void set_collection(const ::std::string& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  ::std::string* mutable_collection();
  ::std::string* release_collection();
  void set_allocated_collection(::std::string* collection);

  // optional string record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // optional string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:server.TStorageFetch.StorageKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr collection_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageFetch_StorageKey> TStorageFetch_StorageKey_default_instance_;

// -------------------------------------------------------------------

class TStorageFetch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageFetch) */ {
 public:
  TStorageFetch();
  virtual ~TStorageFetch();

  TStorageFetch(const TStorageFetch& from);

  inline TStorageFetch& operator=(const TStorageFetch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageFetch& default_instance();

  static const TStorageFetch* internal_default_instance();

  void Swap(TStorageFetch* other);

  // implements Message ----------------------------------------------

  inline TStorageFetch* New() const { return New(NULL); }

  TStorageFetch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageFetch& from);
  void MergeFrom(const TStorageFetch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageFetch* other);
  void UnsafeMergeFrom(const TStorageFetch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageFetch_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  // repeated .server.TStorageFetch.StorageKey keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::server::TStorageFetch_StorageKey& keys(int index) const;
  ::server::TStorageFetch_StorageKey* mutable_keys(int index);
  ::server::TStorageFetch_StorageKey* add_keys();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:server.TStorageFetch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey > keys_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageFetch> TStorageFetch_default_instance_;

// -------------------------------------------------------------------

class TStorageData_StorageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageData.StorageData) */ {
 public:
  TStorageData_StorageData();
  virtual ~TStorageData_StorageData();

  TStorageData_StorageData(const TStorageData_StorageData& from);

  inline TStorageData_StorageData& operator=(const TStorageData_StorageData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageData_StorageData& default_instance();

  static const TStorageData_StorageData* internal_default_instance();

  void Swap(TStorageData_StorageData* other);

  // implements Message ----------------------------------------------

  inline TStorageData_StorageData* New() const { return New(NULL); }

  TStorageData_StorageData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageData_StorageData& from);
  void MergeFrom(const TStorageData_StorageData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageData_StorageData* other);
  void UnsafeMergeFrom(const TStorageData_StorageData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // optional string collection = 2;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  const ::std::string& collection() const;
  void set_collection(const ::std::string& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  ::std::string* mutable_collection();
  ::std::string* release_collection();
  void set_allocated_collection(::std::string* collection);

  // optional string record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // optional string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional int32 permission_read = 7;
  void clear_permission_read();
  static const int kPermissionReadFieldNumber = 7;
  ::google::protobuf::int32 permission_read() const;
  void set_permission_read(::google::protobuf::int32 value);

  // optional int32 permission_write = 8;
  void clear_permission_write();
  static const int kPermissionWriteFieldNumber = 8;
  ::google::protobuf::int32 permission_write() const;
  void set_permission_write(::google::protobuf::int32 value);

  // optional int64 created_at = 9;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 9;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // optional int64 updated_at = 10;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 10;
  ::google::protobuf::int64 updated_at() const;
  void set_updated_at(::google::protobuf::int64 value);

  // optional int64 expires_at = 11;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 11;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.TStorageData.StorageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr collection_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int32 permission_read_;
  ::google::protobuf::int32 permission_write_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 updated_at_;
  ::google::protobuf::int64 expires_at_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageData_StorageData> TStorageData_StorageData_default_instance_;

// -------------------------------------------------------------------

class TStorageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageData) */ {
 public:
  TStorageData();
  virtual ~TStorageData();

  TStorageData(const TStorageData& from);

  inline TStorageData& operator=(const TStorageData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageData& default_instance();

  static const TStorageData* internal_default_instance();

  void Swap(TStorageData* other);

  // implements Message ----------------------------------------------

  inline TStorageData* New() const { return New(NULL); }

  TStorageData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageData& from);
  void MergeFrom(const TStorageData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageData* other);
  void UnsafeMergeFrom(const TStorageData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageData_StorageData StorageData;

  // accessors -------------------------------------------------------

  // repeated .server.TStorageData.StorageData data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::server::TStorageData_StorageData& data(int index) const;
  ::server::TStorageData_StorageData* mutable_data(int index);
  ::server::TStorageData_StorageData* add_data();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >&
      data() const;

  // optional string cursor = 2;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // @@protoc_insertion_point(class_scope:server.TStorageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData > data_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageData> TStorageData_default_instance_;

// -------------------------------------------------------------------

class TStorageWrite_StorageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageWrite.StorageData) */ {
 public:
  TStorageWrite_StorageData();
  virtual ~TStorageWrite_StorageData();

  TStorageWrite_StorageData(const TStorageWrite_StorageData& from);

  inline TStorageWrite_StorageData& operator=(const TStorageWrite_StorageData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageWrite_StorageData& default_instance();

  static const TStorageWrite_StorageData* internal_default_instance();

  void Swap(TStorageWrite_StorageData* other);

  // implements Message ----------------------------------------------

  inline TStorageWrite_StorageData* New() const { return New(NULL); }

  TStorageWrite_StorageData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageWrite_StorageData& from);
  void MergeFrom(const TStorageWrite_StorageData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageWrite_StorageData* other);
  void UnsafeMergeFrom(const TStorageWrite_StorageData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // optional string collection = 2;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  const ::std::string& collection() const;
  void set_collection(const ::std::string& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  ::std::string* mutable_collection();
  ::std::string* release_collection();
  void set_allocated_collection(::std::string* collection);

  // optional string record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // optional string value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional int32 permission_read = 6;
  void clear_permission_read();
  static const int kPermissionReadFieldNumber = 6;
  ::google::protobuf::int32 permission_read() const;
  void set_permission_read(::google::protobuf::int32 value);

  // optional int32 permission_write = 7;
  void clear_permission_write();
  static const int kPermissionWriteFieldNumber = 7;
  ::google::protobuf::int32 permission_write() const;
  void set_permission_write(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server.TStorageWrite.StorageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr collection_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int32 permission_read_;
  ::google::protobuf::int32 permission_write_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageWrite_StorageData> TStorageWrite_StorageData_default_instance_;

// -------------------------------------------------------------------

class TStorageWrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageWrite) */ {
 public:
  TStorageWrite();
  virtual ~TStorageWrite();

  TStorageWrite(const TStorageWrite& from);

  inline TStorageWrite& operator=(const TStorageWrite& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageWrite& default_instance();

  static const TStorageWrite* internal_default_instance();

  void Swap(TStorageWrite* other);

  // implements Message ----------------------------------------------

  inline TStorageWrite* New() const { return New(NULL); }

  TStorageWrite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageWrite& from);
  void MergeFrom(const TStorageWrite& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageWrite* other);
  void UnsafeMergeFrom(const TStorageWrite& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageWrite_StorageData StorageData;

  // accessors -------------------------------------------------------

  // repeated .server.TStorageWrite.StorageData data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::server::TStorageWrite_StorageData& data(int index) const;
  ::server::TStorageWrite_StorageData* mutable_data(int index);
  ::server::TStorageWrite_StorageData* add_data();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >&
      data() const;

  // @@protoc_insertion_point(class_scope:server.TStorageWrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData > data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageWrite> TStorageWrite_default_instance_;

// -------------------------------------------------------------------

class TStorageUpdate_StorageUpdate_UpdateOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate.StorageUpdate.UpdateOp) */ {
 public:
  TStorageUpdate_StorageUpdate_UpdateOp();
  virtual ~TStorageUpdate_StorageUpdate_UpdateOp();

  TStorageUpdate_StorageUpdate_UpdateOp(const TStorageUpdate_StorageUpdate_UpdateOp& from);

  inline TStorageUpdate_StorageUpdate_UpdateOp& operator=(const TStorageUpdate_StorageUpdate_UpdateOp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageUpdate_StorageUpdate_UpdateOp& default_instance();

  static const TStorageUpdate_StorageUpdate_UpdateOp* internal_default_instance();

  void Swap(TStorageUpdate_StorageUpdate_UpdateOp* other);

  // implements Message ----------------------------------------------

  inline TStorageUpdate_StorageUpdate_UpdateOp* New() const { return New(NULL); }

  TStorageUpdate_StorageUpdate_UpdateOp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from);
  void MergeFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageUpdate_StorageUpdate_UpdateOp* other);
  void UnsafeMergeFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode UpdateOpCode;
  static const UpdateOpCode ADD =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_ADD;
  static const UpdateOpCode APPEND =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_APPEND;
  static const UpdateOpCode COPY =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COPY;
  static const UpdateOpCode INCR =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INCR;
  static const UpdateOpCode INIT =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INIT;
  static const UpdateOpCode MERGE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MERGE;
  static const UpdateOpCode MOVE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MOVE;
  static const UpdateOpCode PATCH =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_PATCH;
  static const UpdateOpCode REMOVE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REMOVE;
  static const UpdateOpCode REPLACE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REPLACE;
  static const UpdateOpCode TEST =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TEST;
  static const UpdateOpCode COMPARE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COMPARE;
  static inline bool UpdateOpCode_IsValid(int value) {
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_IsValid(value);
  }
  static const UpdateOpCode UpdateOpCode_MIN =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MIN;
  static const UpdateOpCode UpdateOpCode_MAX =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MAX;
  static const int UpdateOpCode_ARRAYSIZE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateOpCode_descriptor() {
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor();
  }
  static inline const ::std::string& UpdateOpCode_Name(UpdateOpCode value) {
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Name(value);
  }
  static inline bool UpdateOpCode_Parse(const ::std::string& name,
      UpdateOpCode* value) {
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string from = 4;
  void clear_from();
  static const int kFromFieldNumber = 4;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional bool conditional = 5;
  void clear_conditional();
  static const int kConditionalFieldNumber = 5;
  bool conditional() const;
  void set_conditional(bool value);

  // optional int64 assert = 6;
  void clear_assert();
  static const int kAssertFieldNumber = 6;
  ::google::protobuf::int64 assert() const;
  void set_assert(::google::protobuf::int64 value);

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
  int ops_size() const;
  void clear_ops();
  static const int kOpsFieldNumber = 7;
  const ::server::TStorageUpdate_StorageUpdate_UpdateOp& ops(int index) const;
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* mutable_ops(int index);
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* add_ops();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
      mutable_ops();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
      ops() const;

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate.StorageUpdate.UpdateOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp > ops_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::int32 op_;
  bool conditional_;
  ::google::protobuf::int64 assert_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate_UpdateOp> TStorageUpdate_StorageUpdate_UpdateOp_default_instance_;

// -------------------------------------------------------------------

class TStorageUpdate_StorageUpdate_StorageKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate.StorageUpdate.StorageKey) */ {
 public:
  TStorageUpdate_StorageUpdate_StorageKey();
  virtual ~TStorageUpdate_StorageUpdate_StorageKey();

  TStorageUpdate_StorageUpdate_StorageKey(const TStorageUpdate_StorageUpdate_StorageKey& from);

  inline TStorageUpdate_StorageUpdate_StorageKey& operator=(const TStorageUpdate_StorageUpdate_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageUpdate_StorageUpdate_StorageKey& default_instance();

  static const TStorageUpdate_StorageUpdate_StorageKey* internal_default_instance();

  void Swap(TStorageUpdate_StorageUpdate_StorageKey* other);

  // implements Message ----------------------------------------------

  inline TStorageUpdate_StorageUpdate_StorageKey* New() const { return New(NULL); }

  TStorageUpdate_StorageUpdate_StorageKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageUpdate_StorageUpdate_StorageKey& from);
  void MergeFrom(const TStorageUpdate_StorageUpdate_StorageKey& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageUpdate_StorageUpdate_StorageKey* other);
  void UnsafeMergeFrom(const TStorageUpdate_StorageUpdate_StorageKey& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // optional string collection = 2;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  const ::std::string& collection() const;
  void set_collection(const ::std::string& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  ::std::string* mutable_collection();
  ::std::string* release_collection();
  void set_allocated_collection(::std::string* collection);

  // optional string record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // optional string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate.StorageUpdate.StorageKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr collection_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate_StorageKey> TStorageUpdate_StorageUpdate_StorageKey_default_instance_;

// -------------------------------------------------------------------

class TStorageUpdate_StorageUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate.StorageUpdate) */ {
 public:
  TStorageUpdate_StorageUpdate();
  virtual ~TStorageUpdate_StorageUpdate();

  TStorageUpdate_StorageUpdate(const TStorageUpdate_StorageUpdate& from);

  inline TStorageUpdate_StorageUpdate& operator=(const TStorageUpdate_StorageUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageUpdate_StorageUpdate& default_instance();

  static const TStorageUpdate_StorageUpdate* internal_default_instance();

  void Swap(TStorageUpdate_StorageUpdate* other);

  // implements Message ----------------------------------------------

  inline TStorageUpdate_StorageUpdate* New() const { return New(NULL); }

  TStorageUpdate_StorageUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageUpdate_StorageUpdate& from);
  void MergeFrom(const TStorageUpdate_StorageUpdate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageUpdate_StorageUpdate* other);
  void UnsafeMergeFrom(const TStorageUpdate_StorageUpdate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageUpdate_StorageUpdate_UpdateOp UpdateOp;
  typedef TStorageUpdate_StorageUpdate_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  // optional .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::server::TStorageUpdate_StorageUpdate_StorageKey& key() const;
  ::server::TStorageUpdate_StorageUpdate_StorageKey* mutable_key();
  ::server::TStorageUpdate_StorageUpdate_StorageKey* release_key();
  void set_allocated_key(::server::TStorageUpdate_StorageUpdate_StorageKey* key);

  // optional int32 permission_read = 2;
  void clear_permission_read();
  static const int kPermissionReadFieldNumber = 2;
  ::google::protobuf::int32 permission_read() const;
  void set_permission_read(::google::protobuf::int32 value);

  // optional int32 permission_write = 3;
  void clear_permission_write();
  static const int kPermissionWriteFieldNumber = 3;
  ::google::protobuf::int32 permission_write() const;
  void set_permission_write(::google::protobuf::int32 value);

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
  int ops_size() const;
  void clear_ops();
  static const int kOpsFieldNumber = 4;
  const ::server::TStorageUpdate_StorageUpdate_UpdateOp& ops(int index) const;
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* mutable_ops(int index);
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* add_ops();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
      mutable_ops();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
      ops() const;

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate.StorageUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp > ops_;
  ::server::TStorageUpdate_StorageUpdate_StorageKey* key_;
  ::google::protobuf::int32 permission_read_;
  ::google::protobuf::int32 permission_write_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate> TStorageUpdate_StorageUpdate_default_instance_;

// -------------------------------------------------------------------

class TStorageUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate) */ {
 public:
  TStorageUpdate();
  virtual ~TStorageUpdate();

  TStorageUpdate(const TStorageUpdate& from);

  inline TStorageUpdate& operator=(const TStorageUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageUpdate& default_instance();

  static const TStorageUpdate* internal_default_instance();

  void Swap(TStorageUpdate* other);

  // implements Message ----------------------------------------------

  inline TStorageUpdate* New() const { return New(NULL); }

  TStorageUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageUpdate& from);
  void MergeFrom(const TStorageUpdate& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageUpdate* other);
  void UnsafeMergeFrom(const TStorageUpdate& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageUpdate_StorageUpdate StorageUpdate;

  // accessors -------------------------------------------------------

  // repeated .server.TStorageUpdate.StorageUpdate updates = 1;
  int updates_size() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 1;
  const ::server::TStorageUpdate_StorageUpdate& updates(int index) const;
  ::server::TStorageUpdate_StorageUpdate* mutable_updates(int index);
  ::server::TStorageUpdate_StorageUpdate* add_updates();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >*
      mutable_updates();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >&
      updates() const;

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate > updates_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate> TStorageUpdate_default_instance_;

// -------------------------------------------------------------------

class TStorageKeys_StorageKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageKeys.StorageKey) */ {
 public:
  TStorageKeys_StorageKey();
  virtual ~TStorageKeys_StorageKey();

  TStorageKeys_StorageKey(const TStorageKeys_StorageKey& from);

  inline TStorageKeys_StorageKey& operator=(const TStorageKeys_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageKeys_StorageKey& default_instance();

  static const TStorageKeys_StorageKey* internal_default_instance();

  void Swap(TStorageKeys_StorageKey* other);

  // implements Message ----------------------------------------------

  inline TStorageKeys_StorageKey* New() const { return New(NULL); }

  TStorageKeys_StorageKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageKeys_StorageKey& from);
  void MergeFrom(const TStorageKeys_StorageKey& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageKeys_StorageKey* other);
  void UnsafeMergeFrom(const TStorageKeys_StorageKey& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // optional string collection = 2;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  const ::std::string& collection() const;
  void set_collection(const ::std::string& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  ::std::string* mutable_collection();
  ::std::string* release_collection();
  void set_allocated_collection(::std::string* collection);

  // optional string record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // optional string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:server.TStorageKeys.StorageKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr collection_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageKeys_StorageKey> TStorageKeys_StorageKey_default_instance_;

// -------------------------------------------------------------------

class TStorageKeys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageKeys) */ {
 public:
  TStorageKeys();
  virtual ~TStorageKeys();

  TStorageKeys(const TStorageKeys& from);

  inline TStorageKeys& operator=(const TStorageKeys& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageKeys& default_instance();

  static const TStorageKeys* internal_default_instance();

  void Swap(TStorageKeys* other);

  // implements Message ----------------------------------------------

  inline TStorageKeys* New() const { return New(NULL); }

  TStorageKeys* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageKeys& from);
  void MergeFrom(const TStorageKeys& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageKeys* other);
  void UnsafeMergeFrom(const TStorageKeys& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageKeys_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  // repeated .server.TStorageKeys.StorageKey keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::server::TStorageKeys_StorageKey& keys(int index) const;
  ::server::TStorageKeys_StorageKey* mutable_keys(int index);
  ::server::TStorageKeys_StorageKey* add_keys();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageKeys_StorageKey >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageKeys_StorageKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:server.TStorageKeys)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageKeys_StorageKey > keys_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageKeys> TStorageKeys_default_instance_;

// -------------------------------------------------------------------

class TStorageRemove_StorageKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageRemove.StorageKey) */ {
 public:
  TStorageRemove_StorageKey();
  virtual ~TStorageRemove_StorageKey();

  TStorageRemove_StorageKey(const TStorageRemove_StorageKey& from);

  inline TStorageRemove_StorageKey& operator=(const TStorageRemove_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageRemove_StorageKey& default_instance();

  static const TStorageRemove_StorageKey* internal_default_instance();

  void Swap(TStorageRemove_StorageKey* other);

  // implements Message ----------------------------------------------

  inline TStorageRemove_StorageKey* New() const { return New(NULL); }

  TStorageRemove_StorageKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageRemove_StorageKey& from);
  void MergeFrom(const TStorageRemove_StorageKey& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageRemove_StorageKey* other);
  void UnsafeMergeFrom(const TStorageRemove_StorageKey& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // optional string collection = 2;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  const ::std::string& collection() const;
  void set_collection(const ::std::string& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  ::std::string* mutable_collection();
  ::std::string* release_collection();
  void set_allocated_collection(::std::string* collection);

  // optional string record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // optional string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:server.TStorageRemove.StorageKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr collection_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageRemove_StorageKey> TStorageRemove_StorageKey_default_instance_;

// -------------------------------------------------------------------

class TStorageRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TStorageRemove) */ {
 public:
  TStorageRemove();
  virtual ~TStorageRemove();

  TStorageRemove(const TStorageRemove& from);

  inline TStorageRemove& operator=(const TStorageRemove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStorageRemove& default_instance();

  static const TStorageRemove* internal_default_instance();

  void Swap(TStorageRemove* other);

  // implements Message ----------------------------------------------

  inline TStorageRemove* New() const { return New(NULL); }

  TStorageRemove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStorageRemove& from);
  void MergeFrom(const TStorageRemove& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TStorageRemove* other);
  void UnsafeMergeFrom(const TStorageRemove& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TStorageRemove_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  // repeated .server.TStorageRemove.StorageKey keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::server::TStorageRemove_StorageKey& keys(int index) const;
  ::server::TStorageRemove_StorageKey* mutable_keys(int index);
  ::server::TStorageRemove_StorageKey* add_keys();
  ::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:server.TStorageRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey > keys_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TStorageRemove> TStorageRemove_default_instance_;

// -------------------------------------------------------------------

class Leaderboard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Leaderboard) */ {
 public:
  Leaderboard();
  virtual ~Leaderboard();

  Leaderboard(const Leaderboard& from);

  inline Leaderboard& operator=(const Leaderboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Leaderboard& default_instance();

  static const Leaderboard* internal_default_instance();

  void Swap(Leaderboard* other);

  // implements Message ----------------------------------------------

  inline Leaderboard* New() const { return New(NULL); }

  Leaderboard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Leaderboard& from);
  void MergeFrom(const Leaderboard& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Leaderboard* other);
  void UnsafeMergeFrom(const Leaderboard& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bool authoritative = 2;
  void clear_authoritative();
  static const int kAuthoritativeFieldNumber = 2;
  bool authoritative() const;
  void set_authoritative(bool value);

  // optional int64 sort = 3;
  void clear_sort();
  static const int kSortFieldNumber = 3;
  ::google::protobuf::int64 sort() const;
  void set_sort(::google::protobuf::int64 value);

  // optional int64 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // optional string reset_schedule = 5;
  void clear_reset_schedule();
  static const int kResetScheduleFieldNumber = 5;
  const ::std::string& reset_schedule() const;
  void set_reset_schedule(const ::std::string& value);
  void set_reset_schedule(const char* value);
  void set_reset_schedule(const char* value, size_t size);
  ::std::string* mutable_reset_schedule();
  ::std::string* release_reset_schedule();
  void set_allocated_reset_schedule(::std::string* reset_schedule);

  // optional string metadata = 6;
  void clear_metadata();
  static const int kMetadataFieldNumber = 6;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // @@protoc_insertion_point(class_scope:server.Leaderboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr reset_schedule_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::int64 sort_;
  ::google::protobuf::int64 count_;
  bool authoritative_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Leaderboard> Leaderboard_default_instance_;

// -------------------------------------------------------------------

class LeaderboardRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.LeaderboardRecord) */ {
 public:
  LeaderboardRecord();
  virtual ~LeaderboardRecord();

  LeaderboardRecord(const LeaderboardRecord& from);

  inline LeaderboardRecord& operator=(const LeaderboardRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderboardRecord& default_instance();

  static const LeaderboardRecord* internal_default_instance();

  void Swap(LeaderboardRecord* other);

  // implements Message ----------------------------------------------

  inline LeaderboardRecord* New() const { return New(NULL); }

  LeaderboardRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaderboardRecord& from);
  void MergeFrom(const LeaderboardRecord& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaderboardRecord* other);
  void UnsafeMergeFrom(const LeaderboardRecord& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string leaderboard_id = 1;
  void clear_leaderboard_id();
  static const int kLeaderboardIdFieldNumber = 1;
  const ::std::string& leaderboard_id() const;
  void set_leaderboard_id(const ::std::string& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  ::std::string* mutable_leaderboard_id();
  ::std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(::std::string* leaderboard_id);

  // optional string owner_id = 2;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  const ::std::string& owner_id() const;
  void set_owner_id(const ::std::string& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  ::std::string* mutable_owner_id();
  ::std::string* release_owner_id();
  void set_allocated_owner_id(::std::string* owner_id);

  // optional string handle = 3;
  void clear_handle();
  static const int kHandleFieldNumber = 3;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // optional string lang = 4;
  void clear_lang();
  static const int kLangFieldNumber = 4;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional string location = 5;
  void clear_location();
  static const int kLocationFieldNumber = 5;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string timezone = 6;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 6;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional int64 rank = 7;
  void clear_rank();
  static const int kRankFieldNumber = 7;
  ::google::protobuf::int64 rank() const;
  void set_rank(::google::protobuf::int64 value);

  // optional int64 score = 8;
  void clear_score();
  static const int kScoreFieldNumber = 8;
  ::google::protobuf::int64 score() const;
  void set_score(::google::protobuf::int64 value);

  // optional int64 num_score = 9;
  void clear_num_score();
  static const int kNumScoreFieldNumber = 9;
  ::google::protobuf::int64 num_score() const;
  void set_num_score(::google::protobuf::int64 value);

  // optional string metadata = 10;
  void clear_metadata();
  static const int kMetadataFieldNumber = 10;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // optional int64 ranked_at = 11;
  void clear_ranked_at();
  static const int kRankedAtFieldNumber = 11;
  ::google::protobuf::int64 ranked_at() const;
  void set_ranked_at(::google::protobuf::int64 value);

  // optional int64 updated_at = 12;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 12;
  ::google::protobuf::int64 updated_at() const;
  void set_updated_at(::google::protobuf::int64 value);

  // optional int64 expires_at = 13;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 13;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:server.LeaderboardRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr leaderboard_id_;
  ::google::protobuf::internal::ArenaStringPtr owner_id_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::int64 rank_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int64 num_score_;
  ::google::protobuf::int64 ranked_at_;
  ::google::protobuf::int64 updated_at_;
  ::google::protobuf::int64 expires_at_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LeaderboardRecord> LeaderboardRecord_default_instance_;

// -------------------------------------------------------------------

class TLeaderboardsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardsList) */ {
 public:
  TLeaderboardsList();
  virtual ~TLeaderboardsList();

  TLeaderboardsList(const TLeaderboardsList& from);

  inline TLeaderboardsList& operator=(const TLeaderboardsList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboardsList& default_instance();

  static const TLeaderboardsList* internal_default_instance();

  void Swap(TLeaderboardsList* other);

  // implements Message ----------------------------------------------

  inline TLeaderboardsList* New() const { return New(NULL); }

  TLeaderboardsList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboardsList& from);
  void MergeFrom(const TLeaderboardsList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboardsList* other);
  void UnsafeMergeFrom(const TLeaderboardsList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 limit = 1;
  void clear_limit();
  static const int kLimitFieldNumber = 1;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // optional string cursor = 2;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // repeated string filter_leaderboard_id = 3;
  int filter_leaderboard_id_size() const;
  void clear_filter_leaderboard_id();
  static const int kFilterLeaderboardIdFieldNumber = 3;
  const ::std::string& filter_leaderboard_id(int index) const;
  ::std::string* mutable_filter_leaderboard_id(int index);
  void set_filter_leaderboard_id(int index, const ::std::string& value);
  void set_filter_leaderboard_id(int index, const char* value);
  void set_filter_leaderboard_id(int index, const char* value, size_t size);
  ::std::string* add_filter_leaderboard_id();
  void add_filter_leaderboard_id(const ::std::string& value);
  void add_filter_leaderboard_id(const char* value);
  void add_filter_leaderboard_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& filter_leaderboard_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filter_leaderboard_id();

  // @@protoc_insertion_point(class_scope:server.TLeaderboardsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filter_leaderboard_id_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  ::google::protobuf::int64 limit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardsList> TLeaderboardsList_default_instance_;

// -------------------------------------------------------------------

class TLeaderboards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboards) */ {
 public:
  TLeaderboards();
  virtual ~TLeaderboards();

  TLeaderboards(const TLeaderboards& from);

  inline TLeaderboards& operator=(const TLeaderboards& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboards& default_instance();

  static const TLeaderboards* internal_default_instance();

  void Swap(TLeaderboards* other);

  // implements Message ----------------------------------------------

  inline TLeaderboards* New() const { return New(NULL); }

  TLeaderboards* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboards& from);
  void MergeFrom(const TLeaderboards& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboards* other);
  void UnsafeMergeFrom(const TLeaderboards& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.Leaderboard leaderboards = 1;
  int leaderboards_size() const;
  void clear_leaderboards();
  static const int kLeaderboardsFieldNumber = 1;
  const ::server::Leaderboard& leaderboards(int index) const;
  ::server::Leaderboard* mutable_leaderboards(int index);
  ::server::Leaderboard* add_leaderboards();
  ::google::protobuf::RepeatedPtrField< ::server::Leaderboard >*
      mutable_leaderboards();
  const ::google::protobuf::RepeatedPtrField< ::server::Leaderboard >&
      leaderboards() const;

  // optional string cursor = 2;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // @@protoc_insertion_point(class_scope:server.TLeaderboards)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::Leaderboard > leaderboards_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboards> TLeaderboards_default_instance_;

// -------------------------------------------------------------------

class TLeaderboardRecordsWrite_LeaderboardRecordWrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite) */ {
 public:
  TLeaderboardRecordsWrite_LeaderboardRecordWrite();
  virtual ~TLeaderboardRecordsWrite_LeaderboardRecordWrite();

  TLeaderboardRecordsWrite_LeaderboardRecordWrite(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from);

  inline TLeaderboardRecordsWrite_LeaderboardRecordWrite& operator=(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboardRecordsWrite_LeaderboardRecordWrite& default_instance();

  enum OpCase {
    kIncr = 2,
    kDecr = 3,
    kSet = 4,
    kBest = 5,
    OP_NOT_SET = 0,
  };

  static const TLeaderboardRecordsWrite_LeaderboardRecordWrite* internal_default_instance();

  void Swap(TLeaderboardRecordsWrite_LeaderboardRecordWrite* other);

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsWrite_LeaderboardRecordWrite* New() const { return New(NULL); }

  TLeaderboardRecordsWrite_LeaderboardRecordWrite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from);
  void MergeFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboardRecordsWrite_LeaderboardRecordWrite* other);
  void UnsafeMergeFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string leaderboard_id = 1;
  void clear_leaderboard_id();
  static const int kLeaderboardIdFieldNumber = 1;
  const ::std::string& leaderboard_id() const;
  void set_leaderboard_id(const ::std::string& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  ::std::string* mutable_leaderboard_id();
  ::std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(::std::string* leaderboard_id);

  // optional int64 incr = 2;
  private:
  bool has_incr() const;
  public:
  void clear_incr();
  static const int kIncrFieldNumber = 2;
  ::google::protobuf::int64 incr() const;
  void set_incr(::google::protobuf::int64 value);

  // optional int64 decr = 3;
  private:
  bool has_decr() const;
  public:
  void clear_decr();
  static const int kDecrFieldNumber = 3;
  ::google::protobuf::int64 decr() const;
  void set_decr(::google::protobuf::int64 value);

  // optional int64 set = 4;
  private:
  bool has_set() const;
  public:
  void clear_set();
  static const int kSetFieldNumber = 4;
  ::google::protobuf::int64 set() const;
  void set_set(::google::protobuf::int64 value);

  // optional int64 best = 5;
  private:
  bool has_best() const;
  public:
  void clear_best();
  static const int kBestFieldNumber = 5;
  ::google::protobuf::int64 best() const;
  void set_best(::google::protobuf::int64 value);

  // optional string location = 6;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string timezone = 7;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 7;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string metadata = 8;
  void clear_metadata();
  static const int kMetadataFieldNumber = 8;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
 private:
  inline void set_has_incr();
  inline void set_has_decr();
  inline void set_has_set();
  inline void set_has_best();

  inline bool has_op() const;
  void clear_op();
  inline void clear_has_op();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr leaderboard_id_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  union OpUnion {
    OpUnion() {}
    ::google::protobuf::int64 incr_;
    ::google::protobuf::int64 decr_;
    ::google::protobuf::int64 set_;
    ::google::protobuf::int64 best_;
  } op_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsWrite_LeaderboardRecordWrite> TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_;

// -------------------------------------------------------------------

class TLeaderboardRecordsWrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsWrite) */ {
 public:
  TLeaderboardRecordsWrite();
  virtual ~TLeaderboardRecordsWrite();

  TLeaderboardRecordsWrite(const TLeaderboardRecordsWrite& from);

  inline TLeaderboardRecordsWrite& operator=(const TLeaderboardRecordsWrite& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboardRecordsWrite& default_instance();

  static const TLeaderboardRecordsWrite* internal_default_instance();

  void Swap(TLeaderboardRecordsWrite* other);

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsWrite* New() const { return New(NULL); }

  TLeaderboardRecordsWrite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboardRecordsWrite& from);
  void MergeFrom(const TLeaderboardRecordsWrite& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboardRecordsWrite* other);
  void UnsafeMergeFrom(const TLeaderboardRecordsWrite& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TLeaderboardRecordsWrite_LeaderboardRecordWrite LeaderboardRecordWrite;

  // accessors -------------------------------------------------------

  // repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite& records(int index) const;
  ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* mutable_records(int index);
  ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* add_records();
  ::google::protobuf::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >&
      records() const;

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsWrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite > records_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsWrite> TLeaderboardRecordsWrite_default_instance_;

// -------------------------------------------------------------------

class TLeaderboardRecordsFetch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsFetch) */ {
 public:
  TLeaderboardRecordsFetch();
  virtual ~TLeaderboardRecordsFetch();

  TLeaderboardRecordsFetch(const TLeaderboardRecordsFetch& from);

  inline TLeaderboardRecordsFetch& operator=(const TLeaderboardRecordsFetch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboardRecordsFetch& default_instance();

  static const TLeaderboardRecordsFetch* internal_default_instance();

  void Swap(TLeaderboardRecordsFetch* other);

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsFetch* New() const { return New(NULL); }

  TLeaderboardRecordsFetch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboardRecordsFetch& from);
  void MergeFrom(const TLeaderboardRecordsFetch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboardRecordsFetch* other);
  void UnsafeMergeFrom(const TLeaderboardRecordsFetch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string leaderboard_ids = 1;
  int leaderboard_ids_size() const;
  void clear_leaderboard_ids();
  static const int kLeaderboardIdsFieldNumber = 1;
  const ::std::string& leaderboard_ids(int index) const;
  ::std::string* mutable_leaderboard_ids(int index);
  void set_leaderboard_ids(int index, const ::std::string& value);
  void set_leaderboard_ids(int index, const char* value);
  void set_leaderboard_ids(int index, const char* value, size_t size);
  ::std::string* add_leaderboard_ids();
  void add_leaderboard_ids(const ::std::string& value);
  void add_leaderboard_ids(const char* value);
  void add_leaderboard_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& leaderboard_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_leaderboard_ids();

  // optional int64 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // optional string cursor = 3;
  void clear_cursor();
  static const int kCursorFieldNumber = 3;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsFetch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> leaderboard_ids_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  ::google::protobuf::int64 limit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsFetch> TLeaderboardRecordsFetch_default_instance_;

// -------------------------------------------------------------------

class TLeaderboardRecordsList_Owners : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsList.Owners) */ {
 public:
  TLeaderboardRecordsList_Owners();
  virtual ~TLeaderboardRecordsList_Owners();

  TLeaderboardRecordsList_Owners(const TLeaderboardRecordsList_Owners& from);

  inline TLeaderboardRecordsList_Owners& operator=(const TLeaderboardRecordsList_Owners& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboardRecordsList_Owners& default_instance();

  static const TLeaderboardRecordsList_Owners* internal_default_instance();

  void Swap(TLeaderboardRecordsList_Owners* other);

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsList_Owners* New() const { return New(NULL); }

  TLeaderboardRecordsList_Owners* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboardRecordsList_Owners& from);
  void MergeFrom(const TLeaderboardRecordsList_Owners& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboardRecordsList_Owners* other);
  void UnsafeMergeFrom(const TLeaderboardRecordsList_Owners& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string owner_ids = 1;
  int owner_ids_size() const;
  void clear_owner_ids();
  static const int kOwnerIdsFieldNumber = 1;
  const ::std::string& owner_ids(int index) const;
  ::std::string* mutable_owner_ids(int index);
  void set_owner_ids(int index, const ::std::string& value);
  void set_owner_ids(int index, const char* value);
  void set_owner_ids(int index, const char* value, size_t size);
  ::std::string* add_owner_ids();
  void add_owner_ids(const ::std::string& value);
  void add_owner_ids(const char* value);
  void add_owner_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& owner_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_owner_ids();

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsList.Owners)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> owner_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsList_Owners> TLeaderboardRecordsList_Owners_default_instance_;

// -------------------------------------------------------------------

class TLeaderboardRecordsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsList) */ {
 public:
  TLeaderboardRecordsList();
  virtual ~TLeaderboardRecordsList();

  TLeaderboardRecordsList(const TLeaderboardRecordsList& from);

  inline TLeaderboardRecordsList& operator=(const TLeaderboardRecordsList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboardRecordsList& default_instance();

  enum FilterCase {
    kOwnerId = 2,
    kOwnerIds = 3,
    kLang = 4,
    kLocation = 5,
    kTimezone = 6,
    FILTER_NOT_SET = 0,
  };

  static const TLeaderboardRecordsList* internal_default_instance();

  void Swap(TLeaderboardRecordsList* other);

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsList* New() const { return New(NULL); }

  TLeaderboardRecordsList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboardRecordsList& from);
  void MergeFrom(const TLeaderboardRecordsList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboardRecordsList* other);
  void UnsafeMergeFrom(const TLeaderboardRecordsList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TLeaderboardRecordsList_Owners Owners;

  // accessors -------------------------------------------------------

  // optional string leaderboard_id = 1;
  void clear_leaderboard_id();
  static const int kLeaderboardIdFieldNumber = 1;
  const ::std::string& leaderboard_id() const;
  void set_leaderboard_id(const ::std::string& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  ::std::string* mutable_leaderboard_id();
  ::std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(::std::string* leaderboard_id);

  // optional string owner_id = 2;
  private:
  bool has_owner_id() const;
  public:
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  const ::std::string& owner_id() const;
  void set_owner_id(const ::std::string& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  ::std::string* mutable_owner_id();
  ::std::string* release_owner_id();
  void set_allocated_owner_id(::std::string* owner_id);

  // optional .server.TLeaderboardRecordsList.Owners owner_ids = 3;
  bool has_owner_ids() const;
  void clear_owner_ids();
  static const int kOwnerIdsFieldNumber = 3;
  const ::server::TLeaderboardRecordsList_Owners& owner_ids() const;
  ::server::TLeaderboardRecordsList_Owners* mutable_owner_ids();
  ::server::TLeaderboardRecordsList_Owners* release_owner_ids();
  void set_allocated_owner_ids(::server::TLeaderboardRecordsList_Owners* owner_ids);

  // optional string lang = 4;
  private:
  bool has_lang() const;
  public:
  void clear_lang();
  static const int kLangFieldNumber = 4;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // optional string location = 5;
  private:
  bool has_location() const;
  public:
  void clear_location();
  static const int kLocationFieldNumber = 5;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional string timezone = 6;
  private:
  bool has_timezone() const;
  public:
  void clear_timezone();
  static const int kTimezoneFieldNumber = 6;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional int64 limit = 7;
  void clear_limit();
  static const int kLimitFieldNumber = 7;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // optional string cursor = 8;
  void clear_cursor();
  static const int kCursorFieldNumber = 8;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  FilterCase filter_case() const;
  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsList)
 private:
  inline void set_has_owner_id();
  inline void set_has_owner_ids();
  inline void set_has_lang();
  inline void set_has_location();
  inline void set_has_timezone();

  inline bool has_filter() const;
  void clear_filter();
  inline void clear_has_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr leaderboard_id_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  ::google::protobuf::int64 limit_;
  union FilterUnion {
    FilterUnion() {}
    ::google::protobuf::internal::ArenaStringPtr owner_id_;
    ::server::TLeaderboardRecordsList_Owners* owner_ids_;
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::internal::ArenaStringPtr timezone_;
  } filter_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsList> TLeaderboardRecordsList_default_instance_;

// -------------------------------------------------------------------

class TLeaderboardRecords : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecords) */ {
 public:
  TLeaderboardRecords();
  virtual ~TLeaderboardRecords();

  TLeaderboardRecords(const TLeaderboardRecords& from);

  inline TLeaderboardRecords& operator=(const TLeaderboardRecords& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLeaderboardRecords& default_instance();

  static const TLeaderboardRecords* internal_default_instance();

  void Swap(TLeaderboardRecords* other);

  // implements Message ----------------------------------------------

  inline TLeaderboardRecords* New() const { return New(NULL); }

  TLeaderboardRecords* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLeaderboardRecords& from);
  void MergeFrom(const TLeaderboardRecords& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TLeaderboardRecords* other);
  void UnsafeMergeFrom(const TLeaderboardRecords& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.LeaderboardRecord records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::server::LeaderboardRecord& records(int index) const;
  ::server::LeaderboardRecord* mutable_records(int index);
  ::server::LeaderboardRecord* add_records();
  ::google::protobuf::RepeatedPtrField< ::server::LeaderboardRecord >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::server::LeaderboardRecord >&
      records() const;

  // optional string cursor = 2;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecords)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::LeaderboardRecord > records_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecords> TLeaderboardRecords_default_instance_;

// -------------------------------------------------------------------

class TRpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TRpc) */ {
 public:
  TRpc();
  virtual ~TRpc();

  TRpc(const TRpc& from);

  inline TRpc& operator=(const TRpc& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRpc& default_instance();

  static const TRpc* internal_default_instance();

  void Swap(TRpc* other);

  // implements Message ----------------------------------------------

  inline TRpc* New() const { return New(NULL); }

  TRpc* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRpc& from);
  void MergeFrom(const TRpc& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TRpc* other);
  void UnsafeMergeFrom(const TRpc& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:server.TRpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TRpc> TRpc_default_instance_;

// -------------------------------------------------------------------

class TPurchaseValidation_ApplePurchase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseValidation.ApplePurchase) */ {
 public:
  TPurchaseValidation_ApplePurchase();
  virtual ~TPurchaseValidation_ApplePurchase();

  TPurchaseValidation_ApplePurchase(const TPurchaseValidation_ApplePurchase& from);

  inline TPurchaseValidation_ApplePurchase& operator=(const TPurchaseValidation_ApplePurchase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPurchaseValidation_ApplePurchase& default_instance();

  static const TPurchaseValidation_ApplePurchase* internal_default_instance();

  void Swap(TPurchaseValidation_ApplePurchase* other);

  // implements Message ----------------------------------------------

  inline TPurchaseValidation_ApplePurchase* New() const { return New(NULL); }

  TPurchaseValidation_ApplePurchase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPurchaseValidation_ApplePurchase& from);
  void MergeFrom(const TPurchaseValidation_ApplePurchase& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TPurchaseValidation_ApplePurchase* other);
  void UnsafeMergeFrom(const TPurchaseValidation_ApplePurchase& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string product_id = 1;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // optional string receipt_data = 2;
  void clear_receipt_data();
  static const int kReceiptDataFieldNumber = 2;
  const ::std::string& receipt_data() const;
  void set_receipt_data(const ::std::string& value);
  void set_receipt_data(const char* value);
  void set_receipt_data(const char* value, size_t size);
  ::std::string* mutable_receipt_data();
  ::std::string* release_receipt_data();
  void set_allocated_receipt_data(::std::string* receipt_data);

  // @@protoc_insertion_point(class_scope:server.TPurchaseValidation.ApplePurchase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr receipt_data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TPurchaseValidation_ApplePurchase> TPurchaseValidation_ApplePurchase_default_instance_;

// -------------------------------------------------------------------

class TPurchaseValidation_GooglePurchase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseValidation.GooglePurchase) */ {
 public:
  TPurchaseValidation_GooglePurchase();
  virtual ~TPurchaseValidation_GooglePurchase();

  TPurchaseValidation_GooglePurchase(const TPurchaseValidation_GooglePurchase& from);

  inline TPurchaseValidation_GooglePurchase& operator=(const TPurchaseValidation_GooglePurchase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPurchaseValidation_GooglePurchase& default_instance();

  static const TPurchaseValidation_GooglePurchase* internal_default_instance();

  void Swap(TPurchaseValidation_GooglePurchase* other);

  // implements Message ----------------------------------------------

  inline TPurchaseValidation_GooglePurchase* New() const { return New(NULL); }

  TPurchaseValidation_GooglePurchase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPurchaseValidation_GooglePurchase& from);
  void MergeFrom(const TPurchaseValidation_GooglePurchase& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TPurchaseValidation_GooglePurchase* other);
  void UnsafeMergeFrom(const TPurchaseValidation_GooglePurchase& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string product_id = 1;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // optional string product_type = 2;
  void clear_product_type();
  static const int kProductTypeFieldNumber = 2;
  const ::std::string& product_type() const;
  void set_product_type(const ::std::string& value);
  void set_product_type(const char* value);
  void set_product_type(const char* value, size_t size);
  ::std::string* mutable_product_type();
  ::std::string* release_product_type();
  void set_allocated_product_type(::std::string* product_type);

  // optional string purchase_token = 3;
  void clear_purchase_token();
  static const int kPurchaseTokenFieldNumber = 3;
  const ::std::string& purchase_token() const;
  void set_purchase_token(const ::std::string& value);
  void set_purchase_token(const char* value);
  void set_purchase_token(const char* value, size_t size);
  ::std::string* mutable_purchase_token();
  ::std::string* release_purchase_token();
  void set_allocated_purchase_token(::std::string* purchase_token);

  // @@protoc_insertion_point(class_scope:server.TPurchaseValidation.GooglePurchase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr product_type_;
  ::google::protobuf::internal::ArenaStringPtr purchase_token_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TPurchaseValidation_GooglePurchase> TPurchaseValidation_GooglePurchase_default_instance_;

// -------------------------------------------------------------------

class TPurchaseValidation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseValidation) */ {
 public:
  TPurchaseValidation();
  virtual ~TPurchaseValidation();

  TPurchaseValidation(const TPurchaseValidation& from);

  inline TPurchaseValidation& operator=(const TPurchaseValidation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPurchaseValidation& default_instance();

  enum IdCase {
    kApplePurchase = 1,
    kGooglePurchase = 2,
    ID_NOT_SET = 0,
  };

  static const TPurchaseValidation* internal_default_instance();

  void Swap(TPurchaseValidation* other);

  // implements Message ----------------------------------------------

  inline TPurchaseValidation* New() const { return New(NULL); }

  TPurchaseValidation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPurchaseValidation& from);
  void MergeFrom(const TPurchaseValidation& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TPurchaseValidation* other);
  void UnsafeMergeFrom(const TPurchaseValidation& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TPurchaseValidation_ApplePurchase ApplePurchase;
  typedef TPurchaseValidation_GooglePurchase GooglePurchase;

  // accessors -------------------------------------------------------

  // optional .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
  bool has_apple_purchase() const;
  void clear_apple_purchase();
  static const int kApplePurchaseFieldNumber = 1;
  const ::server::TPurchaseValidation_ApplePurchase& apple_purchase() const;
  ::server::TPurchaseValidation_ApplePurchase* mutable_apple_purchase();
  ::server::TPurchaseValidation_ApplePurchase* release_apple_purchase();
  void set_allocated_apple_purchase(::server::TPurchaseValidation_ApplePurchase* apple_purchase);

  // optional .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
  bool has_google_purchase() const;
  void clear_google_purchase();
  static const int kGooglePurchaseFieldNumber = 2;
  const ::server::TPurchaseValidation_GooglePurchase& google_purchase() const;
  ::server::TPurchaseValidation_GooglePurchase* mutable_google_purchase();
  ::server::TPurchaseValidation_GooglePurchase* release_google_purchase();
  void set_allocated_google_purchase(::server::TPurchaseValidation_GooglePurchase* google_purchase);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TPurchaseValidation)
 private:
  inline void set_has_apple_purchase();
  inline void set_has_google_purchase();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::server::TPurchaseValidation_ApplePurchase* apple_purchase_;
    ::server::TPurchaseValidation_GooglePurchase* google_purchase_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TPurchaseValidation> TPurchaseValidation_default_instance_;

// -------------------------------------------------------------------

class TPurchaseRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseRecord) */ {
 public:
  TPurchaseRecord();
  virtual ~TPurchaseRecord();

  TPurchaseRecord(const TPurchaseRecord& from);

  inline TPurchaseRecord& operator=(const TPurchaseRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPurchaseRecord& default_instance();

  static const TPurchaseRecord* internal_default_instance();

  void Swap(TPurchaseRecord* other);

  // implements Message ----------------------------------------------

  inline TPurchaseRecord* New() const { return New(NULL); }

  TPurchaseRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPurchaseRecord& from);
  void MergeFrom(const TPurchaseRecord& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TPurchaseRecord* other);
  void UnsafeMergeFrom(const TPurchaseRecord& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional bool seen_before = 2;
  void clear_seen_before();
  static const int kSeenBeforeFieldNumber = 2;
  bool seen_before() const;
  void set_seen_before(bool value);

  // optional bool purchase_provider_reachable = 3;
  void clear_purchase_provider_reachable();
  static const int kPurchaseProviderReachableFieldNumber = 3;
  bool purchase_provider_reachable() const;
  void set_purchase_provider_reachable(bool value);

  // optional string message = 6;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:server.TPurchaseRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  bool success_;
  bool seen_before_;
  bool purchase_provider_reachable_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TPurchaseRecord> TPurchaseRecord_default_instance_;

// -------------------------------------------------------------------

class Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Notification) */ {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();

  static const Notification* internal_default_instance();

  void Swap(Notification* other);

  // implements Message ----------------------------------------------

  inline Notification* New() const { return New(NULL); }

  Notification* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Notification* other);
  void UnsafeMergeFrom(const Notification& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // optional string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional int64 code = 4;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  ::google::protobuf::int64 code() const;
  void set_code(::google::protobuf::int64 value);

  // optional string sender_id = 5;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 5;
  const ::std::string& sender_id() const;
  void set_sender_id(const ::std::string& value);
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  ::std::string* mutable_sender_id();
  ::std::string* release_sender_id();
  void set_allocated_sender_id(::std::string* sender_id);

  // optional int64 created_at = 6;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 6;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // optional int64 expires_at = 7;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 7;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // optional bool persistent = 8;
  void clear_persistent();
  static const int kPersistentFieldNumber = 8;
  bool persistent() const;
  void set_persistent(bool value);

  // @@protoc_insertion_point(class_scope:server.Notification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr sender_id_;
  ::google::protobuf::int64 code_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 expires_at_;
  bool persistent_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Notification> Notification_default_instance_;

// -------------------------------------------------------------------

class Notifications : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.Notifications) */ {
 public:
  Notifications();
  virtual ~Notifications();

  Notifications(const Notifications& from);

  inline Notifications& operator=(const Notifications& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notifications& default_instance();

  static const Notifications* internal_default_instance();

  void Swap(Notifications* other);

  // implements Message ----------------------------------------------

  inline Notifications* New() const { return New(NULL); }

  Notifications* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notifications& from);
  void MergeFrom(const Notifications& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Notifications* other);
  void UnsafeMergeFrom(const Notifications& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.Notification notifications = 1;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 1;
  const ::server::Notification& notifications(int index) const;
  ::server::Notification* mutable_notifications(int index);
  ::server::Notification* add_notifications();
  ::google::protobuf::RepeatedPtrField< ::server::Notification >*
      mutable_notifications();
  const ::google::protobuf::RepeatedPtrField< ::server::Notification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:server.Notifications)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::Notification > notifications_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Notifications> Notifications_default_instance_;

// -------------------------------------------------------------------

class TNotificationsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TNotificationsList) */ {
 public:
  TNotificationsList();
  virtual ~TNotificationsList();

  TNotificationsList(const TNotificationsList& from);

  inline TNotificationsList& operator=(const TNotificationsList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNotificationsList& default_instance();

  static const TNotificationsList* internal_default_instance();

  void Swap(TNotificationsList* other);

  // implements Message ----------------------------------------------

  inline TNotificationsList* New() const { return New(NULL); }

  TNotificationsList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNotificationsList& from);
  void MergeFrom(const TNotificationsList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TNotificationsList* other);
  void UnsafeMergeFrom(const TNotificationsList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 limit = 1;
  void clear_limit();
  static const int kLimitFieldNumber = 1;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // optional string resumable_cursor = 2;
  void clear_resumable_cursor();
  static const int kResumableCursorFieldNumber = 2;
  const ::std::string& resumable_cursor() const;
  void set_resumable_cursor(const ::std::string& value);
  void set_resumable_cursor(const char* value);
  void set_resumable_cursor(const char* value, size_t size);
  ::std::string* mutable_resumable_cursor();
  ::std::string* release_resumable_cursor();
  void set_allocated_resumable_cursor(::std::string* resumable_cursor);

  // @@protoc_insertion_point(class_scope:server.TNotificationsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resumable_cursor_;
  ::google::protobuf::int64 limit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TNotificationsList> TNotificationsList_default_instance_;

// -------------------------------------------------------------------

class TNotifications : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TNotifications) */ {
 public:
  TNotifications();
  virtual ~TNotifications();

  TNotifications(const TNotifications& from);

  inline TNotifications& operator=(const TNotifications& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNotifications& default_instance();

  static const TNotifications* internal_default_instance();

  void Swap(TNotifications* other);

  // implements Message ----------------------------------------------

  inline TNotifications* New() const { return New(NULL); }

  TNotifications* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNotifications& from);
  void MergeFrom(const TNotifications& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TNotifications* other);
  void UnsafeMergeFrom(const TNotifications& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .server.Notification notifications = 1;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 1;
  const ::server::Notification& notifications(int index) const;
  ::server::Notification* mutable_notifications(int index);
  ::server::Notification* add_notifications();
  ::google::protobuf::RepeatedPtrField< ::server::Notification >*
      mutable_notifications();
  const ::google::protobuf::RepeatedPtrField< ::server::Notification >&
      notifications() const;

  // optional string resumable_cursor = 2;
  void clear_resumable_cursor();
  static const int kResumableCursorFieldNumber = 2;
  const ::std::string& resumable_cursor() const;
  void set_resumable_cursor(const ::std::string& value);
  void set_resumable_cursor(const char* value);
  void set_resumable_cursor(const char* value, size_t size);
  ::std::string* mutable_resumable_cursor();
  ::std::string* release_resumable_cursor();
  void set_allocated_resumable_cursor(::std::string* resumable_cursor);

  // @@protoc_insertion_point(class_scope:server.TNotifications)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::server::Notification > notifications_;
  ::google::protobuf::internal::ArenaStringPtr resumable_cursor_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TNotifications> TNotifications_default_instance_;

// -------------------------------------------------------------------

class TNotificationsRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.TNotificationsRemove) */ {
 public:
  TNotificationsRemove();
  virtual ~TNotificationsRemove();

  TNotificationsRemove(const TNotificationsRemove& from);

  inline TNotificationsRemove& operator=(const TNotificationsRemove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNotificationsRemove& default_instance();

  static const TNotificationsRemove* internal_default_instance();

  void Swap(TNotificationsRemove* other);

  // implements Message ----------------------------------------------

  inline TNotificationsRemove* New() const { return New(NULL); }

  TNotificationsRemove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNotificationsRemove& from);
  void MergeFrom(const TNotificationsRemove& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TNotificationsRemove* other);
  void UnsafeMergeFrom(const TNotificationsRemove& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string notification_ids = 1;
  int notification_ids_size() const;
  void clear_notification_ids();
  static const int kNotificationIdsFieldNumber = 1;
  const ::std::string& notification_ids(int index) const;
  ::std::string* mutable_notification_ids(int index);
  void set_notification_ids(int index, const ::std::string& value);
  void set_notification_ids(int index, const char* value);
  void set_notification_ids(int index, const char* value, size_t size);
  ::std::string* add_notification_ids();
  void add_notification_ids(const ::std::string& value);
  void add_notification_ids(const char* value);
  void add_notification_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& notification_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_notification_ids();

  // @@protoc_insertion_point(class_scope:server.TNotificationsRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> notification_ids_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_api_2eproto_impl();
  friend void  protobuf_AddDesc_api_2eproto_impl();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TNotificationsRemove> TNotificationsRemove_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat

// optional int64 timestamp = 1;
inline void Heartbeat::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:server.Heartbeat.timestamp)
  return timestamp_;
}
inline void Heartbeat::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:server.Heartbeat.timestamp)
}

inline const Heartbeat* Heartbeat::internal_default_instance() {
  return &Heartbeat_default_instance_.get();
}
// -------------------------------------------------------------------

// Error

// optional int32 code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:server.Error.code)
  return code_;
}
inline void Error::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:server.Error.code)
}

// optional string message = 2;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:server.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Error.message)
}
inline void Error::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Error.message)
}
inline ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:server.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:server.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server.Error.message)
}

inline const Error* Error::internal_default_instance() {
  return &Error_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateRequest_Email

// optional string email = 1;
inline void AuthenticateRequest_Email::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest_Email::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_Email::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.email)
}
inline void AuthenticateRequest_Email::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.email)
}
inline void AuthenticateRequest_Email::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.email)
}
inline ::std::string* AuthenticateRequest_Email::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest_Email::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_Email::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.email)
}

// optional string password = 2;
inline void AuthenticateRequest_Email::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest_Email::password() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_Email::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.password)
}
inline void AuthenticateRequest_Email::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.password)
}
inline void AuthenticateRequest_Email::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.password)
}
inline ::std::string* AuthenticateRequest_Email::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest_Email::release_password() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_Email::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.password)
}

inline const AuthenticateRequest_Email* AuthenticateRequest_Email::internal_default_instance() {
  return &AuthenticateRequest_Email_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateRequest_GameCenter

// optional string player_id = 1;
inline void AuthenticateRequest_GameCenter::clear_player_id() {
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest_GameCenter::player_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.player_id)
  return player_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_player_id(const ::std::string& value) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.player_id)
}
inline void AuthenticateRequest_GameCenter::set_player_id(const char* value) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.player_id)
}
inline void AuthenticateRequest_GameCenter::set_player_id(const char* value, size_t size) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.player_id)
}
inline ::std::string* AuthenticateRequest_GameCenter::mutable_player_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.player_id)
  return player_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest_GameCenter::release_player_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.player_id)
  
  return player_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_allocated_player_id(::std::string* player_id) {
  if (player_id != NULL) {
    
  } else {
    
  }
  player_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.player_id)
}

// optional string bundle_id = 2;
inline void AuthenticateRequest_GameCenter::clear_bundle_id() {
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest_GameCenter::bundle_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.bundle_id)
  return bundle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_bundle_id(const ::std::string& value) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.bundle_id)
}
inline void AuthenticateRequest_GameCenter::set_bundle_id(const char* value) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.bundle_id)
}
inline void AuthenticateRequest_GameCenter::set_bundle_id(const char* value, size_t size) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.bundle_id)
}
inline ::std::string* AuthenticateRequest_GameCenter::mutable_bundle_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.bundle_id)
  return bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest_GameCenter::release_bundle_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.bundle_id)
  
  return bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_allocated_bundle_id(::std::string* bundle_id) {
  if (bundle_id != NULL) {
    
  } else {
    
  }
  bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.bundle_id)
}

// optional int64 timestamp = 3;
inline void AuthenticateRequest_GameCenter::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AuthenticateRequest_GameCenter::timestamp() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.timestamp)
  return timestamp_;
}
inline void AuthenticateRequest_GameCenter::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.timestamp)
}

// optional string salt = 4;
inline void AuthenticateRequest_GameCenter::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest_GameCenter::salt() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.salt)
  return salt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.salt)
}
inline void AuthenticateRequest_GameCenter::set_salt(const char* value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.salt)
}
inline void AuthenticateRequest_GameCenter::set_salt(const char* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.salt)
}
inline ::std::string* AuthenticateRequest_GameCenter::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest_GameCenter::release_salt() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.salt)
}

// optional string signature = 5;
inline void AuthenticateRequest_GameCenter::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest_GameCenter::signature() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.signature)
}
inline void AuthenticateRequest_GameCenter::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.signature)
}
inline void AuthenticateRequest_GameCenter::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.signature)
}
inline ::std::string* AuthenticateRequest_GameCenter::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest_GameCenter::release_signature() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.signature)
}

// optional string public_key_url = 6;
inline void AuthenticateRequest_GameCenter::clear_public_key_url() {
  public_key_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest_GameCenter::public_key_url() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.public_key_url)
  return public_key_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_public_key_url(const ::std::string& value) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.public_key_url)
}
inline void AuthenticateRequest_GameCenter::set_public_key_url(const char* value) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.public_key_url)
}
inline void AuthenticateRequest_GameCenter::set_public_key_url(const char* value, size_t size) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.public_key_url)
}
inline ::std::string* AuthenticateRequest_GameCenter::mutable_public_key_url() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.public_key_url)
  return public_key_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest_GameCenter::release_public_key_url() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.public_key_url)
  
  return public_key_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest_GameCenter::set_allocated_public_key_url(::std::string* public_key_url) {
  if (public_key_url != NULL) {
    
  } else {
    
  }
  public_key_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_url);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.public_key_url)
}

inline const AuthenticateRequest_GameCenter* AuthenticateRequest_GameCenter::internal_default_instance() {
  return &AuthenticateRequest_GameCenter_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateRequest

// optional string collationId = 1;
inline void AuthenticateRequest::clear_collationid() {
  collationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateRequest::collationid() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.collationId)
  return collationid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest::set_collationid(const ::std::string& value) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.collationId)
}
inline void AuthenticateRequest::set_collationid(const char* value) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.collationId)
}
inline void AuthenticateRequest::set_collationid(const char* value, size_t size) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.collationId)
}
inline ::std::string* AuthenticateRequest::mutable_collationid() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.collationId)
  return collationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest::release_collationid() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.collationId)
  
  return collationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest::set_allocated_collationid(::std::string* collationid) {
  if (collationid != NULL) {
    
  } else {
    
  }
  collationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collationid);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.collationId)
}

// optional .server.AuthenticateRequest.Email email = 2;
inline bool AuthenticateRequest::has_email() const {
  return id_case() == kEmail;
}
inline void AuthenticateRequest::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void AuthenticateRequest::clear_email() {
  if (has_email()) {
    delete id_.email_;
    clear_has_id();
  }
}
inline  const ::server::AuthenticateRequest_Email& AuthenticateRequest::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.email)
  return has_email()
      ? *id_.email_
      : ::server::AuthenticateRequest_Email::default_instance();
}
inline ::server::AuthenticateRequest_Email* AuthenticateRequest::mutable_email() {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_ = new ::server::AuthenticateRequest_Email;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.email)
  return id_.email_;
}
inline ::server::AuthenticateRequest_Email* AuthenticateRequest::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.email)
  if (has_email()) {
    clear_has_id();
    ::server::AuthenticateRequest_Email* temp = id_.email_;
    id_.email_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AuthenticateRequest::set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_id();
  if (email) {
    set_has_email();
    id_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.email)
}

// optional string facebook = 3;
inline bool AuthenticateRequest::has_facebook() const {
  return id_case() == kFacebook;
}
inline void AuthenticateRequest::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
inline void AuthenticateRequest::clear_facebook() {
  if (has_facebook()) {
    id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& AuthenticateRequest::facebook() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.facebook)
  if (has_facebook()) {
    return id_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
}
inline void AuthenticateRequest::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.facebook)
}
inline void AuthenticateRequest::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.facebook)
}
inline ::std::string* AuthenticateRequest::mutable_facebook() {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.facebook)
  return id_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest::release_facebook() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.facebook)
  if (has_facebook()) {
    clear_has_id();
    return id_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AuthenticateRequest::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (facebook != NULL) {
    set_has_facebook();
    id_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.facebook)
}

// optional string google = 4;
inline bool AuthenticateRequest::has_google() const {
  return id_case() == kGoogle;
}
inline void AuthenticateRequest::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
inline void AuthenticateRequest::clear_google() {
  if (has_google()) {
    id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& AuthenticateRequest::google() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.google)
  if (has_google()) {
    return id_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
}
inline void AuthenticateRequest::set_google(const char* value) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.google)
}
inline void AuthenticateRequest::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.google)
}
inline ::std::string* AuthenticateRequest::mutable_google() {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.google)
  return id_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest::release_google() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.google)
  if (has_google()) {
    clear_has_id();
    return id_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AuthenticateRequest::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (google != NULL) {
    set_has_google();
    id_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.google)
}

// optional .server.AuthenticateRequest.GameCenter game_center = 5;
inline bool AuthenticateRequest::has_game_center() const {
  return id_case() == kGameCenter;
}
inline void AuthenticateRequest::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
inline void AuthenticateRequest::clear_game_center() {
  if (has_game_center()) {
    delete id_.game_center_;
    clear_has_id();
  }
}
inline  const ::server::AuthenticateRequest_GameCenter& AuthenticateRequest::game_center() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.game_center)
  return has_game_center()
      ? *id_.game_center_
      : ::server::AuthenticateRequest_GameCenter::default_instance();
}
inline ::server::AuthenticateRequest_GameCenter* AuthenticateRequest::mutable_game_center() {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_ = new ::server::AuthenticateRequest_GameCenter;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.game_center)
  return id_.game_center_;
}
inline ::server::AuthenticateRequest_GameCenter* AuthenticateRequest::release_game_center() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.game_center)
  if (has_game_center()) {
    clear_has_id();
    ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    id_.game_center_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AuthenticateRequest::set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_id();
  if (game_center) {
    set_has_game_center();
    id_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.game_center)
}

// optional string steam = 6;
inline bool AuthenticateRequest::has_steam() const {
  return id_case() == kSteam;
}
inline void AuthenticateRequest::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
inline void AuthenticateRequest::clear_steam() {
  if (has_steam()) {
    id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& AuthenticateRequest::steam() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.steam)
  if (has_steam()) {
    return id_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
}
inline void AuthenticateRequest::set_steam(const char* value) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.steam)
}
inline void AuthenticateRequest::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.steam)
}
inline ::std::string* AuthenticateRequest::mutable_steam() {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.steam)
  return id_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest::release_steam() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.steam)
  if (has_steam()) {
    clear_has_id();
    return id_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AuthenticateRequest::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (steam != NULL) {
    set_has_steam();
    id_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.steam)
}

// optional string device = 7;
inline bool AuthenticateRequest::has_device() const {
  return id_case() == kDevice;
}
inline void AuthenticateRequest::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline void AuthenticateRequest::clear_device() {
  if (has_device()) {
    id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& AuthenticateRequest::device() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.device)
  if (has_device()) {
    return id_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
}
inline void AuthenticateRequest::set_device(const char* value) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.device)
}
inline void AuthenticateRequest::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.device)
}
inline ::std::string* AuthenticateRequest::mutable_device() {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.device)
  return id_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest::release_device() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.device)
  if (has_device()) {
    clear_has_id();
    return id_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AuthenticateRequest::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (device != NULL) {
    set_has_device();
    id_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.device)
}

// optional string custom = 8;
inline bool AuthenticateRequest::has_custom() const {
  return id_case() == kCustom;
}
inline void AuthenticateRequest::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void AuthenticateRequest::clear_custom() {
  if (has_custom()) {
    id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& AuthenticateRequest::custom() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.custom)
  if (has_custom()) {
    return id_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
}
inline void AuthenticateRequest::set_custom(const char* value) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.custom)
}
inline void AuthenticateRequest::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.custom)
}
inline ::std::string* AuthenticateRequest::mutable_custom() {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.custom)
  return id_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateRequest::release_custom() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.custom)
  if (has_custom()) {
    clear_has_id();
    return id_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AuthenticateRequest::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (custom != NULL) {
    set_has_custom();
    id_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.custom)
}

inline bool AuthenticateRequest::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void AuthenticateRequest::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline AuthenticateRequest::IdCase AuthenticateRequest::id_case() const {
  return AuthenticateRequest::IdCase(_oneof_case_[0]);
}
inline const AuthenticateRequest* AuthenticateRequest::internal_default_instance() {
  return &AuthenticateRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateResponse_Session

// optional string token = 1;
inline void AuthenticateResponse_Session::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse_Session::token() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Session.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse_Session::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Session.token)
}
inline void AuthenticateResponse_Session::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Session.token)
}
inline void AuthenticateResponse_Session::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Session.token)
}
inline ::std::string* AuthenticateResponse_Session::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Session.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse_Session::release_token() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Session.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse_Session::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Session.token)
}

// optional string udp_token = 2;
inline void AuthenticateResponse_Session::clear_udp_token() {
  udp_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse_Session::udp_token() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Session.udp_token)
  return udp_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse_Session::set_udp_token(const ::std::string& value) {
  
  udp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Session.udp_token)
}
inline void AuthenticateResponse_Session::set_udp_token(const char* value) {
  
  udp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Session.udp_token)
}
inline void AuthenticateResponse_Session::set_udp_token(const char* value, size_t size) {
  
  udp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Session.udp_token)
}
inline ::std::string* AuthenticateResponse_Session::mutable_udp_token() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Session.udp_token)
  return udp_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse_Session::release_udp_token() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Session.udp_token)
  
  return udp_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse_Session::set_allocated_udp_token(::std::string* udp_token) {
  if (udp_token != NULL) {
    
  } else {
    
  }
  udp_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_token);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Session.udp_token)
}

inline const AuthenticateResponse_Session* AuthenticateResponse_Session::internal_default_instance() {
  return &AuthenticateResponse_Session_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateResponse_Error

// optional int32 code = 1;
inline void AuthenticateResponse_Error::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 AuthenticateResponse_Error::code() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.code)
  return code_;
}
inline void AuthenticateResponse_Error::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Error.code)
}

// optional string message = 2;
inline void AuthenticateResponse_Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse_Error::message() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse_Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Error.message)
}
inline void AuthenticateResponse_Error::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Error.message)
}
inline void AuthenticateResponse_Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Error.message)
}
inline ::std::string* AuthenticateResponse_Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse_Error::release_message() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse_Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.message)
}

// optional .server.AuthenticateRequest request = 3;
inline bool AuthenticateResponse_Error::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void AuthenticateResponse_Error::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
inline const ::server::AuthenticateRequest& AuthenticateResponse_Error::request() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.request)
  return request_ != NULL ? *request_
                         : *::server::AuthenticateRequest::internal_default_instance();
}
inline ::server::AuthenticateRequest* AuthenticateResponse_Error::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::server::AuthenticateRequest;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.request)
  return request_;
}
inline ::server::AuthenticateRequest* AuthenticateResponse_Error::release_request() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.request)
  
  ::server::AuthenticateRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void AuthenticateResponse_Error::set_allocated_request(::server::AuthenticateRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.request)
}

inline const AuthenticateResponse_Error* AuthenticateResponse_Error::internal_default_instance() {
  return &AuthenticateResponse_Error_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateResponse

// optional string collation_id = 1;
inline void AuthenticateResponse::clear_collation_id() {
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticateResponse::collation_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.collation_id)
  return collation_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_collation_id(const ::std::string& value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.collation_id)
}
inline void AuthenticateResponse::set_collation_id(const char* value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.collation_id)
}
inline void AuthenticateResponse::set_collation_id(const char* value, size_t size) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.collation_id)
}
inline ::std::string* AuthenticateResponse::mutable_collation_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.collation_id)
  return collation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateResponse::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.collation_id)
  
  return collation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_collation_id(::std::string* collation_id) {
  if (collation_id != NULL) {
    
  } else {
    
  }
  collation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collation_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.collation_id)
}

// optional .server.AuthenticateResponse.Session session = 2;
inline bool AuthenticateResponse::has_session() const {
  return id_case() == kSession;
}
inline void AuthenticateResponse::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void AuthenticateResponse::clear_session() {
  if (has_session()) {
    delete id_.session_;
    clear_has_id();
  }
}
inline  const ::server::AuthenticateResponse_Session& AuthenticateResponse::session() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.session)
  return has_session()
      ? *id_.session_
      : ::server::AuthenticateResponse_Session::default_instance();
}
inline ::server::AuthenticateResponse_Session* AuthenticateResponse::mutable_session() {
  if (!has_session()) {
    clear_id();
    set_has_session();
    id_.session_ = new ::server::AuthenticateResponse_Session;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.session)
  return id_.session_;
}
inline ::server::AuthenticateResponse_Session* AuthenticateResponse::release_session() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.session)
  if (has_session()) {
    clear_has_id();
    ::server::AuthenticateResponse_Session* temp = id_.session_;
    id_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AuthenticateResponse::set_allocated_session(::server::AuthenticateResponse_Session* session) {
  clear_id();
  if (session) {
    set_has_session();
    id_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.session)
}

// optional .server.AuthenticateResponse.Error error = 3;
inline bool AuthenticateResponse::has_error() const {
  return id_case() == kError;
}
inline void AuthenticateResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void AuthenticateResponse::clear_error() {
  if (has_error()) {
    delete id_.error_;
    clear_has_id();
  }
}
inline  const ::server::AuthenticateResponse_Error& AuthenticateResponse::error() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.error)
  return has_error()
      ? *id_.error_
      : ::server::AuthenticateResponse_Error::default_instance();
}
inline ::server::AuthenticateResponse_Error* AuthenticateResponse::mutable_error() {
  if (!has_error()) {
    clear_id();
    set_has_error();
    id_.error_ = new ::server::AuthenticateResponse_Error;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.error)
  return id_.error_;
}
inline ::server::AuthenticateResponse_Error* AuthenticateResponse::release_error() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.error)
  if (has_error()) {
    clear_has_id();
    ::server::AuthenticateResponse_Error* temp = id_.error_;
    id_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AuthenticateResponse::set_allocated_error(::server::AuthenticateResponse_Error* error) {
  clear_id();
  if (error) {
    set_has_error();
    id_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.error)
}

inline bool AuthenticateResponse::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void AuthenticateResponse::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline AuthenticateResponse::IdCase AuthenticateResponse::id_case() const {
  return AuthenticateResponse::IdCase(_oneof_case_[0]);
}
inline const AuthenticateResponse* AuthenticateResponse::internal_default_instance() {
  return &AuthenticateResponse_default_instance_.get();
}
// -------------------------------------------------------------------

// Envelope

// optional string collation_id = 1;
inline void Envelope::clear_collation_id() {
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Envelope::collation_id() const {
  // @@protoc_insertion_point(field_get:server.Envelope.collation_id)
  return collation_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Envelope::set_collation_id(const ::std::string& value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Envelope.collation_id)
}
inline void Envelope::set_collation_id(const char* value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Envelope.collation_id)
}
inline void Envelope::set_collation_id(const char* value, size_t size) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Envelope.collation_id)
}
inline ::std::string* Envelope::mutable_collation_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Envelope.collation_id)
  return collation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Envelope::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.Envelope.collation_id)
  
  return collation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Envelope::set_allocated_collation_id(::std::string* collation_id) {
  if (collation_id != NULL) {
    
  } else {
    
  }
  collation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collation_id);
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.collation_id)
}

// optional .server.Error error = 2;
inline bool Envelope::has_error() const {
  return payload_case() == kError;
}
inline void Envelope::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Envelope::clear_error() {
  if (has_error()) {
    delete payload_.error_;
    clear_has_payload();
  }
}
inline  const ::server::Error& Envelope::error() const {
  // @@protoc_insertion_point(field_get:server.Envelope.error)
  return has_error()
      ? *payload_.error_
      : ::server::Error::default_instance();
}
inline ::server::Error* Envelope::mutable_error() {
  if (!has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = new ::server::Error;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.error)
  return payload_.error_;
}
inline ::server::Error* Envelope::release_error() {
  // @@protoc_insertion_point(field_release:server.Envelope.error)
  if (has_error()) {
    clear_has_payload();
    ::server::Error* temp = payload_.error_;
    payload_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_error(::server::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.error)
}

// optional .server.Heartbeat heartbeat = 3;
inline bool Envelope::has_heartbeat() const {
  return payload_case() == kHeartbeat;
}
inline void Envelope::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void Envelope::clear_heartbeat() {
  if (has_heartbeat()) {
    delete payload_.heartbeat_;
    clear_has_payload();
  }
}
inline  const ::server::Heartbeat& Envelope::heartbeat() const {
  // @@protoc_insertion_point(field_get:server.Envelope.heartbeat)
  return has_heartbeat()
      ? *payload_.heartbeat_
      : ::server::Heartbeat::default_instance();
}
inline ::server::Heartbeat* Envelope::mutable_heartbeat() {
  if (!has_heartbeat()) {
    clear_payload();
    set_has_heartbeat();
    payload_.heartbeat_ = new ::server::Heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.heartbeat)
  return payload_.heartbeat_;
}
inline ::server::Heartbeat* Envelope::release_heartbeat() {
  // @@protoc_insertion_point(field_release:server.Envelope.heartbeat)
  if (has_heartbeat()) {
    clear_has_payload();
    ::server::Heartbeat* temp = payload_.heartbeat_;
    payload_.heartbeat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_heartbeat(::server::Heartbeat* heartbeat) {
  clear_payload();
  if (heartbeat) {
    set_has_heartbeat();
    payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.heartbeat)
}

// optional .server.Logout logout = 4;
inline bool Envelope::has_logout() const {
  return payload_case() == kLogout;
}
inline void Envelope::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
inline void Envelope::clear_logout() {
  if (has_logout()) {
    delete payload_.logout_;
    clear_has_payload();
  }
}
inline  const ::server::Logout& Envelope::logout() const {
  // @@protoc_insertion_point(field_get:server.Envelope.logout)
  return has_logout()
      ? *payload_.logout_
      : ::server::Logout::default_instance();
}
inline ::server::Logout* Envelope::mutable_logout() {
  if (!has_logout()) {
    clear_payload();
    set_has_logout();
    payload_.logout_ = new ::server::Logout;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.logout)
  return payload_.logout_;
}
inline ::server::Logout* Envelope::release_logout() {
  // @@protoc_insertion_point(field_release:server.Envelope.logout)
  if (has_logout()) {
    clear_has_payload();
    ::server::Logout* temp = payload_.logout_;
    payload_.logout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_logout(::server::Logout* logout) {
  clear_payload();
  if (logout) {
    set_has_logout();
    payload_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.logout)
}

// optional .server.TLink link = 5;
inline bool Envelope::has_link() const {
  return payload_case() == kLink;
}
inline void Envelope::set_has_link() {
  _oneof_case_[0] = kLink;
}
inline void Envelope::clear_link() {
  if (has_link()) {
    delete payload_.link_;
    clear_has_payload();
  }
}
inline  const ::server::TLink& Envelope::link() const {
  // @@protoc_insertion_point(field_get:server.Envelope.link)
  return has_link()
      ? *payload_.link_
      : ::server::TLink::default_instance();
}
inline ::server::TLink* Envelope::mutable_link() {
  if (!has_link()) {
    clear_payload();
    set_has_link();
    payload_.link_ = new ::server::TLink;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.link)
  return payload_.link_;
}
inline ::server::TLink* Envelope::release_link() {
  // @@protoc_insertion_point(field_release:server.Envelope.link)
  if (has_link()) {
    clear_has_payload();
    ::server::TLink* temp = payload_.link_;
    payload_.link_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_link(::server::TLink* link) {
  clear_payload();
  if (link) {
    set_has_link();
    payload_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.link)
}

// optional .server.TUnlink unlink = 6;
inline bool Envelope::has_unlink() const {
  return payload_case() == kUnlink;
}
inline void Envelope::set_has_unlink() {
  _oneof_case_[0] = kUnlink;
}
inline void Envelope::clear_unlink() {
  if (has_unlink()) {
    delete payload_.unlink_;
    clear_has_payload();
  }
}
inline  const ::server::TUnlink& Envelope::unlink() const {
  // @@protoc_insertion_point(field_get:server.Envelope.unlink)
  return has_unlink()
      ? *payload_.unlink_
      : ::server::TUnlink::default_instance();
}
inline ::server::TUnlink* Envelope::mutable_unlink() {
  if (!has_unlink()) {
    clear_payload();
    set_has_unlink();
    payload_.unlink_ = new ::server::TUnlink;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.unlink)
  return payload_.unlink_;
}
inline ::server::TUnlink* Envelope::release_unlink() {
  // @@protoc_insertion_point(field_release:server.Envelope.unlink)
  if (has_unlink()) {
    clear_has_payload();
    ::server::TUnlink* temp = payload_.unlink_;
    payload_.unlink_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_unlink(::server::TUnlink* unlink) {
  clear_payload();
  if (unlink) {
    set_has_unlink();
    payload_.unlink_ = unlink;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.unlink)
}

// optional .server.TSelfFetch self_fetch = 7;
inline bool Envelope::has_self_fetch() const {
  return payload_case() == kSelfFetch;
}
inline void Envelope::set_has_self_fetch() {
  _oneof_case_[0] = kSelfFetch;
}
inline void Envelope::clear_self_fetch() {
  if (has_self_fetch()) {
    delete payload_.self_fetch_;
    clear_has_payload();
  }
}
inline  const ::server::TSelfFetch& Envelope::self_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_fetch)
  return has_self_fetch()
      ? *payload_.self_fetch_
      : ::server::TSelfFetch::default_instance();
}
inline ::server::TSelfFetch* Envelope::mutable_self_fetch() {
  if (!has_self_fetch()) {
    clear_payload();
    set_has_self_fetch();
    payload_.self_fetch_ = new ::server::TSelfFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_fetch)
  return payload_.self_fetch_;
}
inline ::server::TSelfFetch* Envelope::release_self_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_fetch)
  if (has_self_fetch()) {
    clear_has_payload();
    ::server::TSelfFetch* temp = payload_.self_fetch_;
    payload_.self_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_self_fetch(::server::TSelfFetch* self_fetch) {
  clear_payload();
  if (self_fetch) {
    set_has_self_fetch();
    payload_.self_fetch_ = self_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self_fetch)
}

// optional .server.TSelfUpdate self_update = 8;
inline bool Envelope::has_self_update() const {
  return payload_case() == kSelfUpdate;
}
inline void Envelope::set_has_self_update() {
  _oneof_case_[0] = kSelfUpdate;
}
inline void Envelope::clear_self_update() {
  if (has_self_update()) {
    delete payload_.self_update_;
    clear_has_payload();
  }
}
inline  const ::server::TSelfUpdate& Envelope::self_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_update)
  return has_self_update()
      ? *payload_.self_update_
      : ::server::TSelfUpdate::default_instance();
}
inline ::server::TSelfUpdate* Envelope::mutable_self_update() {
  if (!has_self_update()) {
    clear_payload();
    set_has_self_update();
    payload_.self_update_ = new ::server::TSelfUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_update)
  return payload_.self_update_;
}
inline ::server::TSelfUpdate* Envelope::release_self_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_update)
  if (has_self_update()) {
    clear_has_payload();
    ::server::TSelfUpdate* temp = payload_.self_update_;
    payload_.self_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_self_update(::server::TSelfUpdate* self_update) {
  clear_payload();
  if (self_update) {
    set_has_self_update();
    payload_.self_update_ = self_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self_update)
}

// optional .server.TUsersFetch users_fetch = 9;
inline bool Envelope::has_users_fetch() const {
  return payload_case() == kUsersFetch;
}
inline void Envelope::set_has_users_fetch() {
  _oneof_case_[0] = kUsersFetch;
}
inline void Envelope::clear_users_fetch() {
  if (has_users_fetch()) {
    delete payload_.users_fetch_;
    clear_has_payload();
  }
}
inline  const ::server::TUsersFetch& Envelope::users_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users_fetch)
  return has_users_fetch()
      ? *payload_.users_fetch_
      : ::server::TUsersFetch::default_instance();
}
inline ::server::TUsersFetch* Envelope::mutable_users_fetch() {
  if (!has_users_fetch()) {
    clear_payload();
    set_has_users_fetch();
    payload_.users_fetch_ = new ::server::TUsersFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.users_fetch)
  return payload_.users_fetch_;
}
inline ::server::TUsersFetch* Envelope::release_users_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.users_fetch)
  if (has_users_fetch()) {
    clear_has_payload();
    ::server::TUsersFetch* temp = payload_.users_fetch_;
    payload_.users_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_users_fetch(::server::TUsersFetch* users_fetch) {
  clear_payload();
  if (users_fetch) {
    set_has_users_fetch();
    payload_.users_fetch_ = users_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.users_fetch)
}

// optional .server.TSelf self = 10;
inline bool Envelope::has_self() const {
  return payload_case() == kSelf;
}
inline void Envelope::set_has_self() {
  _oneof_case_[0] = kSelf;
}
inline void Envelope::clear_self() {
  if (has_self()) {
    delete payload_.self_;
    clear_has_payload();
  }
}
inline  const ::server::TSelf& Envelope::self() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self)
  return has_self()
      ? *payload_.self_
      : ::server::TSelf::default_instance();
}
inline ::server::TSelf* Envelope::mutable_self() {
  if (!has_self()) {
    clear_payload();
    set_has_self();
    payload_.self_ = new ::server::TSelf;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self)
  return payload_.self_;
}
inline ::server::TSelf* Envelope::release_self() {
  // @@protoc_insertion_point(field_release:server.Envelope.self)
  if (has_self()) {
    clear_has_payload();
    ::server::TSelf* temp = payload_.self_;
    payload_.self_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_self(::server::TSelf* self) {
  clear_payload();
  if (self) {
    set_has_self();
    payload_.self_ = self;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self)
}

// optional .server.TUsers users = 11;
inline bool Envelope::has_users() const {
  return payload_case() == kUsers;
}
inline void Envelope::set_has_users() {
  _oneof_case_[0] = kUsers;
}
inline void Envelope::clear_users() {
  if (has_users()) {
    delete payload_.users_;
    clear_has_payload();
  }
}
inline  const ::server::TUsers& Envelope::users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users)
  return has_users()
      ? *payload_.users_
      : ::server::TUsers::default_instance();
}
inline ::server::TUsers* Envelope::mutable_users() {
  if (!has_users()) {
    clear_payload();
    set_has_users();
    payload_.users_ = new ::server::TUsers;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.users)
  return payload_.users_;
}
inline ::server::TUsers* Envelope::release_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.users)
  if (has_users()) {
    clear_has_payload();
    ::server::TUsers* temp = payload_.users_;
    payload_.users_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_users(::server::TUsers* users) {
  clear_payload();
  if (users) {
    set_has_users();
    payload_.users_ = users;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.users)
}

// optional .server.TFriendsAdd friends_add = 12;
inline bool Envelope::has_friends_add() const {
  return payload_case() == kFriendsAdd;
}
inline void Envelope::set_has_friends_add() {
  _oneof_case_[0] = kFriendsAdd;
}
inline void Envelope::clear_friends_add() {
  if (has_friends_add()) {
    delete payload_.friends_add_;
    clear_has_payload();
  }
}
inline  const ::server::TFriendsAdd& Envelope::friends_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_add)
  return has_friends_add()
      ? *payload_.friends_add_
      : ::server::TFriendsAdd::default_instance();
}
inline ::server::TFriendsAdd* Envelope::mutable_friends_add() {
  if (!has_friends_add()) {
    clear_payload();
    set_has_friends_add();
    payload_.friends_add_ = new ::server::TFriendsAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_add)
  return payload_.friends_add_;
}
inline ::server::TFriendsAdd* Envelope::release_friends_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_add)
  if (has_friends_add()) {
    clear_has_payload();
    ::server::TFriendsAdd* temp = payload_.friends_add_;
    payload_.friends_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_friends_add(::server::TFriendsAdd* friends_add) {
  clear_payload();
  if (friends_add) {
    set_has_friends_add();
    payload_.friends_add_ = friends_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_add)
}

// optional .server.TFriendsRemove friends_remove = 13;
inline bool Envelope::has_friends_remove() const {
  return payload_case() == kFriendsRemove;
}
inline void Envelope::set_has_friends_remove() {
  _oneof_case_[0] = kFriendsRemove;
}
inline void Envelope::clear_friends_remove() {
  if (has_friends_remove()) {
    delete payload_.friends_remove_;
    clear_has_payload();
  }
}
inline  const ::server::TFriendsRemove& Envelope::friends_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_remove)
  return has_friends_remove()
      ? *payload_.friends_remove_
      : ::server::TFriendsRemove::default_instance();
}
inline ::server::TFriendsRemove* Envelope::mutable_friends_remove() {
  if (!has_friends_remove()) {
    clear_payload();
    set_has_friends_remove();
    payload_.friends_remove_ = new ::server::TFriendsRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_remove)
  return payload_.friends_remove_;
}
inline ::server::TFriendsRemove* Envelope::release_friends_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_remove)
  if (has_friends_remove()) {
    clear_has_payload();
    ::server::TFriendsRemove* temp = payload_.friends_remove_;
    payload_.friends_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_friends_remove(::server::TFriendsRemove* friends_remove) {
  clear_payload();
  if (friends_remove) {
    set_has_friends_remove();
    payload_.friends_remove_ = friends_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_remove)
}

// optional .server.TFriendsBlock friends_block = 14;
inline bool Envelope::has_friends_block() const {
  return payload_case() == kFriendsBlock;
}
inline void Envelope::set_has_friends_block() {
  _oneof_case_[0] = kFriendsBlock;
}
inline void Envelope::clear_friends_block() {
  if (has_friends_block()) {
    delete payload_.friends_block_;
    clear_has_payload();
  }
}
inline  const ::server::TFriendsBlock& Envelope::friends_block() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_block)
  return has_friends_block()
      ? *payload_.friends_block_
      : ::server::TFriendsBlock::default_instance();
}
inline ::server::TFriendsBlock* Envelope::mutable_friends_block() {
  if (!has_friends_block()) {
    clear_payload();
    set_has_friends_block();
    payload_.friends_block_ = new ::server::TFriendsBlock;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_block)
  return payload_.friends_block_;
}
inline ::server::TFriendsBlock* Envelope::release_friends_block() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_block)
  if (has_friends_block()) {
    clear_has_payload();
    ::server::TFriendsBlock* temp = payload_.friends_block_;
    payload_.friends_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_friends_block(::server::TFriendsBlock* friends_block) {
  clear_payload();
  if (friends_block) {
    set_has_friends_block();
    payload_.friends_block_ = friends_block;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_block)
}

// optional .server.TFriendsList friends_list = 15;
inline bool Envelope::has_friends_list() const {
  return payload_case() == kFriendsList;
}
inline void Envelope::set_has_friends_list() {
  _oneof_case_[0] = kFriendsList;
}
inline void Envelope::clear_friends_list() {
  if (has_friends_list()) {
    delete payload_.friends_list_;
    clear_has_payload();
  }
}
inline  const ::server::TFriendsList& Envelope::friends_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_list)
  return has_friends_list()
      ? *payload_.friends_list_
      : ::server::TFriendsList::default_instance();
}
inline ::server::TFriendsList* Envelope::mutable_friends_list() {
  if (!has_friends_list()) {
    clear_payload();
    set_has_friends_list();
    payload_.friends_list_ = new ::server::TFriendsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_list)
  return payload_.friends_list_;
}
inline ::server::TFriendsList* Envelope::release_friends_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_list)
  if (has_friends_list()) {
    clear_has_payload();
    ::server::TFriendsList* temp = payload_.friends_list_;
    payload_.friends_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_friends_list(::server::TFriendsList* friends_list) {
  clear_payload();
  if (friends_list) {
    set_has_friends_list();
    payload_.friends_list_ = friends_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_list)
}

// optional .server.TFriends friends = 16;
inline bool Envelope::has_friends() const {
  return payload_case() == kFriends;
}
inline void Envelope::set_has_friends() {
  _oneof_case_[0] = kFriends;
}
inline void Envelope::clear_friends() {
  if (has_friends()) {
    delete payload_.friends_;
    clear_has_payload();
  }
}
inline  const ::server::TFriends& Envelope::friends() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends)
  return has_friends()
      ? *payload_.friends_
      : ::server::TFriends::default_instance();
}
inline ::server::TFriends* Envelope::mutable_friends() {
  if (!has_friends()) {
    clear_payload();
    set_has_friends();
    payload_.friends_ = new ::server::TFriends;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends)
  return payload_.friends_;
}
inline ::server::TFriends* Envelope::release_friends() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends)
  if (has_friends()) {
    clear_has_payload();
    ::server::TFriends* temp = payload_.friends_;
    payload_.friends_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_friends(::server::TFriends* friends) {
  clear_payload();
  if (friends) {
    set_has_friends();
    payload_.friends_ = friends;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends)
}

// optional .server.TGroupsCreate groups_create = 17;
inline bool Envelope::has_groups_create() const {
  return payload_case() == kGroupsCreate;
}
inline void Envelope::set_has_groups_create() {
  _oneof_case_[0] = kGroupsCreate;
}
inline void Envelope::clear_groups_create() {
  if (has_groups_create()) {
    delete payload_.groups_create_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsCreate& Envelope::groups_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_create)
  return has_groups_create()
      ? *payload_.groups_create_
      : ::server::TGroupsCreate::default_instance();
}
inline ::server::TGroupsCreate* Envelope::mutable_groups_create() {
  if (!has_groups_create()) {
    clear_payload();
    set_has_groups_create();
    payload_.groups_create_ = new ::server::TGroupsCreate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_create)
  return payload_.groups_create_;
}
inline ::server::TGroupsCreate* Envelope::release_groups_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_create)
  if (has_groups_create()) {
    clear_has_payload();
    ::server::TGroupsCreate* temp = payload_.groups_create_;
    payload_.groups_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_create(::server::TGroupsCreate* groups_create) {
  clear_payload();
  if (groups_create) {
    set_has_groups_create();
    payload_.groups_create_ = groups_create;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_create)
}

// optional .server.TGroupsUpdate groups_update = 18;
inline bool Envelope::has_groups_update() const {
  return payload_case() == kGroupsUpdate;
}
inline void Envelope::set_has_groups_update() {
  _oneof_case_[0] = kGroupsUpdate;
}
inline void Envelope::clear_groups_update() {
  if (has_groups_update()) {
    delete payload_.groups_update_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsUpdate& Envelope::groups_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_update)
  return has_groups_update()
      ? *payload_.groups_update_
      : ::server::TGroupsUpdate::default_instance();
}
inline ::server::TGroupsUpdate* Envelope::mutable_groups_update() {
  if (!has_groups_update()) {
    clear_payload();
    set_has_groups_update();
    payload_.groups_update_ = new ::server::TGroupsUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_update)
  return payload_.groups_update_;
}
inline ::server::TGroupsUpdate* Envelope::release_groups_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_update)
  if (has_groups_update()) {
    clear_has_payload();
    ::server::TGroupsUpdate* temp = payload_.groups_update_;
    payload_.groups_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_update(::server::TGroupsUpdate* groups_update) {
  clear_payload();
  if (groups_update) {
    set_has_groups_update();
    payload_.groups_update_ = groups_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_update)
}

// optional .server.TGroupsRemove groups_remove = 19;
inline bool Envelope::has_groups_remove() const {
  return payload_case() == kGroupsRemove;
}
inline void Envelope::set_has_groups_remove() {
  _oneof_case_[0] = kGroupsRemove;
}
inline void Envelope::clear_groups_remove() {
  if (has_groups_remove()) {
    delete payload_.groups_remove_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsRemove& Envelope::groups_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_remove)
  return has_groups_remove()
      ? *payload_.groups_remove_
      : ::server::TGroupsRemove::default_instance();
}
inline ::server::TGroupsRemove* Envelope::mutable_groups_remove() {
  if (!has_groups_remove()) {
    clear_payload();
    set_has_groups_remove();
    payload_.groups_remove_ = new ::server::TGroupsRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_remove)
  return payload_.groups_remove_;
}
inline ::server::TGroupsRemove* Envelope::release_groups_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_remove)
  if (has_groups_remove()) {
    clear_has_payload();
    ::server::TGroupsRemove* temp = payload_.groups_remove_;
    payload_.groups_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_remove(::server::TGroupsRemove* groups_remove) {
  clear_payload();
  if (groups_remove) {
    set_has_groups_remove();
    payload_.groups_remove_ = groups_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_remove)
}

// optional .server.TGroupsFetch groups_fetch = 20;
inline bool Envelope::has_groups_fetch() const {
  return payload_case() == kGroupsFetch;
}
inline void Envelope::set_has_groups_fetch() {
  _oneof_case_[0] = kGroupsFetch;
}
inline void Envelope::clear_groups_fetch() {
  if (has_groups_fetch()) {
    delete payload_.groups_fetch_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsFetch& Envelope::groups_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_fetch)
  return has_groups_fetch()
      ? *payload_.groups_fetch_
      : ::server::TGroupsFetch::default_instance();
}
inline ::server::TGroupsFetch* Envelope::mutable_groups_fetch() {
  if (!has_groups_fetch()) {
    clear_payload();
    set_has_groups_fetch();
    payload_.groups_fetch_ = new ::server::TGroupsFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_fetch)
  return payload_.groups_fetch_;
}
inline ::server::TGroupsFetch* Envelope::release_groups_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_fetch)
  if (has_groups_fetch()) {
    clear_has_payload();
    ::server::TGroupsFetch* temp = payload_.groups_fetch_;
    payload_.groups_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_fetch(::server::TGroupsFetch* groups_fetch) {
  clear_payload();
  if (groups_fetch) {
    set_has_groups_fetch();
    payload_.groups_fetch_ = groups_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_fetch)
}

// optional .server.TGroupsList groups_list = 21;
inline bool Envelope::has_groups_list() const {
  return payload_case() == kGroupsList;
}
inline void Envelope::set_has_groups_list() {
  _oneof_case_[0] = kGroupsList;
}
inline void Envelope::clear_groups_list() {
  if (has_groups_list()) {
    delete payload_.groups_list_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsList& Envelope::groups_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_list)
  return has_groups_list()
      ? *payload_.groups_list_
      : ::server::TGroupsList::default_instance();
}
inline ::server::TGroupsList* Envelope::mutable_groups_list() {
  if (!has_groups_list()) {
    clear_payload();
    set_has_groups_list();
    payload_.groups_list_ = new ::server::TGroupsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_list)
  return payload_.groups_list_;
}
inline ::server::TGroupsList* Envelope::release_groups_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_list)
  if (has_groups_list()) {
    clear_has_payload();
    ::server::TGroupsList* temp = payload_.groups_list_;
    payload_.groups_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_list(::server::TGroupsList* groups_list) {
  clear_payload();
  if (groups_list) {
    set_has_groups_list();
    payload_.groups_list_ = groups_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_list)
}

// optional .server.TGroupsSelfList groups_self_list = 22;
inline bool Envelope::has_groups_self_list() const {
  return payload_case() == kGroupsSelfList;
}
inline void Envelope::set_has_groups_self_list() {
  _oneof_case_[0] = kGroupsSelfList;
}
inline void Envelope::clear_groups_self_list() {
  if (has_groups_self_list()) {
    delete payload_.groups_self_list_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsSelfList& Envelope::groups_self_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_self_list)
  return has_groups_self_list()
      ? *payload_.groups_self_list_
      : ::server::TGroupsSelfList::default_instance();
}
inline ::server::TGroupsSelfList* Envelope::mutable_groups_self_list() {
  if (!has_groups_self_list()) {
    clear_payload();
    set_has_groups_self_list();
    payload_.groups_self_list_ = new ::server::TGroupsSelfList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_self_list)
  return payload_.groups_self_list_;
}
inline ::server::TGroupsSelfList* Envelope::release_groups_self_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_self_list)
  if (has_groups_self_list()) {
    clear_has_payload();
    ::server::TGroupsSelfList* temp = payload_.groups_self_list_;
    payload_.groups_self_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_self_list(::server::TGroupsSelfList* groups_self_list) {
  clear_payload();
  if (groups_self_list) {
    set_has_groups_self_list();
    payload_.groups_self_list_ = groups_self_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_self_list)
}

// optional .server.TGroupUsersList group_users_list = 23;
inline bool Envelope::has_group_users_list() const {
  return payload_case() == kGroupUsersList;
}
inline void Envelope::set_has_group_users_list() {
  _oneof_case_[0] = kGroupUsersList;
}
inline void Envelope::clear_group_users_list() {
  if (has_group_users_list()) {
    delete payload_.group_users_list_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupUsersList& Envelope::group_users_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_list)
  return has_group_users_list()
      ? *payload_.group_users_list_
      : ::server::TGroupUsersList::default_instance();
}
inline ::server::TGroupUsersList* Envelope::mutable_group_users_list() {
  if (!has_group_users_list()) {
    clear_payload();
    set_has_group_users_list();
    payload_.group_users_list_ = new ::server::TGroupUsersList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_list)
  return payload_.group_users_list_;
}
inline ::server::TGroupUsersList* Envelope::release_group_users_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_list)
  if (has_group_users_list()) {
    clear_has_payload();
    ::server::TGroupUsersList* temp = payload_.group_users_list_;
    payload_.group_users_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_group_users_list(::server::TGroupUsersList* group_users_list) {
  clear_payload();
  if (group_users_list) {
    set_has_group_users_list();
    payload_.group_users_list_ = group_users_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_list)
}

// optional .server.TGroupsJoin groups_join = 24;
inline bool Envelope::has_groups_join() const {
  return payload_case() == kGroupsJoin;
}
inline void Envelope::set_has_groups_join() {
  _oneof_case_[0] = kGroupsJoin;
}
inline void Envelope::clear_groups_join() {
  if (has_groups_join()) {
    delete payload_.groups_join_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsJoin& Envelope::groups_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_join)
  return has_groups_join()
      ? *payload_.groups_join_
      : ::server::TGroupsJoin::default_instance();
}
inline ::server::TGroupsJoin* Envelope::mutable_groups_join() {
  if (!has_groups_join()) {
    clear_payload();
    set_has_groups_join();
    payload_.groups_join_ = new ::server::TGroupsJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_join)
  return payload_.groups_join_;
}
inline ::server::TGroupsJoin* Envelope::release_groups_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_join)
  if (has_groups_join()) {
    clear_has_payload();
    ::server::TGroupsJoin* temp = payload_.groups_join_;
    payload_.groups_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_join(::server::TGroupsJoin* groups_join) {
  clear_payload();
  if (groups_join) {
    set_has_groups_join();
    payload_.groups_join_ = groups_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_join)
}

// optional .server.TGroupsLeave groups_leave = 25;
inline bool Envelope::has_groups_leave() const {
  return payload_case() == kGroupsLeave;
}
inline void Envelope::set_has_groups_leave() {
  _oneof_case_[0] = kGroupsLeave;
}
inline void Envelope::clear_groups_leave() {
  if (has_groups_leave()) {
    delete payload_.groups_leave_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsLeave& Envelope::groups_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_leave)
  return has_groups_leave()
      ? *payload_.groups_leave_
      : ::server::TGroupsLeave::default_instance();
}
inline ::server::TGroupsLeave* Envelope::mutable_groups_leave() {
  if (!has_groups_leave()) {
    clear_payload();
    set_has_groups_leave();
    payload_.groups_leave_ = new ::server::TGroupsLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_leave)
  return payload_.groups_leave_;
}
inline ::server::TGroupsLeave* Envelope::release_groups_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_leave)
  if (has_groups_leave()) {
    clear_has_payload();
    ::server::TGroupsLeave* temp = payload_.groups_leave_;
    payload_.groups_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_leave(::server::TGroupsLeave* groups_leave) {
  clear_payload();
  if (groups_leave) {
    set_has_groups_leave();
    payload_.groups_leave_ = groups_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_leave)
}

// optional .server.TGroupUsersAdd group_users_add = 26;
inline bool Envelope::has_group_users_add() const {
  return payload_case() == kGroupUsersAdd;
}
inline void Envelope::set_has_group_users_add() {
  _oneof_case_[0] = kGroupUsersAdd;
}
inline void Envelope::clear_group_users_add() {
  if (has_group_users_add()) {
    delete payload_.group_users_add_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupUsersAdd& Envelope::group_users_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_add)
  return has_group_users_add()
      ? *payload_.group_users_add_
      : ::server::TGroupUsersAdd::default_instance();
}
inline ::server::TGroupUsersAdd* Envelope::mutable_group_users_add() {
  if (!has_group_users_add()) {
    clear_payload();
    set_has_group_users_add();
    payload_.group_users_add_ = new ::server::TGroupUsersAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_add)
  return payload_.group_users_add_;
}
inline ::server::TGroupUsersAdd* Envelope::release_group_users_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_add)
  if (has_group_users_add()) {
    clear_has_payload();
    ::server::TGroupUsersAdd* temp = payload_.group_users_add_;
    payload_.group_users_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_group_users_add(::server::TGroupUsersAdd* group_users_add) {
  clear_payload();
  if (group_users_add) {
    set_has_group_users_add();
    payload_.group_users_add_ = group_users_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_add)
}

// optional .server.TGroupUsersKick group_users_kick = 27;
inline bool Envelope::has_group_users_kick() const {
  return payload_case() == kGroupUsersKick;
}
inline void Envelope::set_has_group_users_kick() {
  _oneof_case_[0] = kGroupUsersKick;
}
inline void Envelope::clear_group_users_kick() {
  if (has_group_users_kick()) {
    delete payload_.group_users_kick_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupUsersKick& Envelope::group_users_kick() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_kick)
  return has_group_users_kick()
      ? *payload_.group_users_kick_
      : ::server::TGroupUsersKick::default_instance();
}
inline ::server::TGroupUsersKick* Envelope::mutable_group_users_kick() {
  if (!has_group_users_kick()) {
    clear_payload();
    set_has_group_users_kick();
    payload_.group_users_kick_ = new ::server::TGroupUsersKick;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_kick)
  return payload_.group_users_kick_;
}
inline ::server::TGroupUsersKick* Envelope::release_group_users_kick() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_kick)
  if (has_group_users_kick()) {
    clear_has_payload();
    ::server::TGroupUsersKick* temp = payload_.group_users_kick_;
    payload_.group_users_kick_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_group_users_kick(::server::TGroupUsersKick* group_users_kick) {
  clear_payload();
  if (group_users_kick) {
    set_has_group_users_kick();
    payload_.group_users_kick_ = group_users_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_kick)
}

// optional .server.TGroupUsersPromote group_users_promote = 28;
inline bool Envelope::has_group_users_promote() const {
  return payload_case() == kGroupUsersPromote;
}
inline void Envelope::set_has_group_users_promote() {
  _oneof_case_[0] = kGroupUsersPromote;
}
inline void Envelope::clear_group_users_promote() {
  if (has_group_users_promote()) {
    delete payload_.group_users_promote_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupUsersPromote& Envelope::group_users_promote() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_promote)
  return has_group_users_promote()
      ? *payload_.group_users_promote_
      : ::server::TGroupUsersPromote::default_instance();
}
inline ::server::TGroupUsersPromote* Envelope::mutable_group_users_promote() {
  if (!has_group_users_promote()) {
    clear_payload();
    set_has_group_users_promote();
    payload_.group_users_promote_ = new ::server::TGroupUsersPromote;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_promote)
  return payload_.group_users_promote_;
}
inline ::server::TGroupUsersPromote* Envelope::release_group_users_promote() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_promote)
  if (has_group_users_promote()) {
    clear_has_payload();
    ::server::TGroupUsersPromote* temp = payload_.group_users_promote_;
    payload_.group_users_promote_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_group_users_promote(::server::TGroupUsersPromote* group_users_promote) {
  clear_payload();
  if (group_users_promote) {
    set_has_group_users_promote();
    payload_.group_users_promote_ = group_users_promote;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_promote)
}

// optional .server.TGroups groups = 29;
inline bool Envelope::has_groups() const {
  return payload_case() == kGroups;
}
inline void Envelope::set_has_groups() {
  _oneof_case_[0] = kGroups;
}
inline void Envelope::clear_groups() {
  if (has_groups()) {
    delete payload_.groups_;
    clear_has_payload();
  }
}
inline  const ::server::TGroups& Envelope::groups() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups)
  return has_groups()
      ? *payload_.groups_
      : ::server::TGroups::default_instance();
}
inline ::server::TGroups* Envelope::mutable_groups() {
  if (!has_groups()) {
    clear_payload();
    set_has_groups();
    payload_.groups_ = new ::server::TGroups;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups)
  return payload_.groups_;
}
inline ::server::TGroups* Envelope::release_groups() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups)
  if (has_groups()) {
    clear_has_payload();
    ::server::TGroups* temp = payload_.groups_;
    payload_.groups_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups(::server::TGroups* groups) {
  clear_payload();
  if (groups) {
    set_has_groups();
    payload_.groups_ = groups;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups)
}

// optional .server.TGroupsSelf groups_self = 30;
inline bool Envelope::has_groups_self() const {
  return payload_case() == kGroupsSelf;
}
inline void Envelope::set_has_groups_self() {
  _oneof_case_[0] = kGroupsSelf;
}
inline void Envelope::clear_groups_self() {
  if (has_groups_self()) {
    delete payload_.groups_self_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupsSelf& Envelope::groups_self() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_self)
  return has_groups_self()
      ? *payload_.groups_self_
      : ::server::TGroupsSelf::default_instance();
}
inline ::server::TGroupsSelf* Envelope::mutable_groups_self() {
  if (!has_groups_self()) {
    clear_payload();
    set_has_groups_self();
    payload_.groups_self_ = new ::server::TGroupsSelf;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_self)
  return payload_.groups_self_;
}
inline ::server::TGroupsSelf* Envelope::release_groups_self() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_self)
  if (has_groups_self()) {
    clear_has_payload();
    ::server::TGroupsSelf* temp = payload_.groups_self_;
    payload_.groups_self_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_groups_self(::server::TGroupsSelf* groups_self) {
  clear_payload();
  if (groups_self) {
    set_has_groups_self();
    payload_.groups_self_ = groups_self;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_self)
}

// optional .server.TGroupUsers group_users = 31;
inline bool Envelope::has_group_users() const {
  return payload_case() == kGroupUsers;
}
inline void Envelope::set_has_group_users() {
  _oneof_case_[0] = kGroupUsers;
}
inline void Envelope::clear_group_users() {
  if (has_group_users()) {
    delete payload_.group_users_;
    clear_has_payload();
  }
}
inline  const ::server::TGroupUsers& Envelope::group_users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users)
  return has_group_users()
      ? *payload_.group_users_
      : ::server::TGroupUsers::default_instance();
}
inline ::server::TGroupUsers* Envelope::mutable_group_users() {
  if (!has_group_users()) {
    clear_payload();
    set_has_group_users();
    payload_.group_users_ = new ::server::TGroupUsers;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users)
  return payload_.group_users_;
}
inline ::server::TGroupUsers* Envelope::release_group_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users)
  if (has_group_users()) {
    clear_has_payload();
    ::server::TGroupUsers* temp = payload_.group_users_;
    payload_.group_users_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_group_users(::server::TGroupUsers* group_users) {
  clear_payload();
  if (group_users) {
    set_has_group_users();
    payload_.group_users_ = group_users;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users)
}

// optional .server.TTopicsJoin topics_join = 32;
inline bool Envelope::has_topics_join() const {
  return payload_case() == kTopicsJoin;
}
inline void Envelope::set_has_topics_join() {
  _oneof_case_[0] = kTopicsJoin;
}
inline void Envelope::clear_topics_join() {
  if (has_topics_join()) {
    delete payload_.topics_join_;
    clear_has_payload();
  }
}
inline  const ::server::TTopicsJoin& Envelope::topics_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics_join)
  return has_topics_join()
      ? *payload_.topics_join_
      : ::server::TTopicsJoin::default_instance();
}
inline ::server::TTopicsJoin* Envelope::mutable_topics_join() {
  if (!has_topics_join()) {
    clear_payload();
    set_has_topics_join();
    payload_.topics_join_ = new ::server::TTopicsJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics_join)
  return payload_.topics_join_;
}
inline ::server::TTopicsJoin* Envelope::release_topics_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics_join)
  if (has_topics_join()) {
    clear_has_payload();
    ::server::TTopicsJoin* temp = payload_.topics_join_;
    payload_.topics_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topics_join(::server::TTopicsJoin* topics_join) {
  clear_payload();
  if (topics_join) {
    set_has_topics_join();
    payload_.topics_join_ = topics_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topics_join)
}

// optional .server.TTopicsLeave topics_leave = 33;
inline bool Envelope::has_topics_leave() const {
  return payload_case() == kTopicsLeave;
}
inline void Envelope::set_has_topics_leave() {
  _oneof_case_[0] = kTopicsLeave;
}
inline void Envelope::clear_topics_leave() {
  if (has_topics_leave()) {
    delete payload_.topics_leave_;
    clear_has_payload();
  }
}
inline  const ::server::TTopicsLeave& Envelope::topics_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics_leave)
  return has_topics_leave()
      ? *payload_.topics_leave_
      : ::server::TTopicsLeave::default_instance();
}
inline ::server::TTopicsLeave* Envelope::mutable_topics_leave() {
  if (!has_topics_leave()) {
    clear_payload();
    set_has_topics_leave();
    payload_.topics_leave_ = new ::server::TTopicsLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics_leave)
  return payload_.topics_leave_;
}
inline ::server::TTopicsLeave* Envelope::release_topics_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics_leave)
  if (has_topics_leave()) {
    clear_has_payload();
    ::server::TTopicsLeave* temp = payload_.topics_leave_;
    payload_.topics_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topics_leave(::server::TTopicsLeave* topics_leave) {
  clear_payload();
  if (topics_leave) {
    set_has_topics_leave();
    payload_.topics_leave_ = topics_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topics_leave)
}

// optional .server.TTopicMessageSend topic_message_send = 34;
inline bool Envelope::has_topic_message_send() const {
  return payload_case() == kTopicMessageSend;
}
inline void Envelope::set_has_topic_message_send() {
  _oneof_case_[0] = kTopicMessageSend;
}
inline void Envelope::clear_topic_message_send() {
  if (has_topic_message_send()) {
    delete payload_.topic_message_send_;
    clear_has_payload();
  }
}
inline  const ::server::TTopicMessageSend& Envelope::topic_message_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_send)
  return has_topic_message_send()
      ? *payload_.topic_message_send_
      : ::server::TTopicMessageSend::default_instance();
}
inline ::server::TTopicMessageSend* Envelope::mutable_topic_message_send() {
  if (!has_topic_message_send()) {
    clear_payload();
    set_has_topic_message_send();
    payload_.topic_message_send_ = new ::server::TTopicMessageSend;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_send)
  return payload_.topic_message_send_;
}
inline ::server::TTopicMessageSend* Envelope::release_topic_message_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_send)
  if (has_topic_message_send()) {
    clear_has_payload();
    ::server::TTopicMessageSend* temp = payload_.topic_message_send_;
    payload_.topic_message_send_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topic_message_send(::server::TTopicMessageSend* topic_message_send) {
  clear_payload();
  if (topic_message_send) {
    set_has_topic_message_send();
    payload_.topic_message_send_ = topic_message_send;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_send)
}

// optional .server.TTopicMessagesList topic_messages_list = 35;
inline bool Envelope::has_topic_messages_list() const {
  return payload_case() == kTopicMessagesList;
}
inline void Envelope::set_has_topic_messages_list() {
  _oneof_case_[0] = kTopicMessagesList;
}
inline void Envelope::clear_topic_messages_list() {
  if (has_topic_messages_list()) {
    delete payload_.topic_messages_list_;
    clear_has_payload();
  }
}
inline  const ::server::TTopicMessagesList& Envelope::topic_messages_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages_list)
  return has_topic_messages_list()
      ? *payload_.topic_messages_list_
      : ::server::TTopicMessagesList::default_instance();
}
inline ::server::TTopicMessagesList* Envelope::mutable_topic_messages_list() {
  if (!has_topic_messages_list()) {
    clear_payload();
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = new ::server::TTopicMessagesList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages_list)
  return payload_.topic_messages_list_;
}
inline ::server::TTopicMessagesList* Envelope::release_topic_messages_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages_list)
  if (has_topic_messages_list()) {
    clear_has_payload();
    ::server::TTopicMessagesList* temp = payload_.topic_messages_list_;
    payload_.topic_messages_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topic_messages_list(::server::TTopicMessagesList* topic_messages_list) {
  clear_payload();
  if (topic_messages_list) {
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = topic_messages_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages_list)
}

// optional .server.TTopics topics = 36;
inline bool Envelope::has_topics() const {
  return payload_case() == kTopics;
}
inline void Envelope::set_has_topics() {
  _oneof_case_[0] = kTopics;
}
inline void Envelope::clear_topics() {
  if (has_topics()) {
    delete payload_.topics_;
    clear_has_payload();
  }
}
inline  const ::server::TTopics& Envelope::topics() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics)
  return has_topics()
      ? *payload_.topics_
      : ::server::TTopics::default_instance();
}
inline ::server::TTopics* Envelope::mutable_topics() {
  if (!has_topics()) {
    clear_payload();
    set_has_topics();
    payload_.topics_ = new ::server::TTopics;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics)
  return payload_.topics_;
}
inline ::server::TTopics* Envelope::release_topics() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics)
  if (has_topics()) {
    clear_has_payload();
    ::server::TTopics* temp = payload_.topics_;
    payload_.topics_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topics(::server::TTopics* topics) {
  clear_payload();
  if (topics) {
    set_has_topics();
    payload_.topics_ = topics;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topics)
}

// optional .server.TTopicMessageAck topic_message_ack = 37;
inline bool Envelope::has_topic_message_ack() const {
  return payload_case() == kTopicMessageAck;
}
inline void Envelope::set_has_topic_message_ack() {
  _oneof_case_[0] = kTopicMessageAck;
}
inline void Envelope::clear_topic_message_ack() {
  if (has_topic_message_ack()) {
    delete payload_.topic_message_ack_;
    clear_has_payload();
  }
}
inline  const ::server::TTopicMessageAck& Envelope::topic_message_ack() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_ack)
  return has_topic_message_ack()
      ? *payload_.topic_message_ack_
      : ::server::TTopicMessageAck::default_instance();
}
inline ::server::TTopicMessageAck* Envelope::mutable_topic_message_ack() {
  if (!has_topic_message_ack()) {
    clear_payload();
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = new ::server::TTopicMessageAck;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_ack)
  return payload_.topic_message_ack_;
}
inline ::server::TTopicMessageAck* Envelope::release_topic_message_ack() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_ack)
  if (has_topic_message_ack()) {
    clear_has_payload();
    ::server::TTopicMessageAck* temp = payload_.topic_message_ack_;
    payload_.topic_message_ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topic_message_ack(::server::TTopicMessageAck* topic_message_ack) {
  clear_payload();
  if (topic_message_ack) {
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = topic_message_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_ack)
}

// optional .server.TopicMessage topic_message = 38;
inline bool Envelope::has_topic_message() const {
  return payload_case() == kTopicMessage;
}
inline void Envelope::set_has_topic_message() {
  _oneof_case_[0] = kTopicMessage;
}
inline void Envelope::clear_topic_message() {
  if (has_topic_message()) {
    delete payload_.topic_message_;
    clear_has_payload();
  }
}
inline  const ::server::TopicMessage& Envelope::topic_message() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message)
  return has_topic_message()
      ? *payload_.topic_message_
      : ::server::TopicMessage::default_instance();
}
inline ::server::TopicMessage* Envelope::mutable_topic_message() {
  if (!has_topic_message()) {
    clear_payload();
    set_has_topic_message();
    payload_.topic_message_ = new ::server::TopicMessage;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message)
  return payload_.topic_message_;
}
inline ::server::TopicMessage* Envelope::release_topic_message() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message)
  if (has_topic_message()) {
    clear_has_payload();
    ::server::TopicMessage* temp = payload_.topic_message_;
    payload_.topic_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topic_message(::server::TopicMessage* topic_message) {
  clear_payload();
  if (topic_message) {
    set_has_topic_message();
    payload_.topic_message_ = topic_message;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message)
}

// optional .server.TTopicMessages topic_messages = 39;
inline bool Envelope::has_topic_messages() const {
  return payload_case() == kTopicMessages;
}
inline void Envelope::set_has_topic_messages() {
  _oneof_case_[0] = kTopicMessages;
}
inline void Envelope::clear_topic_messages() {
  if (has_topic_messages()) {
    delete payload_.topic_messages_;
    clear_has_payload();
  }
}
inline  const ::server::TTopicMessages& Envelope::topic_messages() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages)
  return has_topic_messages()
      ? *payload_.topic_messages_
      : ::server::TTopicMessages::default_instance();
}
inline ::server::TTopicMessages* Envelope::mutable_topic_messages() {
  if (!has_topic_messages()) {
    clear_payload();
    set_has_topic_messages();
    payload_.topic_messages_ = new ::server::TTopicMessages;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages)
  return payload_.topic_messages_;
}
inline ::server::TTopicMessages* Envelope::release_topic_messages() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages)
  if (has_topic_messages()) {
    clear_has_payload();
    ::server::TTopicMessages* temp = payload_.topic_messages_;
    payload_.topic_messages_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topic_messages(::server::TTopicMessages* topic_messages) {
  clear_payload();
  if (topic_messages) {
    set_has_topic_messages();
    payload_.topic_messages_ = topic_messages;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages)
}

// optional .server.TopicPresence topic_presence = 40;
inline bool Envelope::has_topic_presence() const {
  return payload_case() == kTopicPresence;
}
inline void Envelope::set_has_topic_presence() {
  _oneof_case_[0] = kTopicPresence;
}
inline void Envelope::clear_topic_presence() {
  if (has_topic_presence()) {
    delete payload_.topic_presence_;
    clear_has_payload();
  }
}
inline  const ::server::TopicPresence& Envelope::topic_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_presence)
  return has_topic_presence()
      ? *payload_.topic_presence_
      : ::server::TopicPresence::default_instance();
}
inline ::server::TopicPresence* Envelope::mutable_topic_presence() {
  if (!has_topic_presence()) {
    clear_payload();
    set_has_topic_presence();
    payload_.topic_presence_ = new ::server::TopicPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_presence)
  return payload_.topic_presence_;
}
inline ::server::TopicPresence* Envelope::release_topic_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_presence)
  if (has_topic_presence()) {
    clear_has_payload();
    ::server::TopicPresence* temp = payload_.topic_presence_;
    payload_.topic_presence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_topic_presence(::server::TopicPresence* topic_presence) {
  clear_payload();
  if (topic_presence) {
    set_has_topic_presence();
    payload_.topic_presence_ = topic_presence;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_presence)
}

// optional .server.TMatchCreate match_create = 41;
inline bool Envelope::has_match_create() const {
  return payload_case() == kMatchCreate;
}
inline void Envelope::set_has_match_create() {
  _oneof_case_[0] = kMatchCreate;
}
inline void Envelope::clear_match_create() {
  if (has_match_create()) {
    delete payload_.match_create_;
    clear_has_payload();
  }
}
inline  const ::server::TMatchCreate& Envelope::match_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_create)
  return has_match_create()
      ? *payload_.match_create_
      : ::server::TMatchCreate::default_instance();
}
inline ::server::TMatchCreate* Envelope::mutable_match_create() {
  if (!has_match_create()) {
    clear_payload();
    set_has_match_create();
    payload_.match_create_ = new ::server::TMatchCreate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_create)
  return payload_.match_create_;
}
inline ::server::TMatchCreate* Envelope::release_match_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_create)
  if (has_match_create()) {
    clear_has_payload();
    ::server::TMatchCreate* temp = payload_.match_create_;
    payload_.match_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_match_create(::server::TMatchCreate* match_create) {
  clear_payload();
  if (match_create) {
    set_has_match_create();
    payload_.match_create_ = match_create;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_create)
}

// optional .server.TMatchesJoin matches_join = 42;
inline bool Envelope::has_matches_join() const {
  return payload_case() == kMatchesJoin;
}
inline void Envelope::set_has_matches_join() {
  _oneof_case_[0] = kMatchesJoin;
}
inline void Envelope::clear_matches_join() {
  if (has_matches_join()) {
    delete payload_.matches_join_;
    clear_has_payload();
  }
}
inline  const ::server::TMatchesJoin& Envelope::matches_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches_join)
  return has_matches_join()
      ? *payload_.matches_join_
      : ::server::TMatchesJoin::default_instance();
}
inline ::server::TMatchesJoin* Envelope::mutable_matches_join() {
  if (!has_matches_join()) {
    clear_payload();
    set_has_matches_join();
    payload_.matches_join_ = new ::server::TMatchesJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches_join)
  return payload_.matches_join_;
}
inline ::server::TMatchesJoin* Envelope::release_matches_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches_join)
  if (has_matches_join()) {
    clear_has_payload();
    ::server::TMatchesJoin* temp = payload_.matches_join_;
    payload_.matches_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_matches_join(::server::TMatchesJoin* matches_join) {
  clear_payload();
  if (matches_join) {
    set_has_matches_join();
    payload_.matches_join_ = matches_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matches_join)
}

// optional .server.TMatchesLeave matches_leave = 43;
inline bool Envelope::has_matches_leave() const {
  return payload_case() == kMatchesLeave;
}
inline void Envelope::set_has_matches_leave() {
  _oneof_case_[0] = kMatchesLeave;
}
inline void Envelope::clear_matches_leave() {
  if (has_matches_leave()) {
    delete payload_.matches_leave_;
    clear_has_payload();
  }
}
inline  const ::server::TMatchesLeave& Envelope::matches_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches_leave)
  return has_matches_leave()
      ? *payload_.matches_leave_
      : ::server::TMatchesLeave::default_instance();
}
inline ::server::TMatchesLeave* Envelope::mutable_matches_leave() {
  if (!has_matches_leave()) {
    clear_payload();
    set_has_matches_leave();
    payload_.matches_leave_ = new ::server::TMatchesLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches_leave)
  return payload_.matches_leave_;
}
inline ::server::TMatchesLeave* Envelope::release_matches_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches_leave)
  if (has_matches_leave()) {
    clear_has_payload();
    ::server::TMatchesLeave* temp = payload_.matches_leave_;
    payload_.matches_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_matches_leave(::server::TMatchesLeave* matches_leave) {
  clear_payload();
  if (matches_leave) {
    set_has_matches_leave();
    payload_.matches_leave_ = matches_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matches_leave)
}

// optional .server.MatchDataSend match_data_send = 44;
inline bool Envelope::has_match_data_send() const {
  return payload_case() == kMatchDataSend;
}
inline void Envelope::set_has_match_data_send() {
  _oneof_case_[0] = kMatchDataSend;
}
inline void Envelope::clear_match_data_send() {
  if (has_match_data_send()) {
    delete payload_.match_data_send_;
    clear_has_payload();
  }
}
inline  const ::server::MatchDataSend& Envelope::match_data_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data_send)
  return has_match_data_send()
      ? *payload_.match_data_send_
      : ::server::MatchDataSend::default_instance();
}
inline ::server::MatchDataSend* Envelope::mutable_match_data_send() {
  if (!has_match_data_send()) {
    clear_payload();
    set_has_match_data_send();
    payload_.match_data_send_ = new ::server::MatchDataSend;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data_send)
  return payload_.match_data_send_;
}
inline ::server::MatchDataSend* Envelope::release_match_data_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data_send)
  if (has_match_data_send()) {
    clear_has_payload();
    ::server::MatchDataSend* temp = payload_.match_data_send_;
    payload_.match_data_send_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_match_data_send(::server::MatchDataSend* match_data_send) {
  clear_payload();
  if (match_data_send) {
    set_has_match_data_send();
    payload_.match_data_send_ = match_data_send;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data_send)
}

// optional .server.TMatch match = 45;
inline bool Envelope::has_match() const {
  return payload_case() == kMatch;
}
inline void Envelope::set_has_match() {
  _oneof_case_[0] = kMatch;
}
inline void Envelope::clear_match() {
  if (has_match()) {
    delete payload_.match_;
    clear_has_payload();
  }
}
inline  const ::server::TMatch& Envelope::match() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match)
  return has_match()
      ? *payload_.match_
      : ::server::TMatch::default_instance();
}
inline ::server::TMatch* Envelope::mutable_match() {
  if (!has_match()) {
    clear_payload();
    set_has_match();
    payload_.match_ = new ::server::TMatch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match)
  return payload_.match_;
}
inline ::server::TMatch* Envelope::release_match() {
  // @@protoc_insertion_point(field_release:server.Envelope.match)
  if (has_match()) {
    clear_has_payload();
    ::server::TMatch* temp = payload_.match_;
    payload_.match_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_match(::server::TMatch* match) {
  clear_payload();
  if (match) {
    set_has_match();
    payload_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match)
}

// optional .server.TMatches matches = 46;
inline bool Envelope::has_matches() const {
  return payload_case() == kMatches;
}
inline void Envelope::set_has_matches() {
  _oneof_case_[0] = kMatches;
}
inline void Envelope::clear_matches() {
  if (has_matches()) {
    delete payload_.matches_;
    clear_has_payload();
  }
}
inline  const ::server::TMatches& Envelope::matches() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches)
  return has_matches()
      ? *payload_.matches_
      : ::server::TMatches::default_instance();
}
inline ::server::TMatches* Envelope::mutable_matches() {
  if (!has_matches()) {
    clear_payload();
    set_has_matches();
    payload_.matches_ = new ::server::TMatches;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches)
  return payload_.matches_;
}
inline ::server::TMatches* Envelope::release_matches() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches)
  if (has_matches()) {
    clear_has_payload();
    ::server::TMatches* temp = payload_.matches_;
    payload_.matches_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_matches(::server::TMatches* matches) {
  clear_payload();
  if (matches) {
    set_has_matches();
    payload_.matches_ = matches;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matches)
}

// optional .server.MatchData match_data = 47;
inline bool Envelope::has_match_data() const {
  return payload_case() == kMatchData;
}
inline void Envelope::set_has_match_data() {
  _oneof_case_[0] = kMatchData;
}
inline void Envelope::clear_match_data() {
  if (has_match_data()) {
    delete payload_.match_data_;
    clear_has_payload();
  }
}
inline  const ::server::MatchData& Envelope::match_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data)
  return has_match_data()
      ? *payload_.match_data_
      : ::server::MatchData::default_instance();
}
inline ::server::MatchData* Envelope::mutable_match_data() {
  if (!has_match_data()) {
    clear_payload();
    set_has_match_data();
    payload_.match_data_ = new ::server::MatchData;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data)
  return payload_.match_data_;
}
inline ::server::MatchData* Envelope::release_match_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data)
  if (has_match_data()) {
    clear_has_payload();
    ::server::MatchData* temp = payload_.match_data_;
    payload_.match_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_match_data(::server::MatchData* match_data) {
  clear_payload();
  if (match_data) {
    set_has_match_data();
    payload_.match_data_ = match_data;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data)
}

// optional .server.MatchPresence match_presence = 48;
inline bool Envelope::has_match_presence() const {
  return payload_case() == kMatchPresence;
}
inline void Envelope::set_has_match_presence() {
  _oneof_case_[0] = kMatchPresence;
}
inline void Envelope::clear_match_presence() {
  if (has_match_presence()) {
    delete payload_.match_presence_;
    clear_has_payload();
  }
}
inline  const ::server::MatchPresence& Envelope::match_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_presence)
  return has_match_presence()
      ? *payload_.match_presence_
      : ::server::MatchPresence::default_instance();
}
inline ::server::MatchPresence* Envelope::mutable_match_presence() {
  if (!has_match_presence()) {
    clear_payload();
    set_has_match_presence();
    payload_.match_presence_ = new ::server::MatchPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_presence)
  return payload_.match_presence_;
}
inline ::server::MatchPresence* Envelope::release_match_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_presence)
  if (has_match_presence()) {
    clear_has_payload();
    ::server::MatchPresence* temp = payload_.match_presence_;
    payload_.match_presence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_match_presence(::server::MatchPresence* match_presence) {
  clear_payload();
  if (match_presence) {
    set_has_match_presence();
    payload_.match_presence_ = match_presence;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_presence)
}

// optional .server.TStorageList storage_list = 49;
inline bool Envelope::has_storage_list() const {
  return payload_case() == kStorageList;
}
inline void Envelope::set_has_storage_list() {
  _oneof_case_[0] = kStorageList;
}
inline void Envelope::clear_storage_list() {
  if (has_storage_list()) {
    delete payload_.storage_list_;
    clear_has_payload();
  }
}
inline  const ::server::TStorageList& Envelope::storage_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_list)
  return has_storage_list()
      ? *payload_.storage_list_
      : ::server::TStorageList::default_instance();
}
inline ::server::TStorageList* Envelope::mutable_storage_list() {
  if (!has_storage_list()) {
    clear_payload();
    set_has_storage_list();
    payload_.storage_list_ = new ::server::TStorageList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_list)
  return payload_.storage_list_;
}
inline ::server::TStorageList* Envelope::release_storage_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_list)
  if (has_storage_list()) {
    clear_has_payload();
    ::server::TStorageList* temp = payload_.storage_list_;
    payload_.storage_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_storage_list(::server::TStorageList* storage_list) {
  clear_payload();
  if (storage_list) {
    set_has_storage_list();
    payload_.storage_list_ = storage_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_list)
}

// optional .server.TStorageFetch storage_fetch = 50;
inline bool Envelope::has_storage_fetch() const {
  return payload_case() == kStorageFetch;
}
inline void Envelope::set_has_storage_fetch() {
  _oneof_case_[0] = kStorageFetch;
}
inline void Envelope::clear_storage_fetch() {
  if (has_storage_fetch()) {
    delete payload_.storage_fetch_;
    clear_has_payload();
  }
}
inline  const ::server::TStorageFetch& Envelope::storage_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_fetch)
  return has_storage_fetch()
      ? *payload_.storage_fetch_
      : ::server::TStorageFetch::default_instance();
}
inline ::server::TStorageFetch* Envelope::mutable_storage_fetch() {
  if (!has_storage_fetch()) {
    clear_payload();
    set_has_storage_fetch();
    payload_.storage_fetch_ = new ::server::TStorageFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_fetch)
  return payload_.storage_fetch_;
}
inline ::server::TStorageFetch* Envelope::release_storage_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_fetch)
  if (has_storage_fetch()) {
    clear_has_payload();
    ::server::TStorageFetch* temp = payload_.storage_fetch_;
    payload_.storage_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_storage_fetch(::server::TStorageFetch* storage_fetch) {
  clear_payload();
  if (storage_fetch) {
    set_has_storage_fetch();
    payload_.storage_fetch_ = storage_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_fetch)
}

// optional .server.TStorageWrite storage_write = 51;
inline bool Envelope::has_storage_write() const {
  return payload_case() == kStorageWrite;
}
inline void Envelope::set_has_storage_write() {
  _oneof_case_[0] = kStorageWrite;
}
inline void Envelope::clear_storage_write() {
  if (has_storage_write()) {
    delete payload_.storage_write_;
    clear_has_payload();
  }
}
inline  const ::server::TStorageWrite& Envelope::storage_write() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_write)
  return has_storage_write()
      ? *payload_.storage_write_
      : ::server::TStorageWrite::default_instance();
}
inline ::server::TStorageWrite* Envelope::mutable_storage_write() {
  if (!has_storage_write()) {
    clear_payload();
    set_has_storage_write();
    payload_.storage_write_ = new ::server::TStorageWrite;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_write)
  return payload_.storage_write_;
}
inline ::server::TStorageWrite* Envelope::release_storage_write() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_write)
  if (has_storage_write()) {
    clear_has_payload();
    ::server::TStorageWrite* temp = payload_.storage_write_;
    payload_.storage_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_storage_write(::server::TStorageWrite* storage_write) {
  clear_payload();
  if (storage_write) {
    set_has_storage_write();
    payload_.storage_write_ = storage_write;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_write)
}

// optional .server.TStorageUpdate storage_update = 52;
inline bool Envelope::has_storage_update() const {
  return payload_case() == kStorageUpdate;
}
inline void Envelope::set_has_storage_update() {
  _oneof_case_[0] = kStorageUpdate;
}
inline void Envelope::clear_storage_update() {
  if (has_storage_update()) {
    delete payload_.storage_update_;
    clear_has_payload();
  }
}
inline  const ::server::TStorageUpdate& Envelope::storage_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_update)
  return has_storage_update()
      ? *payload_.storage_update_
      : ::server::TStorageUpdate::default_instance();
}
inline ::server::TStorageUpdate* Envelope::mutable_storage_update() {
  if (!has_storage_update()) {
    clear_payload();
    set_has_storage_update();
    payload_.storage_update_ = new ::server::TStorageUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_update)
  return payload_.storage_update_;
}
inline ::server::TStorageUpdate* Envelope::release_storage_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_update)
  if (has_storage_update()) {
    clear_has_payload();
    ::server::TStorageUpdate* temp = payload_.storage_update_;
    payload_.storage_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_storage_update(::server::TStorageUpdate* storage_update) {
  clear_payload();
  if (storage_update) {
    set_has_storage_update();
    payload_.storage_update_ = storage_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_update)
}

// optional .server.TStorageRemove storage_remove = 53;
inline bool Envelope::has_storage_remove() const {
  return payload_case() == kStorageRemove;
}
inline void Envelope::set_has_storage_remove() {
  _oneof_case_[0] = kStorageRemove;
}
inline void Envelope::clear_storage_remove() {
  if (has_storage_remove()) {
    delete payload_.storage_remove_;
    clear_has_payload();
  }
}
inline  const ::server::TStorageRemove& Envelope::storage_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_remove)
  return has_storage_remove()
      ? *payload_.storage_remove_
      : ::server::TStorageRemove::default_instance();
}
inline ::server::TStorageRemove* Envelope::mutable_storage_remove() {
  if (!has_storage_remove()) {
    clear_payload();
    set_has_storage_remove();
    payload_.storage_remove_ = new ::server::TStorageRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_remove)
  return payload_.storage_remove_;
}
inline ::server::TStorageRemove* Envelope::release_storage_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_remove)
  if (has_storage_remove()) {
    clear_has_payload();
    ::server::TStorageRemove* temp = payload_.storage_remove_;
    payload_.storage_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_storage_remove(::server::TStorageRemove* storage_remove) {
  clear_payload();
  if (storage_remove) {
    set_has_storage_remove();
    payload_.storage_remove_ = storage_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_remove)
}

// optional .server.TStorageData storage_data = 54;
inline bool Envelope::has_storage_data() const {
  return payload_case() == kStorageData;
}
inline void Envelope::set_has_storage_data() {
  _oneof_case_[0] = kStorageData;
}
inline void Envelope::clear_storage_data() {
  if (has_storage_data()) {
    delete payload_.storage_data_;
    clear_has_payload();
  }
}
inline  const ::server::TStorageData& Envelope::storage_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_data)
  return has_storage_data()
      ? *payload_.storage_data_
      : ::server::TStorageData::default_instance();
}
inline ::server::TStorageData* Envelope::mutable_storage_data() {
  if (!has_storage_data()) {
    clear_payload();
    set_has_storage_data();
    payload_.storage_data_ = new ::server::TStorageData;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_data)
  return payload_.storage_data_;
}
inline ::server::TStorageData* Envelope::release_storage_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_data)
  if (has_storage_data()) {
    clear_has_payload();
    ::server::TStorageData* temp = payload_.storage_data_;
    payload_.storage_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_storage_data(::server::TStorageData* storage_data) {
  clear_payload();
  if (storage_data) {
    set_has_storage_data();
    payload_.storage_data_ = storage_data;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_data)
}

// optional .server.TStorageKeys storage_keys = 55;
inline bool Envelope::has_storage_keys() const {
  return payload_case() == kStorageKeys;
}
inline void Envelope::set_has_storage_keys() {
  _oneof_case_[0] = kStorageKeys;
}
inline void Envelope::clear_storage_keys() {
  if (has_storage_keys()) {
    delete payload_.storage_keys_;
    clear_has_payload();
  }
}
inline  const ::server::TStorageKeys& Envelope::storage_keys() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_keys)
  return has_storage_keys()
      ? *payload_.storage_keys_
      : ::server::TStorageKeys::default_instance();
}
inline ::server::TStorageKeys* Envelope::mutable_storage_keys() {
  if (!has_storage_keys()) {
    clear_payload();
    set_has_storage_keys();
    payload_.storage_keys_ = new ::server::TStorageKeys;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_keys)
  return payload_.storage_keys_;
}
inline ::server::TStorageKeys* Envelope::release_storage_keys() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_keys)
  if (has_storage_keys()) {
    clear_has_payload();
    ::server::TStorageKeys* temp = payload_.storage_keys_;
    payload_.storage_keys_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_storage_keys(::server::TStorageKeys* storage_keys) {
  clear_payload();
  if (storage_keys) {
    set_has_storage_keys();
    payload_.storage_keys_ = storage_keys;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_keys)
}

// optional .server.TLeaderboardsList leaderboards_list = 56;
inline bool Envelope::has_leaderboards_list() const {
  return payload_case() == kLeaderboardsList;
}
inline void Envelope::set_has_leaderboards_list() {
  _oneof_case_[0] = kLeaderboardsList;
}
inline void Envelope::clear_leaderboards_list() {
  if (has_leaderboards_list()) {
    delete payload_.leaderboards_list_;
    clear_has_payload();
  }
}
inline  const ::server::TLeaderboardsList& Envelope::leaderboards_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboards_list)
  return has_leaderboards_list()
      ? *payload_.leaderboards_list_
      : ::server::TLeaderboardsList::default_instance();
}
inline ::server::TLeaderboardsList* Envelope::mutable_leaderboards_list() {
  if (!has_leaderboards_list()) {
    clear_payload();
    set_has_leaderboards_list();
    payload_.leaderboards_list_ = new ::server::TLeaderboardsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboards_list)
  return payload_.leaderboards_list_;
}
inline ::server::TLeaderboardsList* Envelope::release_leaderboards_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboards_list)
  if (has_leaderboards_list()) {
    clear_has_payload();
    ::server::TLeaderboardsList* temp = payload_.leaderboards_list_;
    payload_.leaderboards_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_leaderboards_list(::server::TLeaderboardsList* leaderboards_list) {
  clear_payload();
  if (leaderboards_list) {
    set_has_leaderboards_list();
    payload_.leaderboards_list_ = leaderboards_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboards_list)
}

// optional .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
inline bool Envelope::has_leaderboard_records_write() const {
  return payload_case() == kLeaderboardRecordsWrite;
}
inline void Envelope::set_has_leaderboard_records_write() {
  _oneof_case_[0] = kLeaderboardRecordsWrite;
}
inline void Envelope::clear_leaderboard_records_write() {
  if (has_leaderboard_records_write()) {
    delete payload_.leaderboard_records_write_;
    clear_has_payload();
  }
}
inline  const ::server::TLeaderboardRecordsWrite& Envelope::leaderboard_records_write() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_write)
  return has_leaderboard_records_write()
      ? *payload_.leaderboard_records_write_
      : ::server::TLeaderboardRecordsWrite::default_instance();
}
inline ::server::TLeaderboardRecordsWrite* Envelope::mutable_leaderboard_records_write() {
  if (!has_leaderboard_records_write()) {
    clear_payload();
    set_has_leaderboard_records_write();
    payload_.leaderboard_records_write_ = new ::server::TLeaderboardRecordsWrite;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_write)
  return payload_.leaderboard_records_write_;
}
inline ::server::TLeaderboardRecordsWrite* Envelope::release_leaderboard_records_write() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_write)
  if (has_leaderboard_records_write()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsWrite* temp = payload_.leaderboard_records_write_;
    payload_.leaderboard_records_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_leaderboard_records_write(::server::TLeaderboardRecordsWrite* leaderboard_records_write) {
  clear_payload();
  if (leaderboard_records_write) {
    set_has_leaderboard_records_write();
    payload_.leaderboard_records_write_ = leaderboard_records_write;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_write)
}

// optional .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
inline bool Envelope::has_leaderboard_records_fetch() const {
  return payload_case() == kLeaderboardRecordsFetch;
}
inline void Envelope::set_has_leaderboard_records_fetch() {
  _oneof_case_[0] = kLeaderboardRecordsFetch;
}
inline void Envelope::clear_leaderboard_records_fetch() {
  if (has_leaderboard_records_fetch()) {
    delete payload_.leaderboard_records_fetch_;
    clear_has_payload();
  }
}
inline  const ::server::TLeaderboardRecordsFetch& Envelope::leaderboard_records_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_fetch)
  return has_leaderboard_records_fetch()
      ? *payload_.leaderboard_records_fetch_
      : ::server::TLeaderboardRecordsFetch::default_instance();
}
inline ::server::TLeaderboardRecordsFetch* Envelope::mutable_leaderboard_records_fetch() {
  if (!has_leaderboard_records_fetch()) {
    clear_payload();
    set_has_leaderboard_records_fetch();
    payload_.leaderboard_records_fetch_ = new ::server::TLeaderboardRecordsFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_fetch)
  return payload_.leaderboard_records_fetch_;
}
inline ::server::TLeaderboardRecordsFetch* Envelope::release_leaderboard_records_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_fetch)
  if (has_leaderboard_records_fetch()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsFetch* temp = payload_.leaderboard_records_fetch_;
    payload_.leaderboard_records_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_leaderboard_records_fetch(::server::TLeaderboardRecordsFetch* leaderboard_records_fetch) {
  clear_payload();
  if (leaderboard_records_fetch) {
    set_has_leaderboard_records_fetch();
    payload_.leaderboard_records_fetch_ = leaderboard_records_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_fetch)
}

// optional .server.TLeaderboardRecordsList leaderboard_records_list = 59;
inline bool Envelope::has_leaderboard_records_list() const {
  return payload_case() == kLeaderboardRecordsList;
}
inline void Envelope::set_has_leaderboard_records_list() {
  _oneof_case_[0] = kLeaderboardRecordsList;
}
inline void Envelope::clear_leaderboard_records_list() {
  if (has_leaderboard_records_list()) {
    delete payload_.leaderboard_records_list_;
    clear_has_payload();
  }
}
inline  const ::server::TLeaderboardRecordsList& Envelope::leaderboard_records_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_list)
  return has_leaderboard_records_list()
      ? *payload_.leaderboard_records_list_
      : ::server::TLeaderboardRecordsList::default_instance();
}
inline ::server::TLeaderboardRecordsList* Envelope::mutable_leaderboard_records_list() {
  if (!has_leaderboard_records_list()) {
    clear_payload();
    set_has_leaderboard_records_list();
    payload_.leaderboard_records_list_ = new ::server::TLeaderboardRecordsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_list)
  return payload_.leaderboard_records_list_;
}
inline ::server::TLeaderboardRecordsList* Envelope::release_leaderboard_records_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_list)
  if (has_leaderboard_records_list()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsList* temp = payload_.leaderboard_records_list_;
    payload_.leaderboard_records_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_leaderboard_records_list(::server::TLeaderboardRecordsList* leaderboard_records_list) {
  clear_payload();
  if (leaderboard_records_list) {
    set_has_leaderboard_records_list();
    payload_.leaderboard_records_list_ = leaderboard_records_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_list)
}

// optional .server.TLeaderboards leaderboards = 60;
inline bool Envelope::has_leaderboards() const {
  return payload_case() == kLeaderboards;
}
inline void Envelope::set_has_leaderboards() {
  _oneof_case_[0] = kLeaderboards;
}
inline void Envelope::clear_leaderboards() {
  if (has_leaderboards()) {
    delete payload_.leaderboards_;
    clear_has_payload();
  }
}
inline  const ::server::TLeaderboards& Envelope::leaderboards() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboards)
  return has_leaderboards()
      ? *payload_.leaderboards_
      : ::server::TLeaderboards::default_instance();
}
inline ::server::TLeaderboards* Envelope::mutable_leaderboards() {
  if (!has_leaderboards()) {
    clear_payload();
    set_has_leaderboards();
    payload_.leaderboards_ = new ::server::TLeaderboards;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboards)
  return payload_.leaderboards_;
}
inline ::server::TLeaderboards* Envelope::release_leaderboards() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboards)
  if (has_leaderboards()) {
    clear_has_payload();
    ::server::TLeaderboards* temp = payload_.leaderboards_;
    payload_.leaderboards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_leaderboards(::server::TLeaderboards* leaderboards) {
  clear_payload();
  if (leaderboards) {
    set_has_leaderboards();
    payload_.leaderboards_ = leaderboards;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboards)
}

// optional .server.TLeaderboardRecords leaderboard_records = 61;
inline bool Envelope::has_leaderboard_records() const {
  return payload_case() == kLeaderboardRecords;
}
inline void Envelope::set_has_leaderboard_records() {
  _oneof_case_[0] = kLeaderboardRecords;
}
inline void Envelope::clear_leaderboard_records() {
  if (has_leaderboard_records()) {
    delete payload_.leaderboard_records_;
    clear_has_payload();
  }
}
inline  const ::server::TLeaderboardRecords& Envelope::leaderboard_records() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records)
  return has_leaderboard_records()
      ? *payload_.leaderboard_records_
      : ::server::TLeaderboardRecords::default_instance();
}
inline ::server::TLeaderboardRecords* Envelope::mutable_leaderboard_records() {
  if (!has_leaderboard_records()) {
    clear_payload();
    set_has_leaderboard_records();
    payload_.leaderboard_records_ = new ::server::TLeaderboardRecords;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records)
  return payload_.leaderboard_records_;
}
inline ::server::TLeaderboardRecords* Envelope::release_leaderboard_records() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records)
  if (has_leaderboard_records()) {
    clear_has_payload();
    ::server::TLeaderboardRecords* temp = payload_.leaderboard_records_;
    payload_.leaderboard_records_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_leaderboard_records(::server::TLeaderboardRecords* leaderboard_records) {
  clear_payload();
  if (leaderboard_records) {
    set_has_leaderboard_records();
    payload_.leaderboard_records_ = leaderboard_records;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records)
}

// optional .server.TMatchmakeAdd matchmake_add = 62;
inline bool Envelope::has_matchmake_add() const {
  return payload_case() == kMatchmakeAdd;
}
inline void Envelope::set_has_matchmake_add() {
  _oneof_case_[0] = kMatchmakeAdd;
}
inline void Envelope::clear_matchmake_add() {
  if (has_matchmake_add()) {
    delete payload_.matchmake_add_;
    clear_has_payload();
  }
}
inline  const ::server::TMatchmakeAdd& Envelope::matchmake_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_add)
  return has_matchmake_add()
      ? *payload_.matchmake_add_
      : ::server::TMatchmakeAdd::default_instance();
}
inline ::server::TMatchmakeAdd* Envelope::mutable_matchmake_add() {
  if (!has_matchmake_add()) {
    clear_payload();
    set_has_matchmake_add();
    payload_.matchmake_add_ = new ::server::TMatchmakeAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_add)
  return payload_.matchmake_add_;
}
inline ::server::TMatchmakeAdd* Envelope::release_matchmake_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_add)
  if (has_matchmake_add()) {
    clear_has_payload();
    ::server::TMatchmakeAdd* temp = payload_.matchmake_add_;
    payload_.matchmake_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_matchmake_add(::server::TMatchmakeAdd* matchmake_add) {
  clear_payload();
  if (matchmake_add) {
    set_has_matchmake_add();
    payload_.matchmake_add_ = matchmake_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_add)
}

// optional .server.TMatchmakeRemove matchmake_remove = 63;
inline bool Envelope::has_matchmake_remove() const {
  return payload_case() == kMatchmakeRemove;
}
inline void Envelope::set_has_matchmake_remove() {
  _oneof_case_[0] = kMatchmakeRemove;
}
inline void Envelope::clear_matchmake_remove() {
  if (has_matchmake_remove()) {
    delete payload_.matchmake_remove_;
    clear_has_payload();
  }
}
inline  const ::server::TMatchmakeRemove& Envelope::matchmake_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_remove)
  return has_matchmake_remove()
      ? *payload_.matchmake_remove_
      : ::server::TMatchmakeRemove::default_instance();
}
inline ::server::TMatchmakeRemove* Envelope::mutable_matchmake_remove() {
  if (!has_matchmake_remove()) {
    clear_payload();
    set_has_matchmake_remove();
    payload_.matchmake_remove_ = new ::server::TMatchmakeRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_remove)
  return payload_.matchmake_remove_;
}
inline ::server::TMatchmakeRemove* Envelope::release_matchmake_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_remove)
  if (has_matchmake_remove()) {
    clear_has_payload();
    ::server::TMatchmakeRemove* temp = payload_.matchmake_remove_;
    payload_.matchmake_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_matchmake_remove(::server::TMatchmakeRemove* matchmake_remove) {
  clear_payload();
  if (matchmake_remove) {
    set_has_matchmake_remove();
    payload_.matchmake_remove_ = matchmake_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_remove)
}

// optional .server.TMatchmakeTicket matchmake_ticket = 64;
inline bool Envelope::has_matchmake_ticket() const {
  return payload_case() == kMatchmakeTicket;
}
inline void Envelope::set_has_matchmake_ticket() {
  _oneof_case_[0] = kMatchmakeTicket;
}
inline void Envelope::clear_matchmake_ticket() {
  if (has_matchmake_ticket()) {
    delete payload_.matchmake_ticket_;
    clear_has_payload();
  }
}
inline  const ::server::TMatchmakeTicket& Envelope::matchmake_ticket() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_ticket)
  return has_matchmake_ticket()
      ? *payload_.matchmake_ticket_
      : ::server::TMatchmakeTicket::default_instance();
}
inline ::server::TMatchmakeTicket* Envelope::mutable_matchmake_ticket() {
  if (!has_matchmake_ticket()) {
    clear_payload();
    set_has_matchmake_ticket();
    payload_.matchmake_ticket_ = new ::server::TMatchmakeTicket;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_ticket)
  return payload_.matchmake_ticket_;
}
inline ::server::TMatchmakeTicket* Envelope::release_matchmake_ticket() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_ticket)
  if (has_matchmake_ticket()) {
    clear_has_payload();
    ::server::TMatchmakeTicket* temp = payload_.matchmake_ticket_;
    payload_.matchmake_ticket_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_matchmake_ticket(::server::TMatchmakeTicket* matchmake_ticket) {
  clear_payload();
  if (matchmake_ticket) {
    set_has_matchmake_ticket();
    payload_.matchmake_ticket_ = matchmake_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_ticket)
}

// optional .server.MatchmakeMatched matchmake_matched = 65;
inline bool Envelope::has_matchmake_matched() const {
  return payload_case() == kMatchmakeMatched;
}
inline void Envelope::set_has_matchmake_matched() {
  _oneof_case_[0] = kMatchmakeMatched;
}
inline void Envelope::clear_matchmake_matched() {
  if (has_matchmake_matched()) {
    delete payload_.matchmake_matched_;
    clear_has_payload();
  }
}
inline  const ::server::MatchmakeMatched& Envelope::matchmake_matched() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_matched)
  return has_matchmake_matched()
      ? *payload_.matchmake_matched_
      : ::server::MatchmakeMatched::default_instance();
}
inline ::server::MatchmakeMatched* Envelope::mutable_matchmake_matched() {
  if (!has_matchmake_matched()) {
    clear_payload();
    set_has_matchmake_matched();
    payload_.matchmake_matched_ = new ::server::MatchmakeMatched;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_matched)
  return payload_.matchmake_matched_;
}
inline ::server::MatchmakeMatched* Envelope::release_matchmake_matched() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_matched)
  if (has_matchmake_matched()) {
    clear_has_payload();
    ::server::MatchmakeMatched* temp = payload_.matchmake_matched_;
    payload_.matchmake_matched_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_matchmake_matched(::server::MatchmakeMatched* matchmake_matched) {
  clear_payload();
  if (matchmake_matched) {
    set_has_matchmake_matched();
    payload_.matchmake_matched_ = matchmake_matched;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_matched)
}

// optional .server.TRpc rpc = 66;
inline bool Envelope::has_rpc() const {
  return payload_case() == kRpc;
}
inline void Envelope::set_has_rpc() {
  _oneof_case_[0] = kRpc;
}
inline void Envelope::clear_rpc() {
  if (has_rpc()) {
    delete payload_.rpc_;
    clear_has_payload();
  }
}
inline  const ::server::TRpc& Envelope::rpc() const {
  // @@protoc_insertion_point(field_get:server.Envelope.rpc)
  return has_rpc()
      ? *payload_.rpc_
      : ::server::TRpc::default_instance();
}
inline ::server::TRpc* Envelope::mutable_rpc() {
  if (!has_rpc()) {
    clear_payload();
    set_has_rpc();
    payload_.rpc_ = new ::server::TRpc;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.rpc)
  return payload_.rpc_;
}
inline ::server::TRpc* Envelope::release_rpc() {
  // @@protoc_insertion_point(field_release:server.Envelope.rpc)
  if (has_rpc()) {
    clear_has_payload();
    ::server::TRpc* temp = payload_.rpc_;
    payload_.rpc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_rpc(::server::TRpc* rpc) {
  clear_payload();
  if (rpc) {
    set_has_rpc();
    payload_.rpc_ = rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.rpc)
}

// optional .server.TPurchaseValidation purchase = 67;
inline bool Envelope::has_purchase() const {
  return payload_case() == kPurchase;
}
inline void Envelope::set_has_purchase() {
  _oneof_case_[0] = kPurchase;
}
inline void Envelope::clear_purchase() {
  if (has_purchase()) {
    delete payload_.purchase_;
    clear_has_payload();
  }
}
inline  const ::server::TPurchaseValidation& Envelope::purchase() const {
  // @@protoc_insertion_point(field_get:server.Envelope.purchase)
  return has_purchase()
      ? *payload_.purchase_
      : ::server::TPurchaseValidation::default_instance();
}
inline ::server::TPurchaseValidation* Envelope::mutable_purchase() {
  if (!has_purchase()) {
    clear_payload();
    set_has_purchase();
    payload_.purchase_ = new ::server::TPurchaseValidation;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.purchase)
  return payload_.purchase_;
}
inline ::server::TPurchaseValidation* Envelope::release_purchase() {
  // @@protoc_insertion_point(field_release:server.Envelope.purchase)
  if (has_purchase()) {
    clear_has_payload();
    ::server::TPurchaseValidation* temp = payload_.purchase_;
    payload_.purchase_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_purchase(::server::TPurchaseValidation* purchase) {
  clear_payload();
  if (purchase) {
    set_has_purchase();
    payload_.purchase_ = purchase;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.purchase)
}

// optional .server.TPurchaseRecord purchase_record = 68;
inline bool Envelope::has_purchase_record() const {
  return payload_case() == kPurchaseRecord;
}
inline void Envelope::set_has_purchase_record() {
  _oneof_case_[0] = kPurchaseRecord;
}
inline void Envelope::clear_purchase_record() {
  if (has_purchase_record()) {
    delete payload_.purchase_record_;
    clear_has_payload();
  }
}
inline  const ::server::TPurchaseRecord& Envelope::purchase_record() const {
  // @@protoc_insertion_point(field_get:server.Envelope.purchase_record)
  return has_purchase_record()
      ? *payload_.purchase_record_
      : ::server::TPurchaseRecord::default_instance();
}
inline ::server::TPurchaseRecord* Envelope::mutable_purchase_record() {
  if (!has_purchase_record()) {
    clear_payload();
    set_has_purchase_record();
    payload_.purchase_record_ = new ::server::TPurchaseRecord;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.purchase_record)
  return payload_.purchase_record_;
}
inline ::server::TPurchaseRecord* Envelope::release_purchase_record() {
  // @@protoc_insertion_point(field_release:server.Envelope.purchase_record)
  if (has_purchase_record()) {
    clear_has_payload();
    ::server::TPurchaseRecord* temp = payload_.purchase_record_;
    payload_.purchase_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_purchase_record(::server::TPurchaseRecord* purchase_record) {
  clear_payload();
  if (purchase_record) {
    set_has_purchase_record();
    payload_.purchase_record_ = purchase_record;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.purchase_record)
}

// optional .server.TNotificationsList notifications_list = 69;
inline bool Envelope::has_notifications_list() const {
  return payload_case() == kNotificationsList;
}
inline void Envelope::set_has_notifications_list() {
  _oneof_case_[0] = kNotificationsList;
}
inline void Envelope::clear_notifications_list() {
  if (has_notifications_list()) {
    delete payload_.notifications_list_;
    clear_has_payload();
  }
}
inline  const ::server::TNotificationsList& Envelope::notifications_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications_list)
  return has_notifications_list()
      ? *payload_.notifications_list_
      : ::server::TNotificationsList::default_instance();
}
inline ::server::TNotificationsList* Envelope::mutable_notifications_list() {
  if (!has_notifications_list()) {
    clear_payload();
    set_has_notifications_list();
    payload_.notifications_list_ = new ::server::TNotificationsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications_list)
  return payload_.notifications_list_;
}
inline ::server::TNotificationsList* Envelope::release_notifications_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications_list)
  if (has_notifications_list()) {
    clear_has_payload();
    ::server::TNotificationsList* temp = payload_.notifications_list_;
    payload_.notifications_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_notifications_list(::server::TNotificationsList* notifications_list) {
  clear_payload();
  if (notifications_list) {
    set_has_notifications_list();
    payload_.notifications_list_ = notifications_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications_list)
}

// optional .server.TNotificationsRemove notifications_remove = 70;
inline bool Envelope::has_notifications_remove() const {
  return payload_case() == kNotificationsRemove;
}
inline void Envelope::set_has_notifications_remove() {
  _oneof_case_[0] = kNotificationsRemove;
}
inline void Envelope::clear_notifications_remove() {
  if (has_notifications_remove()) {
    delete payload_.notifications_remove_;
    clear_has_payload();
  }
}
inline  const ::server::TNotificationsRemove& Envelope::notifications_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications_remove)
  return has_notifications_remove()
      ? *payload_.notifications_remove_
      : ::server::TNotificationsRemove::default_instance();
}
inline ::server::TNotificationsRemove* Envelope::mutable_notifications_remove() {
  if (!has_notifications_remove()) {
    clear_payload();
    set_has_notifications_remove();
    payload_.notifications_remove_ = new ::server::TNotificationsRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications_remove)
  return payload_.notifications_remove_;
}
inline ::server::TNotificationsRemove* Envelope::release_notifications_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications_remove)
  if (has_notifications_remove()) {
    clear_has_payload();
    ::server::TNotificationsRemove* temp = payload_.notifications_remove_;
    payload_.notifications_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_notifications_remove(::server::TNotificationsRemove* notifications_remove) {
  clear_payload();
  if (notifications_remove) {
    set_has_notifications_remove();
    payload_.notifications_remove_ = notifications_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications_remove)
}

// optional .server.TNotifications notifications = 71;
inline bool Envelope::has_notifications() const {
  return payload_case() == kNotifications;
}
inline void Envelope::set_has_notifications() {
  _oneof_case_[0] = kNotifications;
}
inline void Envelope::clear_notifications() {
  if (has_notifications()) {
    delete payload_.notifications_;
    clear_has_payload();
  }
}
inline  const ::server::TNotifications& Envelope::notifications() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications)
  return has_notifications()
      ? *payload_.notifications_
      : ::server::TNotifications::default_instance();
}
inline ::server::TNotifications* Envelope::mutable_notifications() {
  if (!has_notifications()) {
    clear_payload();
    set_has_notifications();
    payload_.notifications_ = new ::server::TNotifications;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications)
  return payload_.notifications_;
}
inline ::server::TNotifications* Envelope::release_notifications() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications)
  if (has_notifications()) {
    clear_has_payload();
    ::server::TNotifications* temp = payload_.notifications_;
    payload_.notifications_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_notifications(::server::TNotifications* notifications) {
  clear_payload();
  if (notifications) {
    set_has_notifications();
    payload_.notifications_ = notifications;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications)
}

// optional .server.Notifications live_notifications = 72;
inline bool Envelope::has_live_notifications() const {
  return payload_case() == kLiveNotifications;
}
inline void Envelope::set_has_live_notifications() {
  _oneof_case_[0] = kLiveNotifications;
}
inline void Envelope::clear_live_notifications() {
  if (has_live_notifications()) {
    delete payload_.live_notifications_;
    clear_has_payload();
  }
}
inline  const ::server::Notifications& Envelope::live_notifications() const {
  // @@protoc_insertion_point(field_get:server.Envelope.live_notifications)
  return has_live_notifications()
      ? *payload_.live_notifications_
      : ::server::Notifications::default_instance();
}
inline ::server::Notifications* Envelope::mutable_live_notifications() {
  if (!has_live_notifications()) {
    clear_payload();
    set_has_live_notifications();
    payload_.live_notifications_ = new ::server::Notifications;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.live_notifications)
  return payload_.live_notifications_;
}
inline ::server::Notifications* Envelope::release_live_notifications() {
  // @@protoc_insertion_point(field_release:server.Envelope.live_notifications)
  if (has_live_notifications()) {
    clear_has_payload();
    ::server::Notifications* temp = payload_.live_notifications_;
    payload_.live_notifications_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_live_notifications(::server::Notifications* live_notifications) {
  clear_payload();
  if (live_notifications) {
    set_has_live_notifications();
    payload_.live_notifications_ = live_notifications;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.live_notifications)
}

inline bool Envelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Envelope::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Envelope::PayloadCase Envelope::payload_case() const {
  return Envelope::PayloadCase(_oneof_case_[0]);
}
inline const Envelope* Envelope::internal_default_instance() {
  return &Envelope_default_instance_.get();
}
// -------------------------------------------------------------------

// Logout

inline const Logout* Logout::internal_default_instance() {
  return &Logout_default_instance_.get();
}
// -------------------------------------------------------------------

// TLink

// optional .server.AuthenticateRequest.Email email = 1;
inline bool TLink::has_email() const {
  return id_case() == kEmail;
}
inline void TLink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void TLink::clear_email() {
  if (has_email()) {
    delete id_.email_;
    clear_has_id();
  }
}
inline  const ::server::AuthenticateRequest_Email& TLink::email() const {
  // @@protoc_insertion_point(field_get:server.TLink.email)
  return has_email()
      ? *id_.email_
      : ::server::AuthenticateRequest_Email::default_instance();
}
inline ::server::AuthenticateRequest_Email* TLink::mutable_email() {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_ = new ::server::AuthenticateRequest_Email;
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.email)
  return id_.email_;
}
inline ::server::AuthenticateRequest_Email* TLink::release_email() {
  // @@protoc_insertion_point(field_release:server.TLink.email)
  if (has_email()) {
    clear_has_id();
    ::server::AuthenticateRequest_Email* temp = id_.email_;
    id_.email_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TLink::set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_id();
  if (email) {
    set_has_email();
    id_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.email)
}

// optional string facebook = 2;
inline bool TLink::has_facebook() const {
  return id_case() == kFacebook;
}
inline void TLink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
inline void TLink::clear_facebook() {
  if (has_facebook()) {
    id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TLink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TLink.facebook)
  if (has_facebook()) {
    return id_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
}
inline void TLink::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.facebook)
}
inline void TLink::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.facebook)
}
inline ::std::string* TLink::mutable_facebook() {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.facebook)
  return id_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TLink.facebook)
  if (has_facebook()) {
    clear_has_id();
    return id_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLink::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (facebook != NULL) {
    set_has_facebook();
    id_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.facebook)
}

// optional string google = 3;
inline bool TLink::has_google() const {
  return id_case() == kGoogle;
}
inline void TLink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
inline void TLink::clear_google() {
  if (has_google()) {
    id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TLink::google() const {
  // @@protoc_insertion_point(field_get:server.TLink.google)
  if (has_google()) {
    return id_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.google)
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.google)
}
inline void TLink::set_google(const char* value) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.google)
}
inline void TLink::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.google)
}
inline ::std::string* TLink::mutable_google() {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.google)
  return id_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLink::release_google() {
  // @@protoc_insertion_point(field_release:server.TLink.google)
  if (has_google()) {
    clear_has_id();
    return id_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLink::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (google != NULL) {
    set_has_google();
    id_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.google)
}

// optional .server.AuthenticateRequest.GameCenter game_center = 4;
inline bool TLink::has_game_center() const {
  return id_case() == kGameCenter;
}
inline void TLink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
inline void TLink::clear_game_center() {
  if (has_game_center()) {
    delete id_.game_center_;
    clear_has_id();
  }
}
inline  const ::server::AuthenticateRequest_GameCenter& TLink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TLink.game_center)
  return has_game_center()
      ? *id_.game_center_
      : ::server::AuthenticateRequest_GameCenter::default_instance();
}
inline ::server::AuthenticateRequest_GameCenter* TLink::mutable_game_center() {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_ = new ::server::AuthenticateRequest_GameCenter;
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.game_center)
  return id_.game_center_;
}
inline ::server::AuthenticateRequest_GameCenter* TLink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TLink.game_center)
  if (has_game_center()) {
    clear_has_id();
    ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    id_.game_center_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TLink::set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_id();
  if (game_center) {
    set_has_game_center();
    id_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.game_center)
}

// optional string steam = 5;
inline bool TLink::has_steam() const {
  return id_case() == kSteam;
}
inline void TLink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
inline void TLink::clear_steam() {
  if (has_steam()) {
    id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TLink::steam() const {
  // @@protoc_insertion_point(field_get:server.TLink.steam)
  if (has_steam()) {
    return id_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.steam)
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.steam)
}
inline void TLink::set_steam(const char* value) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.steam)
}
inline void TLink::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.steam)
}
inline ::std::string* TLink::mutable_steam() {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.steam)
  return id_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TLink.steam)
  if (has_steam()) {
    clear_has_id();
    return id_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLink::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (steam != NULL) {
    set_has_steam();
    id_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.steam)
}

// optional string device = 6;
inline bool TLink::has_device() const {
  return id_case() == kDevice;
}
inline void TLink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline void TLink::clear_device() {
  if (has_device()) {
    id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TLink::device() const {
  // @@protoc_insertion_point(field_get:server.TLink.device)
  if (has_device()) {
    return id_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.device)
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.device)
}
inline void TLink::set_device(const char* value) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.device)
}
inline void TLink::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.device)
}
inline ::std::string* TLink::mutable_device() {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.device)
  return id_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLink::release_device() {
  // @@protoc_insertion_point(field_release:server.TLink.device)
  if (has_device()) {
    clear_has_id();
    return id_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLink::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (device != NULL) {
    set_has_device();
    id_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.device)
}

// optional string custom = 7;
inline bool TLink::has_custom() const {
  return id_case() == kCustom;
}
inline void TLink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void TLink::clear_custom() {
  if (has_custom()) {
    id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TLink::custom() const {
  // @@protoc_insertion_point(field_get:server.TLink.custom)
  if (has_custom()) {
    return id_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.custom)
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.custom)
}
inline void TLink::set_custom(const char* value) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.custom)
}
inline void TLink::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.custom)
}
inline ::std::string* TLink::mutable_custom() {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.custom)
  return id_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TLink.custom)
  if (has_custom()) {
    clear_has_id();
    return id_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLink::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (custom != NULL) {
    set_has_custom();
    id_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.custom)
}

inline bool TLink::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TLink::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TLink::IdCase TLink::id_case() const {
  return TLink::IdCase(_oneof_case_[0]);
}
inline const TLink* TLink::internal_default_instance() {
  return &TLink_default_instance_.get();
}
// -------------------------------------------------------------------

// TUnlink

// optional string email = 1;
inline bool TUnlink::has_email() const {
  return id_case() == kEmail;
}
inline void TUnlink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void TUnlink::clear_email() {
  if (has_email()) {
    id_.email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUnlink::email() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.email)
  if (has_email()) {
    return id_.email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::set_email(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
}
inline void TUnlink::set_email(const char* value) {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.email)
}
inline void TUnlink::set_email(const char* value, size_t size) {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.email)
}
inline ::std::string* TUnlink::mutable_email() {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.email)
  return id_.email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUnlink::release_email() {
  // @@protoc_insertion_point(field_release:server.TUnlink.email)
  if (has_email()) {
    clear_has_id();
    return id_.email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUnlink::set_allocated_email(::std::string* email) {
  if (!has_email()) {
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (email != NULL) {
    set_has_email();
    id_.email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        email);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.email)
}

// optional string facebook = 2;
inline bool TUnlink::has_facebook() const {
  return id_case() == kFacebook;
}
inline void TUnlink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
inline void TUnlink::clear_facebook() {
  if (has_facebook()) {
    id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUnlink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.facebook)
  if (has_facebook()) {
    return id_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
}
inline void TUnlink::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.facebook)
}
inline void TUnlink::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.facebook)
}
inline ::std::string* TUnlink::mutable_facebook() {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.facebook)
  return id_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUnlink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TUnlink.facebook)
  if (has_facebook()) {
    clear_has_id();
    return id_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUnlink::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (facebook != NULL) {
    set_has_facebook();
    id_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.facebook)
}

// optional string google = 3;
inline bool TUnlink::has_google() const {
  return id_case() == kGoogle;
}
inline void TUnlink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
inline void TUnlink::clear_google() {
  if (has_google()) {
    id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUnlink::google() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.google)
  if (has_google()) {
    return id_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
}
inline void TUnlink::set_google(const char* value) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.google)
}
inline void TUnlink::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.google)
}
inline ::std::string* TUnlink::mutable_google() {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.google)
  return id_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUnlink::release_google() {
  // @@protoc_insertion_point(field_release:server.TUnlink.google)
  if (has_google()) {
    clear_has_id();
    return id_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUnlink::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (google != NULL) {
    set_has_google();
    id_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.google)
}

// optional string game_center = 4;
inline bool TUnlink::has_game_center() const {
  return id_case() == kGameCenter;
}
inline void TUnlink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
inline void TUnlink::clear_game_center() {
  if (has_game_center()) {
    id_.game_center_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUnlink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.game_center)
  if (has_game_center()) {
    return id_.game_center_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::set_game_center(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
}
inline void TUnlink::set_game_center(const char* value) {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.game_center)
}
inline void TUnlink::set_game_center(const char* value, size_t size) {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.game_center)
}
inline ::std::string* TUnlink::mutable_game_center() {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.game_center)
  return id_.game_center_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUnlink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TUnlink.game_center)
  if (has_game_center()) {
    clear_has_id();
    return id_.game_center_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUnlink::set_allocated_game_center(::std::string* game_center) {
  if (!has_game_center()) {
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (game_center != NULL) {
    set_has_game_center();
    id_.game_center_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        game_center);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.game_center)
}

// optional string steam = 5;
inline bool TUnlink::has_steam() const {
  return id_case() == kSteam;
}
inline void TUnlink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
inline void TUnlink::clear_steam() {
  if (has_steam()) {
    id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUnlink::steam() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.steam)
  if (has_steam()) {
    return id_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
}
inline void TUnlink::set_steam(const char* value) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.steam)
}
inline void TUnlink::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.steam)
}
inline ::std::string* TUnlink::mutable_steam() {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.steam)
  return id_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUnlink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TUnlink.steam)
  if (has_steam()) {
    clear_has_id();
    return id_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUnlink::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (steam != NULL) {
    set_has_steam();
    id_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.steam)
}

// optional string device = 6;
inline bool TUnlink::has_device() const {
  return id_case() == kDevice;
}
inline void TUnlink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline void TUnlink::clear_device() {
  if (has_device()) {
    id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUnlink::device() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.device)
  if (has_device()) {
    return id_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
}
inline void TUnlink::set_device(const char* value) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.device)
}
inline void TUnlink::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.device)
}
inline ::std::string* TUnlink::mutable_device() {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.device)
  return id_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUnlink::release_device() {
  // @@protoc_insertion_point(field_release:server.TUnlink.device)
  if (has_device()) {
    clear_has_id();
    return id_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUnlink::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (device != NULL) {
    set_has_device();
    id_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.device)
}

// optional string custom = 7;
inline bool TUnlink::has_custom() const {
  return id_case() == kCustom;
}
inline void TUnlink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void TUnlink::clear_custom() {
  if (has_custom()) {
    id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUnlink::custom() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.custom)
  if (has_custom()) {
    return id_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
}
inline void TUnlink::set_custom(const char* value) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.custom)
}
inline void TUnlink::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.custom)
}
inline ::std::string* TUnlink::mutable_custom() {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.custom)
  return id_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUnlink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TUnlink.custom)
  if (has_custom()) {
    clear_has_id();
    return id_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUnlink::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (custom != NULL) {
    set_has_custom();
    id_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.custom)
}

inline bool TUnlink::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TUnlink::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TUnlink::IdCase TUnlink::id_case() const {
  return TUnlink::IdCase(_oneof_case_[0]);
}
inline const TUnlink* TUnlink::internal_default_instance() {
  return &TUnlink_default_instance_.get();
}
// -------------------------------------------------------------------

// User

// optional string id = 1;
inline void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:server.User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.id)
}
inline void User::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.id)
}
inline void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.id)
}
inline ::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:server.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.User.id)
}

// optional string handle = 2;
inline void User::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::handle() const {
  // @@protoc_insertion_point(field_get:server.User.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.handle)
}
inline void User::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.handle)
}
inline void User::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.handle)
}
inline ::std::string* User::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.User.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_handle() {
  // @@protoc_insertion_point(field_release:server.User.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.User.handle)
}

// optional string fullname = 3;
inline void User::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::fullname() const {
  // @@protoc_insertion_point(field_get:server.User.fullname)
  return fullname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_fullname(const ::std::string& value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.fullname)
}
inline void User::set_fullname(const char* value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.fullname)
}
inline void User::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.fullname)
}
inline ::std::string* User::mutable_fullname() {
  
  // @@protoc_insertion_point(field_mutable:server.User.fullname)
  return fullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_fullname() {
  // @@protoc_insertion_point(field_release:server.User.fullname)
  
  return fullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_fullname(::std::string* fullname) {
  if (fullname != NULL) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:server.User.fullname)
}

// optional string avatar_url = 4;
inline void User::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.User.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.avatar_url)
}
inline void User::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.avatar_url)
}
inline void User::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.avatar_url)
}
inline ::std::string* User::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.User.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.User.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.User.avatar_url)
}

// optional string lang = 5;
inline void User::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::lang() const {
  // @@protoc_insertion_point(field_get:server.User.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.lang)
}
inline void User::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.lang)
}
inline void User::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.lang)
}
inline ::std::string* User::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.User.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_lang() {
  // @@protoc_insertion_point(field_release:server.User.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.User.lang)
}

// optional string location = 6;
inline void User::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::location() const {
  // @@protoc_insertion_point(field_get:server.User.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.location)
}
inline void User::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.location)
}
inline void User::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.location)
}
inline ::std::string* User::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.User.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_location() {
  // @@protoc_insertion_point(field_release:server.User.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.User.location)
}

// optional string timezone = 7;
inline void User::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::timezone() const {
  // @@protoc_insertion_point(field_get:server.User.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.timezone)
}
inline void User::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.timezone)
}
inline void User::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.timezone)
}
inline ::std::string* User::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.User.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_timezone() {
  // @@protoc_insertion_point(field_release:server.User.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.User.timezone)
}

// optional string metadata = 8;
inline void User::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::metadata() const {
  // @@protoc_insertion_point(field_get:server.User.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.metadata)
}
inline void User::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.metadata)
}
inline void User::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.metadata)
}
inline ::std::string* User::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.User.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_metadata() {
  // @@protoc_insertion_point(field_release:server.User.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.User.metadata)
}

// optional int64 created_at = 9;
inline void User::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User::created_at() const {
  // @@protoc_insertion_point(field_get:server.User.created_at)
  return created_at_;
}
inline void User::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.created_at)
}

// optional int64 updated_at = 10;
inline void User::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User::updated_at() const {
  // @@protoc_insertion_point(field_get:server.User.updated_at)
  return updated_at_;
}
inline void User::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.updated_at)
}

// optional int64 last_online_at = 11;
inline void User::clear_last_online_at() {
  last_online_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User::last_online_at() const {
  // @@protoc_insertion_point(field_get:server.User.last_online_at)
  return last_online_at_;
}
inline void User::set_last_online_at(::google::protobuf::int64 value) {
  
  last_online_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.last_online_at)
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
// -------------------------------------------------------------------

// Self

// optional .server.User user = 1;
inline bool Self::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void Self::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::server::User& Self::user() const {
  // @@protoc_insertion_point(field_get:server.Self.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
inline ::server::User* Self::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.Self.user)
  return user_;
}
inline ::server::User* Self::release_user() {
  // @@protoc_insertion_point(field_release:server.Self.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void Self::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Self.user)
}

// optional bool verified = 2;
inline void Self::clear_verified() {
  verified_ = false;
}
inline bool Self::verified() const {
  // @@protoc_insertion_point(field_get:server.Self.verified)
  return verified_;
}
inline void Self::set_verified(bool value) {
  
  verified_ = value;
  // @@protoc_insertion_point(field_set:server.Self.verified)
}

// optional string email = 3;
inline void Self::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Self::email() const {
  // @@protoc_insertion_point(field_get:server.Self.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.email)
}
inline void Self::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.email)
}
inline void Self::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.email)
}
inline ::std::string* Self::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Self::release_email() {
  // @@protoc_insertion_point(field_release:server.Self.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.Self.email)
}

// repeated string device_ids = 4;
inline int Self::device_ids_size() const {
  return device_ids_.size();
}
inline void Self::clear_device_ids() {
  device_ids_.Clear();
}
inline const ::std::string& Self::device_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.Self.device_ids)
  return device_ids_.Get(index);
}
inline ::std::string* Self::mutable_device_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.Self.device_ids)
  return device_ids_.Mutable(index);
}
inline void Self::set_device_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.Self.device_ids)
  device_ids_.Mutable(index)->assign(value);
}
inline void Self::set_device_ids(int index, const char* value) {
  device_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.Self.device_ids)
}
inline void Self::set_device_ids(int index, const char* value, size_t size) {
  device_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.Self.device_ids)
}
inline ::std::string* Self::add_device_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.Self.device_ids)
  return device_ids_.Add();
}
inline void Self::add_device_ids(const ::std::string& value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.Self.device_ids)
}
inline void Self::add_device_ids(const char* value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.Self.device_ids)
}
inline void Self::add_device_ids(const char* value, size_t size) {
  device_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.Self.device_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Self::device_ids() const {
  // @@protoc_insertion_point(field_list:server.Self.device_ids)
  return device_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Self::mutable_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.Self.device_ids)
  return &device_ids_;
}

// optional string facebook_id = 5;
inline void Self::clear_facebook_id() {
  facebook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Self::facebook_id() const {
  // @@protoc_insertion_point(field_get:server.Self.facebook_id)
  return facebook_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_facebook_id(const ::std::string& value) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.facebook_id)
}
inline void Self::set_facebook_id(const char* value) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.facebook_id)
}
inline void Self::set_facebook_id(const char* value, size_t size) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.facebook_id)
}
inline ::std::string* Self::mutable_facebook_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.facebook_id)
  return facebook_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Self::release_facebook_id() {
  // @@protoc_insertion_point(field_release:server.Self.facebook_id)
  
  return facebook_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_allocated_facebook_id(::std::string* facebook_id) {
  if (facebook_id != NULL) {
    
  } else {
    
  }
  facebook_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facebook_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.facebook_id)
}

// optional string google_id = 6;
inline void Self::clear_google_id() {
  google_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Self::google_id() const {
  // @@protoc_insertion_point(field_get:server.Self.google_id)
  return google_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_google_id(const ::std::string& value) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.google_id)
}
inline void Self::set_google_id(const char* value) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.google_id)
}
inline void Self::set_google_id(const char* value, size_t size) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.google_id)
}
inline ::std::string* Self::mutable_google_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.google_id)
  return google_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Self::release_google_id() {
  // @@protoc_insertion_point(field_release:server.Self.google_id)
  
  return google_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_allocated_google_id(::std::string* google_id) {
  if (google_id != NULL) {
    
  } else {
    
  }
  google_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), google_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.google_id)
}

// optional string gamecenter_id = 7;
inline void Self::clear_gamecenter_id() {
  gamecenter_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Self::gamecenter_id() const {
  // @@protoc_insertion_point(field_get:server.Self.gamecenter_id)
  return gamecenter_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_gamecenter_id(const ::std::string& value) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.gamecenter_id)
}
inline void Self::set_gamecenter_id(const char* value) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.gamecenter_id)
}
inline void Self::set_gamecenter_id(const char* value, size_t size) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.gamecenter_id)
}
inline ::std::string* Self::mutable_gamecenter_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.gamecenter_id)
  return gamecenter_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Self::release_gamecenter_id() {
  // @@protoc_insertion_point(field_release:server.Self.gamecenter_id)
  
  return gamecenter_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_allocated_gamecenter_id(::std::string* gamecenter_id) {
  if (gamecenter_id != NULL) {
    
  } else {
    
  }
  gamecenter_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamecenter_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.gamecenter_id)
}

// optional string steam_id = 8;
inline void Self::clear_steam_id() {
  steam_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Self::steam_id() const {
  // @@protoc_insertion_point(field_get:server.Self.steam_id)
  return steam_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_steam_id(const ::std::string& value) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.steam_id)
}
inline void Self::set_steam_id(const char* value) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.steam_id)
}
inline void Self::set_steam_id(const char* value, size_t size) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.steam_id)
}
inline ::std::string* Self::mutable_steam_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.steam_id)
  return steam_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Self::release_steam_id() {
  // @@protoc_insertion_point(field_release:server.Self.steam_id)
  
  return steam_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_allocated_steam_id(::std::string* steam_id) {
  if (steam_id != NULL) {
    
  } else {
    
  }
  steam_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.steam_id)
}

// optional string custom_id = 9;
inline void Self::clear_custom_id() {
  custom_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Self::custom_id() const {
  // @@protoc_insertion_point(field_get:server.Self.custom_id)
  return custom_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_custom_id(const ::std::string& value) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.custom_id)
}
inline void Self::set_custom_id(const char* value) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.custom_id)
}
inline void Self::set_custom_id(const char* value, size_t size) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.custom_id)
}
inline ::std::string* Self::mutable_custom_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.custom_id)
  return custom_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Self::release_custom_id() {
  // @@protoc_insertion_point(field_release:server.Self.custom_id)
  
  return custom_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Self::set_allocated_custom_id(::std::string* custom_id) {
  if (custom_id != NULL) {
    
  } else {
    
  }
  custom_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.custom_id)
}

inline const Self* Self::internal_default_instance() {
  return &Self_default_instance_.get();
}
// -------------------------------------------------------------------

// TSelfFetch

inline const TSelfFetch* TSelfFetch::internal_default_instance() {
  return &TSelfFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TSelf

// optional .server.Self self = 1;
inline bool TSelf::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
inline void TSelf::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
inline const ::server::Self& TSelf::self() const {
  // @@protoc_insertion_point(field_get:server.TSelf.self)
  return self_ != NULL ? *self_
                         : *::server::Self::internal_default_instance();
}
inline ::server::Self* TSelf::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::Self;
  }
  // @@protoc_insertion_point(field_mutable:server.TSelf.self)
  return self_;
}
inline ::server::Self* TSelf::release_self() {
  // @@protoc_insertion_point(field_release:server.TSelf.self)
  
  ::server::Self* temp = self_;
  self_ = NULL;
  return temp;
}
inline void TSelf::set_allocated_self(::server::Self* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TSelf.self)
}

inline const TSelf* TSelf::internal_default_instance() {
  return &TSelf_default_instance_.get();
}
// -------------------------------------------------------------------

// TSelfUpdate

// optional string handle = 1;
inline void TSelfUpdate::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TSelfUpdate::handle() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.handle)
}
inline void TSelfUpdate::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.handle)
}
inline void TSelfUpdate::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.handle)
}
inline ::std::string* TSelfUpdate::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TSelfUpdate::release_handle() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.handle)
}

// optional string fullname = 2;
inline void TSelfUpdate::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TSelfUpdate::fullname() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.fullname)
  return fullname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_fullname(const ::std::string& value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.fullname)
}
inline void TSelfUpdate::set_fullname(const char* value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.fullname)
}
inline void TSelfUpdate::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.fullname)
}
inline ::std::string* TSelfUpdate::mutable_fullname() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.fullname)
  return fullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TSelfUpdate::release_fullname() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.fullname)
  
  return fullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_allocated_fullname(::std::string* fullname) {
  if (fullname != NULL) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.fullname)
}

// optional string timezone = 3;
inline void TSelfUpdate::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TSelfUpdate::timezone() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.timezone)
}
inline void TSelfUpdate::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.timezone)
}
inline void TSelfUpdate::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.timezone)
}
inline ::std::string* TSelfUpdate::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TSelfUpdate::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.timezone)
}

// optional string location = 4;
inline void TSelfUpdate::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TSelfUpdate::location() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.location)
}
inline void TSelfUpdate::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.location)
}
inline void TSelfUpdate::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.location)
}
inline ::std::string* TSelfUpdate::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TSelfUpdate::release_location() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.location)
}

// optional string lang = 5;
inline void TSelfUpdate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TSelfUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.lang)
}
inline void TSelfUpdate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.lang)
}
inline void TSelfUpdate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.lang)
}
inline ::std::string* TSelfUpdate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TSelfUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.lang)
}

// optional string metadata = 6;
inline void TSelfUpdate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TSelfUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.metadata)
}
inline void TSelfUpdate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.metadata)
}
inline void TSelfUpdate::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.metadata)
}
inline ::std::string* TSelfUpdate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TSelfUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.metadata)
}

// optional string avatar_url = 7;
inline void TSelfUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TSelfUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.avatar_url)
}
inline void TSelfUpdate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.avatar_url)
}
inline void TSelfUpdate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.avatar_url)
}
inline ::std::string* TSelfUpdate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TSelfUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TSelfUpdate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.avatar_url)
}

inline const TSelfUpdate* TSelfUpdate::internal_default_instance() {
  return &TSelfUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TUsersFetch_UsersFetch

// optional string user_id = 1;
inline bool TUsersFetch_UsersFetch::has_user_id() const {
  return id_case() == kUserId;
}
inline void TUsersFetch_UsersFetch::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TUsersFetch_UsersFetch::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUsersFetch_UsersFetch::user_id() const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.UsersFetch.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUsersFetch_UsersFetch::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.user_id)
}
inline void TUsersFetch_UsersFetch::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUsersFetch.UsersFetch.user_id)
}
inline void TUsersFetch_UsersFetch::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUsersFetch.UsersFetch.user_id)
}
inline ::std::string* TUsersFetch_UsersFetch::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.UsersFetch.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUsersFetch_UsersFetch::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TUsersFetch.UsersFetch.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUsersFetch_UsersFetch::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUsersFetch.UsersFetch.user_id)
}

// optional string handle = 2;
inline bool TUsersFetch_UsersFetch::has_handle() const {
  return id_case() == kHandle;
}
inline void TUsersFetch_UsersFetch::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
inline void TUsersFetch_UsersFetch::clear_handle() {
  if (has_handle()) {
    id_.handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TUsersFetch_UsersFetch::handle() const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.UsersFetch.handle)
  if (has_handle()) {
    return id_.handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TUsersFetch_UsersFetch::set_handle(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.handle)
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.handle)
}
inline void TUsersFetch_UsersFetch::set_handle(const char* value) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUsersFetch.UsersFetch.handle)
}
inline void TUsersFetch_UsersFetch::set_handle(const char* value, size_t size) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUsersFetch.UsersFetch.handle)
}
inline ::std::string* TUsersFetch_UsersFetch::mutable_handle() {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.UsersFetch.handle)
  return id_.handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TUsersFetch_UsersFetch::release_handle() {
  // @@protoc_insertion_point(field_release:server.TUsersFetch.UsersFetch.handle)
  if (has_handle()) {
    clear_has_id();
    return id_.handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TUsersFetch_UsersFetch::set_allocated_handle(::std::string* handle) {
  if (!has_handle()) {
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (handle != NULL) {
    set_has_handle();
    id_.handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        handle);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUsersFetch.UsersFetch.handle)
}

inline bool TUsersFetch_UsersFetch::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TUsersFetch_UsersFetch::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TUsersFetch_UsersFetch::IdCase TUsersFetch_UsersFetch::id_case() const {
  return TUsersFetch_UsersFetch::IdCase(_oneof_case_[0]);
}
inline const TUsersFetch_UsersFetch* TUsersFetch_UsersFetch::internal_default_instance() {
  return &TUsersFetch_UsersFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TUsersFetch

// repeated .server.TUsersFetch.UsersFetch users = 1;
inline int TUsersFetch::users_size() const {
  return users_.size();
}
inline void TUsersFetch::clear_users() {
  users_.Clear();
}
inline const ::server::TUsersFetch_UsersFetch& TUsersFetch::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.users)
  return users_.Get(index);
}
inline ::server::TUsersFetch_UsersFetch* TUsersFetch::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.users)
  return users_.Mutable(index);
}
inline ::server::TUsersFetch_UsersFetch* TUsersFetch::add_users() {
  // @@protoc_insertion_point(field_add:server.TUsersFetch.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >*
TUsersFetch::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsersFetch.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >&
TUsersFetch::users() const {
  // @@protoc_insertion_point(field_list:server.TUsersFetch.users)
  return users_;
}

inline const TUsersFetch* TUsersFetch::internal_default_instance() {
  return &TUsersFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TUsers

// repeated .server.User users = 1;
inline int TUsers::users_size() const {
  return users_.size();
}
inline void TUsers::clear_users() {
  users_.Clear();
}
inline const ::server::User& TUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsers.users)
  return users_.Get(index);
}
inline ::server::User* TUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsers.users)
  return users_.Mutable(index);
}
inline ::server::User* TUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TUsers.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::User >*
TUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsers.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::User >&
TUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TUsers.users)
  return users_;
}

inline const TUsers* TUsers::internal_default_instance() {
  return &TUsers_default_instance_.get();
}
// -------------------------------------------------------------------

// Friend

// optional .server.User user = 1;
inline bool Friend::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void Friend::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::server::User& Friend::user() const {
  // @@protoc_insertion_point(field_get:server.Friend.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
inline ::server::User* Friend::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.Friend.user)
  return user_;
}
inline ::server::User* Friend::release_user() {
  // @@protoc_insertion_point(field_release:server.Friend.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void Friend::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Friend.user)
}

// optional int64 state = 2;
inline void Friend::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Friend::state() const {
  // @@protoc_insertion_point(field_get:server.Friend.state)
  return state_;
}
inline void Friend::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:server.Friend.state)
}

inline const Friend* Friend::internal_default_instance() {
  return &Friend_default_instance_.get();
}
// -------------------------------------------------------------------

// TFriendsAdd_FriendsAdd

// optional string user_id = 1;
inline bool TFriendsAdd_FriendsAdd::has_user_id() const {
  return id_case() == kUserId;
}
inline void TFriendsAdd_FriendsAdd::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TFriendsAdd_FriendsAdd::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TFriendsAdd_FriendsAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.FriendsAdd.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TFriendsAdd_FriendsAdd::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.user_id)
}
inline void TFriendsAdd_FriendsAdd::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TFriendsAdd.FriendsAdd.user_id)
}
inline void TFriendsAdd_FriendsAdd::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsAdd.FriendsAdd.user_id)
}
inline ::std::string* TFriendsAdd_FriendsAdd::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.FriendsAdd.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFriendsAdd_FriendsAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TFriendsAdd.FriendsAdd.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TFriendsAdd_FriendsAdd::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TFriendsAdd.FriendsAdd.user_id)
}

// optional string handle = 2;
inline bool TFriendsAdd_FriendsAdd::has_handle() const {
  return id_case() == kHandle;
}
inline void TFriendsAdd_FriendsAdd::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
inline void TFriendsAdd_FriendsAdd::clear_handle() {
  if (has_handle()) {
    id_.handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TFriendsAdd_FriendsAdd::handle() const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.FriendsAdd.handle)
  if (has_handle()) {
    return id_.handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TFriendsAdd_FriendsAdd::set_handle(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.handle)
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.handle)
}
inline void TFriendsAdd_FriendsAdd::set_handle(const char* value) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TFriendsAdd.FriendsAdd.handle)
}
inline void TFriendsAdd_FriendsAdd::set_handle(const char* value, size_t size) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsAdd.FriendsAdd.handle)
}
inline ::std::string* TFriendsAdd_FriendsAdd::mutable_handle() {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.FriendsAdd.handle)
  return id_.handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFriendsAdd_FriendsAdd::release_handle() {
  // @@protoc_insertion_point(field_release:server.TFriendsAdd.FriendsAdd.handle)
  if (has_handle()) {
    clear_has_id();
    return id_.handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TFriendsAdd_FriendsAdd::set_allocated_handle(::std::string* handle) {
  if (!has_handle()) {
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (handle != NULL) {
    set_has_handle();
    id_.handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        handle);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TFriendsAdd.FriendsAdd.handle)
}

inline bool TFriendsAdd_FriendsAdd::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TFriendsAdd_FriendsAdd::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TFriendsAdd_FriendsAdd::IdCase TFriendsAdd_FriendsAdd::id_case() const {
  return TFriendsAdd_FriendsAdd::IdCase(_oneof_case_[0]);
}
inline const TFriendsAdd_FriendsAdd* TFriendsAdd_FriendsAdd::internal_default_instance() {
  return &TFriendsAdd_FriendsAdd_default_instance_.get();
}
// -------------------------------------------------------------------

// TFriendsAdd

// repeated .server.TFriendsAdd.FriendsAdd friends = 1;
inline int TFriendsAdd::friends_size() const {
  return friends_.size();
}
inline void TFriendsAdd::clear_friends() {
  friends_.Clear();
}
inline const ::server::TFriendsAdd_FriendsAdd& TFriendsAdd::friends(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.friends)
  return friends_.Get(index);
}
inline ::server::TFriendsAdd_FriendsAdd* TFriendsAdd::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.friends)
  return friends_.Mutable(index);
}
inline ::server::TFriendsAdd_FriendsAdd* TFriendsAdd::add_friends() {
  // @@protoc_insertion_point(field_add:server.TFriendsAdd.friends)
  return friends_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >*
TFriendsAdd::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsAdd.friends)
  return &friends_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >&
TFriendsAdd::friends() const {
  // @@protoc_insertion_point(field_list:server.TFriendsAdd.friends)
  return friends_;
}

inline const TFriendsAdd* TFriendsAdd::internal_default_instance() {
  return &TFriendsAdd_default_instance_.get();
}
// -------------------------------------------------------------------

// TFriendsRemove

// repeated string user_ids = 1;
inline int TFriendsRemove::user_ids_size() const {
  return user_ids_.size();
}
inline void TFriendsRemove::clear_user_ids() {
  user_ids_.Clear();
}
inline const ::std::string& TFriendsRemove::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsRemove.user_ids)
  return user_ids_.Get(index);
}
inline ::std::string* TFriendsRemove::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsRemove.user_ids)
  return user_ids_.Mutable(index);
}
inline void TFriendsRemove::set_user_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsRemove.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void TFriendsRemove::set_user_ids(int index, const char* value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TFriendsRemove.user_ids)
}
inline void TFriendsRemove::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsRemove.user_ids)
}
inline ::std::string* TFriendsRemove::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TFriendsRemove.user_ids)
  return user_ids_.Add();
}
inline void TFriendsRemove::add_user_ids(const ::std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TFriendsRemove.user_ids)
}
inline void TFriendsRemove::add_user_ids(const char* value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TFriendsRemove.user_ids)
}
inline void TFriendsRemove::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TFriendsRemove.user_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFriendsRemove::user_ids() const {
  // @@protoc_insertion_point(field_list:server.TFriendsRemove.user_ids)
  return user_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TFriendsRemove::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsRemove.user_ids)
  return &user_ids_;
}

inline const TFriendsRemove* TFriendsRemove::internal_default_instance() {
  return &TFriendsRemove_default_instance_.get();
}
// -------------------------------------------------------------------

// TFriendsBlock

// repeated string user_ids = 1;
inline int TFriendsBlock::user_ids_size() const {
  return user_ids_.size();
}
inline void TFriendsBlock::clear_user_ids() {
  user_ids_.Clear();
}
inline const ::std::string& TFriendsBlock::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsBlock.user_ids)
  return user_ids_.Get(index);
}
inline ::std::string* TFriendsBlock::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsBlock.user_ids)
  return user_ids_.Mutable(index);
}
inline void TFriendsBlock::set_user_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsBlock.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void TFriendsBlock::set_user_ids(int index, const char* value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TFriendsBlock.user_ids)
}
inline void TFriendsBlock::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsBlock.user_ids)
}
inline ::std::string* TFriendsBlock::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TFriendsBlock.user_ids)
  return user_ids_.Add();
}
inline void TFriendsBlock::add_user_ids(const ::std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TFriendsBlock.user_ids)
}
inline void TFriendsBlock::add_user_ids(const char* value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TFriendsBlock.user_ids)
}
inline void TFriendsBlock::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TFriendsBlock.user_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFriendsBlock::user_ids() const {
  // @@protoc_insertion_point(field_list:server.TFriendsBlock.user_ids)
  return user_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TFriendsBlock::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsBlock.user_ids)
  return &user_ids_;
}

inline const TFriendsBlock* TFriendsBlock::internal_default_instance() {
  return &TFriendsBlock_default_instance_.get();
}
// -------------------------------------------------------------------

// TFriendsList

inline const TFriendsList* TFriendsList::internal_default_instance() {
  return &TFriendsList_default_instance_.get();
}
// -------------------------------------------------------------------

// TFriends

// repeated .server.Friend friends = 1;
inline int TFriends::friends_size() const {
  return friends_.size();
}
inline void TFriends::clear_friends() {
  friends_.Clear();
}
inline const ::server::Friend& TFriends::friends(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriends.friends)
  return friends_.Get(index);
}
inline ::server::Friend* TFriends::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriends.friends)
  return friends_.Mutable(index);
}
inline ::server::Friend* TFriends::add_friends() {
  // @@protoc_insertion_point(field_add:server.TFriends.friends)
  return friends_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::Friend >*
TFriends::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriends.friends)
  return &friends_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::Friend >&
TFriends::friends() const {
  // @@protoc_insertion_point(field_list:server.TFriends.friends)
  return friends_;
}

inline const TFriends* TFriends::internal_default_instance() {
  return &TFriends_default_instance_.get();
}
// -------------------------------------------------------------------

// Group

// optional string id = 1;
inline void Group::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::id() const {
  // @@protoc_insertion_point(field_get:server.Group.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.id)
}
inline void Group::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.id)
}
inline void Group::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.id)
}
inline ::std::string* Group::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_id() {
  // @@protoc_insertion_point(field_release:server.Group.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.Group.id)
}

// optional bool private = 2;
inline void Group::clear_private_() {
  private__ = false;
}
inline bool Group::private_() const {
  // @@protoc_insertion_point(field_get:server.Group.private)
  return private__;
}
inline void Group::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.Group.private)
}

// optional string creator_id = 3;
inline void Group::clear_creator_id() {
  creator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::creator_id() const {
  // @@protoc_insertion_point(field_get:server.Group.creator_id)
  return creator_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_creator_id(const ::std::string& value) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.creator_id)
}
inline void Group::set_creator_id(const char* value) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.creator_id)
}
inline void Group::set_creator_id(const char* value, size_t size) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.creator_id)
}
inline ::std::string* Group::mutable_creator_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.creator_id)
  return creator_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_creator_id() {
  // @@protoc_insertion_point(field_release:server.Group.creator_id)
  
  return creator_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_creator_id(::std::string* creator_id) {
  if (creator_id != NULL) {
    
  } else {
    
  }
  creator_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_id);
  // @@protoc_insertion_point(field_set_allocated:server.Group.creator_id)
}

// optional string name = 4;
inline void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:server.Group.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.name)
}
inline void Group::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.name)
}
inline void Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.name)
}
inline ::std::string* Group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:server.Group.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.Group.name)
}

// optional string description = 5;
inline void Group::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:server.Group.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.description)
}
inline void Group::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.description)
}
inline void Group::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.description)
}
inline ::std::string* Group::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:server.Group.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.Group.description)
}

// optional string avatar_url = 6;
inline void Group::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.Group.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.avatar_url)
}
inline void Group::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.avatar_url)
}
inline void Group::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.avatar_url)
}
inline ::std::string* Group::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.Group.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.Group.avatar_url)
}

// optional string lang = 7;
inline void Group::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::lang() const {
  // @@protoc_insertion_point(field_get:server.Group.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.lang)
}
inline void Group::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.lang)
}
inline void Group::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.lang)
}
inline ::std::string* Group::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_lang() {
  // @@protoc_insertion_point(field_release:server.Group.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.Group.lang)
}

// optional int64 utc_offset_ms = 8;
inline void Group::clear_utc_offset_ms() {
  utc_offset_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Group::utc_offset_ms() const {
  // @@protoc_insertion_point(field_get:server.Group.utc_offset_ms)
  return utc_offset_ms_;
}
inline void Group::set_utc_offset_ms(::google::protobuf::int64 value) {
  
  utc_offset_ms_ = value;
  // @@protoc_insertion_point(field_set:server.Group.utc_offset_ms)
}

// optional string metadata = 9;
inline void Group::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::metadata() const {
  // @@protoc_insertion_point(field_get:server.Group.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.metadata)
}
inline void Group::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.metadata)
}
inline void Group::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.metadata)
}
inline ::std::string* Group::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_metadata() {
  // @@protoc_insertion_point(field_release:server.Group.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.Group.metadata)
}

// optional int64 count = 10;
inline void Group::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Group::count() const {
  // @@protoc_insertion_point(field_get:server.Group.count)
  return count_;
}
inline void Group::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:server.Group.count)
}

// optional int64 created_at = 11;
inline void Group::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Group::created_at() const {
  // @@protoc_insertion_point(field_get:server.Group.created_at)
  return created_at_;
}
inline void Group::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.Group.created_at)
}

// optional int64 updated_at = 12;
inline void Group::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Group::updated_at() const {
  // @@protoc_insertion_point(field_get:server.Group.updated_at)
  return updated_at_;
}
inline void Group::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.Group.updated_at)
}

inline const Group* Group::internal_default_instance() {
  return &Group_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsCreate_GroupCreate

// optional string name = 1;
inline void TGroupsCreate_GroupCreate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsCreate_GroupCreate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.name)
}
inline void TGroupsCreate_GroupCreate::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.name)
}
inline void TGroupsCreate_GroupCreate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.name)
}
inline ::std::string* TGroupsCreate_GroupCreate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsCreate_GroupCreate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.name)
}

// optional string description = 2;
inline void TGroupsCreate_GroupCreate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsCreate_GroupCreate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.description)
}
inline void TGroupsCreate_GroupCreate::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.description)
}
inline void TGroupsCreate_GroupCreate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.description)
}
inline ::std::string* TGroupsCreate_GroupCreate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsCreate_GroupCreate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.description)
}

// optional string avatar_url = 3;
inline void TGroupsCreate_GroupCreate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsCreate_GroupCreate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.avatar_url)
}
inline void TGroupsCreate_GroupCreate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.avatar_url)
}
inline void TGroupsCreate_GroupCreate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.avatar_url)
}
inline ::std::string* TGroupsCreate_GroupCreate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsCreate_GroupCreate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.avatar_url)
}

// optional string lang = 4;
inline void TGroupsCreate_GroupCreate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsCreate_GroupCreate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.lang)
}
inline void TGroupsCreate_GroupCreate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.lang)
}
inline void TGroupsCreate_GroupCreate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.lang)
}
inline ::std::string* TGroupsCreate_GroupCreate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsCreate_GroupCreate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.lang)
}

// optional string metadata = 5;
inline void TGroupsCreate_GroupCreate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsCreate_GroupCreate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.metadata)
}
inline void TGroupsCreate_GroupCreate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.metadata)
}
inline void TGroupsCreate_GroupCreate::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.metadata)
}
inline ::std::string* TGroupsCreate_GroupCreate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsCreate_GroupCreate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsCreate_GroupCreate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.metadata)
}

// optional bool private = 6;
inline void TGroupsCreate_GroupCreate::clear_private_() {
  private__ = false;
}
inline bool TGroupsCreate_GroupCreate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.private)
  return private__;
}
inline void TGroupsCreate_GroupCreate::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.private)
}

inline const TGroupsCreate_GroupCreate* TGroupsCreate_GroupCreate::internal_default_instance() {
  return &TGroupsCreate_GroupCreate_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsCreate

// repeated .server.TGroupsCreate.GroupCreate groups = 1;
inline int TGroupsCreate::groups_size() const {
  return groups_.size();
}
inline void TGroupsCreate::clear_groups() {
  groups_.Clear();
}
inline const ::server::TGroupsCreate_GroupCreate& TGroupsCreate::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.groups)
  return groups_.Get(index);
}
inline ::server::TGroupsCreate_GroupCreate* TGroupsCreate::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.groups)
  return groups_.Mutable(index);
}
inline ::server::TGroupsCreate_GroupCreate* TGroupsCreate::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsCreate.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >*
TGroupsCreate::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsCreate.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >&
TGroupsCreate::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsCreate.groups)
  return groups_;
}

inline const TGroupsCreate* TGroupsCreate::internal_default_instance() {
  return &TGroupsCreate_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsUpdate_GroupUpdate

// optional string group_id = 1;
inline void TGroupsUpdate_GroupUpdate::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsUpdate_GroupUpdate::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.group_id)
}
inline void TGroupsUpdate_GroupUpdate::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.group_id)
}
inline void TGroupsUpdate_GroupUpdate::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.group_id)
}
inline ::std::string* TGroupsUpdate_GroupUpdate::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsUpdate_GroupUpdate::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.group_id)
}

// optional bool private = 2;
inline void TGroupsUpdate_GroupUpdate::clear_private_() {
  private__ = false;
}
inline bool TGroupsUpdate_GroupUpdate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.private)
  return private__;
}
inline void TGroupsUpdate_GroupUpdate::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.private)
}

// optional string name = 3;
inline void TGroupsUpdate_GroupUpdate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsUpdate_GroupUpdate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.name)
}
inline void TGroupsUpdate_GroupUpdate::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.name)
}
inline void TGroupsUpdate_GroupUpdate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.name)
}
inline ::std::string* TGroupsUpdate_GroupUpdate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsUpdate_GroupUpdate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.name)
}

// optional string description = 4;
inline void TGroupsUpdate_GroupUpdate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsUpdate_GroupUpdate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.description)
}
inline void TGroupsUpdate_GroupUpdate::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.description)
}
inline void TGroupsUpdate_GroupUpdate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.description)
}
inline ::std::string* TGroupsUpdate_GroupUpdate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsUpdate_GroupUpdate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.description)
}

// optional string avatar_url = 5;
inline void TGroupsUpdate_GroupUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsUpdate_GroupUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
inline void TGroupsUpdate_GroupUpdate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
inline void TGroupsUpdate_GroupUpdate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
inline ::std::string* TGroupsUpdate_GroupUpdate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsUpdate_GroupUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.avatar_url)
}

// optional string lang = 6;
inline void TGroupsUpdate_GroupUpdate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsUpdate_GroupUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.lang)
}
inline void TGroupsUpdate_GroupUpdate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.lang)
}
inline void TGroupsUpdate_GroupUpdate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.lang)
}
inline ::std::string* TGroupsUpdate_GroupUpdate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsUpdate_GroupUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.lang)
}

// optional string metadata = 7;
inline void TGroupsUpdate_GroupUpdate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsUpdate_GroupUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.metadata)
}
inline void TGroupsUpdate_GroupUpdate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.metadata)
}
inline void TGroupsUpdate_GroupUpdate::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.metadata)
}
inline ::std::string* TGroupsUpdate_GroupUpdate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsUpdate_GroupUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.metadata)
}

inline const TGroupsUpdate_GroupUpdate* TGroupsUpdate_GroupUpdate::internal_default_instance() {
  return &TGroupsUpdate_GroupUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsUpdate

// repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
inline int TGroupsUpdate::groups_size() const {
  return groups_.size();
}
inline void TGroupsUpdate::clear_groups() {
  groups_.Clear();
}
inline const ::server::TGroupsUpdate_GroupUpdate& TGroupsUpdate::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.groups)
  return groups_.Get(index);
}
inline ::server::TGroupsUpdate_GroupUpdate* TGroupsUpdate::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.groups)
  return groups_.Mutable(index);
}
inline ::server::TGroupsUpdate_GroupUpdate* TGroupsUpdate::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsUpdate.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >*
TGroupsUpdate::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsUpdate.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >&
TGroupsUpdate::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsUpdate.groups)
  return groups_;
}

inline const TGroupsUpdate* TGroupsUpdate::internal_default_instance() {
  return &TGroupsUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsRemove

// repeated string group_ids = 1;
inline int TGroupsRemove::group_ids_size() const {
  return group_ids_.size();
}
inline void TGroupsRemove::clear_group_ids() {
  group_ids_.Clear();
}
inline const ::std::string& TGroupsRemove::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsRemove.group_ids)
  return group_ids_.Get(index);
}
inline ::std::string* TGroupsRemove::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsRemove.group_ids)
  return group_ids_.Mutable(index);
}
inline void TGroupsRemove::set_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsRemove.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
inline void TGroupsRemove::set_group_ids(int index, const char* value) {
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsRemove.group_ids)
}
inline void TGroupsRemove::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsRemove.group_ids)
}
inline ::std::string* TGroupsRemove::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsRemove.group_ids)
  return group_ids_.Add();
}
inline void TGroupsRemove::add_group_ids(const ::std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsRemove.group_ids)
}
inline void TGroupsRemove::add_group_ids(const char* value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsRemove.group_ids)
}
inline void TGroupsRemove::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsRemove.group_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGroupsRemove::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsRemove.group_ids)
  return group_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TGroupsRemove::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsRemove.group_ids)
  return &group_ids_;
}

inline const TGroupsRemove* TGroupsRemove::internal_default_instance() {
  return &TGroupsRemove_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsSelfList

inline const TGroupsSelfList* TGroupsSelfList::internal_default_instance() {
  return &TGroupsSelfList_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsFetch_GroupFetch

// optional string group_id = 1;
inline bool TGroupsFetch_GroupFetch::has_group_id() const {
  return id_case() == kGroupId;
}
inline void TGroupsFetch_GroupFetch::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TGroupsFetch_GroupFetch::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TGroupsFetch_GroupFetch::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.GroupFetch.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TGroupsFetch_GroupFetch::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.group_id)
}
inline void TGroupsFetch_GroupFetch::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsFetch.GroupFetch.group_id)
}
inline void TGroupsFetch_GroupFetch::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsFetch.GroupFetch.group_id)
}
inline ::std::string* TGroupsFetch_GroupFetch::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.GroupFetch.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsFetch_GroupFetch::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupsFetch.GroupFetch.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TGroupsFetch_GroupFetch::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsFetch.GroupFetch.group_id)
}

// optional string name = 2;
inline bool TGroupsFetch_GroupFetch::has_name() const {
  return id_case() == kName;
}
inline void TGroupsFetch_GroupFetch::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void TGroupsFetch_GroupFetch::clear_name() {
  if (has_name()) {
    id_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TGroupsFetch_GroupFetch::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.GroupFetch.name)
  if (has_name()) {
    return id_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TGroupsFetch_GroupFetch::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.name)
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.name)
}
inline void TGroupsFetch_GroupFetch::set_name(const char* value) {
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsFetch.GroupFetch.name)
}
inline void TGroupsFetch_GroupFetch::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsFetch.GroupFetch.name)
}
inline ::std::string* TGroupsFetch_GroupFetch::mutable_name() {
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.GroupFetch.name)
  return id_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsFetch_GroupFetch::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsFetch.GroupFetch.name)
  if (has_name()) {
    clear_has_id();
    return id_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TGroupsFetch_GroupFetch::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (name != NULL) {
    set_has_name();
    id_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsFetch.GroupFetch.name)
}

inline bool TGroupsFetch_GroupFetch::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TGroupsFetch_GroupFetch::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TGroupsFetch_GroupFetch::IdCase TGroupsFetch_GroupFetch::id_case() const {
  return TGroupsFetch_GroupFetch::IdCase(_oneof_case_[0]);
}
inline const TGroupsFetch_GroupFetch* TGroupsFetch_GroupFetch::internal_default_instance() {
  return &TGroupsFetch_GroupFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsFetch

// repeated .server.TGroupsFetch.GroupFetch groups = 1;
inline int TGroupsFetch::groups_size() const {
  return groups_.size();
}
inline void TGroupsFetch::clear_groups() {
  groups_.Clear();
}
inline const ::server::TGroupsFetch_GroupFetch& TGroupsFetch::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.groups)
  return groups_.Get(index);
}
inline ::server::TGroupsFetch_GroupFetch* TGroupsFetch::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.groups)
  return groups_.Mutable(index);
}
inline ::server::TGroupsFetch_GroupFetch* TGroupsFetch::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsFetch.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >*
TGroupsFetch::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsFetch.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >&
TGroupsFetch::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsFetch.groups)
  return groups_;
}

inline const TGroupsFetch* TGroupsFetch::internal_default_instance() {
  return &TGroupsFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsList

// optional int64 page_limit = 1;
inline void TGroupsList::clear_page_limit() {
  page_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TGroupsList::page_limit() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.page_limit)
  return page_limit_;
}
inline void TGroupsList::set_page_limit(::google::protobuf::int64 value) {
  
  page_limit_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.page_limit)
}

// optional bool order_by_asc = 2;
inline void TGroupsList::clear_order_by_asc() {
  order_by_asc_ = false;
}
inline bool TGroupsList::order_by_asc() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.order_by_asc)
  return order_by_asc_;
}
inline void TGroupsList::set_order_by_asc(bool value) {
  
  order_by_asc_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.order_by_asc)
}

// optional string lang = 3;
inline bool TGroupsList::has_lang() const {
  return filter_case() == kLang;
}
inline void TGroupsList::set_has_lang() {
  _oneof_case_[0] = kLang;
}
inline void TGroupsList::clear_lang() {
  if (has_lang()) {
    filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
inline const ::std::string& TGroupsList::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.lang)
  if (has_lang()) {
    return filter_.lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TGroupsList::set_lang(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
}
inline void TGroupsList::set_lang(const char* value) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.lang)
}
inline void TGroupsList::set_lang(const char* value, size_t size) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.lang)
}
inline ::std::string* TGroupsList::mutable_lang() {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.lang)
  return filter_.lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsList::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.lang)
  if (has_lang()) {
    clear_has_filter();
    return filter_.lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TGroupsList::set_allocated_lang(::std::string* lang) {
  if (!has_lang()) {
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (lang != NULL) {
    set_has_lang();
    filter_.lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        lang);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.lang)
}

// optional int64 created_at = 4;
inline bool TGroupsList::has_created_at() const {
  return filter_case() == kCreatedAt;
}
inline void TGroupsList::set_has_created_at() {
  _oneof_case_[0] = kCreatedAt;
}
inline void TGroupsList::clear_created_at() {
  if (has_created_at()) {
    filter_.created_at_ = GOOGLE_LONGLONG(0);
    clear_has_filter();
  }
}
inline ::google::protobuf::int64 TGroupsList::created_at() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.created_at)
  if (has_created_at()) {
    return filter_.created_at_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TGroupsList::set_created_at(::google::protobuf::int64 value) {
  if (!has_created_at()) {
    clear_filter();
    set_has_created_at();
  }
  filter_.created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.created_at)
}

// optional int64 count = 5;
inline bool TGroupsList::has_count() const {
  return filter_case() == kCount;
}
inline void TGroupsList::set_has_count() {
  _oneof_case_[0] = kCount;
}
inline void TGroupsList::clear_count() {
  if (has_count()) {
    filter_.count_ = GOOGLE_LONGLONG(0);
    clear_has_filter();
  }
}
inline ::google::protobuf::int64 TGroupsList::count() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.count)
  if (has_count()) {
    return filter_.count_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TGroupsList::set_count(::google::protobuf::int64 value) {
  if (!has_count()) {
    clear_filter();
    set_has_count();
  }
  filter_.count_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.count)
}

// optional string cursor = 7;
inline void TGroupsList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.cursor)
}
inline void TGroupsList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.cursor)
}
inline void TGroupsList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.cursor)
}
inline ::std::string* TGroupsList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupsList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.cursor)
}

inline bool TGroupsList::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void TGroupsList::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline TGroupsList::FilterCase TGroupsList::filter_case() const {
  return TGroupsList::FilterCase(_oneof_case_[0]);
}
inline const TGroupsList* TGroupsList::internal_default_instance() {
  return &TGroupsList_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroups

// repeated .server.Group groups = 1;
inline int TGroups::groups_size() const {
  return groups_.size();
}
inline void TGroups::clear_groups() {
  groups_.Clear();
}
inline const ::server::Group& TGroups::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroups.groups)
  return groups_.Get(index);
}
inline ::server::Group* TGroups::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroups.groups)
  return groups_.Mutable(index);
}
inline ::server::Group* TGroups::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroups.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::Group >*
TGroups::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroups.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::Group >&
TGroups::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroups.groups)
  return groups_;
}

// optional string cursor = 2;
inline void TGroups::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroups::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroups.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroups::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroups.cursor)
}
inline void TGroups::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroups.cursor)
}
inline void TGroups::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroups.cursor)
}
inline ::std::string* TGroups::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroups.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroups::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroups.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroups::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TGroups.cursor)
}

inline const TGroups* TGroups::internal_default_instance() {
  return &TGroups_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsSelf_GroupSelf

// optional .server.Group group = 1;
inline bool TGroupsSelf_GroupSelf::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline void TGroupsSelf_GroupSelf::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
inline const ::server::Group& TGroupsSelf_GroupSelf::group() const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.GroupSelf.group)
  return group_ != NULL ? *group_
                         : *::server::Group::internal_default_instance();
}
inline ::server::Group* TGroupsSelf_GroupSelf::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::server::Group;
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsSelf.GroupSelf.group)
  return group_;
}
inline ::server::Group* TGroupsSelf_GroupSelf::release_group() {
  // @@protoc_insertion_point(field_release:server.TGroupsSelf.GroupSelf.group)
  
  ::server::Group* temp = group_;
  group_ = NULL;
  return temp;
}
inline void TGroupsSelf_GroupSelf::set_allocated_group(::server::Group* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsSelf.GroupSelf.group)
}

// optional int64 state = 2;
inline void TGroupsSelf_GroupSelf::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TGroupsSelf_GroupSelf::state() const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.GroupSelf.state)
  return state_;
}
inline void TGroupsSelf_GroupSelf::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsSelf.GroupSelf.state)
}

inline const TGroupsSelf_GroupSelf* TGroupsSelf_GroupSelf::internal_default_instance() {
  return &TGroupsSelf_GroupSelf_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsSelf

// repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
inline int TGroupsSelf::groups_self_size() const {
  return groups_self_.size();
}
inline void TGroupsSelf::clear_groups_self() {
  groups_self_.Clear();
}
inline const ::server::TGroupsSelf_GroupSelf& TGroupsSelf::groups_self(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.groups_self)
  return groups_self_.Get(index);
}
inline ::server::TGroupsSelf_GroupSelf* TGroupsSelf::mutable_groups_self(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsSelf.groups_self)
  return groups_self_.Mutable(index);
}
inline ::server::TGroupsSelf_GroupSelf* TGroupsSelf::add_groups_self() {
  // @@protoc_insertion_point(field_add:server.TGroupsSelf.groups_self)
  return groups_self_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >*
TGroupsSelf::mutable_groups_self() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsSelf.groups_self)
  return &groups_self_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >&
TGroupsSelf::groups_self() const {
  // @@protoc_insertion_point(field_list:server.TGroupsSelf.groups_self)
  return groups_self_;
}

inline const TGroupsSelf* TGroupsSelf::internal_default_instance() {
  return &TGroupsSelf_default_instance_.get();
}
// -------------------------------------------------------------------

// GroupUser

// optional .server.User user = 1;
inline bool GroupUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void GroupUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::server::User& GroupUser::user() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
inline ::server::User* GroupUser::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.GroupUser.user)
  return user_;
}
inline ::server::User* GroupUser::release_user() {
  // @@protoc_insertion_point(field_release:server.GroupUser.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void GroupUser::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.GroupUser.user)
}

// optional int64 state = 2;
inline void GroupUser::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupUser::state() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.state)
  return state_;
}
inline void GroupUser::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:server.GroupUser.state)
}

inline const GroupUser* GroupUser::internal_default_instance() {
  return &GroupUser_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersList

// optional string group_id = 1;
inline void TGroupUsersList::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupUsersList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersList.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersList::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersList.group_id)
}
inline void TGroupUsersList::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersList.group_id)
}
inline void TGroupUsersList::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersList.group_id)
}
inline ::std::string* TGroupUsersList::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersList.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupUsersList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersList.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersList::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersList.group_id)
}

inline const TGroupUsersList* TGroupUsersList::internal_default_instance() {
  return &TGroupUsersList_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsers

// repeated .server.GroupUser users = 1;
inline int TGroupUsers::users_size() const {
  return users_.size();
}
inline void TGroupUsers::clear_users() {
  users_.Clear();
}
inline const ::server::GroupUser& TGroupUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsers.users)
  return users_.Get(index);
}
inline ::server::GroupUser* TGroupUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsers.users)
  return users_.Mutable(index);
}
inline ::server::GroupUser* TGroupUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsers.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::GroupUser >*
TGroupUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsers.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::GroupUser >&
TGroupUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsers.users)
  return users_;
}

inline const TGroupUsers* TGroupUsers::internal_default_instance() {
  return &TGroupUsers_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsJoin

// repeated string group_ids = 1;
inline int TGroupsJoin::group_ids_size() const {
  return group_ids_.size();
}
inline void TGroupsJoin::clear_group_ids() {
  group_ids_.Clear();
}
inline const ::std::string& TGroupsJoin::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsJoin.group_ids)
  return group_ids_.Get(index);
}
inline ::std::string* TGroupsJoin::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsJoin.group_ids)
  return group_ids_.Mutable(index);
}
inline void TGroupsJoin::set_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsJoin.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
inline void TGroupsJoin::set_group_ids(int index, const char* value) {
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsJoin.group_ids)
}
inline void TGroupsJoin::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsJoin.group_ids)
}
inline ::std::string* TGroupsJoin::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsJoin.group_ids)
  return group_ids_.Add();
}
inline void TGroupsJoin::add_group_ids(const ::std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsJoin.group_ids)
}
inline void TGroupsJoin::add_group_ids(const char* value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsJoin.group_ids)
}
inline void TGroupsJoin::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsJoin.group_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGroupsJoin::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsJoin.group_ids)
  return group_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TGroupsJoin::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsJoin.group_ids)
  return &group_ids_;
}

inline const TGroupsJoin* TGroupsJoin::internal_default_instance() {
  return &TGroupsJoin_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsLeave

// repeated string group_ids = 1;
inline int TGroupsLeave::group_ids_size() const {
  return group_ids_.size();
}
inline void TGroupsLeave::clear_group_ids() {
  group_ids_.Clear();
}
inline const ::std::string& TGroupsLeave::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsLeave.group_ids)
  return group_ids_.Get(index);
}
inline ::std::string* TGroupsLeave::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsLeave.group_ids)
  return group_ids_.Mutable(index);
}
inline void TGroupsLeave::set_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsLeave.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
inline void TGroupsLeave::set_group_ids(int index, const char* value) {
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsLeave.group_ids)
}
inline void TGroupsLeave::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsLeave.group_ids)
}
inline ::std::string* TGroupsLeave::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsLeave.group_ids)
  return group_ids_.Add();
}
inline void TGroupsLeave::add_group_ids(const ::std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsLeave.group_ids)
}
inline void TGroupsLeave::add_group_ids(const char* value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsLeave.group_ids)
}
inline void TGroupsLeave::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsLeave.group_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGroupsLeave::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsLeave.group_ids)
  return group_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TGroupsLeave::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsLeave.group_ids)
  return &group_ids_;
}

inline const TGroupsLeave* TGroupsLeave::internal_default_instance() {
  return &TGroupsLeave_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersAdd_GroupUserAdd

// optional string group_id = 1;
inline void TGroupUsersAdd_GroupUserAdd::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupUsersAdd_GroupUserAdd::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.GroupUserAdd.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersAdd_GroupUserAdd::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
inline ::std::string* TGroupUsersAdd_GroupUserAdd::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.GroupUserAdd.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupUsersAdd_GroupUserAdd::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersAdd.GroupUserAdd.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersAdd_GroupUserAdd::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersAdd.GroupUserAdd.group_id)
}

// optional string user_id = 2;
inline void TGroupUsersAdd_GroupUserAdd::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupUsersAdd_GroupUserAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.GroupUserAdd.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersAdd_GroupUserAdd::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
inline ::std::string* TGroupUsersAdd_GroupUserAdd::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.GroupUserAdd.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupUsersAdd_GroupUserAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersAdd.GroupUserAdd.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersAdd_GroupUserAdd::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersAdd.GroupUserAdd.user_id)
}

inline const TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd_GroupUserAdd::internal_default_instance() {
  return &TGroupUsersAdd_GroupUserAdd_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersAdd

// repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
inline int TGroupUsersAdd::group_users_size() const {
  return group_users_.size();
}
inline void TGroupUsersAdd::clear_group_users() {
  group_users_.Clear();
}
inline const ::server::TGroupUsersAdd_GroupUserAdd& TGroupUsersAdd::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.group_users)
  return group_users_.Get(index);
}
inline ::server::TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.group_users)
  return group_users_.Mutable(index);
}
inline ::server::TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersAdd.group_users)
  return group_users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >*
TGroupUsersAdd::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersAdd.group_users)
  return &group_users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >&
TGroupUsersAdd::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersAdd.group_users)
  return group_users_;
}

inline const TGroupUsersAdd* TGroupUsersAdd::internal_default_instance() {
  return &TGroupUsersAdd_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersKick_GroupUserKick

// optional string group_id = 1;
inline void TGroupUsersKick_GroupUserKick::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupUsersKick_GroupUserKick::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.GroupUserKick.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersKick_GroupUserKick::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersKick.GroupUserKick.group_id)
}
inline void TGroupUsersKick_GroupUserKick::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersKick.GroupUserKick.group_id)
}
inline void TGroupUsersKick_GroupUserKick::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersKick.GroupUserKick.group_id)
}
inline ::std::string* TGroupUsersKick_GroupUserKick::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.GroupUserKick.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupUsersKick_GroupUserKick::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersKick.GroupUserKick.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersKick_GroupUserKick::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersKick.GroupUserKick.group_id)
}

// optional string user_id = 2;
inline void TGroupUsersKick_GroupUserKick::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupUsersKick_GroupUserKick::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.GroupUserKick.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersKick_GroupUserKick::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersKick.GroupUserKick.user_id)
}
inline void TGroupUsersKick_GroupUserKick::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersKick.GroupUserKick.user_id)
}
inline void TGroupUsersKick_GroupUserKick::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersKick.GroupUserKick.user_id)
}
inline ::std::string* TGroupUsersKick_GroupUserKick::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.GroupUserKick.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupUsersKick_GroupUserKick::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersKick.GroupUserKick.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersKick_GroupUserKick::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersKick.GroupUserKick.user_id)
}

inline const TGroupUsersKick_GroupUserKick* TGroupUsersKick_GroupUserKick::internal_default_instance() {
  return &TGroupUsersKick_GroupUserKick_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersKick

// repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
inline int TGroupUsersKick::group_users_size() const {
  return group_users_.size();
}
inline void TGroupUsersKick::clear_group_users() {
  group_users_.Clear();
}
inline const ::server::TGroupUsersKick_GroupUserKick& TGroupUsersKick::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.group_users)
  return group_users_.Get(index);
}
inline ::server::TGroupUsersKick_GroupUserKick* TGroupUsersKick::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.group_users)
  return group_users_.Mutable(index);
}
inline ::server::TGroupUsersKick_GroupUserKick* TGroupUsersKick::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersKick.group_users)
  return group_users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >*
TGroupUsersKick::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersKick.group_users)
  return &group_users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >&
TGroupUsersKick::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersKick.group_users)
  return group_users_;
}

inline const TGroupUsersKick* TGroupUsersKick::internal_default_instance() {
  return &TGroupUsersKick_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersPromote_GroupUserPromote

// optional string group_id = 1;
inline void TGroupUsersPromote_GroupUserPromote::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupUsersPromote_GroupUserPromote::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.GroupUserPromote.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersPromote_GroupUserPromote::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
inline ::std::string* TGroupUsersPromote_GroupUserPromote::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.GroupUserPromote.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupUsersPromote_GroupUserPromote::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersPromote.GroupUserPromote.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersPromote_GroupUserPromote::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersPromote.GroupUserPromote.group_id)
}

// optional string user_id = 2;
inline void TGroupUsersPromote_GroupUserPromote::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TGroupUsersPromote_GroupUserPromote::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.GroupUserPromote.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersPromote_GroupUserPromote::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
inline ::std::string* TGroupUsersPromote_GroupUserPromote::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.GroupUserPromote.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TGroupUsersPromote_GroupUserPromote::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersPromote.GroupUserPromote.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TGroupUsersPromote_GroupUserPromote::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersPromote.GroupUserPromote.user_id)
}

inline const TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote_GroupUserPromote::internal_default_instance() {
  return &TGroupUsersPromote_GroupUserPromote_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersPromote

// repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
inline int TGroupUsersPromote::group_users_size() const {
  return group_users_.size();
}
inline void TGroupUsersPromote::clear_group_users() {
  group_users_.Clear();
}
inline const ::server::TGroupUsersPromote_GroupUserPromote& TGroupUsersPromote::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.group_users)
  return group_users_.Get(index);
}
inline ::server::TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.group_users)
  return group_users_.Mutable(index);
}
inline ::server::TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersPromote.group_users)
  return group_users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >*
TGroupUsersPromote::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersPromote.group_users)
  return &group_users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >&
TGroupUsersPromote::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersPromote.group_users)
  return group_users_;
}

inline const TGroupUsersPromote* TGroupUsersPromote::internal_default_instance() {
  return &TGroupUsersPromote_default_instance_.get();
}
// -------------------------------------------------------------------

// TopicId

// optional string dm = 1;
inline bool TopicId::has_dm() const {
  return id_case() == kDm;
}
inline void TopicId::set_has_dm() {
  _oneof_case_[0] = kDm;
}
inline void TopicId::clear_dm() {
  if (has_dm()) {
    id_.dm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TopicId::dm() const {
  // @@protoc_insertion_point(field_get:server.TopicId.dm)
  if (has_dm()) {
    return id_.dm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TopicId::set_dm(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
}
inline void TopicId::set_dm(const char* value) {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.dm)
}
inline void TopicId::set_dm(const char* value, size_t size) {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.dm)
}
inline ::std::string* TopicId::mutable_dm() {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.dm)
  return id_.dm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicId::release_dm() {
  // @@protoc_insertion_point(field_release:server.TopicId.dm)
  if (has_dm()) {
    clear_has_id();
    return id_.dm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TopicId::set_allocated_dm(::std::string* dm) {
  if (!has_dm()) {
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (dm != NULL) {
    set_has_dm();
    id_.dm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        dm);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.dm)
}

// optional string room = 2;
inline bool TopicId::has_room() const {
  return id_case() == kRoom;
}
inline void TopicId::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline void TopicId::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TopicId::room() const {
  // @@protoc_insertion_point(field_get:server.TopicId.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TopicId::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.room)
}
inline void TopicId::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.room)
}
inline void TopicId::set_room(const char* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.room)
}
inline ::std::string* TopicId::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicId::release_room() {
  // @@protoc_insertion_point(field_release:server.TopicId.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TopicId::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.room)
}

// optional string group_id = 3;
inline bool TopicId::has_group_id() const {
  return id_case() == kGroupId;
}
inline void TopicId::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TopicId::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TopicId::group_id() const {
  // @@protoc_insertion_point(field_get:server.TopicId.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TopicId::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
}
inline void TopicId::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.group_id)
}
inline void TopicId::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.group_id)
}
inline ::std::string* TopicId::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicId::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TopicId.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TopicId::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.group_id)
}

inline bool TopicId::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TopicId::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TopicId::IdCase TopicId::id_case() const {
  return TopicId::IdCase(_oneof_case_[0]);
}
inline const TopicId* TopicId::internal_default_instance() {
  return &TopicId_default_instance_.get();
}
// -------------------------------------------------------------------

// UserPresence

// optional string user_id = 1;
inline void UserPresence::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserPresence::user_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPresence::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.user_id)
}
inline void UserPresence::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.user_id)
}
inline void UserPresence::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.user_id)
}
inline ::std::string* UserPresence::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserPresence::release_user_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPresence::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.user_id)
}

// optional string session_id = 2;
inline void UserPresence::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserPresence::session_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPresence::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.session_id)
}
inline void UserPresence::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.session_id)
}
inline void UserPresence::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.session_id)
}
inline ::std::string* UserPresence::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserPresence::release_session_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPresence::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.session_id)
}

// optional string handle = 3;
inline void UserPresence::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserPresence::handle() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPresence::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.handle)
}
inline void UserPresence::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.handle)
}
inline void UserPresence::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.handle)
}
inline ::std::string* UserPresence::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserPresence::release_handle() {
  // @@protoc_insertion_point(field_release:server.UserPresence.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserPresence::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.handle)
}

inline const UserPresence* UserPresence::internal_default_instance() {
  return &UserPresence_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicsJoin_TopicJoin

// optional string user_id = 1;
inline bool TTopicsJoin_TopicJoin::has_user_id() const {
  return id_case() == kUserId;
}
inline void TTopicsJoin_TopicJoin::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TTopicsJoin_TopicJoin::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TTopicsJoin_TopicJoin::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicsJoin_TopicJoin::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.user_id)
}
inline void TTopicsJoin_TopicJoin::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.user_id)
}
inline void TTopicsJoin_TopicJoin::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.user_id)
}
inline ::std::string* TTopicsJoin_TopicJoin::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicsJoin_TopicJoin::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TTopicsJoin_TopicJoin::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.user_id)
}

// optional string room = 2;
inline bool TTopicsJoin_TopicJoin::has_room() const {
  return id_case() == kRoom;
}
inline void TTopicsJoin_TopicJoin::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline void TTopicsJoin_TopicJoin::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TTopicsJoin_TopicJoin::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicsJoin_TopicJoin::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.room)
}
inline void TTopicsJoin_TopicJoin::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.room)
}
inline void TTopicsJoin_TopicJoin::set_room(const char* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.room)
}
inline ::std::string* TTopicsJoin_TopicJoin::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicsJoin_TopicJoin::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TTopicsJoin_TopicJoin::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.room)
}

// optional string group_id = 3;
inline bool TTopicsJoin_TopicJoin::has_group_id() const {
  return id_case() == kGroupId;
}
inline void TTopicsJoin_TopicJoin::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TTopicsJoin_TopicJoin::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TTopicsJoin_TopicJoin::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicsJoin_TopicJoin::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.group_id)
}
inline void TTopicsJoin_TopicJoin::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.group_id)
}
inline void TTopicsJoin_TopicJoin::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.group_id)
}
inline ::std::string* TTopicsJoin_TopicJoin::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicsJoin_TopicJoin::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TTopicsJoin_TopicJoin::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.group_id)
}

inline bool TTopicsJoin_TopicJoin::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TTopicsJoin_TopicJoin::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TTopicsJoin_TopicJoin::IdCase TTopicsJoin_TopicJoin::id_case() const {
  return TTopicsJoin_TopicJoin::IdCase(_oneof_case_[0]);
}
inline const TTopicsJoin_TopicJoin* TTopicsJoin_TopicJoin::internal_default_instance() {
  return &TTopicsJoin_TopicJoin_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicsJoin

// repeated .server.TTopicsJoin.TopicJoin joins = 1;
inline int TTopicsJoin::joins_size() const {
  return joins_.size();
}
inline void TTopicsJoin::clear_joins() {
  joins_.Clear();
}
inline const ::server::TTopicsJoin_TopicJoin& TTopicsJoin::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.joins)
  return joins_.Get(index);
}
inline ::server::TTopicsJoin_TopicJoin* TTopicsJoin::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.joins)
  return joins_.Mutable(index);
}
inline ::server::TTopicsJoin_TopicJoin* TTopicsJoin::add_joins() {
  // @@protoc_insertion_point(field_add:server.TTopicsJoin.joins)
  return joins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >*
TTopicsJoin::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicsJoin.joins)
  return &joins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >&
TTopicsJoin::joins() const {
  // @@protoc_insertion_point(field_list:server.TTopicsJoin.joins)
  return joins_;
}

inline const TTopicsJoin* TTopicsJoin::internal_default_instance() {
  return &TTopicsJoin_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopics_Topic

// optional .server.TopicId topic = 1;
inline bool TTopics_Topic::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
inline void TTopics_Topic::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
inline const ::server::TopicId& TTopics_Topic::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
inline ::server::TopicId* TTopics_Topic::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.topic)
  return topic_;
}
inline ::server::TopicId* TTopics_Topic::release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopics.Topic.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void TTopics_Topic::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopics.Topic.topic)
}

// repeated .server.UserPresence presences = 2;
inline int TTopics_Topic::presences_size() const {
  return presences_.size();
}
inline void TTopics_Topic::clear_presences() {
  presences_.Clear();
}
inline const ::server::UserPresence& TTopics_Topic::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.presences)
  return presences_.Get(index);
}
inline ::server::UserPresence* TTopics_Topic::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.presences)
  return presences_.Mutable(index);
}
inline ::server::UserPresence* TTopics_Topic::add_presences() {
  // @@protoc_insertion_point(field_add:server.TTopics.Topic.presences)
  return presences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TTopics_Topic::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopics.Topic.presences)
  return &presences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TTopics_Topic::presences() const {
  // @@protoc_insertion_point(field_list:server.TTopics.Topic.presences)
  return presences_;
}

// optional .server.UserPresence self = 3;
inline bool TTopics_Topic::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
inline void TTopics_Topic::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
inline const ::server::UserPresence& TTopics_Topic::self() const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
inline ::server::UserPresence* TTopics_Topic::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.self)
  return self_;
}
inline ::server::UserPresence* TTopics_Topic::release_self() {
  // @@protoc_insertion_point(field_release:server.TTopics.Topic.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
inline void TTopics_Topic::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopics.Topic.self)
}

inline const TTopics_Topic* TTopics_Topic::internal_default_instance() {
  return &TTopics_Topic_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopics

// repeated .server.TTopics.Topic topics = 1;
inline int TTopics::topics_size() const {
  return topics_.size();
}
inline void TTopics::clear_topics() {
  topics_.Clear();
}
inline const ::server::TTopics_Topic& TTopics::topics(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopics.topics)
  return topics_.Get(index);
}
inline ::server::TTopics_Topic* TTopics::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopics.topics)
  return topics_.Mutable(index);
}
inline ::server::TTopics_Topic* TTopics::add_topics() {
  // @@protoc_insertion_point(field_add:server.TTopics.topics)
  return topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TTopics_Topic >*
TTopics::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopics.topics)
  return &topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TTopics_Topic >&
TTopics::topics() const {
  // @@protoc_insertion_point(field_list:server.TTopics.topics)
  return topics_;
}

inline const TTopics* TTopics::internal_default_instance() {
  return &TTopics_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicsLeave

// repeated .server.TopicId topics = 1;
inline int TTopicsLeave::topics_size() const {
  return topics_.size();
}
inline void TTopicsLeave::clear_topics() {
  topics_.Clear();
}
inline const ::server::TopicId& TTopicsLeave::topics(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicsLeave.topics)
  return topics_.Get(index);
}
inline ::server::TopicId* TTopicsLeave::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicsLeave.topics)
  return topics_.Mutable(index);
}
inline ::server::TopicId* TTopicsLeave::add_topics() {
  // @@protoc_insertion_point(field_add:server.TTopicsLeave.topics)
  return topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TopicId >*
TTopicsLeave::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicsLeave.topics)
  return &topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TopicId >&
TTopicsLeave::topics() const {
  // @@protoc_insertion_point(field_list:server.TTopicsLeave.topics)
  return topics_;
}

inline const TTopicsLeave* TTopicsLeave::internal_default_instance() {
  return &TTopicsLeave_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicMessageSend

// optional .server.TopicId topic = 1;
inline bool TTopicMessageSend::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
inline void TTopicMessageSend::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
inline const ::server::TopicId& TTopicMessageSend::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
inline ::server::TopicId* TTopicMessageSend::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.topic)
  return topic_;
}
inline ::server::TopicId* TTopicMessageSend::release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void TTopicMessageSend::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.topic)
}

// optional string data = 2;
inline void TTopicMessageSend::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TTopicMessageSend::data() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessageSend::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageSend.data)
}
inline void TTopicMessageSend::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageSend.data)
}
inline void TTopicMessageSend::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageSend.data)
}
inline ::std::string* TTopicMessageSend::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessageSend::release_data() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessageSend::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.data)
}

inline const TTopicMessageSend* TTopicMessageSend::internal_default_instance() {
  return &TTopicMessageSend_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicMessageAck

// optional string message_id = 1;
inline void TTopicMessageAck::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TTopicMessageAck::message_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessageAck::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.message_id)
}
inline void TTopicMessageAck::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.message_id)
}
inline void TTopicMessageAck::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.message_id)
}
inline ::std::string* TTopicMessageAck::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessageAck::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessageAck::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.message_id)
}

// optional int64 created_at = 2;
inline void TTopicMessageAck::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TTopicMessageAck::created_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.created_at)
  return created_at_;
}
inline void TTopicMessageAck::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.created_at)
}

// optional int64 expires_at = 3;
inline void TTopicMessageAck::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TTopicMessageAck::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.expires_at)
  return expires_at_;
}
inline void TTopicMessageAck::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.expires_at)
}

// optional string handle = 4;
inline void TTopicMessageAck::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TTopicMessageAck::handle() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessageAck::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.handle)
}
inline void TTopicMessageAck::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.handle)
}
inline void TTopicMessageAck::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.handle)
}
inline ::std::string* TTopicMessageAck::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessageAck::release_handle() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessageAck::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.handle)
}

inline const TTopicMessageAck* TTopicMessageAck::internal_default_instance() {
  return &TTopicMessageAck_default_instance_.get();
}
// -------------------------------------------------------------------

// TopicMessage

// optional .server.TopicId topic = 1;
inline bool TopicMessage::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
inline void TopicMessage::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
inline const ::server::TopicId& TopicMessage::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
inline ::server::TopicId* TopicMessage::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.topic)
  return topic_;
}
inline ::server::TopicId* TopicMessage::release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void TopicMessage::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.topic)
}

// optional string user_id = 2;
inline void TopicMessage::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicMessage::user_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.user_id)
}
inline void TopicMessage::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.user_id)
}
inline void TopicMessage::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.user_id)
}
inline ::std::string* TopicMessage::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.user_id)
}

// optional string message_id = 3;
inline void TopicMessage::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicMessage::message_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.message_id)
}
inline void TopicMessage::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.message_id)
}
inline void TopicMessage::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.message_id)
}
inline ::std::string* TopicMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.message_id)
}

// optional int64 created_at = 4;
inline void TopicMessage::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TopicMessage::created_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.created_at)
  return created_at_;
}
inline void TopicMessage::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.created_at)
}

// optional int64 expires_at = 5;
inline void TopicMessage::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TopicMessage::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.expires_at)
  return expires_at_;
}
inline void TopicMessage::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.expires_at)
}

// optional string handle = 6;
inline void TopicMessage::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicMessage::handle() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.handle)
}
inline void TopicMessage::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.handle)
}
inline void TopicMessage::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.handle)
}
inline ::std::string* TopicMessage::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicMessage::release_handle() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.handle)
}

// optional int64 type = 7;
inline void TopicMessage::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TopicMessage::type() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.type)
  return type_;
}
inline void TopicMessage::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.type)
}

// optional string data = 8;
inline void TopicMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicMessage::data() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.data)
}
inline void TopicMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.data)
}
inline void TopicMessage::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.data)
}
inline ::std::string* TopicMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicMessage::release_data() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.data)
}

inline const TopicMessage* TopicMessage::internal_default_instance() {
  return &TopicMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicMessagesList

// optional string user_id = 1;
inline bool TTopicMessagesList::has_user_id() const {
  return id_case() == kUserId;
}
inline void TTopicMessagesList::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TTopicMessagesList::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TTopicMessagesList::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicMessagesList::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
}
inline void TTopicMessagesList::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.user_id)
}
inline void TTopicMessagesList::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.user_id)
}
inline ::std::string* TTopicMessagesList::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessagesList::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TTopicMessagesList::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.user_id)
}

// optional string room = 2;
inline bool TTopicMessagesList::has_room() const {
  return id_case() == kRoom;
}
inline void TTopicMessagesList::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline void TTopicMessagesList::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TTopicMessagesList::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicMessagesList::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
}
inline void TTopicMessagesList::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.room)
}
inline void TTopicMessagesList::set_room(const char* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.room)
}
inline ::std::string* TTopicMessagesList::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessagesList::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TTopicMessagesList::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.room)
}

// optional string group_id = 3;
inline bool TTopicMessagesList::has_group_id() const {
  return id_case() == kGroupId;
}
inline void TTopicMessagesList::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TTopicMessagesList::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TTopicMessagesList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicMessagesList::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
}
inline void TTopicMessagesList::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.group_id)
}
inline void TTopicMessagesList::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.group_id)
}
inline ::std::string* TTopicMessagesList::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessagesList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TTopicMessagesList::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.group_id)
}

// optional string cursor = 4;
inline void TTopicMessagesList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TTopicMessagesList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessagesList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.cursor)
}
inline void TTopicMessagesList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.cursor)
}
inline void TTopicMessagesList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.cursor)
}
inline ::std::string* TTopicMessagesList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessagesList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessagesList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.cursor)
}

// optional bool forward = 5;
inline void TTopicMessagesList::clear_forward() {
  forward_ = false;
}
inline bool TTopicMessagesList::forward() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.forward)
  return forward_;
}
inline void TTopicMessagesList::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.forward)
}

// optional int64 limit = 6;
inline void TTopicMessagesList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TTopicMessagesList::limit() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.limit)
  return limit_;
}
inline void TTopicMessagesList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.limit)
}

inline bool TTopicMessagesList::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TTopicMessagesList::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TTopicMessagesList::IdCase TTopicMessagesList::id_case() const {
  return TTopicMessagesList::IdCase(_oneof_case_[0]);
}
inline const TTopicMessagesList* TTopicMessagesList::internal_default_instance() {
  return &TTopicMessagesList_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicMessages

// repeated .server.TopicMessage messages = 1;
inline int TTopicMessages::messages_size() const {
  return messages_.size();
}
inline void TTopicMessages::clear_messages() {
  messages_.Clear();
}
inline const ::server::TopicMessage& TTopicMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.messages)
  return messages_.Get(index);
}
inline ::server::TopicMessage* TTopicMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.messages)
  return messages_.Mutable(index);
}
inline ::server::TopicMessage* TTopicMessages::add_messages() {
  // @@protoc_insertion_point(field_add:server.TTopicMessages.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TopicMessage >*
TTopicMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicMessages.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TopicMessage >&
TTopicMessages::messages() const {
  // @@protoc_insertion_point(field_list:server.TTopicMessages.messages)
  return messages_;
}

// optional string cursor = 2;
inline void TTopicMessages::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TTopicMessages::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessages::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessages.cursor)
}
inline void TTopicMessages::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessages.cursor)
}
inline void TTopicMessages::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessages.cursor)
}
inline ::std::string* TTopicMessages::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TTopicMessages::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessages.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TTopicMessages::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessages.cursor)
}

inline const TTopicMessages* TTopicMessages::internal_default_instance() {
  return &TTopicMessages_default_instance_.get();
}
// -------------------------------------------------------------------

// TopicPresence

// optional .server.TopicId topic = 1;
inline bool TopicPresence::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
inline void TopicPresence::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
inline const ::server::TopicId& TopicPresence::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
inline ::server::TopicId* TopicPresence::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.topic)
  return topic_;
}
inline ::server::TopicId* TopicPresence::release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicPresence.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline void TopicPresence::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicPresence.topic)
}

// repeated .server.UserPresence joins = 2;
inline int TopicPresence::joins_size() const {
  return joins_.size();
}
inline void TopicPresence::clear_joins() {
  joins_.Clear();
}
inline const ::server::UserPresence& TopicPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.joins)
  return joins_.Get(index);
}
inline ::server::UserPresence* TopicPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.joins)
  return joins_.Mutable(index);
}
inline ::server::UserPresence* TopicPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.joins)
  return joins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.joins)
  return &joins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
inline int TopicPresence::leaves_size() const {
  return leaves_.size();
}
inline void TopicPresence::clear_leaves() {
  leaves_.Clear();
}
inline const ::server::UserPresence& TopicPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.leaves)
  return leaves_.Get(index);
}
inline ::server::UserPresence* TopicPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.leaves)
  return leaves_.Mutable(index);
}
inline ::server::UserPresence* TopicPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.leaves)
  return leaves_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.leaves)
  return &leaves_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.leaves)
  return leaves_;
}

inline const TopicPresence* TopicPresence::internal_default_instance() {
  return &TopicPresence_default_instance_.get();
}
// -------------------------------------------------------------------

// PropertyPair_StringSet

// repeated string values = 1;
inline int PropertyPair_StringSet::values_size() const {
  return values_.size();
}
inline void PropertyPair_StringSet::clear_values() {
  values_.Clear();
}
inline const ::std::string& PropertyPair_StringSet::values(int index) const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.StringSet.values)
  return values_.Get(index);
}
inline ::std::string* PropertyPair_StringSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.StringSet.values)
  return values_.Mutable(index);
}
inline void PropertyPair_StringSet::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.PropertyPair.StringSet.values)
  values_.Mutable(index)->assign(value);
}
inline void PropertyPair_StringSet::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.PropertyPair.StringSet.values)
}
inline void PropertyPair_StringSet::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.PropertyPair.StringSet.values)
}
inline ::std::string* PropertyPair_StringSet::add_values() {
  // @@protoc_insertion_point(field_add_mutable:server.PropertyPair.StringSet.values)
  return values_.Add();
}
inline void PropertyPair_StringSet::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.PropertyPair.StringSet.values)
}
inline void PropertyPair_StringSet::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.PropertyPair.StringSet.values)
}
inline void PropertyPair_StringSet::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.PropertyPair.StringSet.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PropertyPair_StringSet::values() const {
  // @@protoc_insertion_point(field_list:server.PropertyPair.StringSet.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PropertyPair_StringSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:server.PropertyPair.StringSet.values)
  return &values_;
}

inline const PropertyPair_StringSet* PropertyPair_StringSet::internal_default_instance() {
  return &PropertyPair_StringSet_default_instance_.get();
}
// -------------------------------------------------------------------

// PropertyPair

// optional string key = 1;
inline void PropertyPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyPair::key() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.PropertyPair.key)
}
inline void PropertyPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.PropertyPair.key)
}
inline void PropertyPair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.PropertyPair.key)
}
inline ::std::string* PropertyPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyPair::release_key() {
  // @@protoc_insertion_point(field_release:server.PropertyPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:server.PropertyPair.key)
}

// optional .server.PropertyPair.StringSet stringSet = 2;
inline bool PropertyPair::has_stringset() const {
  return value_case() == kStringSet;
}
inline void PropertyPair::set_has_stringset() {
  _oneof_case_[0] = kStringSet;
}
inline void PropertyPair::clear_stringset() {
  if (has_stringset()) {
    delete value_.stringset_;
    clear_has_value();
  }
}
inline  const ::server::PropertyPair_StringSet& PropertyPair::stringset() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.stringSet)
  return has_stringset()
      ? *value_.stringset_
      : ::server::PropertyPair_StringSet::default_instance();
}
inline ::server::PropertyPair_StringSet* PropertyPair::mutable_stringset() {
  if (!has_stringset()) {
    clear_value();
    set_has_stringset();
    value_.stringset_ = new ::server::PropertyPair_StringSet;
  }
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.stringSet)
  return value_.stringset_;
}
inline ::server::PropertyPair_StringSet* PropertyPair::release_stringset() {
  // @@protoc_insertion_point(field_release:server.PropertyPair.stringSet)
  if (has_stringset()) {
    clear_has_value();
    ::server::PropertyPair_StringSet* temp = value_.stringset_;
    value_.stringset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PropertyPair::set_allocated_stringset(::server::PropertyPair_StringSet* stringset) {
  clear_value();
  if (stringset) {
    set_has_stringset();
    value_.stringset_ = stringset;
  }
  // @@protoc_insertion_point(field_set_allocated:server.PropertyPair.stringSet)
}

// optional bool boolValue = 3;
inline bool PropertyPair::has_boolvalue() const {
  return value_case() == kBoolValue;
}
inline void PropertyPair::set_has_boolvalue() {
  _oneof_case_[0] = kBoolValue;
}
inline void PropertyPair::clear_boolvalue() {
  if (has_boolvalue()) {
    value_.boolvalue_ = false;
    clear_has_value();
  }
}
inline bool PropertyPair::boolvalue() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.boolValue)
  if (has_boolvalue()) {
    return value_.boolvalue_;
  }
  return false;
}
inline void PropertyPair::set_boolvalue(bool value) {
  if (!has_boolvalue()) {
    clear_value();
    set_has_boolvalue();
  }
  value_.boolvalue_ = value;
  // @@protoc_insertion_point(field_set:server.PropertyPair.boolValue)
}

// optional int64 intValue = 4;
inline bool PropertyPair::has_intvalue() const {
  return value_case() == kIntValue;
}
inline void PropertyPair::set_has_intvalue() {
  _oneof_case_[0] = kIntValue;
}
inline void PropertyPair::clear_intvalue() {
  if (has_intvalue()) {
    value_.intvalue_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 PropertyPair::intvalue() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.intValue)
  if (has_intvalue()) {
    return value_.intvalue_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void PropertyPair::set_intvalue(::google::protobuf::int64 value) {
  if (!has_intvalue()) {
    clear_value();
    set_has_intvalue();
  }
  value_.intvalue_ = value;
  // @@protoc_insertion_point(field_set:server.PropertyPair.intValue)
}

inline bool PropertyPair::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void PropertyPair::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline PropertyPair::ValueCase PropertyPair::value_case() const {
  return PropertyPair::ValueCase(_oneof_case_[0]);
}
inline const PropertyPair* PropertyPair::internal_default_instance() {
  return &PropertyPair_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeFilter_TermFilter

// repeated string terms = 1;
inline int MatchmakeFilter_TermFilter::terms_size() const {
  return terms_.size();
}
inline void MatchmakeFilter_TermFilter::clear_terms() {
  terms_.Clear();
}
inline const ::std::string& MatchmakeFilter_TermFilter::terms(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.TermFilter.terms)
  return terms_.Get(index);
}
inline ::std::string* MatchmakeFilter_TermFilter::mutable_terms(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.TermFilter.terms)
  return terms_.Mutable(index);
}
inline void MatchmakeFilter_TermFilter::set_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.TermFilter.terms)
  terms_.Mutable(index)->assign(value);
}
inline void MatchmakeFilter_TermFilter::set_terms(int index, const char* value) {
  terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.MatchmakeFilter.TermFilter.terms)
}
inline void MatchmakeFilter_TermFilter::set_terms(int index, const char* value, size_t size) {
  terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeFilter.TermFilter.terms)
}
inline ::std::string* MatchmakeFilter_TermFilter::add_terms() {
  // @@protoc_insertion_point(field_add_mutable:server.MatchmakeFilter.TermFilter.terms)
  return terms_.Add();
}
inline void MatchmakeFilter_TermFilter::add_terms(const ::std::string& value) {
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.MatchmakeFilter.TermFilter.terms)
}
inline void MatchmakeFilter_TermFilter::add_terms(const char* value) {
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.MatchmakeFilter.TermFilter.terms)
}
inline void MatchmakeFilter_TermFilter::add_terms(const char* value, size_t size) {
  terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.MatchmakeFilter.TermFilter.terms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MatchmakeFilter_TermFilter::terms() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeFilter.TermFilter.terms)
  return terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MatchmakeFilter_TermFilter::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeFilter.TermFilter.terms)
  return &terms_;
}

// optional bool matchAllTerms = 2;
inline void MatchmakeFilter_TermFilter::clear_matchallterms() {
  matchallterms_ = false;
}
inline bool MatchmakeFilter_TermFilter::matchallterms() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.TermFilter.matchAllTerms)
  return matchallterms_;
}
inline void MatchmakeFilter_TermFilter::set_matchallterms(bool value) {
  
  matchallterms_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.TermFilter.matchAllTerms)
}

inline const MatchmakeFilter_TermFilter* MatchmakeFilter_TermFilter::internal_default_instance() {
  return &MatchmakeFilter_TermFilter_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeFilter_RangeFilter

// optional int64 lower_bound = 1;
inline void MatchmakeFilter_RangeFilter::clear_lower_bound() {
  lower_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MatchmakeFilter_RangeFilter::lower_bound() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.RangeFilter.lower_bound)
  return lower_bound_;
}
inline void MatchmakeFilter_RangeFilter::set_lower_bound(::google::protobuf::int64 value) {
  
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.RangeFilter.lower_bound)
}

// optional int64 upper_bound = 2;
inline void MatchmakeFilter_RangeFilter::clear_upper_bound() {
  upper_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MatchmakeFilter_RangeFilter::upper_bound() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.RangeFilter.upper_bound)
  return upper_bound_;
}
inline void MatchmakeFilter_RangeFilter::set_upper_bound(::google::protobuf::int64 value) {
  
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.RangeFilter.upper_bound)
}

inline const MatchmakeFilter_RangeFilter* MatchmakeFilter_RangeFilter::internal_default_instance() {
  return &MatchmakeFilter_RangeFilter_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeFilter

// optional string name = 1;
inline void MatchmakeFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchmakeFilter::name() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeFilter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.name)
}
inline void MatchmakeFilter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeFilter.name)
}
inline void MatchmakeFilter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeFilter.name)
}
inline ::std::string* MatchmakeFilter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchmakeFilter::release_name() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.name)
}

// optional .server.MatchmakeFilter.TermFilter term = 2;
inline bool MatchmakeFilter::has_term() const {
  return value_case() == kTerm;
}
inline void MatchmakeFilter::set_has_term() {
  _oneof_case_[0] = kTerm;
}
inline void MatchmakeFilter::clear_term() {
  if (has_term()) {
    delete value_.term_;
    clear_has_value();
  }
}
inline  const ::server::MatchmakeFilter_TermFilter& MatchmakeFilter::term() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.term)
  return has_term()
      ? *value_.term_
      : ::server::MatchmakeFilter_TermFilter::default_instance();
}
inline ::server::MatchmakeFilter_TermFilter* MatchmakeFilter::mutable_term() {
  if (!has_term()) {
    clear_value();
    set_has_term();
    value_.term_ = new ::server::MatchmakeFilter_TermFilter;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.term)
  return value_.term_;
}
inline ::server::MatchmakeFilter_TermFilter* MatchmakeFilter::release_term() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.term)
  if (has_term()) {
    clear_has_value();
    ::server::MatchmakeFilter_TermFilter* temp = value_.term_;
    value_.term_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MatchmakeFilter::set_allocated_term(::server::MatchmakeFilter_TermFilter* term) {
  clear_value();
  if (term) {
    set_has_term();
    value_.term_ = term;
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.term)
}

// optional .server.MatchmakeFilter.RangeFilter range = 3;
inline bool MatchmakeFilter::has_range() const {
  return value_case() == kRange;
}
inline void MatchmakeFilter::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void MatchmakeFilter::clear_range() {
  if (has_range()) {
    delete value_.range_;
    clear_has_value();
  }
}
inline  const ::server::MatchmakeFilter_RangeFilter& MatchmakeFilter::range() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.range)
  return has_range()
      ? *value_.range_
      : ::server::MatchmakeFilter_RangeFilter::default_instance();
}
inline ::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::mutable_range() {
  if (!has_range()) {
    clear_value();
    set_has_range();
    value_.range_ = new ::server::MatchmakeFilter_RangeFilter;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.range)
  return value_.range_;
}
inline ::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::release_range() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.range)
  if (has_range()) {
    clear_has_value();
    ::server::MatchmakeFilter_RangeFilter* temp = value_.range_;
    value_.range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MatchmakeFilter::set_allocated_range(::server::MatchmakeFilter_RangeFilter* range) {
  clear_value();
  if (range) {
    set_has_range();
    value_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.range)
}

// optional bool check = 4;
inline bool MatchmakeFilter::has_check() const {
  return value_case() == kCheck;
}
inline void MatchmakeFilter::set_has_check() {
  _oneof_case_[0] = kCheck;
}
inline void MatchmakeFilter::clear_check() {
  if (has_check()) {
    value_.check_ = false;
    clear_has_value();
  }
}
inline bool MatchmakeFilter::check() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.check)
  if (has_check()) {
    return value_.check_;
  }
  return false;
}
inline void MatchmakeFilter::set_check(bool value) {
  if (!has_check()) {
    clear_value();
    set_has_check();
  }
  value_.check_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.check)
}

inline bool MatchmakeFilter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void MatchmakeFilter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MatchmakeFilter::ValueCase MatchmakeFilter::value_case() const {
  return MatchmakeFilter::ValueCase(_oneof_case_[0]);
}
inline const MatchmakeFilter* MatchmakeFilter::internal_default_instance() {
  return &MatchmakeFilter_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchmakeAdd

// optional int64 required_count = 1;
inline void TMatchmakeAdd::clear_required_count() {
  required_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TMatchmakeAdd::required_count() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.required_count)
  return required_count_;
}
inline void TMatchmakeAdd::set_required_count(::google::protobuf::int64 value) {
  
  required_count_ = value;
  // @@protoc_insertion_point(field_set:server.TMatchmakeAdd.required_count)
}

// repeated .server.MatchmakeFilter filters = 2;
inline int TMatchmakeAdd::filters_size() const {
  return filters_.size();
}
inline void TMatchmakeAdd::clear_filters() {
  filters_.Clear();
}
inline const ::server::MatchmakeFilter& TMatchmakeAdd::filters(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.filters)
  return filters_.Get(index);
}
inline ::server::MatchmakeFilter* TMatchmakeAdd::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeAdd.filters)
  return filters_.Mutable(index);
}
inline ::server::MatchmakeFilter* TMatchmakeAdd::add_filters() {
  // @@protoc_insertion_point(field_add:server.TMatchmakeAdd.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >*
TMatchmakeAdd::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchmakeAdd.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >&
TMatchmakeAdd::filters() const {
  // @@protoc_insertion_point(field_list:server.TMatchmakeAdd.filters)
  return filters_;
}

// repeated .server.PropertyPair properties = 3;
inline int TMatchmakeAdd::properties_size() const {
  return properties_.size();
}
inline void TMatchmakeAdd::clear_properties() {
  properties_.Clear();
}
inline const ::server::PropertyPair& TMatchmakeAdd::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.properties)
  return properties_.Get(index);
}
inline ::server::PropertyPair* TMatchmakeAdd::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeAdd.properties)
  return properties_.Mutable(index);
}
inline ::server::PropertyPair* TMatchmakeAdd::add_properties() {
  // @@protoc_insertion_point(field_add:server.TMatchmakeAdd.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >*
TMatchmakeAdd::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchmakeAdd.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >&
TMatchmakeAdd::properties() const {
  // @@protoc_insertion_point(field_list:server.TMatchmakeAdd.properties)
  return properties_;
}

inline const TMatchmakeAdd* TMatchmakeAdd::internal_default_instance() {
  return &TMatchmakeAdd_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchmakeTicket

// optional string ticket = 1;
inline void TMatchmakeTicket::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TMatchmakeTicket::ticket() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeTicket.ticket)
  return ticket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TMatchmakeTicket::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchmakeTicket.ticket)
}
inline void TMatchmakeTicket::set_ticket(const char* value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchmakeTicket.ticket)
}
inline void TMatchmakeTicket::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchmakeTicket.ticket)
}
inline ::std::string* TMatchmakeTicket::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeTicket.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TMatchmakeTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:server.TMatchmakeTicket.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TMatchmakeTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchmakeTicket.ticket)
}

inline const TMatchmakeTicket* TMatchmakeTicket::internal_default_instance() {
  return &TMatchmakeTicket_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchmakeRemove

// optional string ticket = 1;
inline void TMatchmakeRemove::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TMatchmakeRemove::ticket() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeRemove.ticket)
  return ticket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TMatchmakeRemove::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchmakeRemove.ticket)
}
inline void TMatchmakeRemove::set_ticket(const char* value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchmakeRemove.ticket)
}
inline void TMatchmakeRemove::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchmakeRemove.ticket)
}
inline ::std::string* TMatchmakeRemove::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeRemove.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TMatchmakeRemove::release_ticket() {
  // @@protoc_insertion_point(field_release:server.TMatchmakeRemove.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TMatchmakeRemove::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchmakeRemove.ticket)
}

inline const TMatchmakeRemove* TMatchmakeRemove::internal_default_instance() {
  return &TMatchmakeRemove_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeMatched_UserProperty

// optional string user_id = 1;
inline void MatchmakeMatched_UserProperty::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchmakeMatched_UserProperty::user_id() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeMatched_UserProperty::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.UserProperty.user_id)
}
inline void MatchmakeMatched_UserProperty::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.UserProperty.user_id)
}
inline void MatchmakeMatched_UserProperty::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.UserProperty.user_id)
}
inline ::std::string* MatchmakeMatched_UserProperty::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchmakeMatched_UserProperty::release_user_id() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.UserProperty.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeMatched_UserProperty::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.UserProperty.user_id)
}

// repeated .server.PropertyPair properties = 2;
inline int MatchmakeMatched_UserProperty::properties_size() const {
  return properties_.size();
}
inline void MatchmakeMatched_UserProperty::clear_properties() {
  properties_.Clear();
}
inline const ::server::PropertyPair& MatchmakeMatched_UserProperty::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.properties)
  return properties_.Get(index);
}
inline ::server::PropertyPair* MatchmakeMatched_UserProperty::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.properties)
  return properties_.Mutable(index);
}
inline ::server::PropertyPair* MatchmakeMatched_UserProperty::add_properties() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.UserProperty.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >*
MatchmakeMatched_UserProperty::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.UserProperty.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >&
MatchmakeMatched_UserProperty::properties() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.UserProperty.properties)
  return properties_;
}

// repeated .server.MatchmakeFilter filters = 3;
inline int MatchmakeMatched_UserProperty::filters_size() const {
  return filters_.size();
}
inline void MatchmakeMatched_UserProperty::clear_filters() {
  filters_.Clear();
}
inline const ::server::MatchmakeFilter& MatchmakeMatched_UserProperty::filters(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.filters)
  return filters_.Get(index);
}
inline ::server::MatchmakeFilter* MatchmakeMatched_UserProperty::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.filters)
  return filters_.Mutable(index);
}
inline ::server::MatchmakeFilter* MatchmakeMatched_UserProperty::add_filters() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.UserProperty.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >*
MatchmakeMatched_UserProperty::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.UserProperty.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >&
MatchmakeMatched_UserProperty::filters() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.UserProperty.filters)
  return filters_;
}

inline const MatchmakeMatched_UserProperty* MatchmakeMatched_UserProperty::internal_default_instance() {
  return &MatchmakeMatched_UserProperty_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeMatched

// optional string ticket = 1;
inline void MatchmakeMatched::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchmakeMatched::ticket() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.ticket)
  return ticket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeMatched::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.ticket)
}
inline void MatchmakeMatched::set_ticket(const char* value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.ticket)
}
inline void MatchmakeMatched::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.ticket)
}
inline ::std::string* MatchmakeMatched::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchmakeMatched::release_ticket() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeMatched::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.ticket)
}

// optional string token = 2;
inline void MatchmakeMatched::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchmakeMatched::token() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeMatched::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.token)
}
inline void MatchmakeMatched::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.token)
}
inline void MatchmakeMatched::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.token)
}
inline ::std::string* MatchmakeMatched::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchmakeMatched::release_token() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchmakeMatched::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.token)
}

// repeated .server.UserPresence presences = 3;
inline int MatchmakeMatched::presences_size() const {
  return presences_.size();
}
inline void MatchmakeMatched::clear_presences() {
  presences_.Clear();
}
inline const ::server::UserPresence& MatchmakeMatched::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.presences)
  return presences_.Get(index);
}
inline ::server::UserPresence* MatchmakeMatched::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.presences)
  return presences_.Mutable(index);
}
inline ::server::UserPresence* MatchmakeMatched::add_presences() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.presences)
  return presences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchmakeMatched::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.presences)
  return &presences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchmakeMatched::presences() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.presences)
  return presences_;
}

// optional .server.UserPresence self = 4;
inline bool MatchmakeMatched::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
inline void MatchmakeMatched::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
inline const ::server::UserPresence& MatchmakeMatched::self() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
inline ::server::UserPresence* MatchmakeMatched::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.self)
  return self_;
}
inline ::server::UserPresence* MatchmakeMatched::release_self() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
inline void MatchmakeMatched::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.self)
}

// repeated .server.MatchmakeMatched.UserProperty properties = 5;
inline int MatchmakeMatched::properties_size() const {
  return properties_.size();
}
inline void MatchmakeMatched::clear_properties() {
  properties_.Clear();
}
inline const ::server::MatchmakeMatched_UserProperty& MatchmakeMatched::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.properties)
  return properties_.Get(index);
}
inline ::server::MatchmakeMatched_UserProperty* MatchmakeMatched::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.properties)
  return properties_.Mutable(index);
}
inline ::server::MatchmakeMatched_UserProperty* MatchmakeMatched::add_properties() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >*
MatchmakeMatched::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >&
MatchmakeMatched::properties() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.properties)
  return properties_;
}

inline const MatchmakeMatched* MatchmakeMatched::internal_default_instance() {
  return &MatchmakeMatched_default_instance_.get();
}
// -------------------------------------------------------------------

// Match

// optional string match_id = 1;
inline void Match::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Match::match_id() const {
  // @@protoc_insertion_point(field_get:server.Match.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Match::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Match.match_id)
}
inline void Match::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Match.match_id)
}
inline void Match::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Match.match_id)
}
inline ::std::string* Match::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Match.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Match::release_match_id() {
  // @@protoc_insertion_point(field_release:server.Match.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Match::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.Match.match_id)
}

// repeated .server.UserPresence presences = 2;
inline int Match::presences_size() const {
  return presences_.size();
}
inline void Match::clear_presences() {
  presences_.Clear();
}
inline const ::server::UserPresence& Match::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.Match.presences)
  return presences_.Get(index);
}
inline ::server::UserPresence* Match::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.Match.presences)
  return presences_.Mutable(index);
}
inline ::server::UserPresence* Match::add_presences() {
  // @@protoc_insertion_point(field_add:server.Match.presences)
  return presences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
Match::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.Match.presences)
  return &presences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
Match::presences() const {
  // @@protoc_insertion_point(field_list:server.Match.presences)
  return presences_;
}

// optional .server.UserPresence self = 3;
inline bool Match::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
inline void Match::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
inline const ::server::UserPresence& Match::self() const {
  // @@protoc_insertion_point(field_get:server.Match.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
inline ::server::UserPresence* Match::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Match.self)
  return self_;
}
inline ::server::UserPresence* Match::release_self() {
  // @@protoc_insertion_point(field_release:server.Match.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
inline void Match::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Match.self)
}

inline const Match* Match::internal_default_instance() {
  return &Match_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchPresence

// optional string match_id = 1;
inline void MatchPresence::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchPresence::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchPresence::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchPresence.match_id)
}
inline void MatchPresence::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchPresence.match_id)
}
inline void MatchPresence::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchPresence.match_id)
}
inline ::std::string* MatchPresence::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchPresence::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchPresence.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchPresence::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchPresence.match_id)
}

// repeated .server.UserPresence joins = 2;
inline int MatchPresence::joins_size() const {
  return joins_.size();
}
inline void MatchPresence::clear_joins() {
  joins_.Clear();
}
inline const ::server::UserPresence& MatchPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.joins)
  return joins_.Get(index);
}
inline ::server::UserPresence* MatchPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.joins)
  return joins_.Mutable(index);
}
inline ::server::UserPresence* MatchPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.joins)
  return joins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.joins)
  return &joins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
inline int MatchPresence::leaves_size() const {
  return leaves_.size();
}
inline void MatchPresence::clear_leaves() {
  leaves_.Clear();
}
inline const ::server::UserPresence& MatchPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.leaves)
  return leaves_.Get(index);
}
inline ::server::UserPresence* MatchPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.leaves)
  return leaves_.Mutable(index);
}
inline ::server::UserPresence* MatchPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.leaves)
  return leaves_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.leaves)
  return &leaves_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.leaves)
  return leaves_;
}

inline const MatchPresence* MatchPresence::internal_default_instance() {
  return &MatchPresence_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchCreate

inline const TMatchCreate* TMatchCreate::internal_default_instance() {
  return &TMatchCreate_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatch

// optional .server.Match match = 1;
inline bool TMatch::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
inline void TMatch::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
inline const ::server::Match& TMatch::match() const {
  // @@protoc_insertion_point(field_get:server.TMatch.match)
  return match_ != NULL ? *match_
                         : *::server::Match::internal_default_instance();
}
inline ::server::Match* TMatch::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::server::Match;
  }
  // @@protoc_insertion_point(field_mutable:server.TMatch.match)
  return match_;
}
inline ::server::Match* TMatch::release_match() {
  // @@protoc_insertion_point(field_release:server.TMatch.match)
  
  ::server::Match* temp = match_;
  match_ = NULL;
  return temp;
}
inline void TMatch::set_allocated_match(::server::Match* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatch.match)
}

inline const TMatch* TMatch::internal_default_instance() {
  return &TMatch_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchesJoin_MatchJoin

// optional string match_id = 1;
inline bool TMatchesJoin_MatchJoin::has_match_id() const {
  return id_case() == kMatchId;
}
inline void TMatchesJoin_MatchJoin::set_has_match_id() {
  _oneof_case_[0] = kMatchId;
}
inline void TMatchesJoin_MatchJoin::clear_match_id() {
  if (has_match_id()) {
    id_.match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TMatchesJoin_MatchJoin::match_id() const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.MatchJoin.match_id)
  if (has_match_id()) {
    return id_.match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TMatchesJoin_MatchJoin::set_match_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.match_id)
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.match_id)
}
inline void TMatchesJoin_MatchJoin::set_match_id(const char* value) {
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchesJoin.MatchJoin.match_id)
}
inline void TMatchesJoin_MatchJoin::set_match_id(const char* value, size_t size) {
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesJoin.MatchJoin.match_id)
}
inline ::std::string* TMatchesJoin_MatchJoin::mutable_match_id() {
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.MatchJoin.match_id)
  return id_.match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TMatchesJoin_MatchJoin::release_match_id() {
  // @@protoc_insertion_point(field_release:server.TMatchesJoin.MatchJoin.match_id)
  if (has_match_id()) {
    clear_has_id();
    return id_.match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TMatchesJoin_MatchJoin::set_allocated_match_id(::std::string* match_id) {
  if (!has_match_id()) {
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (match_id != NULL) {
    set_has_match_id();
    id_.match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        match_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatchesJoin.MatchJoin.match_id)
}

// optional string token = 2;
inline bool TMatchesJoin_MatchJoin::has_token() const {
  return id_case() == kToken;
}
inline void TMatchesJoin_MatchJoin::set_has_token() {
  _oneof_case_[0] = kToken;
}
inline void TMatchesJoin_MatchJoin::clear_token() {
  if (has_token()) {
    id_.token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& TMatchesJoin_MatchJoin::token() const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.MatchJoin.token)
  if (has_token()) {
    return id_.token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TMatchesJoin_MatchJoin::set_token(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.token)
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.token)
}
inline void TMatchesJoin_MatchJoin::set_token(const char* value) {
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchesJoin.MatchJoin.token)
}
inline void TMatchesJoin_MatchJoin::set_token(const char* value, size_t size) {
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesJoin.MatchJoin.token)
}
inline ::std::string* TMatchesJoin_MatchJoin::mutable_token() {
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.MatchJoin.token)
  return id_.token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TMatchesJoin_MatchJoin::release_token() {
  // @@protoc_insertion_point(field_release:server.TMatchesJoin.MatchJoin.token)
  if (has_token()) {
    clear_has_id();
    return id_.token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TMatchesJoin_MatchJoin::set_allocated_token(::std::string* token) {
  if (!has_token()) {
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (token != NULL) {
    set_has_token();
    id_.token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        token);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatchesJoin.MatchJoin.token)
}

inline bool TMatchesJoin_MatchJoin::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TMatchesJoin_MatchJoin::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TMatchesJoin_MatchJoin::IdCase TMatchesJoin_MatchJoin::id_case() const {
  return TMatchesJoin_MatchJoin::IdCase(_oneof_case_[0]);
}
inline const TMatchesJoin_MatchJoin* TMatchesJoin_MatchJoin::internal_default_instance() {
  return &TMatchesJoin_MatchJoin_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchesJoin

// repeated .server.TMatchesJoin.MatchJoin matches = 1;
inline int TMatchesJoin::matches_size() const {
  return matches_.size();
}
inline void TMatchesJoin::clear_matches() {
  matches_.Clear();
}
inline const ::server::TMatchesJoin_MatchJoin& TMatchesJoin::matches(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.matches)
  return matches_.Get(index);
}
inline ::server::TMatchesJoin_MatchJoin* TMatchesJoin::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.matches)
  return matches_.Mutable(index);
}
inline ::server::TMatchesJoin_MatchJoin* TMatchesJoin::add_matches() {
  // @@protoc_insertion_point(field_add:server.TMatchesJoin.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >*
TMatchesJoin::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchesJoin.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >&
TMatchesJoin::matches() const {
  // @@protoc_insertion_point(field_list:server.TMatchesJoin.matches)
  return matches_;
}

inline const TMatchesJoin* TMatchesJoin::internal_default_instance() {
  return &TMatchesJoin_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatches

// repeated .server.Match matches = 1;
inline int TMatches::matches_size() const {
  return matches_.size();
}
inline void TMatches::clear_matches() {
  matches_.Clear();
}
inline const ::server::Match& TMatches::matches(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatches.matches)
  return matches_.Get(index);
}
inline ::server::Match* TMatches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatches.matches)
  return matches_.Mutable(index);
}
inline ::server::Match* TMatches::add_matches() {
  // @@protoc_insertion_point(field_add:server.TMatches.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::Match >*
TMatches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatches.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::Match >&
TMatches::matches() const {
  // @@protoc_insertion_point(field_list:server.TMatches.matches)
  return matches_;
}

inline const TMatches* TMatches::internal_default_instance() {
  return &TMatches_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchDataSend

// optional string match_id = 1;
inline void MatchDataSend::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchDataSend::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchDataSend::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchDataSend.match_id)
}
inline void MatchDataSend::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchDataSend.match_id)
}
inline void MatchDataSend::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchDataSend.match_id)
}
inline ::std::string* MatchDataSend::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchDataSend::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchDataSend.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchDataSend::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchDataSend.match_id)
}

// optional int64 op_code = 2;
inline void MatchDataSend::clear_op_code() {
  op_code_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MatchDataSend::op_code() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.op_code)
  return op_code_;
}
inline void MatchDataSend::set_op_code(::google::protobuf::int64 value) {
  
  op_code_ = value;
  // @@protoc_insertion_point(field_set:server.MatchDataSend.op_code)
}

// optional bytes data = 3;
inline void MatchDataSend::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchDataSend::data() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchDataSend::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchDataSend.data)
}
inline void MatchDataSend::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchDataSend.data)
}
inline void MatchDataSend::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchDataSend.data)
}
inline ::std::string* MatchDataSend::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchDataSend::release_data() {
  // @@protoc_insertion_point(field_release:server.MatchDataSend.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchDataSend::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.MatchDataSend.data)
}

// repeated .server.UserPresence presences = 4;
inline int MatchDataSend::presences_size() const {
  return presences_.size();
}
inline void MatchDataSend::clear_presences() {
  presences_.Clear();
}
inline const ::server::UserPresence& MatchDataSend::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.presences)
  return presences_.Get(index);
}
inline ::server::UserPresence* MatchDataSend::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.presences)
  return presences_.Mutable(index);
}
inline ::server::UserPresence* MatchDataSend::add_presences() {
  // @@protoc_insertion_point(field_add:server.MatchDataSend.presences)
  return presences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchDataSend::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchDataSend.presences)
  return &presences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchDataSend::presences() const {
  // @@protoc_insertion_point(field_list:server.MatchDataSend.presences)
  return presences_;
}

inline const MatchDataSend* MatchDataSend::internal_default_instance() {
  return &MatchDataSend_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchData

// optional string match_id = 1;
inline void MatchData::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchData::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchData.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchData::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchData.match_id)
}
inline void MatchData::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchData.match_id)
}
inline void MatchData::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.match_id)
}
inline ::std::string* MatchData::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchData.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchData::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchData.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchData::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.match_id)
}

// optional .server.UserPresence presence = 2;
inline bool MatchData::has_presence() const {
  return this != internal_default_instance() && presence_ != NULL;
}
inline void MatchData::clear_presence() {
  if (GetArenaNoVirtual() == NULL && presence_ != NULL) delete presence_;
  presence_ = NULL;
}
inline const ::server::UserPresence& MatchData::presence() const {
  // @@protoc_insertion_point(field_get:server.MatchData.presence)
  return presence_ != NULL ? *presence_
                         : *::server::UserPresence::internal_default_instance();
}
inline ::server::UserPresence* MatchData::mutable_presence() {
  
  if (presence_ == NULL) {
    presence_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchData.presence)
  return presence_;
}
inline ::server::UserPresence* MatchData::release_presence() {
  // @@protoc_insertion_point(field_release:server.MatchData.presence)
  
  ::server::UserPresence* temp = presence_;
  presence_ = NULL;
  return temp;
}
inline void MatchData::set_allocated_presence(::server::UserPresence* presence) {
  delete presence_;
  presence_ = presence;
  if (presence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.presence)
}

// optional int64 op_code = 3;
inline void MatchData::clear_op_code() {
  op_code_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MatchData::op_code() const {
  // @@protoc_insertion_point(field_get:server.MatchData.op_code)
  return op_code_;
}
inline void MatchData::set_op_code(::google::protobuf::int64 value) {
  
  op_code_ = value;
  // @@protoc_insertion_point(field_set:server.MatchData.op_code)
}

// optional bytes data = 4;
inline void MatchData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchData::data() const {
  // @@protoc_insertion_point(field_get:server.MatchData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchData.data)
}
inline void MatchData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchData.data)
}
inline void MatchData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.data)
}
inline ::std::string* MatchData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchData::release_data() {
  // @@protoc_insertion_point(field_release:server.MatchData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.data)
}

inline const MatchData* MatchData::internal_default_instance() {
  return &MatchData_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchesLeave

// repeated string match_ids = 1;
inline int TMatchesLeave::match_ids_size() const {
  return match_ids_.size();
}
inline void TMatchesLeave::clear_match_ids() {
  match_ids_.Clear();
}
inline const ::std::string& TMatchesLeave::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchesLeave.match_ids)
  return match_ids_.Get(index);
}
inline ::std::string* TMatchesLeave::mutable_match_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchesLeave.match_ids)
  return match_ids_.Mutable(index);
}
inline void TMatchesLeave::set_match_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesLeave.match_ids)
  match_ids_.Mutable(index)->assign(value);
}
inline void TMatchesLeave::set_match_ids(int index, const char* value) {
  match_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TMatchesLeave.match_ids)
}
inline void TMatchesLeave::set_match_ids(int index, const char* value, size_t size) {
  match_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesLeave.match_ids)
}
inline ::std::string* TMatchesLeave::add_match_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TMatchesLeave.match_ids)
  return match_ids_.Add();
}
inline void TMatchesLeave::add_match_ids(const ::std::string& value) {
  match_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TMatchesLeave.match_ids)
}
inline void TMatchesLeave::add_match_ids(const char* value) {
  match_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TMatchesLeave.match_ids)
}
inline void TMatchesLeave::add_match_ids(const char* value, size_t size) {
  match_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TMatchesLeave.match_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TMatchesLeave::match_ids() const {
  // @@protoc_insertion_point(field_list:server.TMatchesLeave.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TMatchesLeave::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchesLeave.match_ids)
  return &match_ids_;
}

inline const TMatchesLeave* TMatchesLeave::internal_default_instance() {
  return &TMatchesLeave_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageList

// optional string user_id = 1;
inline void TStorageList::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageList::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.user_id)
}
inline void TStorageList::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.user_id)
}
inline void TStorageList::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.user_id)
}
inline ::std::string* TStorageList::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageList::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageList.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.user_id)
}

// optional string bucket = 2;
inline void TStorageList::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageList::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.bucket)
}
inline void TStorageList::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.bucket)
}
inline void TStorageList::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.bucket)
}
inline ::std::string* TStorageList::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageList::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageList.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.bucket)
}

// optional string collection = 3;
inline void TStorageList::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageList::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.collection)
}
inline void TStorageList::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.collection)
}
inline void TStorageList::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.collection)
}
inline ::std::string* TStorageList::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageList::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageList.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.collection)
}

// optional int64 limit = 4;
inline void TStorageList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TStorageList::limit() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.limit)
  return limit_;
}
inline void TStorageList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageList.limit)
}

// optional string cursor = 5;
inline void TStorageList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.cursor)
}
inline void TStorageList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.cursor)
}
inline void TStorageList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.cursor)
}
inline ::std::string* TStorageList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TStorageList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.cursor)
}

inline const TStorageList* TStorageList::internal_default_instance() {
  return &TStorageList_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageFetch_StorageKey

// optional string bucket = 1;
inline void TStorageFetch_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageFetch_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.bucket)
}
inline void TStorageFetch_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.bucket)
}
inline void TStorageFetch_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.bucket)
}
inline ::std::string* TStorageFetch_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageFetch_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.bucket)
}

// optional string collection = 2;
inline void TStorageFetch_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageFetch_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.collection)
}
inline void TStorageFetch_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.collection)
}
inline void TStorageFetch_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.collection)
}
inline ::std::string* TStorageFetch_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageFetch_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.collection)
}

// optional string record = 3;
inline void TStorageFetch_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageFetch_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.record)
}
inline void TStorageFetch_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.record)
}
inline void TStorageFetch_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.record)
}
inline ::std::string* TStorageFetch_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageFetch_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.record)
}

// optional string user_id = 4;
inline void TStorageFetch_StorageKey::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageFetch_StorageKey::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.user_id)
}
inline void TStorageFetch_StorageKey::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.user_id)
}
inline void TStorageFetch_StorageKey::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.user_id)
}
inline ::std::string* TStorageFetch_StorageKey::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageFetch_StorageKey::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageFetch_StorageKey::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.user_id)
}

inline const TStorageFetch_StorageKey* TStorageFetch_StorageKey::internal_default_instance() {
  return &TStorageFetch_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageFetch

// repeated .server.TStorageFetch.StorageKey keys = 1;
inline int TStorageFetch::keys_size() const {
  return keys_.size();
}
inline void TStorageFetch::clear_keys() {
  keys_.Clear();
}
inline const ::server::TStorageFetch_StorageKey& TStorageFetch::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.keys)
  return keys_.Get(index);
}
inline ::server::TStorageFetch_StorageKey* TStorageFetch::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.keys)
  return keys_.Mutable(index);
}
inline ::server::TStorageFetch_StorageKey* TStorageFetch::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageFetch.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >*
TStorageFetch::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageFetch.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >&
TStorageFetch::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageFetch.keys)
  return keys_;
}

inline const TStorageFetch* TStorageFetch::internal_default_instance() {
  return &TStorageFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageData_StorageData

// optional string bucket = 1;
inline void TStorageData_StorageData::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageData_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.bucket)
}
inline void TStorageData_StorageData::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.bucket)
}
inline void TStorageData_StorageData::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.bucket)
}
inline ::std::string* TStorageData_StorageData::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageData_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.bucket)
}

// optional string collection = 2;
inline void TStorageData_StorageData::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageData_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.collection)
}
inline void TStorageData_StorageData::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.collection)
}
inline void TStorageData_StorageData::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.collection)
}
inline ::std::string* TStorageData_StorageData::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageData_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.collection)
}

// optional string record = 3;
inline void TStorageData_StorageData::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageData_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.record)
}
inline void TStorageData_StorageData::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.record)
}
inline void TStorageData_StorageData::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.record)
}
inline ::std::string* TStorageData_StorageData::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageData_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.record)
}

// optional string user_id = 4;
inline void TStorageData_StorageData::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageData_StorageData::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.user_id)
}
inline void TStorageData_StorageData::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.user_id)
}
inline void TStorageData_StorageData::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.user_id)
}
inline ::std::string* TStorageData_StorageData::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageData_StorageData::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.user_id)
}

// optional string value = 5;
inline void TStorageData_StorageData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageData_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.value)
}
inline void TStorageData_StorageData::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.value)
}
inline void TStorageData_StorageData::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.value)
}
inline ::std::string* TStorageData_StorageData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageData_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.value)
}

// optional string version = 6;
inline void TStorageData_StorageData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageData_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.version)
}
inline void TStorageData_StorageData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.version)
}
inline void TStorageData_StorageData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.version)
}
inline ::std::string* TStorageData_StorageData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageData_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData_StorageData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.version)
}

// optional int32 permission_read = 7;
inline void TStorageData_StorageData::clear_permission_read() {
  permission_read_ = 0;
}
inline ::google::protobuf::int32 TStorageData_StorageData::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_read)
  return permission_read_;
}
inline void TStorageData_StorageData::set_permission_read(::google::protobuf::int32 value) {
  
  permission_read_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_read)
}

// optional int32 permission_write = 8;
inline void TStorageData_StorageData::clear_permission_write() {
  permission_write_ = 0;
}
inline ::google::protobuf::int32 TStorageData_StorageData::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_write)
  return permission_write_;
}
inline void TStorageData_StorageData::set_permission_write(::google::protobuf::int32 value) {
  
  permission_write_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_write)
}

// optional int64 created_at = 9;
inline void TStorageData_StorageData::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TStorageData_StorageData::created_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.created_at)
  return created_at_;
}
inline void TStorageData_StorageData::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.created_at)
}

// optional int64 updated_at = 10;
inline void TStorageData_StorageData::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TStorageData_StorageData::updated_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.updated_at)
  return updated_at_;
}
inline void TStorageData_StorageData::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.updated_at)
}

// optional int64 expires_at = 11;
inline void TStorageData_StorageData::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TStorageData_StorageData::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.expires_at)
  return expires_at_;
}
inline void TStorageData_StorageData::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.expires_at)
}

inline const TStorageData_StorageData* TStorageData_StorageData::internal_default_instance() {
  return &TStorageData_StorageData_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageData

// repeated .server.TStorageData.StorageData data = 1;
inline int TStorageData::data_size() const {
  return data_.size();
}
inline void TStorageData::clear_data() {
  data_.Clear();
}
inline const ::server::TStorageData_StorageData& TStorageData::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageData.data)
  return data_.Get(index);
}
inline ::server::TStorageData_StorageData* TStorageData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.data)
  return data_.Mutable(index);
}
inline ::server::TStorageData_StorageData* TStorageData::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageData.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >*
TStorageData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageData.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >&
TStorageData::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageData.data)
  return data_;
}

// optional string cursor = 2;
inline void TStorageData::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageData::cursor() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.cursor)
}
inline void TStorageData::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.cursor)
}
inline void TStorageData::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.cursor)
}
inline ::std::string* TStorageData::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageData::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TStorageData.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageData::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.cursor)
}

inline const TStorageData* TStorageData::internal_default_instance() {
  return &TStorageData_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageWrite_StorageData

// optional string bucket = 1;
inline void TStorageWrite_StorageData::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageWrite_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.bucket)
}
inline void TStorageWrite_StorageData::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.bucket)
}
inline void TStorageWrite_StorageData::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.bucket)
}
inline ::std::string* TStorageWrite_StorageData::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageWrite_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.bucket)
}

// optional string collection = 2;
inline void TStorageWrite_StorageData::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageWrite_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.collection)
}
inline void TStorageWrite_StorageData::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.collection)
}
inline void TStorageWrite_StorageData::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.collection)
}
inline ::std::string* TStorageWrite_StorageData::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageWrite_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.collection)
}

// optional string record = 3;
inline void TStorageWrite_StorageData::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageWrite_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.record)
}
inline void TStorageWrite_StorageData::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.record)
}
inline void TStorageWrite_StorageData::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.record)
}
inline ::std::string* TStorageWrite_StorageData::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageWrite_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.record)
}

// optional string value = 4;
inline void TStorageWrite_StorageData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageWrite_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.value)
}
inline void TStorageWrite_StorageData::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.value)
}
inline void TStorageWrite_StorageData::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.value)
}
inline ::std::string* TStorageWrite_StorageData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageWrite_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.value)
}

// optional string version = 5;
inline void TStorageWrite_StorageData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageWrite_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.version)
}
inline void TStorageWrite_StorageData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.version)
}
inline void TStorageWrite_StorageData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.version)
}
inline ::std::string* TStorageWrite_StorageData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageWrite_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageWrite_StorageData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.version)
}

// optional int32 permission_read = 6;
inline void TStorageWrite_StorageData::clear_permission_read() {
  permission_read_ = 0;
}
inline ::google::protobuf::int32 TStorageWrite_StorageData::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.permission_read)
  return permission_read_;
}
inline void TStorageWrite_StorageData::set_permission_read(::google::protobuf::int32 value) {
  
  permission_read_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.permission_read)
}

// optional int32 permission_write = 7;
inline void TStorageWrite_StorageData::clear_permission_write() {
  permission_write_ = 0;
}
inline ::google::protobuf::int32 TStorageWrite_StorageData::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.permission_write)
  return permission_write_;
}
inline void TStorageWrite_StorageData::set_permission_write(::google::protobuf::int32 value) {
  
  permission_write_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.permission_write)
}

inline const TStorageWrite_StorageData* TStorageWrite_StorageData::internal_default_instance() {
  return &TStorageWrite_StorageData_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageWrite

// repeated .server.TStorageWrite.StorageData data = 3;
inline int TStorageWrite::data_size() const {
  return data_.size();
}
inline void TStorageWrite::clear_data() {
  data_.Clear();
}
inline const ::server::TStorageWrite_StorageData& TStorageWrite::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.data)
  return data_.Get(index);
}
inline ::server::TStorageWrite_StorageData* TStorageWrite::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.data)
  return data_.Mutable(index);
}
inline ::server::TStorageWrite_StorageData* TStorageWrite::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageWrite.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >*
TStorageWrite::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageWrite.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >&
TStorageWrite::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageWrite.data)
  return data_;
}

inline const TStorageWrite* TStorageWrite::internal_default_instance() {
  return &TStorageWrite_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate_UpdateOp

// optional int32 op = 1;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_op() {
  op_ = 0;
}
inline ::google::protobuf::int32 TStorageUpdate_StorageUpdate_UpdateOp::op() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.op)
  return op_;
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_op(::google::protobuf::int32 value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.op)
}

// optional string path = 2;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageUpdate_StorageUpdate_UpdateOp::path() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
inline ::std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_path() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}

// optional string value = 3;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageUpdate_StorageUpdate_UpdateOp::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
inline ::std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}

// optional string from = 4;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageUpdate_StorageUpdate_UpdateOp::from() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
inline ::std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_from() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}

// optional bool conditional = 5;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_conditional() {
  conditional_ = false;
}
inline bool TStorageUpdate_StorageUpdate_UpdateOp::conditional() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.conditional)
  return conditional_;
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_conditional(bool value) {
  
  conditional_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.conditional)
}

// optional int64 assert = 6;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_assert() {
  assert_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TStorageUpdate_StorageUpdate_UpdateOp::assert() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.assert)
  return assert_;
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_assert(::google::protobuf::int64 value) {
  
  assert_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.assert)
}

// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
inline int TStorageUpdate_StorageUpdate_UpdateOp::ops_size() const {
  return ops_.size();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_ops() {
  ops_.Clear();
}
inline const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate_UpdateOp::ops(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_.Get(index);
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_.Mutable(index);
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::add_ops() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
TStorageUpdate_StorageUpdate_UpdateOp::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return &ops_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
TStorageUpdate_StorageUpdate_UpdateOp::ops() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_;
}

inline const TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::internal_default_instance() {
  return &TStorageUpdate_StorageUpdate_UpdateOp_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate_StorageKey

// optional string bucket = 1;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}

// optional string collection = 2;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}

// optional string record = 3;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}

// optional string version = 4;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}

inline const TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate_StorageKey::internal_default_instance() {
  return &TStorageUpdate_StorageUpdate_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate

// optional .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
inline bool TStorageUpdate_StorageUpdate::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void TStorageUpdate_StorageUpdate::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::server::TStorageUpdate_StorageUpdate_StorageKey& TStorageUpdate_StorageUpdate::key() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.key)
  return key_ != NULL ? *key_
                         : *::server::TStorageUpdate_StorageUpdate_StorageKey::internal_default_instance();
}
inline ::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::server::TStorageUpdate_StorageUpdate_StorageKey;
  }
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.key)
  return key_;
}
inline ::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::release_key() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.key)
  
  ::server::TStorageUpdate_StorageUpdate_StorageKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void TStorageUpdate_StorageUpdate::set_allocated_key(::server::TStorageUpdate_StorageUpdate_StorageKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.key)
}

// optional int32 permission_read = 2;
inline void TStorageUpdate_StorageUpdate::clear_permission_read() {
  permission_read_ = 0;
}
inline ::google::protobuf::int32 TStorageUpdate_StorageUpdate::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.permission_read)
  return permission_read_;
}
inline void TStorageUpdate_StorageUpdate::set_permission_read(::google::protobuf::int32 value) {
  
  permission_read_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.permission_read)
}

// optional int32 permission_write = 3;
inline void TStorageUpdate_StorageUpdate::clear_permission_write() {
  permission_write_ = 0;
}
inline ::google::protobuf::int32 TStorageUpdate_StorageUpdate::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.permission_write)
  return permission_write_;
}
inline void TStorageUpdate_StorageUpdate::set_permission_write(::google::protobuf::int32 value) {
  
  permission_write_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.permission_write)
}

// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
inline int TStorageUpdate_StorageUpdate::ops_size() const {
  return ops_.size();
}
inline void TStorageUpdate_StorageUpdate::clear_ops() {
  ops_.Clear();
}
inline const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate::ops(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.ops)
  return ops_.Get(index);
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.ops)
  return ops_.Mutable(index);
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate::add_ops() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.StorageUpdate.ops)
  return ops_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
TStorageUpdate_StorageUpdate::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.StorageUpdate.ops)
  return &ops_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
TStorageUpdate_StorageUpdate::ops() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.StorageUpdate.ops)
  return ops_;
}

inline const TStorageUpdate_StorageUpdate* TStorageUpdate_StorageUpdate::internal_default_instance() {
  return &TStorageUpdate_StorageUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageUpdate

// repeated .server.TStorageUpdate.StorageUpdate updates = 1;
inline int TStorageUpdate::updates_size() const {
  return updates_.size();
}
inline void TStorageUpdate::clear_updates() {
  updates_.Clear();
}
inline const ::server::TStorageUpdate_StorageUpdate& TStorageUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.updates)
  return updates_.Get(index);
}
inline ::server::TStorageUpdate_StorageUpdate* TStorageUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.updates)
  return updates_.Mutable(index);
}
inline ::server::TStorageUpdate_StorageUpdate* TStorageUpdate::add_updates() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.updates)
  return updates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >*
TStorageUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.updates)
  return &updates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >&
TStorageUpdate::updates() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.updates)
  return updates_;
}

inline const TStorageUpdate* TStorageUpdate::internal_default_instance() {
  return &TStorageUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageKeys_StorageKey

// optional string bucket = 1;
inline void TStorageKeys_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageKeys_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.bucket)
}
inline void TStorageKeys_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.bucket)
}
inline void TStorageKeys_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.bucket)
}
inline ::std::string* TStorageKeys_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageKeys_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.bucket)
}

// optional string collection = 2;
inline void TStorageKeys_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageKeys_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.collection)
}
inline void TStorageKeys_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.collection)
}
inline void TStorageKeys_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.collection)
}
inline ::std::string* TStorageKeys_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageKeys_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.collection)
}

// optional string record = 3;
inline void TStorageKeys_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageKeys_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.record)
}
inline void TStorageKeys_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.record)
}
inline void TStorageKeys_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.record)
}
inline ::std::string* TStorageKeys_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageKeys_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.record)
}

// optional string version = 4;
inline void TStorageKeys_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageKeys_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.version)
}
inline void TStorageKeys_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.version)
}
inline void TStorageKeys_StorageKey::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.version)
}
inline ::std::string* TStorageKeys_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageKeys_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageKeys_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.version)
}

inline const TStorageKeys_StorageKey* TStorageKeys_StorageKey::internal_default_instance() {
  return &TStorageKeys_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageKeys

// repeated .server.TStorageKeys.StorageKey keys = 1;
inline int TStorageKeys::keys_size() const {
  return keys_.size();
}
inline void TStorageKeys::clear_keys() {
  keys_.Clear();
}
inline const ::server::TStorageKeys_StorageKey& TStorageKeys::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.keys)
  return keys_.Get(index);
}
inline ::server::TStorageKeys_StorageKey* TStorageKeys::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.keys)
  return keys_.Mutable(index);
}
inline ::server::TStorageKeys_StorageKey* TStorageKeys::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageKeys.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageKeys_StorageKey >*
TStorageKeys::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageKeys.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageKeys_StorageKey >&
TStorageKeys::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageKeys.keys)
  return keys_;
}

inline const TStorageKeys* TStorageKeys::internal_default_instance() {
  return &TStorageKeys_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageRemove_StorageKey

// optional string bucket = 1;
inline void TStorageRemove_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageRemove_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.bucket)
}
inline void TStorageRemove_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.bucket)
}
inline void TStorageRemove_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.bucket)
}
inline ::std::string* TStorageRemove_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageRemove_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.bucket)
}

// optional string collection = 2;
inline void TStorageRemove_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageRemove_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.collection)
}
inline void TStorageRemove_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.collection)
}
inline void TStorageRemove_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.collection)
}
inline ::std::string* TStorageRemove_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageRemove_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.collection)
}

// optional string record = 3;
inline void TStorageRemove_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageRemove_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.record)
}
inline void TStorageRemove_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.record)
}
inline void TStorageRemove_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.record)
}
inline ::std::string* TStorageRemove_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageRemove_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.record)
}

// optional string version = 4;
inline void TStorageRemove_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TStorageRemove_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.version)
}
inline void TStorageRemove_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.version)
}
inline void TStorageRemove_StorageKey::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.version)
}
inline ::std::string* TStorageRemove_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStorageRemove_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStorageRemove_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.version)
}

inline const TStorageRemove_StorageKey* TStorageRemove_StorageKey::internal_default_instance() {
  return &TStorageRemove_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageRemove

// repeated .server.TStorageRemove.StorageKey keys = 1;
inline int TStorageRemove::keys_size() const {
  return keys_.size();
}
inline void TStorageRemove::clear_keys() {
  keys_.Clear();
}
inline const ::server::TStorageRemove_StorageKey& TStorageRemove::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.keys)
  return keys_.Get(index);
}
inline ::server::TStorageRemove_StorageKey* TStorageRemove::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.keys)
  return keys_.Mutable(index);
}
inline ::server::TStorageRemove_StorageKey* TStorageRemove::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageRemove.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >*
TStorageRemove::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageRemove.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >&
TStorageRemove::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageRemove.keys)
  return keys_;
}

inline const TStorageRemove* TStorageRemove::internal_default_instance() {
  return &TStorageRemove_default_instance_.get();
}
// -------------------------------------------------------------------

// Leaderboard

// optional string id = 1;
inline void Leaderboard::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Leaderboard::id() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leaderboard::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.id)
}
inline void Leaderboard::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.id)
}
inline void Leaderboard::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.id)
}
inline ::std::string* Leaderboard::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leaderboard::release_id() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leaderboard::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.id)
}

// optional bool authoritative = 2;
inline void Leaderboard::clear_authoritative() {
  authoritative_ = false;
}
inline bool Leaderboard::authoritative() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.authoritative)
  return authoritative_;
}
inline void Leaderboard::set_authoritative(bool value) {
  
  authoritative_ = value;
  // @@protoc_insertion_point(field_set:server.Leaderboard.authoritative)
}

// optional int64 sort = 3;
inline void Leaderboard::clear_sort() {
  sort_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Leaderboard::sort() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.sort)
  return sort_;
}
inline void Leaderboard::set_sort(::google::protobuf::int64 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:server.Leaderboard.sort)
}

// optional int64 count = 4;
inline void Leaderboard::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Leaderboard::count() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.count)
  return count_;
}
inline void Leaderboard::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:server.Leaderboard.count)
}

// optional string reset_schedule = 5;
inline void Leaderboard::clear_reset_schedule() {
  reset_schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Leaderboard::reset_schedule() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.reset_schedule)
  return reset_schedule_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leaderboard::set_reset_schedule(const ::std::string& value) {
  
  reset_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.reset_schedule)
}
inline void Leaderboard::set_reset_schedule(const char* value) {
  
  reset_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.reset_schedule)
}
inline void Leaderboard::set_reset_schedule(const char* value, size_t size) {
  
  reset_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.reset_schedule)
}
inline ::std::string* Leaderboard::mutable_reset_schedule() {
  
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.reset_schedule)
  return reset_schedule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leaderboard::release_reset_schedule() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.reset_schedule)
  
  return reset_schedule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leaderboard::set_allocated_reset_schedule(::std::string* reset_schedule) {
  if (reset_schedule != NULL) {
    
  } else {
    
  }
  reset_schedule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reset_schedule);
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.reset_schedule)
}

// optional string metadata = 6;
inline void Leaderboard::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Leaderboard::metadata() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leaderboard::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.metadata)
}
inline void Leaderboard::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.metadata)
}
inline void Leaderboard::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.metadata)
}
inline ::std::string* Leaderboard::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leaderboard::release_metadata() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leaderboard::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.metadata)
}

inline const Leaderboard* Leaderboard::internal_default_instance() {
  return &Leaderboard_default_instance_.get();
}
// -------------------------------------------------------------------

// LeaderboardRecord

// optional string leaderboard_id = 1;
inline void LeaderboardRecord::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderboardRecord::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.leaderboard_id)
  return leaderboard_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_leaderboard_id(const ::std::string& value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.leaderboard_id)
}
inline void LeaderboardRecord::set_leaderboard_id(const char* value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.leaderboard_id)
}
inline void LeaderboardRecord::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.leaderboard_id)
}
inline ::std::string* LeaderboardRecord::mutable_leaderboard_id() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.leaderboard_id)
  return leaderboard_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderboardRecord::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_allocated_leaderboard_id(::std::string* leaderboard_id) {
  if (leaderboard_id != NULL) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.leaderboard_id)
}

// optional string owner_id = 2;
inline void LeaderboardRecord::clear_owner_id() {
  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderboardRecord::owner_id() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.owner_id)
  return owner_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_owner_id(const ::std::string& value) {
  
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.owner_id)
}
inline void LeaderboardRecord::set_owner_id(const char* value) {
  
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.owner_id)
}
inline void LeaderboardRecord::set_owner_id(const char* value, size_t size) {
  
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.owner_id)
}
inline ::std::string* LeaderboardRecord::mutable_owner_id() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.owner_id)
  return owner_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderboardRecord::release_owner_id() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.owner_id)
  
  return owner_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_allocated_owner_id(::std::string* owner_id) {
  if (owner_id != NULL) {
    
  } else {
    
  }
  owner_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_id);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.owner_id)
}

// optional string handle = 3;
inline void LeaderboardRecord::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderboardRecord::handle() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.handle)
}
inline void LeaderboardRecord::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.handle)
}
inline void LeaderboardRecord::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.handle)
}
inline ::std::string* LeaderboardRecord::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderboardRecord::release_handle() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.handle)
}

// optional string lang = 4;
inline void LeaderboardRecord::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderboardRecord::lang() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.lang)
}
inline void LeaderboardRecord::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.lang)
}
inline void LeaderboardRecord::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.lang)
}
inline ::std::string* LeaderboardRecord::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderboardRecord::release_lang() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.lang)
}

// optional string location = 5;
inline void LeaderboardRecord::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderboardRecord::location() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.location)
}
inline void LeaderboardRecord::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.location)
}
inline void LeaderboardRecord::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.location)
}
inline ::std::string* LeaderboardRecord::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderboardRecord::release_location() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.location)
}

// optional string timezone = 6;
inline void LeaderboardRecord::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderboardRecord::timezone() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.timezone)
}
inline void LeaderboardRecord::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.timezone)
}
inline void LeaderboardRecord::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.timezone)
}
inline ::std::string* LeaderboardRecord::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderboardRecord::release_timezone() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.timezone)
}

// optional int64 rank = 7;
inline void LeaderboardRecord::clear_rank() {
  rank_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderboardRecord::rank() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.rank)
  return rank_;
}
inline void LeaderboardRecord::set_rank(::google::protobuf::int64 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.rank)
}

// optional int64 score = 8;
inline void LeaderboardRecord::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderboardRecord::score() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.score)
  return score_;
}
inline void LeaderboardRecord::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.score)
}

// optional int64 num_score = 9;
inline void LeaderboardRecord::clear_num_score() {
  num_score_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderboardRecord::num_score() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.num_score)
  return num_score_;
}
inline void LeaderboardRecord::set_num_score(::google::protobuf::int64 value) {
  
  num_score_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.num_score)
}

// optional string metadata = 10;
inline void LeaderboardRecord::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderboardRecord::metadata() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.metadata)
}
inline void LeaderboardRecord::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.metadata)
}
inline void LeaderboardRecord::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.metadata)
}
inline ::std::string* LeaderboardRecord::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderboardRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardRecord::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.metadata)
}

// optional int64 ranked_at = 11;
inline void LeaderboardRecord::clear_ranked_at() {
  ranked_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderboardRecord::ranked_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.ranked_at)
  return ranked_at_;
}
inline void LeaderboardRecord::set_ranked_at(::google::protobuf::int64 value) {
  
  ranked_at_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.ranked_at)
}

// optional int64 updated_at = 12;
inline void LeaderboardRecord::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderboardRecord::updated_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.updated_at)
  return updated_at_;
}
inline void LeaderboardRecord::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.updated_at)
}

// optional int64 expires_at = 13;
inline void LeaderboardRecord::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderboardRecord::expires_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.expires_at)
  return expires_at_;
}
inline void LeaderboardRecord::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.expires_at)
}

inline const LeaderboardRecord* LeaderboardRecord::internal_default_instance() {
  return &LeaderboardRecord_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardsList

// optional int64 limit = 1;
inline void TLeaderboardsList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TLeaderboardsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.limit)
  return limit_;
}
inline void TLeaderboardsList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.limit)
}

// optional string cursor = 2;
inline void TLeaderboardsList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardsList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.cursor)
}
inline void TLeaderboardsList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardsList.cursor)
}
inline void TLeaderboardsList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardsList.cursor)
}
inline ::std::string* TLeaderboardsList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardsList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardsList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardsList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardsList.cursor)
}

// repeated string filter_leaderboard_id = 3;
inline int TLeaderboardsList::filter_leaderboard_id_size() const {
  return filter_leaderboard_id_.size();
}
inline void TLeaderboardsList::clear_filter_leaderboard_id() {
  filter_leaderboard_id_.Clear();
}
inline const ::std::string& TLeaderboardsList::filter_leaderboard_id(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_.Get(index);
}
inline ::std::string* TLeaderboardsList::mutable_filter_leaderboard_id(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_.Mutable(index);
}
inline void TLeaderboardsList::set_filter_leaderboard_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.filter_leaderboard_id)
  filter_leaderboard_id_.Mutable(index)->assign(value);
}
inline void TLeaderboardsList::set_filter_leaderboard_id(int index, const char* value) {
  filter_leaderboard_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardsList.filter_leaderboard_id)
}
inline void TLeaderboardsList::set_filter_leaderboard_id(int index, const char* value, size_t size) {
  filter_leaderboard_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardsList.filter_leaderboard_id)
}
inline ::std::string* TLeaderboardsList::add_filter_leaderboard_id() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_.Add();
}
inline void TLeaderboardsList::add_filter_leaderboard_id(const ::std::string& value) {
  filter_leaderboard_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardsList.filter_leaderboard_id)
}
inline void TLeaderboardsList::add_filter_leaderboard_id(const char* value) {
  filter_leaderboard_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardsList.filter_leaderboard_id)
}
inline void TLeaderboardsList::add_filter_leaderboard_id(const char* value, size_t size) {
  filter_leaderboard_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardsList.filter_leaderboard_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLeaderboardsList::filter_leaderboard_id() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLeaderboardsList::mutable_filter_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardsList.filter_leaderboard_id)
  return &filter_leaderboard_id_;
}

inline const TLeaderboardsList* TLeaderboardsList::internal_default_instance() {
  return &TLeaderboardsList_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboards

// repeated .server.Leaderboard leaderboards = 1;
inline int TLeaderboards::leaderboards_size() const {
  return leaderboards_.size();
}
inline void TLeaderboards::clear_leaderboards() {
  leaderboards_.Clear();
}
inline const ::server::Leaderboard& TLeaderboards::leaderboards(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboards.leaderboards)
  return leaderboards_.Get(index);
}
inline ::server::Leaderboard* TLeaderboards::mutable_leaderboards(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboards.leaderboards)
  return leaderboards_.Mutable(index);
}
inline ::server::Leaderboard* TLeaderboards::add_leaderboards() {
  // @@protoc_insertion_point(field_add:server.TLeaderboards.leaderboards)
  return leaderboards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::Leaderboard >*
TLeaderboards::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboards.leaderboards)
  return &leaderboards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::Leaderboard >&
TLeaderboards::leaderboards() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboards.leaderboards)
  return leaderboards_;
}

// optional string cursor = 2;
inline void TLeaderboards::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboards::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboards.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboards::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboards.cursor)
}
inline void TLeaderboards::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboards.cursor)
}
inline void TLeaderboards::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboards.cursor)
}
inline ::std::string* TLeaderboards::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboards.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboards::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboards.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboards::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboards.cursor)
}

inline const TLeaderboards* TLeaderboards::internal_default_instance() {
  return &TLeaderboards_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecordsWrite_LeaderboardRecordWrite

// optional string leaderboard_id = 1;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  return leaderboard_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const ::std::string& value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const char* value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_leaderboard_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  return leaderboard_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_leaderboard_id(::std::string* leaderboard_id) {
  if (leaderboard_id != NULL) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}

// optional int64 incr = 2;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_incr() const {
  return op_case() == kIncr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_incr() {
  _oneof_case_[0] = kIncr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_incr() {
  if (has_incr()) {
    op_.incr_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
inline ::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::incr() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.incr)
  if (has_incr()) {
    return op_.incr_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_incr(::google::protobuf::int64 value) {
  if (!has_incr()) {
    clear_op();
    set_has_incr();
  }
  op_.incr_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.incr)
}

// optional int64 decr = 3;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_decr() const {
  return op_case() == kDecr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_decr() {
  _oneof_case_[0] = kDecr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_decr() {
  if (has_decr()) {
    op_.decr_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
inline ::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::decr() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.decr)
  if (has_decr()) {
    return op_.decr_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_decr(::google::protobuf::int64 value) {
  if (!has_decr()) {
    clear_op();
    set_has_decr();
  }
  op_.decr_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.decr)
}

// optional int64 set = 4;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_set() const {
  return op_case() == kSet;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_set() {
  _oneof_case_[0] = kSet;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_set() {
  if (has_set()) {
    op_.set_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
inline ::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::set() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.set)
  if (has_set()) {
    return op_.set_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_set(::google::protobuf::int64 value) {
  if (!has_set()) {
    clear_op();
    set_has_set();
  }
  op_.set_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.set)
}

// optional int64 best = 5;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_best() const {
  return op_case() == kBest;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_best() {
  _oneof_case_[0] = kBest;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_best() {
  if (has_best()) {
    op_.best_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
inline ::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::best() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.best)
  if (has_best()) {
    return op_.best_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_best(::google::protobuf::int64 value) {
  if (!has_best()) {
    clear_op();
    set_has_best();
  }
  op_.best_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.best)
}

// optional string location = 6;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::location() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_location() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}

// optional string timezone = 7;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::timezone() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}

// optional string metadata = 8;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::metadata() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}

inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline TLeaderboardRecordsWrite_LeaderboardRecordWrite::OpCase TLeaderboardRecordsWrite_LeaderboardRecordWrite::op_case() const {
  return TLeaderboardRecordsWrite_LeaderboardRecordWrite::OpCase(_oneof_case_[0]);
}
inline const TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite_LeaderboardRecordWrite::internal_default_instance() {
  return &TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecordsWrite

// repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
inline int TLeaderboardRecordsWrite::records_size() const {
  return records_.size();
}
inline void TLeaderboardRecordsWrite::clear_records() {
  records_.Clear();
}
inline const ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite& TLeaderboardRecordsWrite::records(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.records)
  return records_.Get(index);
}
inline ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.records)
  return records_.Mutable(index);
}
inline ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite::add_records() {
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsWrite.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >*
TLeaderboardRecordsWrite::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsWrite.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >&
TLeaderboardRecordsWrite::records() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsWrite.records)
  return records_;
}

inline const TLeaderboardRecordsWrite* TLeaderboardRecordsWrite::internal_default_instance() {
  return &TLeaderboardRecordsWrite_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecordsFetch

// repeated string leaderboard_ids = 1;
inline int TLeaderboardRecordsFetch::leaderboard_ids_size() const {
  return leaderboard_ids_.size();
}
inline void TLeaderboardRecordsFetch::clear_leaderboard_ids() {
  leaderboard_ids_.Clear();
}
inline const ::std::string& TLeaderboardRecordsFetch::leaderboard_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_.Get(index);
}
inline ::std::string* TLeaderboardRecordsFetch::mutable_leaderboard_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_.Mutable(index);
}
inline void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.leaderboard_ids)
  leaderboard_ids_.Mutable(index)->assign(value);
}
inline void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const char* value) {
  leaderboard_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const char* value, size_t size) {
  leaderboard_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline ::std::string* TLeaderboardRecordsFetch::add_leaderboard_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_.Add();
}
inline void TLeaderboardRecordsFetch::add_leaderboard_ids(const ::std::string& value) {
  leaderboard_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline void TLeaderboardRecordsFetch::add_leaderboard_ids(const char* value) {
  leaderboard_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline void TLeaderboardRecordsFetch::add_leaderboard_ids(const char* value, size_t size) {
  leaderboard_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLeaderboardRecordsFetch::leaderboard_ids() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLeaderboardRecordsFetch::mutable_leaderboard_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return &leaderboard_ids_;
}

// optional int64 limit = 2;
inline void TLeaderboardRecordsFetch::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TLeaderboardRecordsFetch::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.limit)
  return limit_;
}
inline void TLeaderboardRecordsFetch::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.limit)
}

// optional string cursor = 3;
inline void TLeaderboardRecordsFetch::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecordsFetch::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsFetch::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.cursor)
}
inline void TLeaderboardRecordsFetch::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsFetch.cursor)
}
inline void TLeaderboardRecordsFetch::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsFetch.cursor)
}
inline ::std::string* TLeaderboardRecordsFetch::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsFetch.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsFetch::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsFetch.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsFetch::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsFetch.cursor)
}

inline const TLeaderboardRecordsFetch* TLeaderboardRecordsFetch::internal_default_instance() {
  return &TLeaderboardRecordsFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecordsList_Owners

// repeated string owner_ids = 1;
inline int TLeaderboardRecordsList_Owners::owner_ids_size() const {
  return owner_ids_.size();
}
inline void TLeaderboardRecordsList_Owners::clear_owner_ids() {
  owner_ids_.Clear();
}
inline const ::std::string& TLeaderboardRecordsList_Owners::owner_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_.Get(index);
}
inline ::std::string* TLeaderboardRecordsList_Owners::mutable_owner_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_.Mutable(index);
}
inline void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.Owners.owner_ids)
  owner_ids_.Mutable(index)->assign(value);
}
inline void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const char* value) {
  owner_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const char* value, size_t size) {
  owner_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline ::std::string* TLeaderboardRecordsList_Owners::add_owner_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_.Add();
}
inline void TLeaderboardRecordsList_Owners::add_owner_ids(const ::std::string& value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline void TLeaderboardRecordsList_Owners::add_owner_ids(const char* value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline void TLeaderboardRecordsList_Owners::add_owner_ids(const char* value, size_t size) {
  owner_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLeaderboardRecordsList_Owners::owner_ids() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLeaderboardRecordsList_Owners::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsList.Owners.owner_ids)
  return &owner_ids_;
}

inline const TLeaderboardRecordsList_Owners* TLeaderboardRecordsList_Owners::internal_default_instance() {
  return &TLeaderboardRecordsList_Owners_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecordsList

// optional string leaderboard_id = 1;
inline void TLeaderboardRecordsList::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecordsList::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.leaderboard_id)
  return leaderboard_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsList::set_leaderboard_id(const ::std::string& value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.leaderboard_id)
}
inline void TLeaderboardRecordsList::set_leaderboard_id(const char* value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.leaderboard_id)
}
inline void TLeaderboardRecordsList::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.leaderboard_id)
}
inline ::std::string* TLeaderboardRecordsList::mutable_leaderboard_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.leaderboard_id)
  return leaderboard_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsList::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsList::set_allocated_leaderboard_id(::std::string* leaderboard_id) {
  if (leaderboard_id != NULL) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.leaderboard_id)
}

// optional string owner_id = 2;
inline bool TLeaderboardRecordsList::has_owner_id() const {
  return filter_case() == kOwnerId;
}
inline void TLeaderboardRecordsList::set_has_owner_id() {
  _oneof_case_[0] = kOwnerId;
}
inline void TLeaderboardRecordsList::clear_owner_id() {
  if (has_owner_id()) {
    filter_.owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
inline const ::std::string& TLeaderboardRecordsList::owner_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.owner_id)
  if (has_owner_id()) {
    return filter_.owner_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::set_owner_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.owner_id)
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.owner_id)
}
inline void TLeaderboardRecordsList::set_owner_id(const char* value) {
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.owner_id)
}
inline void TLeaderboardRecordsList::set_owner_id(const char* value, size_t size) {
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.owner_id)
}
inline ::std::string* TLeaderboardRecordsList::mutable_owner_id() {
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.owner_id)
  return filter_.owner_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsList::release_owner_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.owner_id)
  if (has_owner_id()) {
    clear_has_filter();
    return filter_.owner_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLeaderboardRecordsList::set_allocated_owner_id(::std::string* owner_id) {
  if (!has_owner_id()) {
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (owner_id != NULL) {
    set_has_owner_id();
    filter_.owner_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        owner_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.owner_id)
}

// optional .server.TLeaderboardRecordsList.Owners owner_ids = 3;
inline bool TLeaderboardRecordsList::has_owner_ids() const {
  return filter_case() == kOwnerIds;
}
inline void TLeaderboardRecordsList::set_has_owner_ids() {
  _oneof_case_[0] = kOwnerIds;
}
inline void TLeaderboardRecordsList::clear_owner_ids() {
  if (has_owner_ids()) {
    delete filter_.owner_ids_;
    clear_has_filter();
  }
}
inline  const ::server::TLeaderboardRecordsList_Owners& TLeaderboardRecordsList::owner_ids() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.owner_ids)
  return has_owner_ids()
      ? *filter_.owner_ids_
      : ::server::TLeaderboardRecordsList_Owners::default_instance();
}
inline ::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::mutable_owner_ids() {
  if (!has_owner_ids()) {
    clear_filter();
    set_has_owner_ids();
    filter_.owner_ids_ = new ::server::TLeaderboardRecordsList_Owners;
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.owner_ids)
  return filter_.owner_ids_;
}
inline ::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::release_owner_ids() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.owner_ids)
  if (has_owner_ids()) {
    clear_has_filter();
    ::server::TLeaderboardRecordsList_Owners* temp = filter_.owner_ids_;
    filter_.owner_ids_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TLeaderboardRecordsList::set_allocated_owner_ids(::server::TLeaderboardRecordsList_Owners* owner_ids) {
  clear_filter();
  if (owner_ids) {
    set_has_owner_ids();
    filter_.owner_ids_ = owner_ids;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.owner_ids)
}

// optional string lang = 4;
inline bool TLeaderboardRecordsList::has_lang() const {
  return filter_case() == kLang;
}
inline void TLeaderboardRecordsList::set_has_lang() {
  _oneof_case_[0] = kLang;
}
inline void TLeaderboardRecordsList::clear_lang() {
  if (has_lang()) {
    filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
inline const ::std::string& TLeaderboardRecordsList::lang() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.lang)
  if (has_lang()) {
    return filter_.lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::set_lang(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.lang)
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.lang)
}
inline void TLeaderboardRecordsList::set_lang(const char* value) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.lang)
}
inline void TLeaderboardRecordsList::set_lang(const char* value, size_t size) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.lang)
}
inline ::std::string* TLeaderboardRecordsList::mutable_lang() {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.lang)
  return filter_.lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsList::release_lang() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.lang)
  if (has_lang()) {
    clear_has_filter();
    return filter_.lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLeaderboardRecordsList::set_allocated_lang(::std::string* lang) {
  if (!has_lang()) {
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (lang != NULL) {
    set_has_lang();
    filter_.lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        lang);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.lang)
}

// optional string location = 5;
inline bool TLeaderboardRecordsList::has_location() const {
  return filter_case() == kLocation;
}
inline void TLeaderboardRecordsList::set_has_location() {
  _oneof_case_[0] = kLocation;
}
inline void TLeaderboardRecordsList::clear_location() {
  if (has_location()) {
    filter_.location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
inline const ::std::string& TLeaderboardRecordsList::location() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.location)
  if (has_location()) {
    return filter_.location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::set_location(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.location)
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.location)
}
inline void TLeaderboardRecordsList::set_location(const char* value) {
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.location)
}
inline void TLeaderboardRecordsList::set_location(const char* value, size_t size) {
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.location)
}
inline ::std::string* TLeaderboardRecordsList::mutable_location() {
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.location)
  return filter_.location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsList::release_location() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.location)
  if (has_location()) {
    clear_has_filter();
    return filter_.location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLeaderboardRecordsList::set_allocated_location(::std::string* location) {
  if (!has_location()) {
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (location != NULL) {
    set_has_location();
    filter_.location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        location);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.location)
}

// optional string timezone = 6;
inline bool TLeaderboardRecordsList::has_timezone() const {
  return filter_case() == kTimezone;
}
inline void TLeaderboardRecordsList::set_has_timezone() {
  _oneof_case_[0] = kTimezone;
}
inline void TLeaderboardRecordsList::clear_timezone() {
  if (has_timezone()) {
    filter_.timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
inline const ::std::string& TLeaderboardRecordsList::timezone() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.timezone)
  if (has_timezone()) {
    return filter_.timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::set_timezone(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.timezone)
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.timezone)
}
inline void TLeaderboardRecordsList::set_timezone(const char* value) {
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.timezone)
}
inline void TLeaderboardRecordsList::set_timezone(const char* value, size_t size) {
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.timezone)
}
inline ::std::string* TLeaderboardRecordsList::mutable_timezone() {
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.timezone)
  return filter_.timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsList::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.timezone)
  if (has_timezone()) {
    clear_has_filter();
    return filter_.timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TLeaderboardRecordsList::set_allocated_timezone(::std::string* timezone) {
  if (!has_timezone()) {
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (timezone != NULL) {
    set_has_timezone();
    filter_.timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        timezone);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.timezone)
}

// optional int64 limit = 7;
inline void TLeaderboardRecordsList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TLeaderboardRecordsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.limit)
  return limit_;
}
inline void TLeaderboardRecordsList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.limit)
}

// optional string cursor = 8;
inline void TLeaderboardRecordsList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecordsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.cursor)
}
inline void TLeaderboardRecordsList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.cursor)
}
inline void TLeaderboardRecordsList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.cursor)
}
inline ::std::string* TLeaderboardRecordsList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecordsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecordsList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.cursor)
}

inline bool TLeaderboardRecordsList::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void TLeaderboardRecordsList::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline TLeaderboardRecordsList::FilterCase TLeaderboardRecordsList::filter_case() const {
  return TLeaderboardRecordsList::FilterCase(_oneof_case_[0]);
}
inline const TLeaderboardRecordsList* TLeaderboardRecordsList::internal_default_instance() {
  return &TLeaderboardRecordsList_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecords

// repeated .server.LeaderboardRecord records = 1;
inline int TLeaderboardRecords::records_size() const {
  return records_.size();
}
inline void TLeaderboardRecords::clear_records() {
  records_.Clear();
}
inline const ::server::LeaderboardRecord& TLeaderboardRecords::records(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecords.records)
  return records_.Get(index);
}
inline ::server::LeaderboardRecord* TLeaderboardRecords::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecords.records)
  return records_.Mutable(index);
}
inline ::server::LeaderboardRecord* TLeaderboardRecords::add_records() {
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecords.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::LeaderboardRecord >*
TLeaderboardRecords::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecords.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::LeaderboardRecord >&
TLeaderboardRecords::records() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecords.records)
  return records_;
}

// optional string cursor = 2;
inline void TLeaderboardRecords::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLeaderboardRecords::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecords.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecords::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecords.cursor)
}
inline void TLeaderboardRecords::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecords.cursor)
}
inline void TLeaderboardRecords::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecords.cursor)
}
inline ::std::string* TLeaderboardRecords::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecords.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLeaderboardRecords::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecords.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLeaderboardRecords::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecords.cursor)
}

inline const TLeaderboardRecords* TLeaderboardRecords::internal_default_instance() {
  return &TLeaderboardRecords_default_instance_.get();
}
// -------------------------------------------------------------------

// TRpc

// optional string id = 1;
inline void TRpc::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TRpc::id() const {
  // @@protoc_insertion_point(field_get:server.TRpc.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TRpc::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TRpc.id)
}
inline void TRpc::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TRpc.id)
}
inline void TRpc::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TRpc.id)
}
inline ::std::string* TRpc::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TRpc.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TRpc::release_id() {
  // @@protoc_insertion_point(field_release:server.TRpc.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TRpc::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.TRpc.id)
}

// optional string payload = 2;
inline void TRpc::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TRpc::payload() const {
  // @@protoc_insertion_point(field_get:server.TRpc.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TRpc::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TRpc.payload)
}
inline void TRpc::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TRpc.payload)
}
inline void TRpc::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TRpc.payload)
}
inline ::std::string* TRpc::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:server.TRpc.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TRpc::release_payload() {
  // @@protoc_insertion_point(field_release:server.TRpc.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TRpc::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:server.TRpc.payload)
}

inline const TRpc* TRpc::internal_default_instance() {
  return &TRpc_default_instance_.get();
}
// -------------------------------------------------------------------

// TPurchaseValidation_ApplePurchase

// optional string product_id = 1;
inline void TPurchaseValidation_ApplePurchase::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPurchaseValidation_ApplePurchase::product_id() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.ApplePurchase.product_id)
  return product_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_ApplePurchase::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.ApplePurchase.product_id)
}
inline void TPurchaseValidation_ApplePurchase::set_product_id(const char* value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.ApplePurchase.product_id)
}
inline void TPurchaseValidation_ApplePurchase::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.ApplePurchase.product_id)
}
inline ::std::string* TPurchaseValidation_ApplePurchase::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.ApplePurchase.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPurchaseValidation_ApplePurchase::release_product_id() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.ApplePurchase.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_ApplePurchase::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.ApplePurchase.product_id)
}

// optional string receipt_data = 2;
inline void TPurchaseValidation_ApplePurchase::clear_receipt_data() {
  receipt_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPurchaseValidation_ApplePurchase::receipt_data() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.ApplePurchase.receipt_data)
  return receipt_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_ApplePurchase::set_receipt_data(const ::std::string& value) {
  
  receipt_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
inline void TPurchaseValidation_ApplePurchase::set_receipt_data(const char* value) {
  
  receipt_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
inline void TPurchaseValidation_ApplePurchase::set_receipt_data(const char* value, size_t size) {
  
  receipt_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
inline ::std::string* TPurchaseValidation_ApplePurchase::mutable_receipt_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.ApplePurchase.receipt_data)
  return receipt_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPurchaseValidation_ApplePurchase::release_receipt_data() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.ApplePurchase.receipt_data)
  
  return receipt_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_ApplePurchase::set_allocated_receipt_data(::std::string* receipt_data) {
  if (receipt_data != NULL) {
    
  } else {
    
  }
  receipt_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receipt_data);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.ApplePurchase.receipt_data)
}

inline const TPurchaseValidation_ApplePurchase* TPurchaseValidation_ApplePurchase::internal_default_instance() {
  return &TPurchaseValidation_ApplePurchase_default_instance_.get();
}
// -------------------------------------------------------------------

// TPurchaseValidation_GooglePurchase

// optional string product_id = 1;
inline void TPurchaseValidation_GooglePurchase::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPurchaseValidation_GooglePurchase::product_id() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.product_id)
  return product_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_GooglePurchase::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.product_id)
}
inline void TPurchaseValidation_GooglePurchase::set_product_id(const char* value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.product_id)
}
inline void TPurchaseValidation_GooglePurchase::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.product_id)
}
inline ::std::string* TPurchaseValidation_GooglePurchase::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPurchaseValidation_GooglePurchase::release_product_id() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_GooglePurchase::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.product_id)
}

// optional string product_type = 2;
inline void TPurchaseValidation_GooglePurchase::clear_product_type() {
  product_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPurchaseValidation_GooglePurchase::product_type() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.product_type)
  return product_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_GooglePurchase::set_product_type(const ::std::string& value) {
  
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.product_type)
}
inline void TPurchaseValidation_GooglePurchase::set_product_type(const char* value) {
  
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.product_type)
}
inline void TPurchaseValidation_GooglePurchase::set_product_type(const char* value, size_t size) {
  
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.product_type)
}
inline ::std::string* TPurchaseValidation_GooglePurchase::mutable_product_type() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.product_type)
  return product_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPurchaseValidation_GooglePurchase::release_product_type() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.product_type)
  
  return product_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_GooglePurchase::set_allocated_product_type(::std::string* product_type) {
  if (product_type != NULL) {
    
  } else {
    
  }
  product_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_type);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.product_type)
}

// optional string purchase_token = 3;
inline void TPurchaseValidation_GooglePurchase::clear_purchase_token() {
  purchase_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPurchaseValidation_GooglePurchase::purchase_token() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.purchase_token)
  return purchase_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_GooglePurchase::set_purchase_token(const ::std::string& value) {
  
  purchase_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
inline void TPurchaseValidation_GooglePurchase::set_purchase_token(const char* value) {
  
  purchase_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
inline void TPurchaseValidation_GooglePurchase::set_purchase_token(const char* value, size_t size) {
  
  purchase_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
inline ::std::string* TPurchaseValidation_GooglePurchase::mutable_purchase_token() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.purchase_token)
  return purchase_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPurchaseValidation_GooglePurchase::release_purchase_token() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.purchase_token)
  
  return purchase_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseValidation_GooglePurchase::set_allocated_purchase_token(::std::string* purchase_token) {
  if (purchase_token != NULL) {
    
  } else {
    
  }
  purchase_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), purchase_token);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.purchase_token)
}

inline const TPurchaseValidation_GooglePurchase* TPurchaseValidation_GooglePurchase::internal_default_instance() {
  return &TPurchaseValidation_GooglePurchase_default_instance_.get();
}
// -------------------------------------------------------------------

// TPurchaseValidation

// optional .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
inline bool TPurchaseValidation::has_apple_purchase() const {
  return id_case() == kApplePurchase;
}
inline void TPurchaseValidation::set_has_apple_purchase() {
  _oneof_case_[0] = kApplePurchase;
}
inline void TPurchaseValidation::clear_apple_purchase() {
  if (has_apple_purchase()) {
    delete id_.apple_purchase_;
    clear_has_id();
  }
}
inline  const ::server::TPurchaseValidation_ApplePurchase& TPurchaseValidation::apple_purchase() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.apple_purchase)
  return has_apple_purchase()
      ? *id_.apple_purchase_
      : ::server::TPurchaseValidation_ApplePurchase::default_instance();
}
inline ::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::mutable_apple_purchase() {
  if (!has_apple_purchase()) {
    clear_id();
    set_has_apple_purchase();
    id_.apple_purchase_ = new ::server::TPurchaseValidation_ApplePurchase;
  }
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.apple_purchase)
  return id_.apple_purchase_;
}
inline ::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::release_apple_purchase() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.apple_purchase)
  if (has_apple_purchase()) {
    clear_has_id();
    ::server::TPurchaseValidation_ApplePurchase* temp = id_.apple_purchase_;
    id_.apple_purchase_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TPurchaseValidation::set_allocated_apple_purchase(::server::TPurchaseValidation_ApplePurchase* apple_purchase) {
  clear_id();
  if (apple_purchase) {
    set_has_apple_purchase();
    id_.apple_purchase_ = apple_purchase;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.apple_purchase)
}

// optional .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
inline bool TPurchaseValidation::has_google_purchase() const {
  return id_case() == kGooglePurchase;
}
inline void TPurchaseValidation::set_has_google_purchase() {
  _oneof_case_[0] = kGooglePurchase;
}
inline void TPurchaseValidation::clear_google_purchase() {
  if (has_google_purchase()) {
    delete id_.google_purchase_;
    clear_has_id();
  }
}
inline  const ::server::TPurchaseValidation_GooglePurchase& TPurchaseValidation::google_purchase() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.google_purchase)
  return has_google_purchase()
      ? *id_.google_purchase_
      : ::server::TPurchaseValidation_GooglePurchase::default_instance();
}
inline ::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::mutable_google_purchase() {
  if (!has_google_purchase()) {
    clear_id();
    set_has_google_purchase();
    id_.google_purchase_ = new ::server::TPurchaseValidation_GooglePurchase;
  }
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.google_purchase)
  return id_.google_purchase_;
}
inline ::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::release_google_purchase() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.google_purchase)
  if (has_google_purchase()) {
    clear_has_id();
    ::server::TPurchaseValidation_GooglePurchase* temp = id_.google_purchase_;
    id_.google_purchase_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TPurchaseValidation::set_allocated_google_purchase(::server::TPurchaseValidation_GooglePurchase* google_purchase) {
  clear_id();
  if (google_purchase) {
    set_has_google_purchase();
    id_.google_purchase_ = google_purchase;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.google_purchase)
}

inline bool TPurchaseValidation::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TPurchaseValidation::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TPurchaseValidation::IdCase TPurchaseValidation::id_case() const {
  return TPurchaseValidation::IdCase(_oneof_case_[0]);
}
inline const TPurchaseValidation* TPurchaseValidation::internal_default_instance() {
  return &TPurchaseValidation_default_instance_.get();
}
// -------------------------------------------------------------------

// TPurchaseRecord

// optional bool success = 1;
inline void TPurchaseRecord::clear_success() {
  success_ = false;
}
inline bool TPurchaseRecord::success() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.success)
  return success_;
}
inline void TPurchaseRecord::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.success)
}

// optional bool seen_before = 2;
inline void TPurchaseRecord::clear_seen_before() {
  seen_before_ = false;
}
inline bool TPurchaseRecord::seen_before() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.seen_before)
  return seen_before_;
}
inline void TPurchaseRecord::set_seen_before(bool value) {
  
  seen_before_ = value;
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.seen_before)
}

// optional bool purchase_provider_reachable = 3;
inline void TPurchaseRecord::clear_purchase_provider_reachable() {
  purchase_provider_reachable_ = false;
}
inline bool TPurchaseRecord::purchase_provider_reachable() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.purchase_provider_reachable)
  return purchase_provider_reachable_;
}
inline void TPurchaseRecord::set_purchase_provider_reachable(bool value) {
  
  purchase_provider_reachable_ = value;
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.purchase_provider_reachable)
}

// optional string message = 6;
inline void TPurchaseRecord::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPurchaseRecord::message() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseRecord::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.message)
}
inline void TPurchaseRecord::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseRecord.message)
}
inline void TPurchaseRecord::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseRecord.message)
}
inline ::std::string* TPurchaseRecord::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseRecord.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPurchaseRecord::release_message() {
  // @@protoc_insertion_point(field_release:server.TPurchaseRecord.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseRecord::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseRecord.message)
}

// optional string data = 5;
inline void TPurchaseRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TPurchaseRecord::data() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseRecord::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.data)
}
inline void TPurchaseRecord::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseRecord.data)
}
inline void TPurchaseRecord::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseRecord.data)
}
inline ::std::string* TPurchaseRecord::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseRecord.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TPurchaseRecord::release_data() {
  // @@protoc_insertion_point(field_release:server.TPurchaseRecord.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TPurchaseRecord::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseRecord.data)
}

inline const TPurchaseRecord* TPurchaseRecord::internal_default_instance() {
  return &TPurchaseRecord_default_instance_.get();
}
// -------------------------------------------------------------------

// Notification

// optional string id = 1;
inline void Notification::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::id() const {
  // @@protoc_insertion_point(field_get:server.Notification.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.id)
}
inline void Notification::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.id)
}
inline void Notification::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.id)
}
inline ::std::string* Notification::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_id() {
  // @@protoc_insertion_point(field_release:server.Notification.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.id)
}

// optional string subject = 2;
inline void Notification::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::subject() const {
  // @@protoc_insertion_point(field_get:server.Notification.subject)
  return subject_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.subject)
}
inline void Notification::set_subject(const char* value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.subject)
}
inline void Notification::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.subject)
}
inline ::std::string* Notification::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_subject() {
  // @@protoc_insertion_point(field_release:server.Notification.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.subject)
}

// optional string content = 3;
inline void Notification::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::content() const {
  // @@protoc_insertion_point(field_get:server.Notification.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.content)
}
inline void Notification::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.content)
}
inline void Notification::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.content)
}
inline ::std::string* Notification::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_content() {
  // @@protoc_insertion_point(field_release:server.Notification.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.content)
}

// optional int64 code = 4;
inline void Notification::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Notification::code() const {
  // @@protoc_insertion_point(field_get:server.Notification.code)
  return code_;
}
inline void Notification::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.code)
}

// optional string sender_id = 5;
inline void Notification::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::sender_id() const {
  // @@protoc_insertion_point(field_get:server.Notification.sender_id)
  return sender_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_sender_id(const ::std::string& value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.sender_id)
}
inline void Notification::set_sender_id(const char* value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.sender_id)
}
inline void Notification::set_sender_id(const char* value, size_t size) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.sender_id)
}
inline ::std::string* Notification::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_sender_id() {
  // @@protoc_insertion_point(field_release:server.Notification.sender_id)
  
  return sender_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.sender_id)
}

// optional int64 created_at = 6;
inline void Notification::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Notification::created_at() const {
  // @@protoc_insertion_point(field_get:server.Notification.created_at)
  return created_at_;
}
inline void Notification::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.created_at)
}

// optional int64 expires_at = 7;
inline void Notification::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Notification::expires_at() const {
  // @@protoc_insertion_point(field_get:server.Notification.expires_at)
  return expires_at_;
}
inline void Notification::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.expires_at)
}

// optional bool persistent = 8;
inline void Notification::clear_persistent() {
  persistent_ = false;
}
inline bool Notification::persistent() const {
  // @@protoc_insertion_point(field_get:server.Notification.persistent)
  return persistent_;
}
inline void Notification::set_persistent(bool value) {
  
  persistent_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.persistent)
}

inline const Notification* Notification::internal_default_instance() {
  return &Notification_default_instance_.get();
}
// -------------------------------------------------------------------

// Notifications

// repeated .server.Notification notifications = 1;
inline int Notifications::notifications_size() const {
  return notifications_.size();
}
inline void Notifications::clear_notifications() {
  notifications_.Clear();
}
inline const ::server::Notification& Notifications::notifications(int index) const {
  // @@protoc_insertion_point(field_get:server.Notifications.notifications)
  return notifications_.Get(index);
}
inline ::server::Notification* Notifications::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:server.Notifications.notifications)
  return notifications_.Mutable(index);
}
inline ::server::Notification* Notifications::add_notifications() {
  // @@protoc_insertion_point(field_add:server.Notifications.notifications)
  return notifications_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::Notification >*
Notifications::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:server.Notifications.notifications)
  return &notifications_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::Notification >&
Notifications::notifications() const {
  // @@protoc_insertion_point(field_list:server.Notifications.notifications)
  return notifications_;
}

inline const Notifications* Notifications::internal_default_instance() {
  return &Notifications_default_instance_.get();
}
// -------------------------------------------------------------------

// TNotificationsList

// optional int64 limit = 1;
inline void TNotificationsList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TNotificationsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TNotificationsList.limit)
  return limit_;
}
inline void TNotificationsList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TNotificationsList.limit)
}

// optional string resumable_cursor = 2;
inline void TNotificationsList::clear_resumable_cursor() {
  resumable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TNotificationsList::resumable_cursor() const {
  // @@protoc_insertion_point(field_get:server.TNotificationsList.resumable_cursor)
  return resumable_cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TNotificationsList::set_resumable_cursor(const ::std::string& value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TNotificationsList.resumable_cursor)
}
inline void TNotificationsList::set_resumable_cursor(const char* value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TNotificationsList.resumable_cursor)
}
inline void TNotificationsList::set_resumable_cursor(const char* value, size_t size) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TNotificationsList.resumable_cursor)
}
inline ::std::string* TNotificationsList::mutable_resumable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TNotificationsList.resumable_cursor)
  return resumable_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TNotificationsList::release_resumable_cursor() {
  // @@protoc_insertion_point(field_release:server.TNotificationsList.resumable_cursor)
  
  return resumable_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TNotificationsList::set_allocated_resumable_cursor(::std::string* resumable_cursor) {
  if (resumable_cursor != NULL) {
    
  } else {
    
  }
  resumable_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resumable_cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TNotificationsList.resumable_cursor)
}

inline const TNotificationsList* TNotificationsList::internal_default_instance() {
  return &TNotificationsList_default_instance_.get();
}
// -------------------------------------------------------------------

// TNotifications

// repeated .server.Notification notifications = 1;
inline int TNotifications::notifications_size() const {
  return notifications_.size();
}
inline void TNotifications::clear_notifications() {
  notifications_.Clear();
}
inline const ::server::Notification& TNotifications::notifications(int index) const {
  // @@protoc_insertion_point(field_get:server.TNotifications.notifications)
  return notifications_.Get(index);
}
inline ::server::Notification* TNotifications::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:server.TNotifications.notifications)
  return notifications_.Mutable(index);
}
inline ::server::Notification* TNotifications::add_notifications() {
  // @@protoc_insertion_point(field_add:server.TNotifications.notifications)
  return notifications_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::server::Notification >*
TNotifications::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:server.TNotifications.notifications)
  return &notifications_;
}
inline const ::google::protobuf::RepeatedPtrField< ::server::Notification >&
TNotifications::notifications() const {
  // @@protoc_insertion_point(field_list:server.TNotifications.notifications)
  return notifications_;
}

// optional string resumable_cursor = 2;
inline void TNotifications::clear_resumable_cursor() {
  resumable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TNotifications::resumable_cursor() const {
  // @@protoc_insertion_point(field_get:server.TNotifications.resumable_cursor)
  return resumable_cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TNotifications::set_resumable_cursor(const ::std::string& value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TNotifications.resumable_cursor)
}
inline void TNotifications::set_resumable_cursor(const char* value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TNotifications.resumable_cursor)
}
inline void TNotifications::set_resumable_cursor(const char* value, size_t size) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TNotifications.resumable_cursor)
}
inline ::std::string* TNotifications::mutable_resumable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TNotifications.resumable_cursor)
  return resumable_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TNotifications::release_resumable_cursor() {
  // @@protoc_insertion_point(field_release:server.TNotifications.resumable_cursor)
  
  return resumable_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TNotifications::set_allocated_resumable_cursor(::std::string* resumable_cursor) {
  if (resumable_cursor != NULL) {
    
  } else {
    
  }
  resumable_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resumable_cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TNotifications.resumable_cursor)
}

inline const TNotifications* TNotifications::internal_default_instance() {
  return &TNotifications_default_instance_.get();
}
// -------------------------------------------------------------------

// TNotificationsRemove

// repeated string notification_ids = 1;
inline int TNotificationsRemove::notification_ids_size() const {
  return notification_ids_.size();
}
inline void TNotificationsRemove::clear_notification_ids() {
  notification_ids_.Clear();
}
inline const ::std::string& TNotificationsRemove::notification_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TNotificationsRemove.notification_ids)
  return notification_ids_.Get(index);
}
inline ::std::string* TNotificationsRemove::mutable_notification_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TNotificationsRemove.notification_ids)
  return notification_ids_.Mutable(index);
}
inline void TNotificationsRemove::set_notification_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TNotificationsRemove.notification_ids)
  notification_ids_.Mutable(index)->assign(value);
}
inline void TNotificationsRemove::set_notification_ids(int index, const char* value) {
  notification_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TNotificationsRemove.notification_ids)
}
inline void TNotificationsRemove::set_notification_ids(int index, const char* value, size_t size) {
  notification_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TNotificationsRemove.notification_ids)
}
inline ::std::string* TNotificationsRemove::add_notification_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TNotificationsRemove.notification_ids)
  return notification_ids_.Add();
}
inline void TNotificationsRemove::add_notification_ids(const ::std::string& value) {
  notification_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TNotificationsRemove.notification_ids)
}
inline void TNotificationsRemove::add_notification_ids(const char* value) {
  notification_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TNotificationsRemove.notification_ids)
}
inline void TNotificationsRemove::add_notification_ids(const char* value, size_t size) {
  notification_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TNotificationsRemove.notification_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TNotificationsRemove::notification_ids() const {
  // @@protoc_insertion_point(field_list:server.TNotificationsRemove.notification_ids)
  return notification_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TNotificationsRemove::mutable_notification_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TNotificationsRemove.notification_ids)
  return &notification_ids_;
}

inline const TNotificationsRemove* TNotificationsRemove::internal_default_instance() {
  return &TNotificationsRemove_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::server::Error_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::Error_Code>() {
  return ::server::Error_Code_descriptor();
}
template <> struct is_proto_enum< ::server::TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode>() {
  return ::server::TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor();
}
template <> struct is_proto_enum< ::server::StoragePermissionRead> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::StoragePermissionRead>() {
  return ::server::StoragePermissionRead_descriptor();
}
template <> struct is_proto_enum< ::server::StoragePermissionWrite> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::StoragePermissionWrite>() {
  return ::server::StoragePermissionWrite_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)
#pragma pop_macro("assert")

#endif  // PROTOBUF_api_2eproto__INCLUDED
