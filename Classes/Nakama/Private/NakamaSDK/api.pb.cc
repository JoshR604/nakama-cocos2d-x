// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#pragma push_macro("assert")
#undef assert
#pragma warning( push )  
#pragma warning(disable: 4125; once: 4267)

namespace server {

namespace {

const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateRequest_reflection_ = NULL;
struct AuthenticateRequestOneofInstance {
  const ::server::AuthenticateRequest_Email* email_;
  ::google::protobuf::internal::ArenaStringPtr facebook_;
  ::google::protobuf::internal::ArenaStringPtr google_;
  const ::server::AuthenticateRequest_GameCenter* game_center_;
  ::google::protobuf::internal::ArenaStringPtr steam_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr custom_;
}* AuthenticateRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateRequest_Email_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateRequest_Email_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateRequest_GameCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateRequest_GameCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateResponse_reflection_ = NULL;
struct AuthenticateResponseOneofInstance {
  const ::server::AuthenticateResponse_Session* session_;
  const ::server::AuthenticateResponse_Error* error_;
}* AuthenticateResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateResponse_Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateResponse_Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateResponse_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateResponse_Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
struct EnvelopeOneofInstance {
  const ::server::Error* error_;
  const ::server::Heartbeat* heartbeat_;
  const ::server::Logout* logout_;
  const ::server::TLink* link_;
  const ::server::TUnlink* unlink_;
  const ::server::TSelfFetch* self_fetch_;
  const ::server::TSelfUpdate* self_update_;
  const ::server::TUsersFetch* users_fetch_;
  const ::server::TSelf* self_;
  const ::server::TUsers* users_;
  const ::server::TFriendsAdd* friends_add_;
  const ::server::TFriendsRemove* friends_remove_;
  const ::server::TFriendsBlock* friends_block_;
  const ::server::TFriendsList* friends_list_;
  const ::server::TFriends* friends_;
  const ::server::TGroupsCreate* groups_create_;
  const ::server::TGroupsUpdate* groups_update_;
  const ::server::TGroupsRemove* groups_remove_;
  const ::server::TGroupsFetch* groups_fetch_;
  const ::server::TGroupsList* groups_list_;
  const ::server::TGroupsSelfList* groups_self_list_;
  const ::server::TGroupUsersList* group_users_list_;
  const ::server::TGroupsJoin* groups_join_;
  const ::server::TGroupsLeave* groups_leave_;
  const ::server::TGroupUsersAdd* group_users_add_;
  const ::server::TGroupUsersKick* group_users_kick_;
  const ::server::TGroupUsersPromote* group_users_promote_;
  const ::server::TGroups* groups_;
  const ::server::TGroupsSelf* groups_self_;
  const ::server::TGroupUsers* group_users_;
  const ::server::TTopicsJoin* topics_join_;
  const ::server::TTopicsLeave* topics_leave_;
  const ::server::TTopicMessageSend* topic_message_send_;
  const ::server::TTopicMessagesList* topic_messages_list_;
  const ::server::TTopics* topics_;
  const ::server::TTopicMessageAck* topic_message_ack_;
  const ::server::TopicMessage* topic_message_;
  const ::server::TTopicMessages* topic_messages_;
  const ::server::TopicPresence* topic_presence_;
  const ::server::TMatchCreate* match_create_;
  const ::server::TMatchesJoin* matches_join_;
  const ::server::TMatchesLeave* matches_leave_;
  const ::server::MatchDataSend* match_data_send_;
  const ::server::TMatch* match_;
  const ::server::TMatches* matches_;
  const ::server::MatchData* match_data_;
  const ::server::MatchPresence* match_presence_;
  const ::server::TStorageList* storage_list_;
  const ::server::TStorageFetch* storage_fetch_;
  const ::server::TStorageWrite* storage_write_;
  const ::server::TStorageUpdate* storage_update_;
  const ::server::TStorageRemove* storage_remove_;
  const ::server::TStorageData* storage_data_;
  const ::server::TStorageKeys* storage_keys_;
  const ::server::TLeaderboardsList* leaderboards_list_;
  const ::server::TLeaderboardRecordsWrite* leaderboard_records_write_;
  const ::server::TLeaderboardRecordsFetch* leaderboard_records_fetch_;
  const ::server::TLeaderboardRecordsList* leaderboard_records_list_;
  const ::server::TLeaderboards* leaderboards_;
  const ::server::TLeaderboardRecords* leaderboard_records_;
  const ::server::TMatchmakeAdd* matchmake_add_;
  const ::server::TMatchmakeRemove* matchmake_remove_;
  const ::server::TMatchmakeTicket* matchmake_ticket_;
  const ::server::MatchmakeMatched* matchmake_matched_;
  const ::server::TRpc* rpc_;
  const ::server::TPurchaseValidation* purchase_;
  const ::server::TPurchaseRecord* purchase_record_;
  const ::server::TNotificationsList* notifications_list_;
  const ::server::TNotificationsRemove* notifications_remove_;
  const ::server::TNotifications* notifications_;
  const ::server::Notifications* live_notifications_;
}* Envelope_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLink_reflection_ = NULL;
struct TLinkOneofInstance {
  const ::server::AuthenticateRequest_Email* email_;
  ::google::protobuf::internal::ArenaStringPtr facebook_;
  ::google::protobuf::internal::ArenaStringPtr google_;
  const ::server::AuthenticateRequest_GameCenter* game_center_;
  ::google::protobuf::internal::ArenaStringPtr steam_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr custom_;
}* TLink_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TUnlink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnlink_reflection_ = NULL;
struct TUnlinkOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr facebook_;
  ::google::protobuf::internal::ArenaStringPtr google_;
  ::google::protobuf::internal::ArenaStringPtr game_center_;
  ::google::protobuf::internal::ArenaStringPtr steam_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr custom_;
}* TUnlink_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Self_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Self_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSelfFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSelfFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSelfUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSelfUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUsersFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUsersFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUsersFetch_UsersFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUsersFetch_UsersFetch_reflection_ = NULL;
struct TUsersFetch_UsersFetchOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
}* TUsersFetch_UsersFetch_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUsers_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendsAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendsAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendsAdd_FriendsAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendsAdd_FriendsAdd_reflection_ = NULL;
struct TFriendsAdd_FriendsAddOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
}* TFriendsAdd_FriendsAdd_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TFriendsRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendsRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendsBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendsBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsCreate_GroupCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsCreate_GroupCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsUpdate_GroupUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsUpdate_GroupUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsSelfList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsSelfList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsFetch_GroupFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsFetch_GroupFetch_reflection_ = NULL;
struct TGroupsFetch_GroupFetchOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
}* TGroupsFetch_GroupFetch_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TGroupsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsList_reflection_ = NULL;
struct TGroupsListOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 count_;
}* TGroupsList_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TGroups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroups_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsSelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsSelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsSelf_GroupSelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsSelf_GroupSelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsers_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersAdd_GroupUserAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersAdd_GroupUserAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersKick_GroupUserKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersKick_GroupUserKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersPromote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersPromote_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersPromote_GroupUserPromote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersPromote_GroupUserPromote_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicId_reflection_ = NULL;
struct TopicIdOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr dm_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
}* TopicId_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* UserPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicsJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicsJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicsJoin_TopicJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicsJoin_TopicJoin_reflection_ = NULL;
struct TTopicsJoin_TopicJoinOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
}* TTopicsJoin_TopicJoin_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TTopics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopics_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopics_Topic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopics_Topic_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicsLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicsLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessageSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessageSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessageAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessagesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessagesList_reflection_ = NULL;
struct TTopicMessagesListOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
}* TTopicMessagesList_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyPair_reflection_ = NULL;
struct PropertyPairOneofInstance {
  const ::server::PropertyPair_StringSet* stringset_;
  bool boolvalue_;
  ::google::protobuf::int64 intvalue_;
}* PropertyPair_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* PropertyPair_StringSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyPair_StringSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchmakeFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakeFilter_reflection_ = NULL;
struct MatchmakeFilterOneofInstance {
  const ::server::MatchmakeFilter_TermFilter* term_;
  const ::server::MatchmakeFilter_RangeFilter* range_;
  bool check_;
}* MatchmakeFilter_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* MatchmakeFilter_TermFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakeFilter_TermFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchmakeFilter_RangeFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakeFilter_RangeFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchmakeAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchmakeAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchmakeTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchmakeTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchmakeRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchmakeRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchmakeMatched_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakeMatched_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchmakeMatched_UserProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchmakeMatched_UserProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchesJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchesJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchesJoin_MatchJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchesJoin_MatchJoin_reflection_ = NULL;
struct TMatchesJoin_MatchJoinOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr match_id_;
  ::google::protobuf::internal::ArenaStringPtr token_;
}* TMatchesJoin_MatchJoin_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TMatches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatches_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchDataSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchDataSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchesLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchesLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageFetch_StorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageFetch_StorageKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageData_StorageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageData_StorageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageWrite_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageWrite_StorageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageWrite_StorageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageUpdate_StorageUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageUpdate_StorageUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageUpdate_StorageUpdate_UpdateOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageUpdate_StorageUpdate_UpdateOp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TStorageUpdate_StorageUpdate_StorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageUpdate_StorageUpdate_StorageKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageKeys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageKeys_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageKeys_StorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageKeys_StorageKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageRemove_StorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageRemove_StorageKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* Leaderboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Leaderboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderboardRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderboardRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboardsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboardsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboards_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboardRecordsWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboardRecordsWrite_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboardRecordsWrite_LeaderboardRecordWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_reflection_ = NULL;
struct TLeaderboardRecordsWrite_LeaderboardRecordWriteOneofInstance {
  ::google::protobuf::int64 incr_;
  ::google::protobuf::int64 decr_;
  ::google::protobuf::int64 set_;
  ::google::protobuf::int64 best_;
}* TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboardRecordsFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboardRecordsFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboardRecordsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboardRecordsList_reflection_ = NULL;
struct TLeaderboardRecordsListOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr owner_id_;
  const ::server::TLeaderboardRecordsList_Owners* owner_ids_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
}* TLeaderboardRecordsList_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboardRecordsList_Owners_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboardRecordsList_Owners_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLeaderboardRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLeaderboardRecords_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPurchaseValidation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPurchaseValidation_reflection_ = NULL;
struct TPurchaseValidationOneofInstance {
  const ::server::TPurchaseValidation_ApplePurchase* apple_purchase_;
  const ::server::TPurchaseValidation_GooglePurchase* google_purchase_;
}* TPurchaseValidation_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TPurchaseValidation_ApplePurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPurchaseValidation_ApplePurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPurchaseValidation_GooglePurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPurchaseValidation_GooglePurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPurchaseRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPurchaseRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notification_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notifications_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notifications_reflection_ = NULL;
const ::google::protobuf::Descriptor* TNotificationsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TNotificationsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TNotifications_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TNotifications_reflection_ = NULL;
const ::google::protobuf::Descriptor* TNotificationsRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TNotificationsRemove_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StoragePermissionRead_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StoragePermissionWrite_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_api_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_api_2eproto() {
  protobuf_AddDesc_api_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api.proto");
  GOOGLE_CHECK(file != NULL);
  Heartbeat_descriptor_ = file->message_type(0);
  static const int Heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, timestamp_),
  };
  Heartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::internal_default_instance(),
      Heartbeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Heartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _internal_metadata_));
  Error_descriptor_ = file->message_type(1);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::internal_default_instance(),
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_));
  Error_Code_descriptor_ = Error_descriptor_->enum_type(0);
  AuthenticateRequest_descriptor_ = file->message_type(2);
  static const int AuthenticateRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, collationid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, email_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, facebook_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, google_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, game_center_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, steam_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, id_),
  };
  AuthenticateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateRequest_descriptor_,
      AuthenticateRequest::internal_default_instance(),
      AuthenticateRequest_offsets_,
      -1,
      -1,
      -1,
      AuthenticateRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, _oneof_case_[0]),
      sizeof(AuthenticateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, _internal_metadata_));
  AuthenticateRequest_Email_descriptor_ = AuthenticateRequest_descriptor_->nested_type(0);
  static const int AuthenticateRequest_Email_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_Email, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_Email, password_),
  };
  AuthenticateRequest_Email_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateRequest_Email_descriptor_,
      AuthenticateRequest_Email::internal_default_instance(),
      AuthenticateRequest_Email_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateRequest_Email),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_Email, _internal_metadata_));
  AuthenticateRequest_GameCenter_descriptor_ = AuthenticateRequest_descriptor_->nested_type(1);
  static const int AuthenticateRequest_GameCenter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, bundle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, public_key_url_),
  };
  AuthenticateRequest_GameCenter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateRequest_GameCenter_descriptor_,
      AuthenticateRequest_GameCenter::internal_default_instance(),
      AuthenticateRequest_GameCenter_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateRequest_GameCenter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, _internal_metadata_));
  AuthenticateResponse_descriptor_ = file->message_type(3);
  static const int AuthenticateResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, collation_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateResponse_default_oneof_instance_, session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateResponse_default_oneof_instance_, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, id_),
  };
  AuthenticateResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateResponse_descriptor_,
      AuthenticateResponse::internal_default_instance(),
      AuthenticateResponse_offsets_,
      -1,
      -1,
      -1,
      AuthenticateResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, _oneof_case_[0]),
      sizeof(AuthenticateResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, _internal_metadata_));
  AuthenticateResponse_Session_descriptor_ = AuthenticateResponse_descriptor_->nested_type(0);
  static const int AuthenticateResponse_Session_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Session, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Session, udp_token_),
  };
  AuthenticateResponse_Session_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateResponse_Session_descriptor_,
      AuthenticateResponse_Session::internal_default_instance(),
      AuthenticateResponse_Session_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateResponse_Session),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Session, _internal_metadata_));
  AuthenticateResponse_Error_descriptor_ = AuthenticateResponse_descriptor_->nested_type(1);
  static const int AuthenticateResponse_Error_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Error, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Error, request_),
  };
  AuthenticateResponse_Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateResponse_Error_descriptor_,
      AuthenticateResponse_Error::internal_default_instance(),
      AuthenticateResponse_Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateResponse_Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Error, _internal_metadata_));
  Envelope_descriptor_ = file->message_type(4);
  static const int Envelope_offsets_[73] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, collation_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, error_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, heartbeat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, logout_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, link_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, unlink_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, self_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, self_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, users_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, self_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, users_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friends_add_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friends_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friends_block_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friends_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friends_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_create_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_self_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_users_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_join_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_leave_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_users_add_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_users_kick_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_users_promote_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_self_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_users_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topics_join_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topics_leave_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_message_send_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_messages_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topics_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_message_ack_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_message_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_messages_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_presence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_create_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, matches_join_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, matches_leave_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_data_send_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, matches_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_presence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_write_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_keys_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, leaderboards_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, leaderboard_records_write_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, leaderboard_records_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, leaderboard_records_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, leaderboards_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, leaderboard_records_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, matchmake_add_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, matchmake_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, matchmake_ticket_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, matchmake_matched_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, rpc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, purchase_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, purchase_record_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, notifications_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, notifications_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, notifications_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, live_notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, payload_),
  };
  Envelope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::internal_default_instance(),
      Envelope_offsets_,
      -1,
      -1,
      -1,
      Envelope_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _oneof_case_[0]),
      sizeof(Envelope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _internal_metadata_));
  Logout_descriptor_ = file->message_type(5);
  static const int Logout_offsets_[1] = {
  };
  Logout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Logout_descriptor_,
      Logout::internal_default_instance(),
      Logout_offsets_,
      -1,
      -1,
      -1,
      sizeof(Logout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _internal_metadata_));
  TLink_descriptor_ = file->message_type(6);
  static const int TLink_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, email_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, facebook_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, google_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, game_center_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, steam_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLink, id_),
  };
  TLink_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLink_descriptor_,
      TLink::internal_default_instance(),
      TLink_offsets_,
      -1,
      -1,
      -1,
      TLink_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLink, _oneof_case_[0]),
      sizeof(TLink),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLink, _internal_metadata_));
  TUnlink_descriptor_ = file->message_type(7);
  static const int TUnlink_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, email_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, facebook_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, google_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, game_center_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, steam_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnlink, id_),
  };
  TUnlink_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TUnlink_descriptor_,
      TUnlink::internal_default_instance(),
      TUnlink_offsets_,
      -1,
      -1,
      -1,
      TUnlink_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnlink, _oneof_case_[0]),
      sizeof(TUnlink),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnlink, _internal_metadata_));
  User_descriptor_ = file->message_type(8);
  static const int User_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, last_online_at_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::internal_default_instance(),
      User_offsets_,
      -1,
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_));
  Self_descriptor_ = file->message_type(9);
  static const int Self_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, device_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, facebook_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, google_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, gamecenter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, custom_id_),
  };
  Self_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Self_descriptor_,
      Self::internal_default_instance(),
      Self_offsets_,
      -1,
      -1,
      -1,
      sizeof(Self),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, _internal_metadata_));
  TSelfFetch_descriptor_ = file->message_type(10);
  static const int TSelfFetch_offsets_[1] = {
  };
  TSelfFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSelfFetch_descriptor_,
      TSelfFetch::internal_default_instance(),
      TSelfFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSelfFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfFetch, _internal_metadata_));
  TSelf_descriptor_ = file->message_type(11);
  static const int TSelf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelf, self_),
  };
  TSelf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSelf_descriptor_,
      TSelf::internal_default_instance(),
      TSelf_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSelf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelf, _internal_metadata_));
  TSelfUpdate_descriptor_ = file->message_type(12);
  static const int TSelfUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, avatar_url_),
  };
  TSelfUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSelfUpdate_descriptor_,
      TSelfUpdate::internal_default_instance(),
      TSelfUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSelfUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, _internal_metadata_));
  TUsersFetch_descriptor_ = file->message_type(13);
  static const int TUsersFetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsersFetch, users_),
  };
  TUsersFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TUsersFetch_descriptor_,
      TUsersFetch::internal_default_instance(),
      TUsersFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TUsersFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsersFetch, _internal_metadata_));
  TUsersFetch_UsersFetch_descriptor_ = TUsersFetch_descriptor_->nested_type(0);
  static const int TUsersFetch_UsersFetch_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUsersFetch_UsersFetch_default_oneof_instance_, user_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUsersFetch_UsersFetch_default_oneof_instance_, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsersFetch_UsersFetch, id_),
  };
  TUsersFetch_UsersFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TUsersFetch_UsersFetch_descriptor_,
      TUsersFetch_UsersFetch::internal_default_instance(),
      TUsersFetch_UsersFetch_offsets_,
      -1,
      -1,
      -1,
      TUsersFetch_UsersFetch_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsersFetch_UsersFetch, _oneof_case_[0]),
      sizeof(TUsersFetch_UsersFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsersFetch_UsersFetch, _internal_metadata_));
  TUsers_descriptor_ = file->message_type(14);
  static const int TUsers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsers, users_),
  };
  TUsers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TUsers_descriptor_,
      TUsers::internal_default_instance(),
      TUsers_offsets_,
      -1,
      -1,
      -1,
      sizeof(TUsers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsers, _internal_metadata_));
  Friend_descriptor_ = file->message_type(15);
  static const int Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, state_),
  };
  Friend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Friend_descriptor_,
      Friend::internal_default_instance(),
      Friend_offsets_,
      -1,
      -1,
      -1,
      sizeof(Friend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, _internal_metadata_));
  TFriendsAdd_descriptor_ = file->message_type(16);
  static const int TFriendsAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsAdd, friends_),
  };
  TFriendsAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendsAdd_descriptor_,
      TFriendsAdd::internal_default_instance(),
      TFriendsAdd_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendsAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsAdd, _internal_metadata_));
  TFriendsAdd_FriendsAdd_descriptor_ = TFriendsAdd_descriptor_->nested_type(0);
  static const int TFriendsAdd_FriendsAdd_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TFriendsAdd_FriendsAdd_default_oneof_instance_, user_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TFriendsAdd_FriendsAdd_default_oneof_instance_, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsAdd_FriendsAdd, id_),
  };
  TFriendsAdd_FriendsAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendsAdd_FriendsAdd_descriptor_,
      TFriendsAdd_FriendsAdd::internal_default_instance(),
      TFriendsAdd_FriendsAdd_offsets_,
      -1,
      -1,
      -1,
      TFriendsAdd_FriendsAdd_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsAdd_FriendsAdd, _oneof_case_[0]),
      sizeof(TFriendsAdd_FriendsAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsAdd_FriendsAdd, _internal_metadata_));
  TFriendsRemove_descriptor_ = file->message_type(17);
  static const int TFriendsRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsRemove, user_ids_),
  };
  TFriendsRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendsRemove_descriptor_,
      TFriendsRemove::internal_default_instance(),
      TFriendsRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendsRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsRemove, _internal_metadata_));
  TFriendsBlock_descriptor_ = file->message_type(18);
  static const int TFriendsBlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsBlock, user_ids_),
  };
  TFriendsBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendsBlock_descriptor_,
      TFriendsBlock::internal_default_instance(),
      TFriendsBlock_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendsBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsBlock, _internal_metadata_));
  TFriendsList_descriptor_ = file->message_type(19);
  static const int TFriendsList_offsets_[1] = {
  };
  TFriendsList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendsList_descriptor_,
      TFriendsList::internal_default_instance(),
      TFriendsList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendsList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsList, _internal_metadata_));
  TFriends_descriptor_ = file->message_type(20);
  static const int TFriends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriends, friends_),
  };
  TFriends_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriends_descriptor_,
      TFriends::internal_default_instance(),
      TFriends_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriends),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriends, _internal_metadata_));
  Group_descriptor_ = file->message_type(21);
  static const int Group_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, private__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, creator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, utc_offset_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, updated_at_),
  };
  Group_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Group_descriptor_,
      Group::internal_default_instance(),
      Group_offsets_,
      -1,
      -1,
      -1,
      sizeof(Group),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _internal_metadata_));
  TGroupsCreate_descriptor_ = file->message_type(22);
  static const int TGroupsCreate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate, groups_),
  };
  TGroupsCreate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsCreate_descriptor_,
      TGroupsCreate::internal_default_instance(),
      TGroupsCreate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsCreate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate, _internal_metadata_));
  TGroupsCreate_GroupCreate_descriptor_ = TGroupsCreate_descriptor_->nested_type(0);
  static const int TGroupsCreate_GroupCreate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate_GroupCreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate_GroupCreate, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate_GroupCreate, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate_GroupCreate, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate_GroupCreate, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate_GroupCreate, private__),
  };
  TGroupsCreate_GroupCreate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsCreate_GroupCreate_descriptor_,
      TGroupsCreate_GroupCreate::internal_default_instance(),
      TGroupsCreate_GroupCreate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsCreate_GroupCreate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsCreate_GroupCreate, _internal_metadata_));
  TGroupsUpdate_descriptor_ = file->message_type(23);
  static const int TGroupsUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate, groups_),
  };
  TGroupsUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsUpdate_descriptor_,
      TGroupsUpdate::internal_default_instance(),
      TGroupsUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate, _internal_metadata_));
  TGroupsUpdate_GroupUpdate_descriptor_ = TGroupsUpdate_descriptor_->nested_type(0);
  static const int TGroupsUpdate_GroupUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, private__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, metadata_),
  };
  TGroupsUpdate_GroupUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsUpdate_GroupUpdate_descriptor_,
      TGroupsUpdate_GroupUpdate::internal_default_instance(),
      TGroupsUpdate_GroupUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsUpdate_GroupUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsUpdate_GroupUpdate, _internal_metadata_));
  TGroupsRemove_descriptor_ = file->message_type(24);
  static const int TGroupsRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsRemove, group_ids_),
  };
  TGroupsRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsRemove_descriptor_,
      TGroupsRemove::internal_default_instance(),
      TGroupsRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsRemove, _internal_metadata_));
  TGroupsSelfList_descriptor_ = file->message_type(25);
  static const int TGroupsSelfList_offsets_[1] = {
  };
  TGroupsSelfList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsSelfList_descriptor_,
      TGroupsSelfList::internal_default_instance(),
      TGroupsSelfList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsSelfList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsSelfList, _internal_metadata_));
  TGroupsFetch_descriptor_ = file->message_type(26);
  static const int TGroupsFetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsFetch, groups_),
  };
  TGroupsFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsFetch_descriptor_,
      TGroupsFetch::internal_default_instance(),
      TGroupsFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsFetch, _internal_metadata_));
  TGroupsFetch_GroupFetch_descriptor_ = TGroupsFetch_descriptor_->nested_type(0);
  static const int TGroupsFetch_GroupFetch_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsFetch_GroupFetch_default_oneof_instance_, group_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsFetch_GroupFetch_default_oneof_instance_, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsFetch_GroupFetch, id_),
  };
  TGroupsFetch_GroupFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsFetch_GroupFetch_descriptor_,
      TGroupsFetch_GroupFetch::internal_default_instance(),
      TGroupsFetch_GroupFetch_offsets_,
      -1,
      -1,
      -1,
      TGroupsFetch_GroupFetch_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsFetch_GroupFetch, _oneof_case_[0]),
      sizeof(TGroupsFetch_GroupFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsFetch_GroupFetch, _internal_metadata_));
  TGroupsList_descriptor_ = file->message_type(27);
  static const int TGroupsList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, page_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, order_by_asc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsList_default_oneof_instance_, lang_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsList_default_oneof_instance_, created_at_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsList_default_oneof_instance_, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, filter_),
  };
  TGroupsList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsList_descriptor_,
      TGroupsList::internal_default_instance(),
      TGroupsList_offsets_,
      -1,
      -1,
      -1,
      TGroupsList_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, _oneof_case_[0]),
      sizeof(TGroupsList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, _internal_metadata_));
  TGroups_descriptor_ = file->message_type(28);
  static const int TGroups_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroups, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroups, cursor_),
  };
  TGroups_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroups_descriptor_,
      TGroups::internal_default_instance(),
      TGroups_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroups),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroups, _internal_metadata_));
  TGroupsSelf_descriptor_ = file->message_type(29);
  static const int TGroupsSelf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsSelf, groups_self_),
  };
  TGroupsSelf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsSelf_descriptor_,
      TGroupsSelf::internal_default_instance(),
      TGroupsSelf_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsSelf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsSelf, _internal_metadata_));
  TGroupsSelf_GroupSelf_descriptor_ = TGroupsSelf_descriptor_->nested_type(0);
  static const int TGroupsSelf_GroupSelf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsSelf_GroupSelf, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsSelf_GroupSelf, state_),
  };
  TGroupsSelf_GroupSelf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsSelf_GroupSelf_descriptor_,
      TGroupsSelf_GroupSelf::internal_default_instance(),
      TGroupsSelf_GroupSelf_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsSelf_GroupSelf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsSelf_GroupSelf, _internal_metadata_));
  GroupUser_descriptor_ = file->message_type(30);
  static const int GroupUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUser, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUser, state_),
  };
  GroupUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupUser_descriptor_,
      GroupUser::internal_default_instance(),
      GroupUser_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUser, _internal_metadata_));
  TGroupUsersList_descriptor_ = file->message_type(31);
  static const int TGroupUsersList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersList, group_id_),
  };
  TGroupUsersList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersList_descriptor_,
      TGroupUsersList::internal_default_instance(),
      TGroupUsersList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersList, _internal_metadata_));
  TGroupUsers_descriptor_ = file->message_type(32);
  static const int TGroupUsers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsers, users_),
  };
  TGroupUsers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsers_descriptor_,
      TGroupUsers::internal_default_instance(),
      TGroupUsers_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsers, _internal_metadata_));
  TGroupsJoin_descriptor_ = file->message_type(33);
  static const int TGroupsJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsJoin, group_ids_),
  };
  TGroupsJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsJoin_descriptor_,
      TGroupsJoin::internal_default_instance(),
      TGroupsJoin_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsJoin, _internal_metadata_));
  TGroupsLeave_descriptor_ = file->message_type(34);
  static const int TGroupsLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsLeave, group_ids_),
  };
  TGroupsLeave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsLeave_descriptor_,
      TGroupsLeave::internal_default_instance(),
      TGroupsLeave_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsLeave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsLeave, _internal_metadata_));
  TGroupUsersAdd_descriptor_ = file->message_type(35);
  static const int TGroupUsersAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersAdd, group_users_),
  };
  TGroupUsersAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersAdd_descriptor_,
      TGroupUsersAdd::internal_default_instance(),
      TGroupUsersAdd_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersAdd, _internal_metadata_));
  TGroupUsersAdd_GroupUserAdd_descriptor_ = TGroupUsersAdd_descriptor_->nested_type(0);
  static const int TGroupUsersAdd_GroupUserAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersAdd_GroupUserAdd, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersAdd_GroupUserAdd, user_id_),
  };
  TGroupUsersAdd_GroupUserAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersAdd_GroupUserAdd_descriptor_,
      TGroupUsersAdd_GroupUserAdd::internal_default_instance(),
      TGroupUsersAdd_GroupUserAdd_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersAdd_GroupUserAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersAdd_GroupUserAdd, _internal_metadata_));
  TGroupUsersKick_descriptor_ = file->message_type(36);
  static const int TGroupUsersKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersKick, group_users_),
  };
  TGroupUsersKick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersKick_descriptor_,
      TGroupUsersKick::internal_default_instance(),
      TGroupUsersKick_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersKick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersKick, _internal_metadata_));
  TGroupUsersKick_GroupUserKick_descriptor_ = TGroupUsersKick_descriptor_->nested_type(0);
  static const int TGroupUsersKick_GroupUserKick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersKick_GroupUserKick, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersKick_GroupUserKick, user_id_),
  };
  TGroupUsersKick_GroupUserKick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersKick_GroupUserKick_descriptor_,
      TGroupUsersKick_GroupUserKick::internal_default_instance(),
      TGroupUsersKick_GroupUserKick_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersKick_GroupUserKick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersKick_GroupUserKick, _internal_metadata_));
  TGroupUsersPromote_descriptor_ = file->message_type(37);
  static const int TGroupUsersPromote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersPromote, group_users_),
  };
  TGroupUsersPromote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersPromote_descriptor_,
      TGroupUsersPromote::internal_default_instance(),
      TGroupUsersPromote_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersPromote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersPromote, _internal_metadata_));
  TGroupUsersPromote_GroupUserPromote_descriptor_ = TGroupUsersPromote_descriptor_->nested_type(0);
  static const int TGroupUsersPromote_GroupUserPromote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersPromote_GroupUserPromote, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersPromote_GroupUserPromote, user_id_),
  };
  TGroupUsersPromote_GroupUserPromote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersPromote_GroupUserPromote_descriptor_,
      TGroupUsersPromote_GroupUserPromote::internal_default_instance(),
      TGroupUsersPromote_GroupUserPromote_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersPromote_GroupUserPromote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersPromote_GroupUserPromote, _internal_metadata_));
  TopicId_descriptor_ = file->message_type(38);
  static const int TopicId_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicId_default_oneof_instance_, dm_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicId_default_oneof_instance_, room_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicId_default_oneof_instance_, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicId, id_),
  };
  TopicId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicId_descriptor_,
      TopicId::internal_default_instance(),
      TopicId_offsets_,
      -1,
      -1,
      -1,
      TopicId_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicId, _oneof_case_[0]),
      sizeof(TopicId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicId, _internal_metadata_));
  UserPresence_descriptor_ = file->message_type(39);
  static const int UserPresence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPresence, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPresence, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPresence, handle_),
  };
  UserPresence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserPresence_descriptor_,
      UserPresence::internal_default_instance(),
      UserPresence_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserPresence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPresence, _internal_metadata_));
  TTopicsJoin_descriptor_ = file->message_type(40);
  static const int TTopicsJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicsJoin, joins_),
  };
  TTopicsJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicsJoin_descriptor_,
      TTopicsJoin::internal_default_instance(),
      TTopicsJoin_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicsJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicsJoin, _internal_metadata_));
  TTopicsJoin_TopicJoin_descriptor_ = TTopicsJoin_descriptor_->nested_type(0);
  static const int TTopicsJoin_TopicJoin_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicsJoin_TopicJoin_default_oneof_instance_, user_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicsJoin_TopicJoin_default_oneof_instance_, room_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicsJoin_TopicJoin_default_oneof_instance_, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicsJoin_TopicJoin, id_),
  };
  TTopicsJoin_TopicJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicsJoin_TopicJoin_descriptor_,
      TTopicsJoin_TopicJoin::internal_default_instance(),
      TTopicsJoin_TopicJoin_offsets_,
      -1,
      -1,
      -1,
      TTopicsJoin_TopicJoin_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicsJoin_TopicJoin, _oneof_case_[0]),
      sizeof(TTopicsJoin_TopicJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicsJoin_TopicJoin, _internal_metadata_));
  TTopics_descriptor_ = file->message_type(41);
  static const int TTopics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopics, topics_),
  };
  TTopics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopics_descriptor_,
      TTopics::internal_default_instance(),
      TTopics_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopics, _internal_metadata_));
  TTopics_Topic_descriptor_ = TTopics_descriptor_->nested_type(0);
  static const int TTopics_Topic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopics_Topic, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopics_Topic, presences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopics_Topic, self_),
  };
  TTopics_Topic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopics_Topic_descriptor_,
      TTopics_Topic::internal_default_instance(),
      TTopics_Topic_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopics_Topic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopics_Topic, _internal_metadata_));
  TTopicsLeave_descriptor_ = file->message_type(42);
  static const int TTopicsLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicsLeave, topics_),
  };
  TTopicsLeave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicsLeave_descriptor_,
      TTopicsLeave::internal_default_instance(),
      TTopicsLeave_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicsLeave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicsLeave, _internal_metadata_));
  TTopicMessageSend_descriptor_ = file->message_type(43);
  static const int TTopicMessageSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageSend, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageSend, data_),
  };
  TTopicMessageSend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessageSend_descriptor_,
      TTopicMessageSend::internal_default_instance(),
      TTopicMessageSend_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicMessageSend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageSend, _internal_metadata_));
  TTopicMessageAck_descriptor_ = file->message_type(44);
  static const int TTopicMessageAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, expires_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, handle_),
  };
  TTopicMessageAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessageAck_descriptor_,
      TTopicMessageAck::internal_default_instance(),
      TTopicMessageAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicMessageAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, _internal_metadata_));
  TopicMessage_descriptor_ = file->message_type(45);
  static const int TopicMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, expires_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, data_),
  };
  TopicMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicMessage_descriptor_,
      TopicMessage::internal_default_instance(),
      TopicMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, _internal_metadata_));
  TTopicMessagesList_descriptor_ = file->message_type(46);
  static const int TTopicMessagesList_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicMessagesList_default_oneof_instance_, user_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicMessagesList_default_oneof_instance_, room_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicMessagesList_default_oneof_instance_, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, id_),
  };
  TTopicMessagesList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessagesList_descriptor_,
      TTopicMessagesList::internal_default_instance(),
      TTopicMessagesList_offsets_,
      -1,
      -1,
      -1,
      TTopicMessagesList_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, _oneof_case_[0]),
      sizeof(TTopicMessagesList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, _internal_metadata_));
  TTopicMessages_descriptor_ = file->message_type(47);
  static const int TTopicMessages_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessages, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessages, cursor_),
  };
  TTopicMessages_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessages_descriptor_,
      TTopicMessages::internal_default_instance(),
      TTopicMessages_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicMessages),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessages, _internal_metadata_));
  TopicPresence_descriptor_ = file->message_type(48);
  static const int TopicPresence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, joins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, leaves_),
  };
  TopicPresence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicPresence_descriptor_,
      TopicPresence::internal_default_instance(),
      TopicPresence_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicPresence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, _internal_metadata_));
  PropertyPair_descriptor_ = file->message_type(49);
  static const int PropertyPair_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyPair, key_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PropertyPair_default_oneof_instance_, stringset_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PropertyPair_default_oneof_instance_, boolvalue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PropertyPair_default_oneof_instance_, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyPair, value_),
  };
  PropertyPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropertyPair_descriptor_,
      PropertyPair::internal_default_instance(),
      PropertyPair_offsets_,
      -1,
      -1,
      -1,
      PropertyPair_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyPair, _oneof_case_[0]),
      sizeof(PropertyPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyPair, _internal_metadata_));
  PropertyPair_StringSet_descriptor_ = PropertyPair_descriptor_->nested_type(0);
  static const int PropertyPair_StringSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyPair_StringSet, values_),
  };
  PropertyPair_StringSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropertyPair_StringSet_descriptor_,
      PropertyPair_StringSet::internal_default_instance(),
      PropertyPair_StringSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(PropertyPair_StringSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyPair_StringSet, _internal_metadata_));
  MatchmakeFilter_descriptor_ = file->message_type(50);
  static const int MatchmakeFilter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter, name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MatchmakeFilter_default_oneof_instance_, term_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MatchmakeFilter_default_oneof_instance_, range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MatchmakeFilter_default_oneof_instance_, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter, value_),
  };
  MatchmakeFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchmakeFilter_descriptor_,
      MatchmakeFilter::internal_default_instance(),
      MatchmakeFilter_offsets_,
      -1,
      -1,
      -1,
      MatchmakeFilter_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter, _oneof_case_[0]),
      sizeof(MatchmakeFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter, _internal_metadata_));
  MatchmakeFilter_TermFilter_descriptor_ = MatchmakeFilter_descriptor_->nested_type(0);
  static const int MatchmakeFilter_TermFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter_TermFilter, terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter_TermFilter, matchallterms_),
  };
  MatchmakeFilter_TermFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchmakeFilter_TermFilter_descriptor_,
      MatchmakeFilter_TermFilter::internal_default_instance(),
      MatchmakeFilter_TermFilter_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchmakeFilter_TermFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter_TermFilter, _internal_metadata_));
  MatchmakeFilter_RangeFilter_descriptor_ = MatchmakeFilter_descriptor_->nested_type(1);
  static const int MatchmakeFilter_RangeFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter_RangeFilter, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter_RangeFilter, upper_bound_),
  };
  MatchmakeFilter_RangeFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchmakeFilter_RangeFilter_descriptor_,
      MatchmakeFilter_RangeFilter::internal_default_instance(),
      MatchmakeFilter_RangeFilter_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchmakeFilter_RangeFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeFilter_RangeFilter, _internal_metadata_));
  TMatchmakeAdd_descriptor_ = file->message_type(51);
  static const int TMatchmakeAdd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeAdd, required_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeAdd, filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeAdd, properties_),
  };
  TMatchmakeAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchmakeAdd_descriptor_,
      TMatchmakeAdd::internal_default_instance(),
      TMatchmakeAdd_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchmakeAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeAdd, _internal_metadata_));
  TMatchmakeTicket_descriptor_ = file->message_type(52);
  static const int TMatchmakeTicket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeTicket, ticket_),
  };
  TMatchmakeTicket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchmakeTicket_descriptor_,
      TMatchmakeTicket::internal_default_instance(),
      TMatchmakeTicket_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchmakeTicket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeTicket, _internal_metadata_));
  TMatchmakeRemove_descriptor_ = file->message_type(53);
  static const int TMatchmakeRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeRemove, ticket_),
  };
  TMatchmakeRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchmakeRemove_descriptor_,
      TMatchmakeRemove::internal_default_instance(),
      TMatchmakeRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchmakeRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchmakeRemove, _internal_metadata_));
  MatchmakeMatched_descriptor_ = file->message_type(54);
  static const int MatchmakeMatched_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched, presences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched, properties_),
  };
  MatchmakeMatched_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchmakeMatched_descriptor_,
      MatchmakeMatched::internal_default_instance(),
      MatchmakeMatched_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchmakeMatched),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched, _internal_metadata_));
  MatchmakeMatched_UserProperty_descriptor_ = MatchmakeMatched_descriptor_->nested_type(0);
  static const int MatchmakeMatched_UserProperty_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched_UserProperty, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched_UserProperty, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched_UserProperty, filters_),
  };
  MatchmakeMatched_UserProperty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchmakeMatched_UserProperty_descriptor_,
      MatchmakeMatched_UserProperty::internal_default_instance(),
      MatchmakeMatched_UserProperty_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchmakeMatched_UserProperty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchmakeMatched_UserProperty, _internal_metadata_));
  Match_descriptor_ = file->message_type(55);
  static const int Match_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, presences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, self_),
  };
  Match_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Match_descriptor_,
      Match::internal_default_instance(),
      Match_offsets_,
      -1,
      -1,
      -1,
      sizeof(Match),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _internal_metadata_));
  MatchPresence_descriptor_ = file->message_type(56);
  static const int MatchPresence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, joins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, leaves_),
  };
  MatchPresence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchPresence_descriptor_,
      MatchPresence::internal_default_instance(),
      MatchPresence_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchPresence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, _internal_metadata_));
  TMatchCreate_descriptor_ = file->message_type(57);
  static const int TMatchCreate_offsets_[1] = {
  };
  TMatchCreate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchCreate_descriptor_,
      TMatchCreate::internal_default_instance(),
      TMatchCreate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchCreate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchCreate, _internal_metadata_));
  TMatch_descriptor_ = file->message_type(58);
  static const int TMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatch, match_),
  };
  TMatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatch_descriptor_,
      TMatch::internal_default_instance(),
      TMatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatch, _internal_metadata_));
  TMatchesJoin_descriptor_ = file->message_type(59);
  static const int TMatchesJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchesJoin, matches_),
  };
  TMatchesJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchesJoin_descriptor_,
      TMatchesJoin::internal_default_instance(),
      TMatchesJoin_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchesJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchesJoin, _internal_metadata_));
  TMatchesJoin_MatchJoin_descriptor_ = TMatchesJoin_descriptor_->nested_type(0);
  static const int TMatchesJoin_MatchJoin_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TMatchesJoin_MatchJoin_default_oneof_instance_, match_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TMatchesJoin_MatchJoin_default_oneof_instance_, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchesJoin_MatchJoin, id_),
  };
  TMatchesJoin_MatchJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchesJoin_MatchJoin_descriptor_,
      TMatchesJoin_MatchJoin::internal_default_instance(),
      TMatchesJoin_MatchJoin_offsets_,
      -1,
      -1,
      -1,
      TMatchesJoin_MatchJoin_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchesJoin_MatchJoin, _oneof_case_[0]),
      sizeof(TMatchesJoin_MatchJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchesJoin_MatchJoin, _internal_metadata_));
  TMatches_descriptor_ = file->message_type(60);
  static const int TMatches_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatches, matches_),
  };
  TMatches_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatches_descriptor_,
      TMatches::internal_default_instance(),
      TMatches_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatches),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatches, _internal_metadata_));
  MatchDataSend_descriptor_ = file->message_type(61);
  static const int MatchDataSend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataSend, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataSend, op_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataSend, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataSend, presences_),
  };
  MatchDataSend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchDataSend_descriptor_,
      MatchDataSend::internal_default_instance(),
      MatchDataSend_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchDataSend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataSend, _internal_metadata_));
  MatchData_descriptor_ = file->message_type(62);
  static const int MatchData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, presence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, op_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, data_),
  };
  MatchData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchData_descriptor_,
      MatchData::internal_default_instance(),
      MatchData_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, _internal_metadata_));
  TMatchesLeave_descriptor_ = file->message_type(63);
  static const int TMatchesLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchesLeave, match_ids_),
  };
  TMatchesLeave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchesLeave_descriptor_,
      TMatchesLeave::internal_default_instance(),
      TMatchesLeave_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchesLeave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchesLeave, _internal_metadata_));
  TStorageList_descriptor_ = file->message_type(64);
  static const int TStorageList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageList, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageList, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageList, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageList, cursor_),
  };
  TStorageList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageList_descriptor_,
      TStorageList::internal_default_instance(),
      TStorageList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageList, _internal_metadata_));
  TStorageFetch_descriptor_ = file->message_type(65);
  static const int TStorageFetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch, keys_),
  };
  TStorageFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageFetch_descriptor_,
      TStorageFetch::internal_default_instance(),
      TStorageFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch, _internal_metadata_));
  TStorageFetch_StorageKey_descriptor_ = TStorageFetch_descriptor_->nested_type(0);
  static const int TStorageFetch_StorageKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, user_id_),
  };
  TStorageFetch_StorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageFetch_StorageKey_descriptor_,
      TStorageFetch_StorageKey::internal_default_instance(),
      TStorageFetch_StorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageFetch_StorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, _internal_metadata_));
  TStorageData_descriptor_ = file->message_type(66);
  static const int TStorageData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData, cursor_),
  };
  TStorageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageData_descriptor_,
      TStorageData::internal_default_instance(),
      TStorageData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData, _internal_metadata_));
  TStorageData_StorageData_descriptor_ = TStorageData_descriptor_->nested_type(0);
  static const int TStorageData_StorageData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, permission_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, permission_write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, expires_at_),
  };
  TStorageData_StorageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageData_StorageData_descriptor_,
      TStorageData_StorageData::internal_default_instance(),
      TStorageData_StorageData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageData_StorageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, _internal_metadata_));
  TStorageWrite_descriptor_ = file->message_type(67);
  static const int TStorageWrite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite, data_),
  };
  TStorageWrite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageWrite_descriptor_,
      TStorageWrite::internal_default_instance(),
      TStorageWrite_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageWrite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite, _internal_metadata_));
  TStorageWrite_StorageData_descriptor_ = TStorageWrite_descriptor_->nested_type(0);
  static const int TStorageWrite_StorageData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, permission_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, permission_write_),
  };
  TStorageWrite_StorageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageWrite_StorageData_descriptor_,
      TStorageWrite_StorageData::internal_default_instance(),
      TStorageWrite_StorageData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageWrite_StorageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, _internal_metadata_));
  TStorageUpdate_descriptor_ = file->message_type(68);
  static const int TStorageUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate, updates_),
  };
  TStorageUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageUpdate_descriptor_,
      TStorageUpdate::internal_default_instance(),
      TStorageUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate, _internal_metadata_));
  TStorageUpdate_StorageUpdate_descriptor_ = TStorageUpdate_descriptor_->nested_type(0);
  static const int TStorageUpdate_StorageUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate, permission_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate, permission_write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate, ops_),
  };
  TStorageUpdate_StorageUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageUpdate_StorageUpdate_descriptor_,
      TStorageUpdate_StorageUpdate::internal_default_instance(),
      TStorageUpdate_StorageUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageUpdate_StorageUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate, _internal_metadata_));
  TStorageUpdate_StorageUpdate_UpdateOp_descriptor_ = TStorageUpdate_StorageUpdate_descriptor_->nested_type(0);
  static const int TStorageUpdate_StorageUpdate_UpdateOp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, conditional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, assert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, ops_),
  };
  TStorageUpdate_StorageUpdate_UpdateOp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageUpdate_StorageUpdate_UpdateOp_descriptor_,
      TStorageUpdate_StorageUpdate_UpdateOp::internal_default_instance(),
      TStorageUpdate_StorageUpdate_UpdateOp_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageUpdate_StorageUpdate_UpdateOp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, _internal_metadata_));
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor_ = TStorageUpdate_StorageUpdate_UpdateOp_descriptor_->enum_type(0);
  TStorageUpdate_StorageUpdate_StorageKey_descriptor_ = TStorageUpdate_StorageUpdate_descriptor_->nested_type(1);
  static const int TStorageUpdate_StorageUpdate_StorageKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_StorageKey, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_StorageKey, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_StorageKey, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_StorageKey, version_),
  };
  TStorageUpdate_StorageUpdate_StorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageUpdate_StorageUpdate_StorageKey_descriptor_,
      TStorageUpdate_StorageUpdate_StorageKey::internal_default_instance(),
      TStorageUpdate_StorageUpdate_StorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageUpdate_StorageUpdate_StorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageUpdate_StorageUpdate_StorageKey, _internal_metadata_));
  TStorageKeys_descriptor_ = file->message_type(69);
  static const int TStorageKeys_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKeys, keys_),
  };
  TStorageKeys_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageKeys_descriptor_,
      TStorageKeys::internal_default_instance(),
      TStorageKeys_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageKeys),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKeys, _internal_metadata_));
  TStorageKeys_StorageKey_descriptor_ = TStorageKeys_descriptor_->nested_type(0);
  static const int TStorageKeys_StorageKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKeys_StorageKey, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKeys_StorageKey, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKeys_StorageKey, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKeys_StorageKey, version_),
  };
  TStorageKeys_StorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageKeys_StorageKey_descriptor_,
      TStorageKeys_StorageKey::internal_default_instance(),
      TStorageKeys_StorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageKeys_StorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKeys_StorageKey, _internal_metadata_));
  TStorageRemove_descriptor_ = file->message_type(70);
  static const int TStorageRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove, keys_),
  };
  TStorageRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageRemove_descriptor_,
      TStorageRemove::internal_default_instance(),
      TStorageRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove, _internal_metadata_));
  TStorageRemove_StorageKey_descriptor_ = TStorageRemove_descriptor_->nested_type(0);
  static const int TStorageRemove_StorageKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, version_),
  };
  TStorageRemove_StorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageRemove_StorageKey_descriptor_,
      TStorageRemove_StorageKey::internal_default_instance(),
      TStorageRemove_StorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageRemove_StorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, _internal_metadata_));
  Leaderboard_descriptor_ = file->message_type(71);
  static const int Leaderboard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, authoritative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, reset_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, metadata_),
  };
  Leaderboard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Leaderboard_descriptor_,
      Leaderboard::internal_default_instance(),
      Leaderboard_offsets_,
      -1,
      -1,
      -1,
      sizeof(Leaderboard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, _internal_metadata_));
  LeaderboardRecord_descriptor_ = file->message_type(72);
  static const int LeaderboardRecord_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, leaderboard_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, num_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, ranked_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, expires_at_),
  };
  LeaderboardRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeaderboardRecord_descriptor_,
      LeaderboardRecord::internal_default_instance(),
      LeaderboardRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(LeaderboardRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardRecord, _internal_metadata_));
  TLeaderboardsList_descriptor_ = file->message_type(73);
  static const int TLeaderboardsList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardsList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardsList, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardsList, filter_leaderboard_id_),
  };
  TLeaderboardsList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboardsList_descriptor_,
      TLeaderboardsList::internal_default_instance(),
      TLeaderboardsList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TLeaderboardsList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardsList, _internal_metadata_));
  TLeaderboards_descriptor_ = file->message_type(74);
  static const int TLeaderboards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboards, leaderboards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboards, cursor_),
  };
  TLeaderboards_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboards_descriptor_,
      TLeaderboards::internal_default_instance(),
      TLeaderboards_offsets_,
      -1,
      -1,
      -1,
      sizeof(TLeaderboards),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboards, _internal_metadata_));
  TLeaderboardRecordsWrite_descriptor_ = file->message_type(75);
  static const int TLeaderboardRecordsWrite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite, records_),
  };
  TLeaderboardRecordsWrite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboardRecordsWrite_descriptor_,
      TLeaderboardRecordsWrite::internal_default_instance(),
      TLeaderboardRecordsWrite_offsets_,
      -1,
      -1,
      -1,
      sizeof(TLeaderboardRecordsWrite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite, _internal_metadata_));
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_descriptor_ = TLeaderboardRecordsWrite_descriptor_->nested_type(0);
  static const int TLeaderboardRecordsWrite_LeaderboardRecordWrite_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite, leaderboard_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_, incr_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_, decr_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_, set_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_, best_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite, op_),
  };
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboardRecordsWrite_LeaderboardRecordWrite_descriptor_,
      TLeaderboardRecordsWrite_LeaderboardRecordWrite::internal_default_instance(),
      TLeaderboardRecordsWrite_LeaderboardRecordWrite_offsets_,
      -1,
      -1,
      -1,
      TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite, _oneof_case_[0]),
      sizeof(TLeaderboardRecordsWrite_LeaderboardRecordWrite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsWrite_LeaderboardRecordWrite, _internal_metadata_));
  TLeaderboardRecordsFetch_descriptor_ = file->message_type(76);
  static const int TLeaderboardRecordsFetch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsFetch, leaderboard_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsFetch, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsFetch, cursor_),
  };
  TLeaderboardRecordsFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboardRecordsFetch_descriptor_,
      TLeaderboardRecordsFetch::internal_default_instance(),
      TLeaderboardRecordsFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TLeaderboardRecordsFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsFetch, _internal_metadata_));
  TLeaderboardRecordsList_descriptor_ = file->message_type(77);
  static const int TLeaderboardRecordsList_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList, leaderboard_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsList_default_oneof_instance_, owner_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsList_default_oneof_instance_, owner_ids_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsList_default_oneof_instance_, lang_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsList_default_oneof_instance_, location_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLeaderboardRecordsList_default_oneof_instance_, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList, filter_),
  };
  TLeaderboardRecordsList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboardRecordsList_descriptor_,
      TLeaderboardRecordsList::internal_default_instance(),
      TLeaderboardRecordsList_offsets_,
      -1,
      -1,
      -1,
      TLeaderboardRecordsList_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList, _oneof_case_[0]),
      sizeof(TLeaderboardRecordsList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList, _internal_metadata_));
  TLeaderboardRecordsList_Owners_descriptor_ = TLeaderboardRecordsList_descriptor_->nested_type(0);
  static const int TLeaderboardRecordsList_Owners_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList_Owners, owner_ids_),
  };
  TLeaderboardRecordsList_Owners_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboardRecordsList_Owners_descriptor_,
      TLeaderboardRecordsList_Owners::internal_default_instance(),
      TLeaderboardRecordsList_Owners_offsets_,
      -1,
      -1,
      -1,
      sizeof(TLeaderboardRecordsList_Owners),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecordsList_Owners, _internal_metadata_));
  TLeaderboardRecords_descriptor_ = file->message_type(78);
  static const int TLeaderboardRecords_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecords, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecords, cursor_),
  };
  TLeaderboardRecords_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLeaderboardRecords_descriptor_,
      TLeaderboardRecords::internal_default_instance(),
      TLeaderboardRecords_offsets_,
      -1,
      -1,
      -1,
      sizeof(TLeaderboardRecords),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLeaderboardRecords, _internal_metadata_));
  TRpc_descriptor_ = file->message_type(79);
  static const int TRpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRpc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRpc, payload_),
  };
  TRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TRpc_descriptor_,
      TRpc::internal_default_instance(),
      TRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(TRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRpc, _internal_metadata_));
  TPurchaseValidation_descriptor_ = file->message_type(80);
  static const int TPurchaseValidation_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TPurchaseValidation_default_oneof_instance_, apple_purchase_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TPurchaseValidation_default_oneof_instance_, google_purchase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation, id_),
  };
  TPurchaseValidation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TPurchaseValidation_descriptor_,
      TPurchaseValidation::internal_default_instance(),
      TPurchaseValidation_offsets_,
      -1,
      -1,
      -1,
      TPurchaseValidation_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation, _oneof_case_[0]),
      sizeof(TPurchaseValidation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation, _internal_metadata_));
  TPurchaseValidation_ApplePurchase_descriptor_ = TPurchaseValidation_descriptor_->nested_type(0);
  static const int TPurchaseValidation_ApplePurchase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation_ApplePurchase, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation_ApplePurchase, receipt_data_),
  };
  TPurchaseValidation_ApplePurchase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TPurchaseValidation_ApplePurchase_descriptor_,
      TPurchaseValidation_ApplePurchase::internal_default_instance(),
      TPurchaseValidation_ApplePurchase_offsets_,
      -1,
      -1,
      -1,
      sizeof(TPurchaseValidation_ApplePurchase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation_ApplePurchase, _internal_metadata_));
  TPurchaseValidation_GooglePurchase_descriptor_ = TPurchaseValidation_descriptor_->nested_type(1);
  static const int TPurchaseValidation_GooglePurchase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation_GooglePurchase, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation_GooglePurchase, product_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation_GooglePurchase, purchase_token_),
  };
  TPurchaseValidation_GooglePurchase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TPurchaseValidation_GooglePurchase_descriptor_,
      TPurchaseValidation_GooglePurchase::internal_default_instance(),
      TPurchaseValidation_GooglePurchase_offsets_,
      -1,
      -1,
      -1,
      sizeof(TPurchaseValidation_GooglePurchase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseValidation_GooglePurchase, _internal_metadata_));
  TPurchaseRecord_descriptor_ = file->message_type(81);
  static const int TPurchaseRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseRecord, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseRecord, seen_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseRecord, purchase_provider_reachable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseRecord, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseRecord, data_),
  };
  TPurchaseRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TPurchaseRecord_descriptor_,
      TPurchaseRecord::internal_default_instance(),
      TPurchaseRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(TPurchaseRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPurchaseRecord, _internal_metadata_));
  Notification_descriptor_ = file->message_type(82);
  static const int Notification_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, expires_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, persistent_),
  };
  Notification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Notification_descriptor_,
      Notification::internal_default_instance(),
      Notification_offsets_,
      -1,
      -1,
      -1,
      sizeof(Notification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, _internal_metadata_));
  Notifications_descriptor_ = file->message_type(83);
  static const int Notifications_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notifications, notifications_),
  };
  Notifications_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Notifications_descriptor_,
      Notifications::internal_default_instance(),
      Notifications_offsets_,
      -1,
      -1,
      -1,
      sizeof(Notifications),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notifications, _internal_metadata_));
  TNotificationsList_descriptor_ = file->message_type(84);
  static const int TNotificationsList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotificationsList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotificationsList, resumable_cursor_),
  };
  TNotificationsList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TNotificationsList_descriptor_,
      TNotificationsList::internal_default_instance(),
      TNotificationsList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TNotificationsList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotificationsList, _internal_metadata_));
  TNotifications_descriptor_ = file->message_type(85);
  static const int TNotifications_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotifications, notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotifications, resumable_cursor_),
  };
  TNotifications_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TNotifications_descriptor_,
      TNotifications::internal_default_instance(),
      TNotifications_offsets_,
      -1,
      -1,
      -1,
      sizeof(TNotifications),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotifications, _internal_metadata_));
  TNotificationsRemove_descriptor_ = file->message_type(86);
  static const int TNotificationsRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotificationsRemove, notification_ids_),
  };
  TNotificationsRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TNotificationsRemove_descriptor_,
      TNotificationsRemove::internal_default_instance(),
      TNotificationsRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TNotificationsRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNotificationsRemove, _internal_metadata_));
  StoragePermissionRead_descriptor_ = file->enum_type(0);
  StoragePermissionWrite_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Heartbeat_descriptor_, Heartbeat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, Error::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateRequest_descriptor_, AuthenticateRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateRequest_Email_descriptor_, AuthenticateRequest_Email::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateRequest_GameCenter_descriptor_, AuthenticateRequest_GameCenter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateResponse_descriptor_, AuthenticateResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateResponse_Session_descriptor_, AuthenticateResponse_Session::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateResponse_Error_descriptor_, AuthenticateResponse_Error::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Envelope_descriptor_, Envelope::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Logout_descriptor_, Logout::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLink_descriptor_, TLink::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TUnlink_descriptor_, TUnlink::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, User::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Self_descriptor_, Self::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSelfFetch_descriptor_, TSelfFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSelf_descriptor_, TSelf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSelfUpdate_descriptor_, TSelfUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TUsersFetch_descriptor_, TUsersFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TUsersFetch_UsersFetch_descriptor_, TUsersFetch_UsersFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TUsers_descriptor_, TUsers::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Friend_descriptor_, Friend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendsAdd_descriptor_, TFriendsAdd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendsAdd_FriendsAdd_descriptor_, TFriendsAdd_FriendsAdd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendsRemove_descriptor_, TFriendsRemove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendsBlock_descriptor_, TFriendsBlock::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendsList_descriptor_, TFriendsList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriends_descriptor_, TFriends::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Group_descriptor_, Group::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsCreate_descriptor_, TGroupsCreate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsCreate_GroupCreate_descriptor_, TGroupsCreate_GroupCreate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsUpdate_descriptor_, TGroupsUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsUpdate_GroupUpdate_descriptor_, TGroupsUpdate_GroupUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsRemove_descriptor_, TGroupsRemove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsSelfList_descriptor_, TGroupsSelfList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsFetch_descriptor_, TGroupsFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsFetch_GroupFetch_descriptor_, TGroupsFetch_GroupFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsList_descriptor_, TGroupsList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroups_descriptor_, TGroups::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsSelf_descriptor_, TGroupsSelf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsSelf_GroupSelf_descriptor_, TGroupsSelf_GroupSelf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupUser_descriptor_, GroupUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersList_descriptor_, TGroupUsersList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsers_descriptor_, TGroupUsers::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsJoin_descriptor_, TGroupsJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsLeave_descriptor_, TGroupsLeave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersAdd_descriptor_, TGroupUsersAdd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersAdd_GroupUserAdd_descriptor_, TGroupUsersAdd_GroupUserAdd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersKick_descriptor_, TGroupUsersKick::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersKick_GroupUserKick_descriptor_, TGroupUsersKick_GroupUserKick::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersPromote_descriptor_, TGroupUsersPromote::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersPromote_GroupUserPromote_descriptor_, TGroupUsersPromote_GroupUserPromote::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicId_descriptor_, TopicId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserPresence_descriptor_, UserPresence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicsJoin_descriptor_, TTopicsJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicsJoin_TopicJoin_descriptor_, TTopicsJoin_TopicJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopics_descriptor_, TTopics::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopics_Topic_descriptor_, TTopics_Topic::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicsLeave_descriptor_, TTopicsLeave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessageSend_descriptor_, TTopicMessageSend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessageAck_descriptor_, TTopicMessageAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicMessage_descriptor_, TopicMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessagesList_descriptor_, TTopicMessagesList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessages_descriptor_, TTopicMessages::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicPresence_descriptor_, TopicPresence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropertyPair_descriptor_, PropertyPair::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropertyPair_StringSet_descriptor_, PropertyPair_StringSet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchmakeFilter_descriptor_, MatchmakeFilter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchmakeFilter_TermFilter_descriptor_, MatchmakeFilter_TermFilter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchmakeFilter_RangeFilter_descriptor_, MatchmakeFilter_RangeFilter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchmakeAdd_descriptor_, TMatchmakeAdd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchmakeTicket_descriptor_, TMatchmakeTicket::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchmakeRemove_descriptor_, TMatchmakeRemove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchmakeMatched_descriptor_, MatchmakeMatched::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchmakeMatched_UserProperty_descriptor_, MatchmakeMatched_UserProperty::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Match_descriptor_, Match::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchPresence_descriptor_, MatchPresence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchCreate_descriptor_, TMatchCreate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatch_descriptor_, TMatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchesJoin_descriptor_, TMatchesJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchesJoin_MatchJoin_descriptor_, TMatchesJoin_MatchJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatches_descriptor_, TMatches::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchDataSend_descriptor_, MatchDataSend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchData_descriptor_, MatchData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchesLeave_descriptor_, TMatchesLeave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageList_descriptor_, TStorageList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageFetch_descriptor_, TStorageFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageFetch_StorageKey_descriptor_, TStorageFetch_StorageKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageData_descriptor_, TStorageData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageData_StorageData_descriptor_, TStorageData_StorageData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageWrite_descriptor_, TStorageWrite::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageWrite_StorageData_descriptor_, TStorageWrite_StorageData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageUpdate_descriptor_, TStorageUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageUpdate_StorageUpdate_descriptor_, TStorageUpdate_StorageUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageUpdate_StorageUpdate_UpdateOp_descriptor_, TStorageUpdate_StorageUpdate_UpdateOp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageUpdate_StorageUpdate_StorageKey_descriptor_, TStorageUpdate_StorageUpdate_StorageKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageKeys_descriptor_, TStorageKeys::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageKeys_StorageKey_descriptor_, TStorageKeys_StorageKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageRemove_descriptor_, TStorageRemove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageRemove_StorageKey_descriptor_, TStorageRemove_StorageKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Leaderboard_descriptor_, Leaderboard::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeaderboardRecord_descriptor_, LeaderboardRecord::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboardsList_descriptor_, TLeaderboardsList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboards_descriptor_, TLeaderboards::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboardRecordsWrite_descriptor_, TLeaderboardRecordsWrite::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboardRecordsWrite_LeaderboardRecordWrite_descriptor_, TLeaderboardRecordsWrite_LeaderboardRecordWrite::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboardRecordsFetch_descriptor_, TLeaderboardRecordsFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboardRecordsList_descriptor_, TLeaderboardRecordsList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboardRecordsList_Owners_descriptor_, TLeaderboardRecordsList_Owners::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLeaderboardRecords_descriptor_, TLeaderboardRecords::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TRpc_descriptor_, TRpc::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TPurchaseValidation_descriptor_, TPurchaseValidation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TPurchaseValidation_ApplePurchase_descriptor_, TPurchaseValidation_ApplePurchase::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TPurchaseValidation_GooglePurchase_descriptor_, TPurchaseValidation_GooglePurchase::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TPurchaseRecord_descriptor_, TPurchaseRecord::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Notification_descriptor_, Notification::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Notifications_descriptor_, Notifications::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TNotificationsList_descriptor_, TNotificationsList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TNotifications_descriptor_, TNotifications::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TNotificationsRemove_descriptor_, TNotificationsRemove::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2eproto() {
  Heartbeat_default_instance_.Shutdown();
  delete Heartbeat_reflection_;
  Error_default_instance_.Shutdown();
  delete Error_reflection_;
  AuthenticateRequest_default_instance_.Shutdown();
  delete AuthenticateRequest_default_oneof_instance_;
  delete AuthenticateRequest_reflection_;
  AuthenticateRequest_Email_default_instance_.Shutdown();
  delete AuthenticateRequest_Email_reflection_;
  AuthenticateRequest_GameCenter_default_instance_.Shutdown();
  delete AuthenticateRequest_GameCenter_reflection_;
  AuthenticateResponse_default_instance_.Shutdown();
  delete AuthenticateResponse_default_oneof_instance_;
  delete AuthenticateResponse_reflection_;
  AuthenticateResponse_Session_default_instance_.Shutdown();
  delete AuthenticateResponse_Session_reflection_;
  AuthenticateResponse_Error_default_instance_.Shutdown();
  delete AuthenticateResponse_Error_reflection_;
  Envelope_default_instance_.Shutdown();
  delete Envelope_default_oneof_instance_;
  delete Envelope_reflection_;
  Logout_default_instance_.Shutdown();
  delete Logout_reflection_;
  TLink_default_instance_.Shutdown();
  delete TLink_default_oneof_instance_;
  delete TLink_reflection_;
  TUnlink_default_instance_.Shutdown();
  delete TUnlink_default_oneof_instance_;
  delete TUnlink_reflection_;
  User_default_instance_.Shutdown();
  delete User_reflection_;
  Self_default_instance_.Shutdown();
  delete Self_reflection_;
  TSelfFetch_default_instance_.Shutdown();
  delete TSelfFetch_reflection_;
  TSelf_default_instance_.Shutdown();
  delete TSelf_reflection_;
  TSelfUpdate_default_instance_.Shutdown();
  delete TSelfUpdate_reflection_;
  TUsersFetch_default_instance_.Shutdown();
  delete TUsersFetch_reflection_;
  TUsersFetch_UsersFetch_default_instance_.Shutdown();
  delete TUsersFetch_UsersFetch_default_oneof_instance_;
  delete TUsersFetch_UsersFetch_reflection_;
  TUsers_default_instance_.Shutdown();
  delete TUsers_reflection_;
  Friend_default_instance_.Shutdown();
  delete Friend_reflection_;
  TFriendsAdd_default_instance_.Shutdown();
  delete TFriendsAdd_reflection_;
  TFriendsAdd_FriendsAdd_default_instance_.Shutdown();
  delete TFriendsAdd_FriendsAdd_default_oneof_instance_;
  delete TFriendsAdd_FriendsAdd_reflection_;
  TFriendsRemove_default_instance_.Shutdown();
  delete TFriendsRemove_reflection_;
  TFriendsBlock_default_instance_.Shutdown();
  delete TFriendsBlock_reflection_;
  TFriendsList_default_instance_.Shutdown();
  delete TFriendsList_reflection_;
  TFriends_default_instance_.Shutdown();
  delete TFriends_reflection_;
  Group_default_instance_.Shutdown();
  delete Group_reflection_;
  TGroupsCreate_default_instance_.Shutdown();
  delete TGroupsCreate_reflection_;
  TGroupsCreate_GroupCreate_default_instance_.Shutdown();
  delete TGroupsCreate_GroupCreate_reflection_;
  TGroupsUpdate_default_instance_.Shutdown();
  delete TGroupsUpdate_reflection_;
  TGroupsUpdate_GroupUpdate_default_instance_.Shutdown();
  delete TGroupsUpdate_GroupUpdate_reflection_;
  TGroupsRemove_default_instance_.Shutdown();
  delete TGroupsRemove_reflection_;
  TGroupsSelfList_default_instance_.Shutdown();
  delete TGroupsSelfList_reflection_;
  TGroupsFetch_default_instance_.Shutdown();
  delete TGroupsFetch_reflection_;
  TGroupsFetch_GroupFetch_default_instance_.Shutdown();
  delete TGroupsFetch_GroupFetch_default_oneof_instance_;
  delete TGroupsFetch_GroupFetch_reflection_;
  TGroupsList_default_instance_.Shutdown();
  delete TGroupsList_default_oneof_instance_;
  delete TGroupsList_reflection_;
  TGroups_default_instance_.Shutdown();
  delete TGroups_reflection_;
  TGroupsSelf_default_instance_.Shutdown();
  delete TGroupsSelf_reflection_;
  TGroupsSelf_GroupSelf_default_instance_.Shutdown();
  delete TGroupsSelf_GroupSelf_reflection_;
  GroupUser_default_instance_.Shutdown();
  delete GroupUser_reflection_;
  TGroupUsersList_default_instance_.Shutdown();
  delete TGroupUsersList_reflection_;
  TGroupUsers_default_instance_.Shutdown();
  delete TGroupUsers_reflection_;
  TGroupsJoin_default_instance_.Shutdown();
  delete TGroupsJoin_reflection_;
  TGroupsLeave_default_instance_.Shutdown();
  delete TGroupsLeave_reflection_;
  TGroupUsersAdd_default_instance_.Shutdown();
  delete TGroupUsersAdd_reflection_;
  TGroupUsersAdd_GroupUserAdd_default_instance_.Shutdown();
  delete TGroupUsersAdd_GroupUserAdd_reflection_;
  TGroupUsersKick_default_instance_.Shutdown();
  delete TGroupUsersKick_reflection_;
  TGroupUsersKick_GroupUserKick_default_instance_.Shutdown();
  delete TGroupUsersKick_GroupUserKick_reflection_;
  TGroupUsersPromote_default_instance_.Shutdown();
  delete TGroupUsersPromote_reflection_;
  TGroupUsersPromote_GroupUserPromote_default_instance_.Shutdown();
  delete TGroupUsersPromote_GroupUserPromote_reflection_;
  TopicId_default_instance_.Shutdown();
  delete TopicId_default_oneof_instance_;
  delete TopicId_reflection_;
  UserPresence_default_instance_.Shutdown();
  delete UserPresence_reflection_;
  TTopicsJoin_default_instance_.Shutdown();
  delete TTopicsJoin_reflection_;
  TTopicsJoin_TopicJoin_default_instance_.Shutdown();
  delete TTopicsJoin_TopicJoin_default_oneof_instance_;
  delete TTopicsJoin_TopicJoin_reflection_;
  TTopics_default_instance_.Shutdown();
  delete TTopics_reflection_;
  TTopics_Topic_default_instance_.Shutdown();
  delete TTopics_Topic_reflection_;
  TTopicsLeave_default_instance_.Shutdown();
  delete TTopicsLeave_reflection_;
  TTopicMessageSend_default_instance_.Shutdown();
  delete TTopicMessageSend_reflection_;
  TTopicMessageAck_default_instance_.Shutdown();
  delete TTopicMessageAck_reflection_;
  TopicMessage_default_instance_.Shutdown();
  delete TopicMessage_reflection_;
  TTopicMessagesList_default_instance_.Shutdown();
  delete TTopicMessagesList_default_oneof_instance_;
  delete TTopicMessagesList_reflection_;
  TTopicMessages_default_instance_.Shutdown();
  delete TTopicMessages_reflection_;
  TopicPresence_default_instance_.Shutdown();
  delete TopicPresence_reflection_;
  PropertyPair_default_instance_.Shutdown();
  delete PropertyPair_default_oneof_instance_;
  delete PropertyPair_reflection_;
  PropertyPair_StringSet_default_instance_.Shutdown();
  delete PropertyPair_StringSet_reflection_;
  MatchmakeFilter_default_instance_.Shutdown();
  delete MatchmakeFilter_default_oneof_instance_;
  delete MatchmakeFilter_reflection_;
  MatchmakeFilter_TermFilter_default_instance_.Shutdown();
  delete MatchmakeFilter_TermFilter_reflection_;
  MatchmakeFilter_RangeFilter_default_instance_.Shutdown();
  delete MatchmakeFilter_RangeFilter_reflection_;
  TMatchmakeAdd_default_instance_.Shutdown();
  delete TMatchmakeAdd_reflection_;
  TMatchmakeTicket_default_instance_.Shutdown();
  delete TMatchmakeTicket_reflection_;
  TMatchmakeRemove_default_instance_.Shutdown();
  delete TMatchmakeRemove_reflection_;
  MatchmakeMatched_default_instance_.Shutdown();
  delete MatchmakeMatched_reflection_;
  MatchmakeMatched_UserProperty_default_instance_.Shutdown();
  delete MatchmakeMatched_UserProperty_reflection_;
  Match_default_instance_.Shutdown();
  delete Match_reflection_;
  MatchPresence_default_instance_.Shutdown();
  delete MatchPresence_reflection_;
  TMatchCreate_default_instance_.Shutdown();
  delete TMatchCreate_reflection_;
  TMatch_default_instance_.Shutdown();
  delete TMatch_reflection_;
  TMatchesJoin_default_instance_.Shutdown();
  delete TMatchesJoin_reflection_;
  TMatchesJoin_MatchJoin_default_instance_.Shutdown();
  delete TMatchesJoin_MatchJoin_default_oneof_instance_;
  delete TMatchesJoin_MatchJoin_reflection_;
  TMatches_default_instance_.Shutdown();
  delete TMatches_reflection_;
  MatchDataSend_default_instance_.Shutdown();
  delete MatchDataSend_reflection_;
  MatchData_default_instance_.Shutdown();
  delete MatchData_reflection_;
  TMatchesLeave_default_instance_.Shutdown();
  delete TMatchesLeave_reflection_;
  TStorageList_default_instance_.Shutdown();
  delete TStorageList_reflection_;
  TStorageFetch_default_instance_.Shutdown();
  delete TStorageFetch_reflection_;
  TStorageFetch_StorageKey_default_instance_.Shutdown();
  delete TStorageFetch_StorageKey_reflection_;
  TStorageData_default_instance_.Shutdown();
  delete TStorageData_reflection_;
  TStorageData_StorageData_default_instance_.Shutdown();
  delete TStorageData_StorageData_reflection_;
  TStorageWrite_default_instance_.Shutdown();
  delete TStorageWrite_reflection_;
  TStorageWrite_StorageData_default_instance_.Shutdown();
  delete TStorageWrite_StorageData_reflection_;
  TStorageUpdate_default_instance_.Shutdown();
  delete TStorageUpdate_reflection_;
  TStorageUpdate_StorageUpdate_default_instance_.Shutdown();
  delete TStorageUpdate_StorageUpdate_reflection_;
  TStorageUpdate_StorageUpdate_UpdateOp_default_instance_.Shutdown();
  delete TStorageUpdate_StorageUpdate_UpdateOp_reflection_;
  TStorageUpdate_StorageUpdate_StorageKey_default_instance_.Shutdown();
  delete TStorageUpdate_StorageUpdate_StorageKey_reflection_;
  TStorageKeys_default_instance_.Shutdown();
  delete TStorageKeys_reflection_;
  TStorageKeys_StorageKey_default_instance_.Shutdown();
  delete TStorageKeys_StorageKey_reflection_;
  TStorageRemove_default_instance_.Shutdown();
  delete TStorageRemove_reflection_;
  TStorageRemove_StorageKey_default_instance_.Shutdown();
  delete TStorageRemove_StorageKey_reflection_;
  Leaderboard_default_instance_.Shutdown();
  delete Leaderboard_reflection_;
  LeaderboardRecord_default_instance_.Shutdown();
  delete LeaderboardRecord_reflection_;
  TLeaderboardsList_default_instance_.Shutdown();
  delete TLeaderboardsList_reflection_;
  TLeaderboards_default_instance_.Shutdown();
  delete TLeaderboards_reflection_;
  TLeaderboardRecordsWrite_default_instance_.Shutdown();
  delete TLeaderboardRecordsWrite_reflection_;
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_.Shutdown();
  delete TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_;
  delete TLeaderboardRecordsWrite_LeaderboardRecordWrite_reflection_;
  TLeaderboardRecordsFetch_default_instance_.Shutdown();
  delete TLeaderboardRecordsFetch_reflection_;
  TLeaderboardRecordsList_default_instance_.Shutdown();
  delete TLeaderboardRecordsList_default_oneof_instance_;
  delete TLeaderboardRecordsList_reflection_;
  TLeaderboardRecordsList_Owners_default_instance_.Shutdown();
  delete TLeaderboardRecordsList_Owners_reflection_;
  TLeaderboardRecords_default_instance_.Shutdown();
  delete TLeaderboardRecords_reflection_;
  TRpc_default_instance_.Shutdown();
  delete TRpc_reflection_;
  TPurchaseValidation_default_instance_.Shutdown();
  delete TPurchaseValidation_default_oneof_instance_;
  delete TPurchaseValidation_reflection_;
  TPurchaseValidation_ApplePurchase_default_instance_.Shutdown();
  delete TPurchaseValidation_ApplePurchase_reflection_;
  TPurchaseValidation_GooglePurchase_default_instance_.Shutdown();
  delete TPurchaseValidation_GooglePurchase_reflection_;
  TPurchaseRecord_default_instance_.Shutdown();
  delete TPurchaseRecord_reflection_;
  Notification_default_instance_.Shutdown();
  delete Notification_reflection_;
  Notifications_default_instance_.Shutdown();
  delete Notifications_reflection_;
  TNotificationsList_default_instance_.Shutdown();
  delete TNotificationsList_reflection_;
  TNotifications_default_instance_.Shutdown();
  delete TNotifications_reflection_;
  TNotificationsRemove_default_instance_.Shutdown();
  delete TNotificationsRemove_reflection_;
}

void protobuf_InitDefaults_api_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Heartbeat_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Error_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateRequest_default_instance_.DefaultConstruct();
  AuthenticateRequest_default_oneof_instance_ = new AuthenticateRequestOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateRequest_Email_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateRequest_GameCenter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateResponse_default_instance_.DefaultConstruct();
  AuthenticateResponse_default_oneof_instance_ = new AuthenticateResponseOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateResponse_Session_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateResponse_Error_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Envelope_default_instance_.DefaultConstruct();
  Envelope_default_oneof_instance_ = new EnvelopeOneofInstance();
  Logout_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TLink_default_instance_.DefaultConstruct();
  TLink_default_oneof_instance_ = new TLinkOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TUnlink_default_instance_.DefaultConstruct();
  TUnlink_default_oneof_instance_ = new TUnlinkOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  User_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Self_default_instance_.DefaultConstruct();
  TSelfFetch_default_instance_.DefaultConstruct();
  TSelf_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TSelfUpdate_default_instance_.DefaultConstruct();
  TUsersFetch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TUsersFetch_UsersFetch_default_instance_.DefaultConstruct();
  TUsersFetch_UsersFetch_default_oneof_instance_ = new TUsersFetch_UsersFetchOneofInstance();
  TUsers_default_instance_.DefaultConstruct();
  Friend_default_instance_.DefaultConstruct();
  TFriendsAdd_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TFriendsAdd_FriendsAdd_default_instance_.DefaultConstruct();
  TFriendsAdd_FriendsAdd_default_oneof_instance_ = new TFriendsAdd_FriendsAddOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TFriendsRemove_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TFriendsBlock_default_instance_.DefaultConstruct();
  TFriendsList_default_instance_.DefaultConstruct();
  TFriends_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Group_default_instance_.DefaultConstruct();
  TGroupsCreate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsCreate_GroupCreate_default_instance_.DefaultConstruct();
  TGroupsUpdate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsUpdate_GroupUpdate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsRemove_default_instance_.DefaultConstruct();
  TGroupsSelfList_default_instance_.DefaultConstruct();
  TGroupsFetch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsFetch_GroupFetch_default_instance_.DefaultConstruct();
  TGroupsFetch_GroupFetch_default_oneof_instance_ = new TGroupsFetch_GroupFetchOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsList_default_instance_.DefaultConstruct();
  TGroupsList_default_oneof_instance_ = new TGroupsListOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TGroups_default_instance_.DefaultConstruct();
  TGroupsSelf_default_instance_.DefaultConstruct();
  TGroupsSelf_GroupSelf_default_instance_.DefaultConstruct();
  GroupUser_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUsersList_default_instance_.DefaultConstruct();
  TGroupUsers_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsJoin_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsLeave_default_instance_.DefaultConstruct();
  TGroupUsersAdd_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUsersAdd_GroupUserAdd_default_instance_.DefaultConstruct();
  TGroupUsersKick_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUsersKick_GroupUserKick_default_instance_.DefaultConstruct();
  TGroupUsersPromote_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUsersPromote_GroupUserPromote_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TopicId_default_instance_.DefaultConstruct();
  TopicId_default_oneof_instance_ = new TopicIdOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  UserPresence_default_instance_.DefaultConstruct();
  TTopicsJoin_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicsJoin_TopicJoin_default_instance_.DefaultConstruct();
  TTopicsJoin_TopicJoin_default_oneof_instance_ = new TTopicsJoin_TopicJoinOneofInstance();
  TTopics_default_instance_.DefaultConstruct();
  TTopics_Topic_default_instance_.DefaultConstruct();
  TTopicsLeave_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessageSend_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessageAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TopicMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessagesList_default_instance_.DefaultConstruct();
  TTopicMessagesList_default_oneof_instance_ = new TTopicMessagesListOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessages_default_instance_.DefaultConstruct();
  TopicPresence_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PropertyPair_default_instance_.DefaultConstruct();
  PropertyPair_default_oneof_instance_ = new PropertyPairOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  PropertyPair_StringSet_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchmakeFilter_default_instance_.DefaultConstruct();
  MatchmakeFilter_default_oneof_instance_ = new MatchmakeFilterOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  MatchmakeFilter_TermFilter_default_instance_.DefaultConstruct();
  MatchmakeFilter_RangeFilter_default_instance_.DefaultConstruct();
  TMatchmakeAdd_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatchmakeTicket_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatchmakeRemove_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchmakeMatched_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchmakeMatched_UserProperty_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Match_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchPresence_default_instance_.DefaultConstruct();
  TMatchCreate_default_instance_.DefaultConstruct();
  TMatch_default_instance_.DefaultConstruct();
  TMatchesJoin_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatchesJoin_MatchJoin_default_instance_.DefaultConstruct();
  TMatchesJoin_MatchJoin_default_oneof_instance_ = new TMatchesJoin_MatchJoinOneofInstance();
  TMatches_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchDataSend_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatchesLeave_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageList_default_instance_.DefaultConstruct();
  TStorageFetch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageFetch_StorageKey_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageData_StorageData_default_instance_.DefaultConstruct();
  TStorageWrite_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageWrite_StorageData_default_instance_.DefaultConstruct();
  TStorageUpdate_default_instance_.DefaultConstruct();
  TStorageUpdate_StorageUpdate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageUpdate_StorageUpdate_UpdateOp_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageUpdate_StorageUpdate_StorageKey_default_instance_.DefaultConstruct();
  TStorageKeys_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageKeys_StorageKey_default_instance_.DefaultConstruct();
  TStorageRemove_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageRemove_StorageKey_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Leaderboard_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LeaderboardRecord_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TLeaderboardsList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TLeaderboards_default_instance_.DefaultConstruct();
  TLeaderboardRecordsWrite_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_.DefaultConstruct();
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_ = new TLeaderboardRecordsWrite_LeaderboardRecordWriteOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TLeaderboardRecordsFetch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TLeaderboardRecordsList_default_instance_.DefaultConstruct();
  TLeaderboardRecordsList_default_oneof_instance_ = new TLeaderboardRecordsListOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TLeaderboardRecordsList_Owners_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TLeaderboardRecords_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TRpc_default_instance_.DefaultConstruct();
  TPurchaseValidation_default_instance_.DefaultConstruct();
  TPurchaseValidation_default_oneof_instance_ = new TPurchaseValidationOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TPurchaseValidation_ApplePurchase_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TPurchaseValidation_GooglePurchase_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TPurchaseRecord_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Notification_default_instance_.DefaultConstruct();
  Notifications_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TNotificationsList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TNotifications_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TNotificationsRemove_default_instance_.DefaultConstruct();
  Heartbeat_default_instance_.get_mutable()->InitAsDefaultInstance();
  Error_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateRequest_Email_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateRequest_GameCenter_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateResponse_Session_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateResponse_Error_default_instance_.get_mutable()->InitAsDefaultInstance();
  Envelope_default_instance_.get_mutable()->InitAsDefaultInstance();
  Logout_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLink_default_instance_.get_mutable()->InitAsDefaultInstance();
  TUnlink_default_instance_.get_mutable()->InitAsDefaultInstance();
  User_default_instance_.get_mutable()->InitAsDefaultInstance();
  Self_default_instance_.get_mutable()->InitAsDefaultInstance();
  TSelfFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TSelf_default_instance_.get_mutable()->InitAsDefaultInstance();
  TSelfUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TUsersFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TUsersFetch_UsersFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TUsers_default_instance_.get_mutable()->InitAsDefaultInstance();
  Friend_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendsAdd_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendsAdd_FriendsAdd_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendsRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendsBlock_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendsList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriends_default_instance_.get_mutable()->InitAsDefaultInstance();
  Group_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsCreate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsCreate_GroupCreate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsUpdate_GroupUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsSelfList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsFetch_GroupFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroups_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsSelf_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsSelf_GroupSelf_default_instance_.get_mutable()->InitAsDefaultInstance();
  GroupUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsers_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsLeave_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersAdd_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersAdd_GroupUserAdd_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersKick_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersKick_GroupUserKick_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersPromote_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersPromote_GroupUserPromote_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopicId_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserPresence_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicsJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicsJoin_TopicJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopics_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopics_Topic_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicsLeave_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessageSend_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessageAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopicMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessagesList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessages_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopicPresence_default_instance_.get_mutable()->InitAsDefaultInstance();
  PropertyPair_default_instance_.get_mutable()->InitAsDefaultInstance();
  PropertyPair_StringSet_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchmakeFilter_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchmakeFilter_TermFilter_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchmakeFilter_RangeFilter_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchmakeAdd_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchmakeTicket_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchmakeRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchmakeMatched_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchmakeMatched_UserProperty_default_instance_.get_mutable()->InitAsDefaultInstance();
  Match_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchPresence_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchCreate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchesJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchesJoin_MatchJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatches_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchDataSend_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchesLeave_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageFetch_StorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageData_StorageData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageWrite_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageWrite_StorageData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageUpdate_StorageUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageUpdate_StorageUpdate_UpdateOp_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageUpdate_StorageUpdate_StorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageKeys_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageKeys_StorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageRemove_StorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  Leaderboard_default_instance_.get_mutable()->InitAsDefaultInstance();
  LeaderboardRecord_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboardsList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboards_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboardRecordsWrite_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboardRecordsFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboardRecordsList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboardRecordsList_Owners_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLeaderboardRecords_default_instance_.get_mutable()->InitAsDefaultInstance();
  TRpc_default_instance_.get_mutable()->InitAsDefaultInstance();
  TPurchaseValidation_default_instance_.get_mutable()->InitAsDefaultInstance();
  TPurchaseValidation_ApplePurchase_default_instance_.get_mutable()->InitAsDefaultInstance();
  TPurchaseValidation_GooglePurchase_default_instance_.get_mutable()->InitAsDefaultInstance();
  TPurchaseRecord_default_instance_.get_mutable()->InitAsDefaultInstance();
  Notification_default_instance_.get_mutable()->InitAsDefaultInstance();
  Notifications_default_instance_.get_mutable()->InitAsDefaultInstance();
  TNotificationsList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TNotifications_default_instance_.get_mutable()->InitAsDefaultInstance();
  TNotificationsRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_api_2eproto_once_);
void protobuf_InitDefaults_api_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_api_2eproto_once_,
                 &protobuf_InitDefaults_api_2eproto_impl);
}
void protobuf_AddDesc_api_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_api_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tapi.proto\022\006server\"\036\n\tHeartbeat\022\021\n\ttime"
    "stamp\030\001 \001(\003\"\304\003\n\005Error\022\014\n\004code\030\001 \001(\005\022\017\n\007m"
    "essage\030\002 \001(\t\"\233\003\n\004Code\022\025\n\021RUNTIME_EXCEPTI"
    "ON\020\000\022\030\n\024UNRECOGNIZED_PAYLOAD\020\001\022\023\n\017MISSIN"
    "G_PAYLOAD\020\002\022\r\n\tBAD_INPUT\020\003\022\016\n\nAUTH_ERROR"
    "\020\004\022\022\n\016USER_NOT_FOUND\020\005\022\027\n\023USER_REGISTER_"
    "INUSE\020\006\022\023\n\017USER_LINK_INUSE\020\007\022\"\n\036USER_LIN"
    "K_PROVIDER_UNAVAILABLE\020\010\022\032\n\026USER_UNLINK_"
    "DISALLOWED\020\t\022\025\n\021USER_HANDLE_INUSE\020\n\022\024\n\020G"
    "ROUP_NAME_INUSE\020\013\022\024\n\020GROUP_LAST_ADMIN\020\014\022"
    "\024\n\020STORAGE_REJECTED\020\r\022\023\n\017MATCH_NOT_FOUND"
    "\020\016\022\036\n\032RUNTIME_FUNCTION_NOT_FOUND\020\017\022\036\n\032RU"
    "NTIME_FUNCTION_EXCEPTION\020\020\"\250\003\n\023Authentic"
    "ateRequest\022\023\n\013collationId\030\001 \001(\t\0222\n\005email"
    "\030\002 \001(\0132!.server.AuthenticateRequest.Emai"
    "lH\000\022\022\n\010facebook\030\003 \001(\tH\000\022\020\n\006google\030\004 \001(\tH"
    "\000\022=\n\013game_center\030\005 \001(\0132&.server.Authenti"
    "cateRequest.GameCenterH\000\022\017\n\005steam\030\006 \001(\tH"
    "\000\022\020\n\006device\030\007 \001(\tH\000\022\020\n\006custom\030\010 \001(\tH\000\032(\n"
    "\005Email\022\r\n\005email\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\032"
    "~\n\nGameCenter\022\021\n\tplayer_id\030\001 \001(\t\022\021\n\tbund"
    "le_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\003\022\014\n\004salt\030\004"
    " \001(\t\022\021\n\tsignature\030\005 \001(\t\022\026\n\016public_key_ur"
    "l\030\006 \001(\tB\004\n\002id\"\243\002\n\024AuthenticateResponse\022\024"
    "\n\014collation_id\030\001 \001(\t\0227\n\007session\030\002 \001(\0132$."
    "server.AuthenticateResponse.SessionH\000\0223\n"
    "\005error\030\003 \001(\0132\".server.AuthenticateRespon"
    "se.ErrorH\000\032+\n\007Session\022\r\n\005token\030\001 \001(\t\022\021\n\t"
    "udp_token\030\002 \001(\t\032T\n\005Error\022\014\n\004code\030\001 \001(\005\022\017"
    "\n\007message\030\002 \001(\t\022,\n\007request\030\003 \001(\0132\033.serve"
    "r.AuthenticateRequestB\004\n\002id\"\325\032\n\010Envelope"
    "\022\024\n\014collation_id\030\001 \001(\t\022\036\n\005error\030\002 \001(\0132\r."
    "server.ErrorH\000\022&\n\theartbeat\030\003 \001(\0132\021.serv"
    "er.HeartbeatH\000\022 \n\006logout\030\004 \001(\0132\016.server."
    "LogoutH\000\022\035\n\004link\030\005 \001(\0132\r.server.TLinkH\000\022"
    "!\n\006unlink\030\006 \001(\0132\017.server.TUnlinkH\000\022(\n\nse"
    "lf_fetch\030\007 \001(\0132\022.server.TSelfFetchH\000\022*\n\013"
    "self_update\030\010 \001(\0132\023.server.TSelfUpdateH\000"
    "\022*\n\013users_fetch\030\t \001(\0132\023.server.TUsersFet"
    "chH\000\022\035\n\004self\030\n \001(\0132\r.server.TSelfH\000\022\037\n\005u"
    "sers\030\013 \001(\0132\016.server.TUsersH\000\022*\n\013friends_"
    "add\030\014 \001(\0132\023.server.TFriendsAddH\000\0220\n\016frie"
    "nds_remove\030\r \001(\0132\026.server.TFriendsRemove"
    "H\000\022.\n\rfriends_block\030\016 \001(\0132\025.server.TFrie"
    "ndsBlockH\000\022,\n\014friends_list\030\017 \001(\0132\024.serve"
    "r.TFriendsListH\000\022#\n\007friends\030\020 \001(\0132\020.serv"
    "er.TFriendsH\000\022.\n\rgroups_create\030\021 \001(\0132\025.s"
    "erver.TGroupsCreateH\000\022.\n\rgroups_update\030\022"
    " \001(\0132\025.server.TGroupsUpdateH\000\022.\n\rgroups_"
    "remove\030\023 \001(\0132\025.server.TGroupsRemoveH\000\022,\n"
    "\014groups_fetch\030\024 \001(\0132\024.server.TGroupsFetc"
    "hH\000\022*\n\013groups_list\030\025 \001(\0132\023.server.TGroup"
    "sListH\000\0223\n\020groups_self_list\030\026 \001(\0132\027.serv"
    "er.TGroupsSelfListH\000\0223\n\020group_users_list"
    "\030\027 \001(\0132\027.server.TGroupUsersListH\000\022*\n\013gro"
    "ups_join\030\030 \001(\0132\023.server.TGroupsJoinH\000\022,\n"
    "\014groups_leave\030\031 \001(\0132\024.server.TGroupsLeav"
    "eH\000\0221\n\017group_users_add\030\032 \001(\0132\026.server.TG"
    "roupUsersAddH\000\0223\n\020group_users_kick\030\033 \001(\013"
    "2\027.server.TGroupUsersKickH\000\0229\n\023group_use"
    "rs_promote\030\034 \001(\0132\032.server.TGroupUsersPro"
    "moteH\000\022!\n\006groups\030\035 \001(\0132\017.server.TGroupsH"
    "\000\022*\n\013groups_self\030\036 \001(\0132\023.server.TGroupsS"
    "elfH\000\022*\n\013group_users\030\037 \001(\0132\023.server.TGro"
    "upUsersH\000\022*\n\013topics_join\030  \001(\0132\023.server."
    "TTopicsJoinH\000\022,\n\014topics_leave\030! \001(\0132\024.se"
    "rver.TTopicsLeaveH\000\0227\n\022topic_message_sen"
    "d\030\" \001(\0132\031.server.TTopicMessageSendH\000\0229\n\023"
    "topic_messages_list\030# \001(\0132\032.server.TTopi"
    "cMessagesListH\000\022!\n\006topics\030$ \001(\0132\017.server"
    ".TTopicsH\000\0225\n\021topic_message_ack\030% \001(\0132\030."
    "server.TTopicMessageAckH\000\022-\n\rtopic_messa"
    "ge\030& \001(\0132\024.server.TopicMessageH\000\0220\n\016topi"
    "c_messages\030\' \001(\0132\026.server.TTopicMessages"
    "H\000\022/\n\016topic_presence\030( \001(\0132\025.server.Topi"
    "cPresenceH\000\022,\n\014match_create\030) \001(\0132\024.serv"
    "er.TMatchCreateH\000\022,\n\014matches_join\030* \001(\0132"
    "\024.server.TMatchesJoinH\000\022.\n\rmatches_leave"
    "\030+ \001(\0132\025.server.TMatchesLeaveH\000\0220\n\017match"
    "_data_send\030, \001(\0132\025.server.MatchDataSendH"
    "\000\022\037\n\005match\030- \001(\0132\016.server.TMatchH\000\022#\n\007ma"
    "tches\030. \001(\0132\020.server.TMatchesH\000\022\'\n\nmatch"
    "_data\030/ \001(\0132\021.server.MatchDataH\000\022/\n\016matc"
    "h_presence\0300 \001(\0132\025.server.MatchPresenceH"
    "\000\022,\n\014storage_list\0301 \001(\0132\024.server.TStorag"
    "eListH\000\022.\n\rstorage_fetch\0302 \001(\0132\025.server."
    "TStorageFetchH\000\022.\n\rstorage_write\0303 \001(\0132\025"
    ".server.TStorageWriteH\000\0220\n\016storage_updat"
    "e\0304 \001(\0132\026.server.TStorageUpdateH\000\0220\n\016sto"
    "rage_remove\0305 \001(\0132\026.server.TStorageRemov"
    "eH\000\022,\n\014storage_data\0306 \001(\0132\024.server.TStor"
    "ageDataH\000\022,\n\014storage_keys\0307 \001(\0132\024.server"
    ".TStorageKeysH\000\0226\n\021leaderboards_list\0308 \001"
    "(\0132\031.server.TLeaderboardsListH\000\022E\n\031leade"
    "rboard_records_write\0309 \001(\0132 .server.TLea"
    "derboardRecordsWriteH\000\022E\n\031leaderboard_re"
    "cords_fetch\030: \001(\0132 .server.TLeaderboardR"
    "ecordsFetchH\000\022C\n\030leaderboard_records_lis"
    "t\030; \001(\0132\037.server.TLeaderboardRecordsList"
    "H\000\022-\n\014leaderboards\030< \001(\0132\025.server.TLeade"
    "rboardsH\000\022:\n\023leaderboard_records\030= \001(\0132\033"
    ".server.TLeaderboardRecordsH\000\022.\n\rmatchma"
    "ke_add\030> \001(\0132\025.server.TMatchmakeAddH\000\0224\n"
    "\020matchmake_remove\030\? \001(\0132\030.server.TMatchm"
    "akeRemoveH\000\0224\n\020matchmake_ticket\030@ \001(\0132\030."
    "server.TMatchmakeTicketH\000\0225\n\021matchmake_m"
    "atched\030A \001(\0132\030.server.MatchmakeMatchedH\000"
    "\022\033\n\003rpc\030B \001(\0132\014.server.TRpcH\000\022/\n\010purchas"
    "e\030C \001(\0132\033.server.TPurchaseValidationH\000\0222"
    "\n\017purchase_record\030D \001(\0132\027.server.TPurcha"
    "seRecordH\000\0228\n\022notifications_list\030E \001(\0132\032"
    ".server.TNotificationsListH\000\022<\n\024notifica"
    "tions_remove\030F \001(\0132\034.server.TNotificatio"
    "nsRemoveH\000\022/\n\rnotifications\030G \001(\0132\026.serv"
    "er.TNotificationsH\000\0223\n\022live_notification"
    "s\030H \001(\0132\025.server.NotificationsH\000B\t\n\007payl"
    "oad\"\010\n\006Logout\"\333\001\n\005TLink\0222\n\005email\030\001 \001(\0132!"
    ".server.AuthenticateRequest.EmailH\000\022\022\n\010f"
    "acebook\030\002 \001(\tH\000\022\020\n\006google\030\003 \001(\tH\000\022=\n\013gam"
    "e_center\030\004 \001(\0132&.server.AuthenticateRequ"
    "est.GameCenterH\000\022\017\n\005steam\030\005 \001(\tH\000\022\020\n\006dev"
    "ice\030\006 \001(\tH\000\022\020\n\006custom\030\007 \001(\tH\000B\004\n\002id\"\222\001\n\007"
    "TUnlink\022\017\n\005email\030\001 \001(\tH\000\022\022\n\010facebook\030\002 \001"
    "(\tH\000\022\020\n\006google\030\003 \001(\tH\000\022\025\n\013game_center\030\004 "
    "\001(\tH\000\022\017\n\005steam\030\005 \001(\tH\000\022\020\n\006device\030\006 \001(\tH\000"
    "\022\020\n\006custom\030\007 \001(\tH\000B\004\n\002id\"\314\001\n\004User\022\n\n\002id\030"
    "\001 \001(\t\022\016\n\006handle\030\002 \001(\t\022\020\n\010fullname\030\003 \001(\t\022"
    "\022\n\navatar_url\030\004 \001(\t\022\014\n\004lang\030\005 \001(\t\022\020\n\010loc"
    "ation\030\006 \001(\t\022\020\n\010timezone\030\007 \001(\t\022\020\n\010metadat"
    "a\030\010 \001(\t\022\022\n\ncreated_at\030\t \001(\003\022\022\n\nupdated_a"
    "t\030\n \001(\003\022\026\n\016last_online_at\030\013 \001(\003\"\273\001\n\004Self"
    "\022\032\n\004user\030\001 \001(\0132\014.server.User\022\020\n\010verified"
    "\030\002 \001(\010\022\r\n\005email\030\003 \001(\t\022\022\n\ndevice_ids\030\004 \003("
    "\t\022\023\n\013facebook_id\030\005 \001(\t\022\021\n\tgoogle_id\030\006 \001("
    "\t\022\025\n\rgamecenter_id\030\007 \001(\t\022\020\n\010steam_id\030\010 \001"
    "(\t\022\021\n\tcustom_id\030\t \001(\t\"\014\n\nTSelfFetch\"#\n\005T"
    "Self\022\032\n\004self\030\001 \001(\0132\014.server.Self\"\207\001\n\013TSe"
    "lfUpdate\022\016\n\006handle\030\001 \001(\t\022\020\n\010fullname\030\002 \001"
    "(\t\022\020\n\010timezone\030\003 \001(\t\022\020\n\010location\030\004 \001(\t\022\014"
    "\n\004lang\030\005 \001(\t\022\020\n\010metadata\030\006 \001(\t\022\022\n\navatar"
    "_url\030\007 \001(\t\"u\n\013TUsersFetch\022-\n\005users\030\001 \003(\013"
    "2\036.server.TUsersFetch.UsersFetch\0327\n\nUser"
    "sFetch\022\021\n\007user_id\030\001 \001(\tH\000\022\020\n\006handle\030\002 \001("
    "\tH\000B\004\n\002id\"%\n\006TUsers\022\033\n\005users\030\001 \003(\0132\014.ser"
    "ver.User\"3\n\006Friend\022\032\n\004user\030\001 \001(\0132\014.serve"
    "r.User\022\r\n\005state\030\002 \001(\003\"w\n\013TFriendsAdd\022/\n\007"
    "friends\030\001 \003(\0132\036.server.TFriendsAdd.Frien"
    "dsAdd\0327\n\nFriendsAdd\022\021\n\007user_id\030\001 \001(\tH\000\022\020"
    "\n\006handle\030\002 \001(\tH\000B\004\n\002id\"\"\n\016TFriendsRemove"
    "\022\020\n\010user_ids\030\001 \003(\t\"!\n\rTFriendsBlock\022\020\n\010u"
    "ser_ids\030\001 \003(\t\"\016\n\014TFriendsList\"+\n\010TFriend"
    "s\022\037\n\007friends\030\001 \003(\0132\016.server.Friend\"\335\001\n\005G"
    "roup\022\n\n\002id\030\001 \001(\t\022\017\n\007private\030\002 \001(\010\022\022\n\ncre"
    "ator_id\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\023\n\013descripti"
    "on\030\005 \001(\t\022\022\n\navatar_url\030\006 \001(\t\022\014\n\004lang\030\007 \001"
    "(\t\022\025\n\rutc_offset_ms\030\010 \001(\003\022\020\n\010metadata\030\t "
    "\001(\t\022\r\n\005count\030\n \001(\003\022\022\n\ncreated_at\030\013 \001(\003\022\022"
    "\n\nupdated_at\030\014 \001(\003\"\271\001\n\rTGroupsCreate\0221\n\006"
    "groups\030\001 \003(\0132!.server.TGroupsCreate.Grou"
    "pCreate\032u\n\013GroupCreate\022\014\n\004name\030\001 \001(\t\022\023\n\013"
    "description\030\002 \001(\t\022\022\n\navatar_url\030\003 \001(\t\022\014\n"
    "\004lang\030\004 \001(\t\022\020\n\010metadata\030\005 \001(\t\022\017\n\007private"
    "\030\006 \001(\010\"\314\001\n\rTGroupsUpdate\0221\n\006groups\030\001 \003(\013"
    "2!.server.TGroupsUpdate.GroupUpdate\032\207\001\n\013"
    "GroupUpdate\022\020\n\010group_id\030\001 \001(\t\022\017\n\007private"
    "\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001("
    "\t\022\022\n\navatar_url\030\005 \001(\t\022\014\n\004lang\030\006 \001(\t\022\020\n\010m"
    "etadata\030\007 \001(\t\"\"\n\rTGroupsRemove\022\021\n\tgroup_"
    "ids\030\001 \003(\t\"\021\n\017TGroupsSelfList\"w\n\014TGroupsF"
    "etch\022/\n\006groups\030\001 \003(\0132\037.server.TGroupsFet"
    "ch.GroupFetch\0326\n\nGroupFetch\022\022\n\010group_id\030"
    "\001 \001(\tH\000\022\016\n\004name\030\002 \001(\tH\000B\004\n\002id\"\210\001\n\013TGroup"
    "sList\022\022\n\npage_limit\030\001 \001(\003\022\024\n\014order_by_as"
    "c\030\002 \001(\010\022\016\n\004lang\030\003 \001(\tH\000\022\024\n\ncreated_at\030\004 "
    "\001(\003H\000\022\017\n\005count\030\005 \001(\003H\000\022\016\n\006cursor\030\007 \001(\tB\010"
    "\n\006filter\"8\n\007TGroups\022\035\n\006groups\030\001 \003(\0132\r.se"
    "rver.Group\022\016\n\006cursor\030\002 \001(\t\"{\n\013TGroupsSel"
    "f\0222\n\013groups_self\030\001 \003(\0132\035.server.TGroupsS"
    "elf.GroupSelf\0328\n\tGroupSelf\022\034\n\005group\030\001 \001("
    "\0132\r.server.Group\022\r\n\005state\030\002 \001(\003\"6\n\tGroup"
    "User\022\032\n\004user\030\001 \001(\0132\014.server.User\022\r\n\005stat"
    "e\030\002 \001(\003\"#\n\017TGroupUsersList\022\020\n\010group_id\030\001"
    " \001(\t\"/\n\013TGroupUsers\022 \n\005users\030\001 \003(\0132\021.ser"
    "ver.GroupUser\" \n\013TGroupsJoin\022\021\n\tgroup_id"
    "s\030\001 \003(\t\"!\n\014TGroupsLeave\022\021\n\tgroup_ids\030\001 \003"
    "(\t\"}\n\016TGroupUsersAdd\0228\n\013group_users\030\001 \003("
    "\0132#.server.TGroupUsersAdd.GroupUserAdd\0321"
    "\n\014GroupUserAdd\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user"
    "_id\030\002 \001(\t\"\201\001\n\017TGroupUsersKick\022:\n\013group_u"
    "sers\030\001 \003(\0132%.server.TGroupUsersKick.Grou"
    "pUserKick\0322\n\rGroupUserKick\022\020\n\010group_id\030\001"
    " \001(\t\022\017\n\007user_id\030\002 \001(\t\"\215\001\n\022TGroupUsersPro"
    "mote\022@\n\013group_users\030\001 \003(\0132+.server.TGrou"
    "pUsersPromote.GroupUserPromote\0325\n\020GroupU"
    "serPromote\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user_id\030"
    "\002 \001(\t\"A\n\007TopicId\022\014\n\002dm\030\001 \001(\tH\000\022\016\n\004room\030\002"
    " \001(\tH\000\022\022\n\010group_id\030\003 \001(\tH\000B\004\n\002id\"C\n\014User"
    "Presence\022\017\n\007user_id\030\001 \001(\t\022\022\n\nsession_id\030"
    "\002 \001(\t\022\016\n\006handle\030\003 \001(\t\"\205\001\n\013TTopicsJoin\022,\n"
    "\005joins\030\001 \003(\0132\035.server.TTopicsJoin.TopicJ"
    "oin\032H\n\tTopicJoin\022\021\n\007user_id\030\001 \001(\tH\000\022\016\n\004r"
    "oom\030\002 \001(\tH\000\022\022\n\010group_id\030\003 \001(\tH\000B\004\n\002id\"\246\001"
    "\n\007TTopics\022%\n\006topics\030\001 \003(\0132\025.server.TTopi"
    "cs.Topic\032t\n\005Topic\022\036\n\005topic\030\001 \001(\0132\017.serve"
    "r.TopicId\022\'\n\tpresences\030\002 \003(\0132\024.server.Us"
    "erPresence\022\"\n\004self\030\003 \001(\0132\024.server.UserPr"
    "esence\"/\n\014TTopicsLeave\022\037\n\006topics\030\001 \003(\0132\017"
    ".server.TopicId\"A\n\021TTopicMessageSend\022\036\n\005"
    "topic\030\001 \001(\0132\017.server.TopicId\022\014\n\004data\030\002 \001"
    "(\t\"^\n\020TTopicMessageAck\022\022\n\nmessage_id\030\001 \001"
    "(\t\022\022\n\ncreated_at\030\002 \001(\003\022\022\n\nexpires_at\030\003 \001"
    "(\003\022\016\n\006handle\030\004 \001(\t\"\247\001\n\014TopicMessage\022\036\n\005t"
    "opic\030\001 \001(\0132\017.server.TopicId\022\017\n\007user_id\030\002"
    " \001(\t\022\022\n\nmessage_id\030\003 \001(\t\022\022\n\ncreated_at\030\004"
    " \001(\003\022\022\n\nexpires_at\030\005 \001(\003\022\016\n\006handle\030\006 \001(\t"
    "\022\014\n\004type\030\007 \001(\003\022\014\n\004data\030\010 \001(\t\"\201\001\n\022TTopicM"
    "essagesList\022\021\n\007user_id\030\001 \001(\tH\000\022\016\n\004room\030\002"
    " \001(\tH\000\022\022\n\010group_id\030\003 \001(\tH\000\022\016\n\006cursor\030\004 \001"
    "(\t\022\017\n\007forward\030\005 \001(\010\022\r\n\005limit\030\006 \001(\003B\004\n\002id"
    "\"H\n\016TTopicMessages\022&\n\010messages\030\001 \003(\0132\024.s"
    "erver.TopicMessage\022\016\n\006cursor\030\002 \001(\t\"z\n\rTo"
    "picPresence\022\036\n\005topic\030\001 \001(\0132\017.server.Topi"
    "cId\022#\n\005joins\030\002 \003(\0132\024.server.UserPresence"
    "\022$\n\006leaves\030\003 \003(\0132\024.server.UserPresence\"\237"
    "\001\n\014PropertyPair\022\013\n\003key\030\001 \001(\t\0223\n\tstringSe"
    "t\030\002 \001(\0132\036.server.PropertyPair.StringSetH"
    "\000\022\023\n\tboolValue\030\003 \001(\010H\000\022\022\n\010intValue\030\004 \001(\003"
    "H\000\032\033\n\tStringSet\022\016\n\006values\030\001 \003(\tB\007\n\005value"
    "\"\220\002\n\017MatchmakeFilter\022\014\n\004name\030\001 \001(\t\0222\n\004te"
    "rm\030\002 \001(\0132\".server.MatchmakeFilter.TermFi"
    "lterH\000\0224\n\005range\030\003 \001(\0132#.server.Matchmake"
    "Filter.RangeFilterH\000\022\017\n\005check\030\004 \001(\010H\000\0322\n"
    "\nTermFilter\022\r\n\005terms\030\001 \003(\t\022\025\n\rmatchAllTe"
    "rms\030\002 \001(\010\0327\n\013RangeFilter\022\023\n\013lower_bound\030"
    "\001 \001(\003\022\023\n\013upper_bound\030\002 \001(\003B\007\n\005value\"{\n\rT"
    "MatchmakeAdd\022\026\n\016required_count\030\001 \001(\003\022(\n\007"
    "filters\030\002 \003(\0132\027.server.MatchmakeFilter\022("
    "\n\nproperties\030\003 \003(\0132\024.server.PropertyPair"
    "\"\"\n\020TMatchmakeTicket\022\016\n\006ticket\030\001 \001(\t\"\"\n\020"
    "TMatchmakeRemove\022\016\n\006ticket\030\001 \001(\t\"\256\002\n\020Mat"
    "chmakeMatched\022\016\n\006ticket\030\001 \001(\t\022\r\n\005token\030\002"
    " \001(\t\022\'\n\tpresences\030\003 \003(\0132\024.server.UserPre"
    "sence\022\"\n\004self\030\004 \001(\0132\024.server.UserPresenc"
    "e\0229\n\nproperties\030\005 \003(\0132%.server.Matchmake"
    "Matched.UserProperty\032s\n\014UserProperty\022\017\n\007"
    "user_id\030\001 \001(\t\022(\n\nproperties\030\002 \003(\0132\024.serv"
    "er.PropertyPair\022(\n\007filters\030\003 \003(\0132\027.serve"
    "r.MatchmakeFilter\"f\n\005Match\022\020\n\010match_id\030\001"
    " \001(\t\022\'\n\tpresences\030\002 \003(\0132\024.server.UserPre"
    "sence\022\"\n\004self\030\003 \001(\0132\024.server.UserPresenc"
    "e\"l\n\rMatchPresence\022\020\n\010match_id\030\001 \001(\t\022#\n\005"
    "joins\030\002 \003(\0132\024.server.UserPresence\022$\n\006lea"
    "ves\030\003 \003(\0132\024.server.UserPresence\"\016\n\014TMatc"
    "hCreate\"&\n\006TMatch\022\034\n\005match\030\001 \001(\0132\r.serve"
    "r.Match\"w\n\014TMatchesJoin\022/\n\007matches\030\001 \003(\013"
    "2\036.server.TMatchesJoin.MatchJoin\0326\n\tMatc"
    "hJoin\022\022\n\010match_id\030\001 \001(\tH\000\022\017\n\005token\030\002 \001(\t"
    "H\000B\004\n\002id\"*\n\010TMatches\022\036\n\007matches\030\001 \003(\0132\r."
    "server.Match\"i\n\rMatchDataSend\022\020\n\010match_i"
    "d\030\001 \001(\t\022\017\n\007op_code\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\022\'"
    "\n\tpresences\030\004 \003(\0132\024.server.UserPresence\""
    "d\n\tMatchData\022\020\n\010match_id\030\001 \001(\t\022&\n\010presen"
    "ce\030\002 \001(\0132\024.server.UserPresence\022\017\n\007op_cod"
    "e\030\003 \001(\003\022\014\n\004data\030\004 \001(\014\"\"\n\rTMatchesLeave\022\021"
    "\n\tmatch_ids\030\001 \003(\t\"b\n\014TStorageList\022\017\n\007use"
    "r_id\030\001 \001(\t\022\016\n\006bucket\030\002 \001(\t\022\022\n\ncollection"
    "\030\003 \001(\t\022\r\n\005limit\030\004 \001(\003\022\016\n\006cursor\030\005 \001(\t\"\222\001"
    "\n\rTStorageFetch\022.\n\004keys\030\001 \003(\0132 .server.T"
    "StorageFetch.StorageKey\032Q\n\nStorageKey\022\016\n"
    "\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006rec"
    "ord\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\"\262\002\n\014TStorageD"
    "ata\022.\n\004data\030\001 \003(\0132 .server.TStorageData."
    "StorageData\022\016\n\006cursor\030\002 \001(\t\032\341\001\n\013StorageD"
    "ata\022\016\n\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022"
    "\016\n\006record\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\022\r\n\005valu"
    "e\030\005 \001(\t\022\017\n\007version\030\006 \001(\t\022\027\n\017permission_r"
    "ead\030\007 \001(\005\022\030\n\020permission_write\030\010 \001(\005\022\022\n\nc"
    "reated_at\030\t \001(\003\022\022\n\nupdated_at\030\n \001(\003\022\022\n\ne"
    "xpires_at\030\013 \001(\003\"\327\001\n\rTStorageWrite\022/\n\004dat"
    "a\030\003 \003(\0132!.server.TStorageWrite.StorageDa"
    "ta\032\224\001\n\013StorageData\022\016\n\006bucket\030\001 \001(\t\022\022\n\nco"
    "llection\030\002 \001(\t\022\016\n\006record\030\003 \001(\t\022\r\n\005value\030"
    "\004 \001(\t\022\017\n\007version\030\005 \001(\t\022\027\n\017permission_rea"
    "d\030\006 \001(\005\022\030\n\020permission_write\030\007 \001(\005\"\222\005\n\016TS"
    "torageUpdate\0225\n\007updates\030\001 \003(\0132$.server.T"
    "StorageUpdate.StorageUpdate\032\310\004\n\rStorageU"
    "pdate\022<\n\003key\030\001 \001(\0132/.server.TStorageUpda"
    "te.StorageUpdate.StorageKey\022\027\n\017permissio"
    "n_read\030\002 \001(\005\022\030\n\020permission_write\030\003 \001(\005\022:"
    "\n\003ops\030\004 \003(\0132-.server.TStorageUpdate.Stor"
    "ageUpdate.UpdateOp\032\266\002\n\010UpdateOp\022\n\n\002op\030\001 "
    "\001(\005\022\014\n\004path\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\014\n\004from"
    "\030\004 \001(\t\022\023\n\013conditional\030\005 \001(\010\022\016\n\006assert\030\006 "
    "\001(\003\022:\n\003ops\030\007 \003(\0132-.server.TStorageUpdate"
    ".StorageUpdate.UpdateOp\"\221\001\n\014UpdateOpCode"
    "\022\007\n\003ADD\020\000\022\n\n\006APPEND\020\001\022\010\n\004COPY\020\002\022\010\n\004INCR\020"
    "\003\022\010\n\004INIT\020\004\022\t\n\005MERGE\020\005\022\010\n\004MOVE\020\006\022\t\n\005PATC"
    "H\020\007\022\n\n\006REMOVE\020\010\022\013\n\007REPLACE\020\t\022\010\n\004TEST\020\n\022\013"
    "\n\007COMPARE\020\013\032Q\n\nStorageKey\022\016\n\006bucket\030\001 \001("
    "\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006record\030\003 \001(\t\022\017\n"
    "\007version\030\004 \001(\t\"\220\001\n\014TStorageKeys\022-\n\004keys\030"
    "\001 \003(\0132\037.server.TStorageKeys.StorageKey\032Q"
    "\n\nStorageKey\022\016\n\006bucket\030\001 \001(\t\022\022\n\ncollecti"
    "on\030\002 \001(\t\022\016\n\006record\030\003 \001(\t\022\017\n\007version\030\004 \001("
    "\t\"\224\001\n\016TStorageRemove\022/\n\004keys\030\001 \003(\0132!.ser"
    "ver.TStorageRemove.StorageKey\032Q\n\nStorage"
    "Key\022\016\n\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022"
    "\016\n\006record\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\"\203\001\n\013Lea"
    "derboard\022\n\n\002id\030\001 \001(\t\022\025\n\rauthoritative\030\002 "
    "\001(\010\022\014\n\004sort\030\003 \001(\003\022\r\n\005count\030\004 \001(\003\022\026\n\016rese"
    "t_schedule\030\005 \001(\t\022\020\n\010metadata\030\006 \001(\tJ\004\010\007\020\010"
    "J\004\010\010\020\t\"\374\001\n\021LeaderboardRecord\022\026\n\016leaderbo"
    "ard_id\030\001 \001(\t\022\020\n\010owner_id\030\002 \001(\t\022\016\n\006handle"
    "\030\003 \001(\t\022\014\n\004lang\030\004 \001(\t\022\020\n\010location\030\005 \001(\t\022\020"
    "\n\010timezone\030\006 \001(\t\022\014\n\004rank\030\007 \001(\003\022\r\n\005score\030"
    "\010 \001(\003\022\021\n\tnum_score\030\t \001(\003\022\020\n\010metadata\030\n \001"
    "(\t\022\021\n\tranked_at\030\013 \001(\003\022\022\n\nupdated_at\030\014 \001("
    "\003\022\022\n\nexpires_at\030\r \001(\003\"Q\n\021TLeaderboardsLi"
    "st\022\r\n\005limit\030\001 \001(\003\022\016\n\006cursor\030\002 \001(\t\022\035\n\025fil"
    "ter_leaderboard_id\030\003 \003(\t\"J\n\rTLeaderboard"
    "s\022)\n\014leaderboards\030\001 \003(\0132\023.server.Leaderb"
    "oard\022\016\n\006cursor\030\002 \001(\t\"\222\002\n\030TLeaderboardRec"
    "ordsWrite\022H\n\007records\030\001 \003(\01327.server.TLea"
    "derboardRecordsWrite.LeaderboardRecordWr"
    "ite\032\253\001\n\026LeaderboardRecordWrite\022\026\n\016leader"
    "board_id\030\001 \001(\t\022\016\n\004incr\030\002 \001(\003H\000\022\016\n\004decr\030\003"
    " \001(\003H\000\022\r\n\003set\030\004 \001(\003H\000\022\016\n\004best\030\005 \001(\003H\000\022\020\n"
    "\010location\030\006 \001(\t\022\020\n\010timezone\030\007 \001(\t\022\020\n\010met"
    "adata\030\010 \001(\tB\004\n\002op\"R\n\030TLeaderboardRecords"
    "Fetch\022\027\n\017leaderboard_ids\030\001 \003(\t\022\r\n\005limit\030"
    "\002 \001(\003\022\016\n\006cursor\030\003 \001(\t\"\200\002\n\027TLeaderboardRe"
    "cordsList\022\026\n\016leaderboard_id\030\001 \001(\t\022\022\n\010own"
    "er_id\030\002 \001(\tH\000\022;\n\towner_ids\030\003 \001(\0132&.serve"
    "r.TLeaderboardRecordsList.OwnersH\000\022\016\n\004la"
    "ng\030\004 \001(\tH\000\022\022\n\010location\030\005 \001(\tH\000\022\022\n\010timezo"
    "ne\030\006 \001(\tH\000\022\r\n\005limit\030\007 \001(\003\022\016\n\006cursor\030\010 \001("
    "\t\032\033\n\006Owners\022\021\n\towner_ids\030\001 \003(\tB\010\n\006filter"
    "\"Q\n\023TLeaderboardRecords\022*\n\007records\030\001 \003(\013"
    "2\031.server.LeaderboardRecord\022\016\n\006cursor\030\002 "
    "\001(\t\"#\n\004TRpc\022\n\n\002id\030\001 \001(\t\022\017\n\007payload\030\002 \001(\t"
    "\"\266\002\n\023TPurchaseValidation\022C\n\016apple_purcha"
    "se\030\001 \001(\0132).server.TPurchaseValidation.Ap"
    "plePurchaseH\000\022E\n\017google_purchase\030\002 \001(\0132*"
    ".server.TPurchaseValidation.GooglePurcha"
    "seH\000\0329\n\rApplePurchase\022\022\n\nproduct_id\030\001 \001("
    "\t\022\024\n\014receipt_data\030\002 \001(\t\032R\n\016GooglePurchas"
    "e\022\022\n\nproduct_id\030\001 \001(\t\022\024\n\014product_type\030\002 "
    "\001(\t\022\026\n\016purchase_token\030\003 \001(\tB\004\n\002id\"{\n\017TPu"
    "rchaseRecord\022\017\n\007success\030\001 \001(\010\022\023\n\013seen_be"
    "fore\030\002 \001(\010\022#\n\033purchase_provider_reachabl"
    "e\030\003 \001(\010\022\017\n\007message\030\006 \001(\t\022\014\n\004data\030\005 \001(\t\"\231"
    "\001\n\014Notification\022\n\n\002id\030\001 \001(\t\022\017\n\007subject\030\002"
    " \001(\t\022\017\n\007content\030\003 \001(\t\022\014\n\004code\030\004 \001(\003\022\021\n\ts"
    "ender_id\030\005 \001(\t\022\022\n\ncreated_at\030\006 \001(\003\022\022\n\nex"
    "pires_at\030\007 \001(\003\022\022\n\npersistent\030\010 \001(\010\"<\n\rNo"
    "tifications\022+\n\rnotifications\030\001 \003(\0132\024.ser"
    "ver.Notification\"=\n\022TNotificationsList\022\r"
    "\n\005limit\030\001 \001(\003\022\030\n\020resumable_cursor\030\002 \001(\t\""
    "W\n\016TNotifications\022+\n\rnotifications\030\001 \003(\013"
    "2\024.server.Notification\022\030\n\020resumable_curs"
    "or\030\002 \001(\t\"0\n\024TNotificationsRemove\022\030\n\020noti"
    "fication_ids\030\001 \003(\t*E\n\025StoragePermissionR"
    "ead\022\013\n\007NO_READ\020\000\022\016\n\nOWNER_READ\020\001\022\017\n\013PUBL"
    "IC_READ\020\002*7\n\026StoragePermissionWrite\022\014\n\010N"
    "O_WRITE\020\000\022\017\n\013OWNER_WRITE\020\001B \n\025com.heroic"
    "labs.nakama\252\002\006Nakamab\006proto3", 14628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_api_2eproto_once_);
void protobuf_AddDesc_api_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_api_2eproto_once_,
                 &protobuf_AddDesc_api_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2eproto {
  StaticDescriptorInitializer_api_2eproto() {
    protobuf_AddDesc_api_2eproto();
  }
} static_descriptor_initializer_api_2eproto_;
const ::google::protobuf::EnumDescriptor* StoragePermissionRead_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoragePermissionRead_descriptor_;
}
bool StoragePermissionRead_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StoragePermissionWrite_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoragePermissionWrite_descriptor_;
}
bool StoragePermissionWrite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Heartbeat)
}

void Heartbeat::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:server.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Heartbeat> Heartbeat_default_instance_;

Heartbeat* Heartbeat::New(::google::protobuf::Arena* arena) const {
  Heartbeat* n = new Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Heartbeat)
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Heartbeat)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Heartbeat)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Heartbeat)
  size_t total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Heartbeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Heartbeat)
    UnsafeMergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Heartbeat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Heartbeat::UnsafeMergeFrom(const Heartbeat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Heartbeat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Heartbeat::IsInitialized() const {

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat

// optional int64 timestamp = 1;
void Heartbeat::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:server.Heartbeat.timestamp)
  return timestamp_;
}
void Heartbeat::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:server.Heartbeat.timestamp)
}

inline const Heartbeat* Heartbeat::internal_default_instance() {
  return &Heartbeat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_Code_descriptor_;
}
bool Error_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Error_Code Error::RUNTIME_EXCEPTION;
const Error_Code Error::UNRECOGNIZED_PAYLOAD;
const Error_Code Error::MISSING_PAYLOAD;
const Error_Code Error::BAD_INPUT;
const Error_Code Error::AUTH_ERROR;
const Error_Code Error::USER_NOT_FOUND;
const Error_Code Error::USER_REGISTER_INUSE;
const Error_Code Error::USER_LINK_INUSE;
const Error_Code Error::USER_LINK_PROVIDER_UNAVAILABLE;
const Error_Code Error::USER_UNLINK_DISALLOWED;
const Error_Code Error::USER_HANDLE_INUSE;
const Error_Code Error::GROUP_NAME_INUSE;
const Error_Code Error::GROUP_LAST_ADMIN;
const Error_Code Error::STORAGE_REJECTED;
const Error_Code Error::MATCH_NOT_FOUND;
const Error_Code Error::RUNTIME_FUNCTION_NOT_FOUND;
const Error_Code Error::RUNTIME_FUNCTION_EXCEPTION;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:server.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Error> Error_default_instance_;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Error)
  code_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Error.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Error)
  // optional int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Error)
  // optional int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Error)
  size_t total_size = 0;

  // optional int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Error)
    UnsafeMergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Error::UnsafeMergeFrom(const Error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional int32 code = 1;
void Error::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:server.Error.code)
  return code_;
}
void Error::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:server.Error.code)
}

// optional string message = 2;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:server.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Error.message)
}
void Error::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Error.message)
}
::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:server.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:server.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server.Error.message)
}

inline const Error* Error::internal_default_instance() {
  return &Error_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateRequest_Email::kEmailFieldNumber;
const int AuthenticateRequest_Email::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateRequest_Email::AuthenticateRequest_Email()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateRequest.Email)
}

void AuthenticateRequest_Email::InitAsDefaultInstance() {
}

AuthenticateRequest_Email::AuthenticateRequest_Email(const AuthenticateRequest_Email& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest.Email)
}

void AuthenticateRequest_Email::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthenticateRequest_Email::~AuthenticateRequest_Email() {
  // @@protoc_insertion_point(destructor:server.AuthenticateRequest.Email)
  SharedDtor();
}

void AuthenticateRequest_Email::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest_Email::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateRequest_Email::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateRequest_Email_descriptor_;
}

const AuthenticateRequest_Email& AuthenticateRequest_Email::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest_Email> AuthenticateRequest_Email_default_instance_;

AuthenticateRequest_Email* AuthenticateRequest_Email::New(::google::protobuf::Arena* arena) const {
  AuthenticateRequest_Email* n = new AuthenticateRequest_Email;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRequest_Email::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest.Email)
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthenticateRequest_Email::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateRequest.Email)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.Email.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.Email.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateRequest.Email)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateRequest.Email)
  return false;
#undef DO_
}

void AuthenticateRequest_Email::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateRequest.Email)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateRequest.Email)
}

::google::protobuf::uint8* AuthenticateRequest_Email::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest.Email)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest.Email)
  return target;
}

size_t AuthenticateRequest_Email::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest.Email)
  size_t total_size = 0;

  // optional string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRequest_Email::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest.Email)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateRequest_Email* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateRequest_Email>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest.Email)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest.Email)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateRequest_Email::MergeFrom(const AuthenticateRequest_Email& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest.Email)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateRequest_Email::UnsafeMergeFrom(const AuthenticateRequest_Email& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthenticateRequest_Email::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest.Email)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest_Email::CopyFrom(const AuthenticateRequest_Email& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest.Email)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateRequest_Email::IsInitialized() const {

  return true;
}

void AuthenticateRequest_Email::Swap(AuthenticateRequest_Email* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRequest_Email::InternalSwap(AuthenticateRequest_Email* other) {
  email_.Swap(&other->email_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateRequest_Email::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateRequest_Email_descriptor_;
  metadata.reflection = AuthenticateRequest_Email_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateRequest_GameCenter::kPlayerIdFieldNumber;
const int AuthenticateRequest_GameCenter::kBundleIdFieldNumber;
const int AuthenticateRequest_GameCenter::kTimestampFieldNumber;
const int AuthenticateRequest_GameCenter::kSaltFieldNumber;
const int AuthenticateRequest_GameCenter::kSignatureFieldNumber;
const int AuthenticateRequest_GameCenter::kPublicKeyUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateRequest_GameCenter::AuthenticateRequest_GameCenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateRequest.GameCenter)
}

void AuthenticateRequest_GameCenter::InitAsDefaultInstance() {
}

AuthenticateRequest_GameCenter::AuthenticateRequest_GameCenter(const AuthenticateRequest_GameCenter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest.GameCenter)
}

void AuthenticateRequest_GameCenter::SharedCtor() {
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

AuthenticateRequest_GameCenter::~AuthenticateRequest_GameCenter() {
  // @@protoc_insertion_point(destructor:server.AuthenticateRequest.GameCenter)
  SharedDtor();
}

void AuthenticateRequest_GameCenter::SharedDtor() {
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest_GameCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateRequest_GameCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateRequest_GameCenter_descriptor_;
}

const AuthenticateRequest_GameCenter& AuthenticateRequest_GameCenter::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest_GameCenter> AuthenticateRequest_GameCenter_default_instance_;

AuthenticateRequest_GameCenter* AuthenticateRequest_GameCenter::New(::google::protobuf::Arena* arena) const {
  AuthenticateRequest_GameCenter* n = new AuthenticateRequest_GameCenter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRequest_GameCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest.GameCenter)
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthenticateRequest_GameCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateRequest.GameCenter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), this->player_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.player_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bundle_id;
        break;
      }

      // optional string bundle_id = 2;
      case 2: {
        if (tag == 18) {
         parse_bundle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bundle_id().data(), this->bundle_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.bundle_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_salt;
        break;
      }

      // optional string salt = 4;
      case 4: {
        if (tag == 34) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->salt().data(), this->salt().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.salt"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }

      // optional string signature = 5;
      case 5: {
        if (tag == 42) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_public_key_url;
        break;
      }

      // optional string public_key_url = 6;
      case 6: {
        if (tag == 50) {
         parse_public_key_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key_url().data(), this->public_key_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.public_key_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateRequest.GameCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateRequest.GameCenter)
  return false;
#undef DO_
}

void AuthenticateRequest_GameCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateRequest.GameCenter)
  // optional string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_id(), output);
  }

  // optional string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle_id().data(), this->bundle_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.bundle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bundle_id(), output);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string salt = 4;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->salt(), output);
  }

  // optional string signature = 5;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signature(), output);
  }

  // optional string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_url().data(), this->public_key_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.public_key_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->public_key_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateRequest.GameCenter)
}

::google::protobuf::uint8* AuthenticateRequest_GameCenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest.GameCenter)
  // optional string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // optional string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle_id().data(), this->bundle_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.bundle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bundle_id(), target);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string salt = 4;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->salt(), target);
  }

  // optional string signature = 5;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  // optional string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_url().data(), this->public_key_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.public_key_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->public_key_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest.GameCenter)
  return target;
}

size_t AuthenticateRequest_GameCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest.GameCenter)
  size_t total_size = 0;

  // optional string player_id = 1;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // optional string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bundle_id());
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string salt = 4;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->salt());
  }

  // optional string signature = 5;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // optional string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRequest_GameCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest.GameCenter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateRequest_GameCenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateRequest_GameCenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest.GameCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest.GameCenter)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateRequest_GameCenter::MergeFrom(const AuthenticateRequest_GameCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest.GameCenter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateRequest_GameCenter::UnsafeMergeFrom(const AuthenticateRequest_GameCenter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.bundle_id().size() > 0) {

    bundle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.public_key_url().size() > 0) {

    public_key_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_url_);
  }
}

void AuthenticateRequest_GameCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest.GameCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest_GameCenter::CopyFrom(const AuthenticateRequest_GameCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest.GameCenter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateRequest_GameCenter::IsInitialized() const {

  return true;
}

void AuthenticateRequest_GameCenter::Swap(AuthenticateRequest_GameCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRequest_GameCenter::InternalSwap(AuthenticateRequest_GameCenter* other) {
  player_id_.Swap(&other->player_id_);
  bundle_id_.Swap(&other->bundle_id_);
  std::swap(timestamp_, other->timestamp_);
  salt_.Swap(&other->salt_);
  signature_.Swap(&other->signature_);
  public_key_url_.Swap(&other->public_key_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateRequest_GameCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateRequest_GameCenter_descriptor_;
  metadata.reflection = AuthenticateRequest_GameCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateRequest::kCollationIdFieldNumber;
const int AuthenticateRequest::kEmailFieldNumber;
const int AuthenticateRequest::kFacebookFieldNumber;
const int AuthenticateRequest::kGoogleFieldNumber;
const int AuthenticateRequest::kGameCenterFieldNumber;
const int AuthenticateRequest::kSteamFieldNumber;
const int AuthenticateRequest::kDeviceFieldNumber;
const int AuthenticateRequest::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateRequest::AuthenticateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateRequest)
}

void AuthenticateRequest::InitAsDefaultInstance() {
  AuthenticateRequest_default_oneof_instance_->email_ = const_cast< ::server::AuthenticateRequest_Email*>(
      ::server::AuthenticateRequest_Email::internal_default_instance());
  AuthenticateRequest_default_oneof_instance_->facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->game_center_ = const_cast< ::server::AuthenticateRequest_GameCenter*>(
      ::server::AuthenticateRequest_GameCenter::internal_default_instance());
  AuthenticateRequest_default_oneof_instance_->steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest)
}

void AuthenticateRequest::SharedCtor() {
  collationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
  _cached_size_ = 0;
}

AuthenticateRequest::~AuthenticateRequest() {
  // @@protoc_insertion_point(destructor:server.AuthenticateRequest)
  SharedDtor();
}

void AuthenticateRequest::SharedDtor() {
  collationid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_id()) {
    clear_id();
  }
}

void AuthenticateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateRequest_descriptor_;
}

const AuthenticateRequest& AuthenticateRequest::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest> AuthenticateRequest_default_instance_;

AuthenticateRequest* AuthenticateRequest::New(::google::protobuf::Arena* arena) const {
  AuthenticateRequest* n = new AuthenticateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRequest::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.AuthenticateRequest)
  switch (id_case()) {
    case kEmail: {
      delete id_.email_;
      break;
    }
    case kFacebook: {
      id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGoogle: {
      id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGameCenter: {
      delete id_.game_center_;
      break;
    }
    case kSteam: {
      id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDevice: {
      id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCustom: {
      id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void AuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest)
  collationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_id();
}

bool AuthenticateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collationId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collationid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collationid().data(), this->collationid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.collationId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }

      // optional .server.AuthenticateRequest.Email email = 2;
      case 2: {
        if (tag == 18) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string facebook = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook().data(), this->facebook().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.facebook"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string google = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google().data(), this->google().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.google"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional .server.AuthenticateRequest.GameCenter game_center = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_center()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string steam = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam().data(), this->steam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.steam"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string device = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_custom;
        break;
      }

      // optional string custom = 8;
      case 8: {
        if (tag == 66) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom().data(), this->custom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.custom"));
        } else {
          goto handle_unusual;
        }
       after_custom:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateRequest)
  return false;
#undef DO_
}

void AuthenticateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateRequest)
  // optional string collationId = 1;
  if (this->collationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collationid().data(), this->collationid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.collationId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collationid(), output);
  }

  // optional .server.AuthenticateRequest.Email email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *id_.email_, output);
  }

  // optional string facebook = 3;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.facebook");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->facebook(), output);
  }

  // optional string google = 4;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.google");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->google(), output);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 5;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *id_.game_center_, output);
  }

  // optional string steam = 6;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.steam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->steam(), output);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device(), output);
  }

  // optional string custom = 8;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->custom(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateRequest)
}

::google::protobuf::uint8* AuthenticateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest)
  // optional string collationId = 1;
  if (this->collationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collationid().data(), this->collationid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.collationId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collationid(), target);
  }

  // optional .server.AuthenticateRequest.Email email = 2;
  if (has_email()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *id_.email_, false, target);
  }

  // optional string facebook = 3;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.facebook");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->facebook(), target);
  }

  // optional string google = 4;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.google");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->google(), target);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 5;
  if (has_game_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *id_.game_center_, false, target);
  }

  // optional string steam = 6;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.steam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->steam(), target);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // optional string custom = 8;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->custom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest)
  return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest)
  size_t total_size = 0;

  // optional string collationId = 1;
  if (this->collationid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collationid());
  }

  switch (id_case()) {
    // optional .server.AuthenticateRequest.Email email = 2;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.email_);
      break;
    }
    // optional string facebook = 3;
    case kFacebook: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook());
      break;
    }
    // optional string google = 4;
    case kGoogle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google());
      break;
    }
    // optional .server.AuthenticateRequest.GameCenter game_center = 5;
    case kGameCenter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.game_center_);
      break;
    }
    // optional string steam = 6;
    case kSteam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam());
      break;
    }
    // optional string device = 7;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
      break;
    }
    // optional string custom = 8;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateRequest::MergeFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateRequest::UnsafeMergeFrom(const AuthenticateRequest& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kEmail: {
      mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from.email());
      break;
    }
    case kFacebook: {
      set_facebook(from.facebook());
      break;
    }
    case kGoogle: {
      set_google(from.google());
      break;
    }
    case kGameCenter: {
      mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from.game_center());
      break;
    }
    case kSteam: {
      set_steam(from.steam());
      break;
    }
    case kDevice: {
      set_device(from.device());
      break;
    }
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.collationid().size() > 0) {

    collationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collationid_);
  }
}

void AuthenticateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {

  return true;
}

void AuthenticateRequest::Swap(AuthenticateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRequest::InternalSwap(AuthenticateRequest* other) {
  collationid_.Swap(&other->collationid_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateRequest_descriptor_;
  metadata.reflection = AuthenticateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateRequest_Email

// optional string email = 1;
void AuthenticateRequest_Email::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_Email::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.email)
}
void AuthenticateRequest_Email::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.email)
}
void AuthenticateRequest_Email::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.email)
}
::std::string* AuthenticateRequest_Email::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_Email::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.email)
}

// optional string password = 2;
void AuthenticateRequest_Email::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_Email::password() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.password)
}
void AuthenticateRequest_Email::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.password)
}
void AuthenticateRequest_Email::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.password)
}
::std::string* AuthenticateRequest_Email::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_Email::release_password() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.password)
}

inline const AuthenticateRequest_Email* AuthenticateRequest_Email::internal_default_instance() {
  return &AuthenticateRequest_Email_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateRequest_GameCenter

// optional string player_id = 1;
void AuthenticateRequest_GameCenter::clear_player_id() {
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::player_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.player_id)
  return player_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_player_id(const ::std::string& value) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.player_id)
}
void AuthenticateRequest_GameCenter::set_player_id(const char* value) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.player_id)
}
void AuthenticateRequest_GameCenter::set_player_id(const char* value, size_t size) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.player_id)
}
::std::string* AuthenticateRequest_GameCenter::mutable_player_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.player_id)
  return player_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_player_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.player_id)
  
  return player_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_player_id(::std::string* player_id) {
  if (player_id != NULL) {
    
  } else {
    
  }
  player_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.player_id)
}

// optional string bundle_id = 2;
void AuthenticateRequest_GameCenter::clear_bundle_id() {
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::bundle_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.bundle_id)
  return bundle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_bundle_id(const ::std::string& value) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.bundle_id)
}
void AuthenticateRequest_GameCenter::set_bundle_id(const char* value) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.bundle_id)
}
void AuthenticateRequest_GameCenter::set_bundle_id(const char* value, size_t size) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.bundle_id)
}
::std::string* AuthenticateRequest_GameCenter::mutable_bundle_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.bundle_id)
  return bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_bundle_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.bundle_id)
  
  return bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_bundle_id(::std::string* bundle_id) {
  if (bundle_id != NULL) {
    
  } else {
    
  }
  bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.bundle_id)
}

// optional int64 timestamp = 3;
void AuthenticateRequest_GameCenter::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AuthenticateRequest_GameCenter::timestamp() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.timestamp)
  return timestamp_;
}
void AuthenticateRequest_GameCenter::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.timestamp)
}

// optional string salt = 4;
void AuthenticateRequest_GameCenter::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::salt() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.salt)
  return salt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.salt)
}
void AuthenticateRequest_GameCenter::set_salt(const char* value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.salt)
}
void AuthenticateRequest_GameCenter::set_salt(const char* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.salt)
}
::std::string* AuthenticateRequest_GameCenter::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_salt() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.salt)
}

// optional string signature = 5;
void AuthenticateRequest_GameCenter::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::signature() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.signature)
}
void AuthenticateRequest_GameCenter::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.signature)
}
void AuthenticateRequest_GameCenter::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.signature)
}
::std::string* AuthenticateRequest_GameCenter::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_signature() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.signature)
}

// optional string public_key_url = 6;
void AuthenticateRequest_GameCenter::clear_public_key_url() {
  public_key_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::public_key_url() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.public_key_url)
  return public_key_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_public_key_url(const ::std::string& value) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.public_key_url)
}
void AuthenticateRequest_GameCenter::set_public_key_url(const char* value) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.public_key_url)
}
void AuthenticateRequest_GameCenter::set_public_key_url(const char* value, size_t size) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.public_key_url)
}
::std::string* AuthenticateRequest_GameCenter::mutable_public_key_url() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.public_key_url)
  return public_key_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_public_key_url() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.public_key_url)
  
  return public_key_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_public_key_url(::std::string* public_key_url) {
  if (public_key_url != NULL) {
    
  } else {
    
  }
  public_key_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_url);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.public_key_url)
}

inline const AuthenticateRequest_GameCenter* AuthenticateRequest_GameCenter::internal_default_instance() {
  return &AuthenticateRequest_GameCenter_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateRequest

// optional string collationId = 1;
void AuthenticateRequest::clear_collationid() {
  collationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest::collationid() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.collationId)
  return collationid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest::set_collationid(const ::std::string& value) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.collationId)
}
void AuthenticateRequest::set_collationid(const char* value) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.collationId)
}
void AuthenticateRequest::set_collationid(const char* value, size_t size) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.collationId)
}
::std::string* AuthenticateRequest::mutable_collationid() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.collationId)
  return collationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_collationid() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.collationId)
  
  return collationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest::set_allocated_collationid(::std::string* collationid) {
  if (collationid != NULL) {
    
  } else {
    
  }
  collationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collationid);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.collationId)
}

// optional .server.AuthenticateRequest.Email email = 2;
bool AuthenticateRequest::has_email() const {
  return id_case() == kEmail;
}
void AuthenticateRequest::set_has_email() {
  _oneof_case_[0] = kEmail;
}
void AuthenticateRequest::clear_email() {
  if (has_email()) {
    delete id_.email_;
    clear_has_id();
  }
}
 const ::server::AuthenticateRequest_Email& AuthenticateRequest::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.email)
  return has_email()
      ? *id_.email_
      : ::server::AuthenticateRequest_Email::default_instance();
}
::server::AuthenticateRequest_Email* AuthenticateRequest::mutable_email() {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_ = new ::server::AuthenticateRequest_Email;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.email)
  return id_.email_;
}
::server::AuthenticateRequest_Email* AuthenticateRequest::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.email)
  if (has_email()) {
    clear_has_id();
    ::server::AuthenticateRequest_Email* temp = id_.email_;
    id_.email_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_id();
  if (email) {
    set_has_email();
    id_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.email)
}

// optional string facebook = 3;
bool AuthenticateRequest::has_facebook() const {
  return id_case() == kFacebook;
}
void AuthenticateRequest::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
void AuthenticateRequest::clear_facebook() {
  if (has_facebook()) {
    id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& AuthenticateRequest::facebook() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.facebook)
  if (has_facebook()) {
    return id_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
}
void AuthenticateRequest::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.facebook)
}
void AuthenticateRequest::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.facebook)
}
::std::string* AuthenticateRequest::mutable_facebook() {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.facebook)
  return id_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_facebook() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.facebook)
  if (has_facebook()) {
    clear_has_id();
    return id_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (facebook != NULL) {
    set_has_facebook();
    id_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.facebook)
}

// optional string google = 4;
bool AuthenticateRequest::has_google() const {
  return id_case() == kGoogle;
}
void AuthenticateRequest::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
void AuthenticateRequest::clear_google() {
  if (has_google()) {
    id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& AuthenticateRequest::google() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.google)
  if (has_google()) {
    return id_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
}
void AuthenticateRequest::set_google(const char* value) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.google)
}
void AuthenticateRequest::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.google)
}
::std::string* AuthenticateRequest::mutable_google() {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.google)
  return id_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_google() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.google)
  if (has_google()) {
    clear_has_id();
    return id_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (google != NULL) {
    set_has_google();
    id_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.google)
}

// optional .server.AuthenticateRequest.GameCenter game_center = 5;
bool AuthenticateRequest::has_game_center() const {
  return id_case() == kGameCenter;
}
void AuthenticateRequest::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
void AuthenticateRequest::clear_game_center() {
  if (has_game_center()) {
    delete id_.game_center_;
    clear_has_id();
  }
}
 const ::server::AuthenticateRequest_GameCenter& AuthenticateRequest::game_center() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.game_center)
  return has_game_center()
      ? *id_.game_center_
      : ::server::AuthenticateRequest_GameCenter::default_instance();
}
::server::AuthenticateRequest_GameCenter* AuthenticateRequest::mutable_game_center() {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_ = new ::server::AuthenticateRequest_GameCenter;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.game_center)
  return id_.game_center_;
}
::server::AuthenticateRequest_GameCenter* AuthenticateRequest::release_game_center() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.game_center)
  if (has_game_center()) {
    clear_has_id();
    ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    id_.game_center_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_id();
  if (game_center) {
    set_has_game_center();
    id_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.game_center)
}

// optional string steam = 6;
bool AuthenticateRequest::has_steam() const {
  return id_case() == kSteam;
}
void AuthenticateRequest::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
void AuthenticateRequest::clear_steam() {
  if (has_steam()) {
    id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& AuthenticateRequest::steam() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.steam)
  if (has_steam()) {
    return id_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
}
void AuthenticateRequest::set_steam(const char* value) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.steam)
}
void AuthenticateRequest::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.steam)
}
::std::string* AuthenticateRequest::mutable_steam() {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.steam)
  return id_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_steam() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.steam)
  if (has_steam()) {
    clear_has_id();
    return id_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (steam != NULL) {
    set_has_steam();
    id_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.steam)
}

// optional string device = 7;
bool AuthenticateRequest::has_device() const {
  return id_case() == kDevice;
}
void AuthenticateRequest::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void AuthenticateRequest::clear_device() {
  if (has_device()) {
    id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& AuthenticateRequest::device() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.device)
  if (has_device()) {
    return id_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
}
void AuthenticateRequest::set_device(const char* value) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.device)
}
void AuthenticateRequest::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.device)
}
::std::string* AuthenticateRequest::mutable_device() {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.device)
  return id_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_device() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.device)
  if (has_device()) {
    clear_has_id();
    return id_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (device != NULL) {
    set_has_device();
    id_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.device)
}

// optional string custom = 8;
bool AuthenticateRequest::has_custom() const {
  return id_case() == kCustom;
}
void AuthenticateRequest::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
void AuthenticateRequest::clear_custom() {
  if (has_custom()) {
    id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& AuthenticateRequest::custom() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.custom)
  if (has_custom()) {
    return id_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
}
void AuthenticateRequest::set_custom(const char* value) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.custom)
}
void AuthenticateRequest::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.custom)
}
::std::string* AuthenticateRequest::mutable_custom() {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.custom)
  return id_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_custom() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.custom)
  if (has_custom()) {
    clear_has_id();
    return id_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (custom != NULL) {
    set_has_custom();
    id_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.custom)
}

bool AuthenticateRequest::has_id() const {
  return id_case() != ID_NOT_SET;
}
void AuthenticateRequest::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
AuthenticateRequest::IdCase AuthenticateRequest::id_case() const {
  return AuthenticateRequest::IdCase(_oneof_case_[0]);
}
inline const AuthenticateRequest* AuthenticateRequest::internal_default_instance() {
  return &AuthenticateRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse_Session::kTokenFieldNumber;
const int AuthenticateResponse_Session::kUdpTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse_Session::AuthenticateResponse_Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateResponse.Session)
}

void AuthenticateResponse_Session::InitAsDefaultInstance() {
}

AuthenticateResponse_Session::AuthenticateResponse_Session(const AuthenticateResponse_Session& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse.Session)
}

void AuthenticateResponse_Session::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udp_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthenticateResponse_Session::~AuthenticateResponse_Session() {
  // @@protoc_insertion_point(destructor:server.AuthenticateResponse.Session)
  SharedDtor();
}

void AuthenticateResponse_Session::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udp_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateResponse_Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateResponse_Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateResponse_Session_descriptor_;
}

const AuthenticateResponse_Session& AuthenticateResponse_Session::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse_Session> AuthenticateResponse_Session_default_instance_;

AuthenticateResponse_Session* AuthenticateResponse_Session::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse_Session* n = new AuthenticateResponse_Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse_Session::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse.Session)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udp_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthenticateResponse_Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateResponse.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateResponse.Session.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_udp_token;
        break;
      }

      // optional string udp_token = 2;
      case 2: {
        if (tag == 18) {
         parse_udp_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->udp_token().data(), this->udp_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateResponse.Session.udp_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateResponse.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateResponse.Session)
  return false;
#undef DO_
}

void AuthenticateResponse_Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateResponse.Session)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Session.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional string udp_token = 2;
  if (this->udp_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->udp_token().data(), this->udp_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Session.udp_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->udp_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateResponse.Session)
}

::google::protobuf::uint8* AuthenticateResponse_Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse.Session)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Session.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional string udp_token = 2;
  if (this->udp_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->udp_token().data(), this->udp_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Session.udp_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->udp_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse.Session)
  return target;
}

size_t AuthenticateResponse_Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse.Session)
  size_t total_size = 0;

  // optional string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional string udp_token = 2;
  if (this->udp_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse_Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse.Session)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateResponse_Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateResponse_Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse.Session)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateResponse_Session::MergeFrom(const AuthenticateResponse_Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse.Session)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateResponse_Session::UnsafeMergeFrom(const AuthenticateResponse_Session& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.udp_token().size() > 0) {

    udp_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_token_);
  }
}

void AuthenticateResponse_Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse_Session::CopyFrom(const AuthenticateResponse_Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse.Session)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateResponse_Session::IsInitialized() const {

  return true;
}

void AuthenticateResponse_Session::Swap(AuthenticateResponse_Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse_Session::InternalSwap(AuthenticateResponse_Session* other) {
  token_.Swap(&other->token_);
  udp_token_.Swap(&other->udp_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateResponse_Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateResponse_Session_descriptor_;
  metadata.reflection = AuthenticateResponse_Session_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse_Error::kCodeFieldNumber;
const int AuthenticateResponse_Error::kMessageFieldNumber;
const int AuthenticateResponse_Error::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse_Error::AuthenticateResponse_Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateResponse.Error)
}

void AuthenticateResponse_Error::InitAsDefaultInstance() {
  request_ = const_cast< ::server::AuthenticateRequest*>(
      ::server::AuthenticateRequest::internal_default_instance());
}

AuthenticateResponse_Error::AuthenticateResponse_Error(const AuthenticateResponse_Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse.Error)
}

void AuthenticateResponse_Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_ = NULL;
  code_ = 0;
  _cached_size_ = 0;
}

AuthenticateResponse_Error::~AuthenticateResponse_Error() {
  // @@protoc_insertion_point(destructor:server.AuthenticateResponse.Error)
  SharedDtor();
}

void AuthenticateResponse_Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AuthenticateResponse_Error_default_instance_.get()) {
    delete request_;
  }
}

void AuthenticateResponse_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateResponse_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateResponse_Error_descriptor_;
}

const AuthenticateResponse_Error& AuthenticateResponse_Error::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse_Error> AuthenticateResponse_Error_default_instance_;

AuthenticateResponse_Error* AuthenticateResponse_Error::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse_Error* n = new AuthenticateResponse_Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse.Error)
  code_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}

bool AuthenticateResponse_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateResponse.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateResponse.Error.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .server.AuthenticateRequest request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateResponse.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateResponse.Error)
  return false;
#undef DO_
}

void AuthenticateResponse_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateResponse.Error)
  // optional int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional .server.AuthenticateRequest request = 3;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateResponse.Error)
}

::google::protobuf::uint8* AuthenticateResponse_Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse.Error)
  // optional int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .server.AuthenticateRequest request = 3;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse.Error)
  return target;
}

size_t AuthenticateResponse_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse.Error)
  size_t total_size = 0;

  // optional int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional .server.AuthenticateRequest request = 3;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse_Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateResponse_Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateResponse_Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse.Error)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateResponse_Error::MergeFrom(const AuthenticateResponse_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse.Error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateResponse_Error::UnsafeMergeFrom(const AuthenticateResponse_Error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_request()) {
    mutable_request()->::server::AuthenticateRequest::MergeFrom(from.request());
  }
}

void AuthenticateResponse_Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse_Error::CopyFrom(const AuthenticateResponse_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse.Error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateResponse_Error::IsInitialized() const {

  return true;
}

void AuthenticateResponse_Error::Swap(AuthenticateResponse_Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse_Error::InternalSwap(AuthenticateResponse_Error* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  std::swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateResponse_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateResponse_Error_descriptor_;
  metadata.reflection = AuthenticateResponse_Error_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse::kCollationIdFieldNumber;
const int AuthenticateResponse::kSessionFieldNumber;
const int AuthenticateResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse::AuthenticateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateResponse)
}

void AuthenticateResponse::InitAsDefaultInstance() {
  AuthenticateResponse_default_oneof_instance_->session_ = const_cast< ::server::AuthenticateResponse_Session*>(
      ::server::AuthenticateResponse_Session::internal_default_instance());
  AuthenticateResponse_default_oneof_instance_->error_ = const_cast< ::server::AuthenticateResponse_Error*>(
      ::server::AuthenticateResponse_Error::internal_default_instance());
}

AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse)
}

void AuthenticateResponse::SharedCtor() {
  collation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
  _cached_size_ = 0;
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:server.AuthenticateResponse)
  SharedDtor();
}

void AuthenticateResponse::SharedDtor() {
  collation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_id()) {
    clear_id();
  }
}

void AuthenticateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateResponse_descriptor_;
}

const AuthenticateResponse& AuthenticateResponse::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse> AuthenticateResponse_default_instance_;

AuthenticateResponse* AuthenticateResponse::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse* n = new AuthenticateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.AuthenticateResponse)
  switch (id_case()) {
    case kSession: {
      delete id_.session_;
      break;
    }
    case kError: {
      delete id_.error_;
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse)
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_id();
}

bool AuthenticateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collation_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collation_id().data(), this->collation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateResponse.collation_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }

      // optional .server.AuthenticateResponse.Session session = 2;
      case 2: {
        if (tag == 18) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        goto after_error;
        break;
      }

      // optional .server.AuthenticateResponse.Error error = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
       after_error:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateResponse)
  return false;
#undef DO_
}

void AuthenticateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateResponse)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.collation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collation_id(), output);
  }

  // optional .server.AuthenticateResponse.Session session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *id_.session_, output);
  }

  // optional .server.AuthenticateResponse.Error error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *id_.error_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateResponse)
}

::google::protobuf::uint8* AuthenticateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.collation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collation_id(), target);
  }

  // optional .server.AuthenticateResponse.Session session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *id_.session_, false, target);
  }

  // optional .server.AuthenticateResponse.Error error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *id_.error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse)
  return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse)
  size_t total_size = 0;

  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collation_id());
  }

  switch (id_case()) {
    // optional .server.AuthenticateResponse.Session session = 2;
    case kSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.session_);
      break;
    }
    // optional .server.AuthenticateResponse.Error error = 3;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.error_);
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateResponse::UnsafeMergeFrom(const AuthenticateResponse& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kSession: {
      mutable_session()->::server::AuthenticateResponse_Session::MergeFrom(from.session());
      break;
    }
    case kError: {
      mutable_error()->::server::AuthenticateResponse_Error::MergeFrom(from.error());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.collation_id().size() > 0) {

    collation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collation_id_);
  }
}

void AuthenticateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {

  return true;
}

void AuthenticateResponse::Swap(AuthenticateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  collation_id_.Swap(&other->collation_id_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateResponse_descriptor_;
  metadata.reflection = AuthenticateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateResponse_Session

// optional string token = 1;
void AuthenticateResponse_Session::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse_Session::token() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Session.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Session::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Session.token)
}
void AuthenticateResponse_Session::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Session.token)
}
void AuthenticateResponse_Session::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Session.token)
}
::std::string* AuthenticateResponse_Session::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Session.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse_Session::release_token() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Session.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Session::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Session.token)
}

// optional string udp_token = 2;
void AuthenticateResponse_Session::clear_udp_token() {
  udp_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse_Session::udp_token() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Session.udp_token)
  return udp_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Session::set_udp_token(const ::std::string& value) {
  
  udp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Session.udp_token)
}
void AuthenticateResponse_Session::set_udp_token(const char* value) {
  
  udp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Session.udp_token)
}
void AuthenticateResponse_Session::set_udp_token(const char* value, size_t size) {
  
  udp_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Session.udp_token)
}
::std::string* AuthenticateResponse_Session::mutable_udp_token() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Session.udp_token)
  return udp_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse_Session::release_udp_token() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Session.udp_token)
  
  return udp_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Session::set_allocated_udp_token(::std::string* udp_token) {
  if (udp_token != NULL) {
    
  } else {
    
  }
  udp_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_token);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Session.udp_token)
}

inline const AuthenticateResponse_Session* AuthenticateResponse_Session::internal_default_instance() {
  return &AuthenticateResponse_Session_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateResponse_Error

// optional int32 code = 1;
void AuthenticateResponse_Error::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 AuthenticateResponse_Error::code() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.code)
  return code_;
}
void AuthenticateResponse_Error::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Error.code)
}

// optional string message = 2;
void AuthenticateResponse_Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse_Error::message() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Error.message)
}
void AuthenticateResponse_Error::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Error.message)
}
void AuthenticateResponse_Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Error.message)
}
::std::string* AuthenticateResponse_Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse_Error::release_message() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.message)
}

// optional .server.AuthenticateRequest request = 3;
bool AuthenticateResponse_Error::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
void AuthenticateResponse_Error::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::server::AuthenticateRequest& AuthenticateResponse_Error::request() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.request)
  return request_ != NULL ? *request_
                         : *::server::AuthenticateRequest::internal_default_instance();
}
::server::AuthenticateRequest* AuthenticateResponse_Error::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::server::AuthenticateRequest;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.request)
  return request_;
}
::server::AuthenticateRequest* AuthenticateResponse_Error::release_request() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.request)
  
  ::server::AuthenticateRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void AuthenticateResponse_Error::set_allocated_request(::server::AuthenticateRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.request)
}

inline const AuthenticateResponse_Error* AuthenticateResponse_Error::internal_default_instance() {
  return &AuthenticateResponse_Error_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateResponse

// optional string collation_id = 1;
void AuthenticateResponse::clear_collation_id() {
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse::collation_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.collation_id)
  return collation_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse::set_collation_id(const ::std::string& value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.collation_id)
}
void AuthenticateResponse::set_collation_id(const char* value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.collation_id)
}
void AuthenticateResponse::set_collation_id(const char* value, size_t size) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.collation_id)
}
::std::string* AuthenticateResponse::mutable_collation_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.collation_id)
  return collation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.collation_id)
  
  return collation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse::set_allocated_collation_id(::std::string* collation_id) {
  if (collation_id != NULL) {
    
  } else {
    
  }
  collation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collation_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.collation_id)
}

// optional .server.AuthenticateResponse.Session session = 2;
bool AuthenticateResponse::has_session() const {
  return id_case() == kSession;
}
void AuthenticateResponse::set_has_session() {
  _oneof_case_[0] = kSession;
}
void AuthenticateResponse::clear_session() {
  if (has_session()) {
    delete id_.session_;
    clear_has_id();
  }
}
 const ::server::AuthenticateResponse_Session& AuthenticateResponse::session() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.session)
  return has_session()
      ? *id_.session_
      : ::server::AuthenticateResponse_Session::default_instance();
}
::server::AuthenticateResponse_Session* AuthenticateResponse::mutable_session() {
  if (!has_session()) {
    clear_id();
    set_has_session();
    id_.session_ = new ::server::AuthenticateResponse_Session;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.session)
  return id_.session_;
}
::server::AuthenticateResponse_Session* AuthenticateResponse::release_session() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.session)
  if (has_session()) {
    clear_has_id();
    ::server::AuthenticateResponse_Session* temp = id_.session_;
    id_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateResponse::set_allocated_session(::server::AuthenticateResponse_Session* session) {
  clear_id();
  if (session) {
    set_has_session();
    id_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.session)
}

// optional .server.AuthenticateResponse.Error error = 3;
bool AuthenticateResponse::has_error() const {
  return id_case() == kError;
}
void AuthenticateResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
void AuthenticateResponse::clear_error() {
  if (has_error()) {
    delete id_.error_;
    clear_has_id();
  }
}
 const ::server::AuthenticateResponse_Error& AuthenticateResponse::error() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.error)
  return has_error()
      ? *id_.error_
      : ::server::AuthenticateResponse_Error::default_instance();
}
::server::AuthenticateResponse_Error* AuthenticateResponse::mutable_error() {
  if (!has_error()) {
    clear_id();
    set_has_error();
    id_.error_ = new ::server::AuthenticateResponse_Error;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.error)
  return id_.error_;
}
::server::AuthenticateResponse_Error* AuthenticateResponse::release_error() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.error)
  if (has_error()) {
    clear_has_id();
    ::server::AuthenticateResponse_Error* temp = id_.error_;
    id_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateResponse::set_allocated_error(::server::AuthenticateResponse_Error* error) {
  clear_id();
  if (error) {
    set_has_error();
    id_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.error)
}

bool AuthenticateResponse::has_id() const {
  return id_case() != ID_NOT_SET;
}
void AuthenticateResponse::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
AuthenticateResponse::IdCase AuthenticateResponse::id_case() const {
  return AuthenticateResponse::IdCase(_oneof_case_[0]);
}
inline const AuthenticateResponse* AuthenticateResponse::internal_default_instance() {
  return &AuthenticateResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Envelope::kCollationIdFieldNumber;
const int Envelope::kErrorFieldNumber;
const int Envelope::kHeartbeatFieldNumber;
const int Envelope::kLogoutFieldNumber;
const int Envelope::kLinkFieldNumber;
const int Envelope::kUnlinkFieldNumber;
const int Envelope::kSelfFetchFieldNumber;
const int Envelope::kSelfUpdateFieldNumber;
const int Envelope::kUsersFetchFieldNumber;
const int Envelope::kSelfFieldNumber;
const int Envelope::kUsersFieldNumber;
const int Envelope::kFriendsAddFieldNumber;
const int Envelope::kFriendsRemoveFieldNumber;
const int Envelope::kFriendsBlockFieldNumber;
const int Envelope::kFriendsListFieldNumber;
const int Envelope::kFriendsFieldNumber;
const int Envelope::kGroupsCreateFieldNumber;
const int Envelope::kGroupsUpdateFieldNumber;
const int Envelope::kGroupsRemoveFieldNumber;
const int Envelope::kGroupsFetchFieldNumber;
const int Envelope::kGroupsListFieldNumber;
const int Envelope::kGroupsSelfListFieldNumber;
const int Envelope::kGroupUsersListFieldNumber;
const int Envelope::kGroupsJoinFieldNumber;
const int Envelope::kGroupsLeaveFieldNumber;
const int Envelope::kGroupUsersAddFieldNumber;
const int Envelope::kGroupUsersKickFieldNumber;
const int Envelope::kGroupUsersPromoteFieldNumber;
const int Envelope::kGroupsFieldNumber;
const int Envelope::kGroupsSelfFieldNumber;
const int Envelope::kGroupUsersFieldNumber;
const int Envelope::kTopicsJoinFieldNumber;
const int Envelope::kTopicsLeaveFieldNumber;
const int Envelope::kTopicMessageSendFieldNumber;
const int Envelope::kTopicMessagesListFieldNumber;
const int Envelope::kTopicsFieldNumber;
const int Envelope::kTopicMessageAckFieldNumber;
const int Envelope::kTopicMessageFieldNumber;
const int Envelope::kTopicMessagesFieldNumber;
const int Envelope::kTopicPresenceFieldNumber;
const int Envelope::kMatchCreateFieldNumber;
const int Envelope::kMatchesJoinFieldNumber;
const int Envelope::kMatchesLeaveFieldNumber;
const int Envelope::kMatchDataSendFieldNumber;
const int Envelope::kMatchFieldNumber;
const int Envelope::kMatchesFieldNumber;
const int Envelope::kMatchDataFieldNumber;
const int Envelope::kMatchPresenceFieldNumber;
const int Envelope::kStorageListFieldNumber;
const int Envelope::kStorageFetchFieldNumber;
const int Envelope::kStorageWriteFieldNumber;
const int Envelope::kStorageUpdateFieldNumber;
const int Envelope::kStorageRemoveFieldNumber;
const int Envelope::kStorageDataFieldNumber;
const int Envelope::kStorageKeysFieldNumber;
const int Envelope::kLeaderboardsListFieldNumber;
const int Envelope::kLeaderboardRecordsWriteFieldNumber;
const int Envelope::kLeaderboardRecordsFetchFieldNumber;
const int Envelope::kLeaderboardRecordsListFieldNumber;
const int Envelope::kLeaderboardsFieldNumber;
const int Envelope::kLeaderboardRecordsFieldNumber;
const int Envelope::kMatchmakeAddFieldNumber;
const int Envelope::kMatchmakeRemoveFieldNumber;
const int Envelope::kMatchmakeTicketFieldNumber;
const int Envelope::kMatchmakeMatchedFieldNumber;
const int Envelope::kRpcFieldNumber;
const int Envelope::kPurchaseFieldNumber;
const int Envelope::kPurchaseRecordFieldNumber;
const int Envelope::kNotificationsListFieldNumber;
const int Envelope::kNotificationsRemoveFieldNumber;
const int Envelope::kNotificationsFieldNumber;
const int Envelope::kLiveNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Envelope::Envelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Envelope)
}

void Envelope::InitAsDefaultInstance() {
  Envelope_default_oneof_instance_->error_ = const_cast< ::server::Error*>(
      ::server::Error::internal_default_instance());
  Envelope_default_oneof_instance_->heartbeat_ = const_cast< ::server::Heartbeat*>(
      ::server::Heartbeat::internal_default_instance());
  Envelope_default_oneof_instance_->logout_ = const_cast< ::server::Logout*>(
      ::server::Logout::internal_default_instance());
  Envelope_default_oneof_instance_->link_ = const_cast< ::server::TLink*>(
      ::server::TLink::internal_default_instance());
  Envelope_default_oneof_instance_->unlink_ = const_cast< ::server::TUnlink*>(
      ::server::TUnlink::internal_default_instance());
  Envelope_default_oneof_instance_->self_fetch_ = const_cast< ::server::TSelfFetch*>(
      ::server::TSelfFetch::internal_default_instance());
  Envelope_default_oneof_instance_->self_update_ = const_cast< ::server::TSelfUpdate*>(
      ::server::TSelfUpdate::internal_default_instance());
  Envelope_default_oneof_instance_->users_fetch_ = const_cast< ::server::TUsersFetch*>(
      ::server::TUsersFetch::internal_default_instance());
  Envelope_default_oneof_instance_->self_ = const_cast< ::server::TSelf*>(
      ::server::TSelf::internal_default_instance());
  Envelope_default_oneof_instance_->users_ = const_cast< ::server::TUsers*>(
      ::server::TUsers::internal_default_instance());
  Envelope_default_oneof_instance_->friends_add_ = const_cast< ::server::TFriendsAdd*>(
      ::server::TFriendsAdd::internal_default_instance());
  Envelope_default_oneof_instance_->friends_remove_ = const_cast< ::server::TFriendsRemove*>(
      ::server::TFriendsRemove::internal_default_instance());
  Envelope_default_oneof_instance_->friends_block_ = const_cast< ::server::TFriendsBlock*>(
      ::server::TFriendsBlock::internal_default_instance());
  Envelope_default_oneof_instance_->friends_list_ = const_cast< ::server::TFriendsList*>(
      ::server::TFriendsList::internal_default_instance());
  Envelope_default_oneof_instance_->friends_ = const_cast< ::server::TFriends*>(
      ::server::TFriends::internal_default_instance());
  Envelope_default_oneof_instance_->groups_create_ = const_cast< ::server::TGroupsCreate*>(
      ::server::TGroupsCreate::internal_default_instance());
  Envelope_default_oneof_instance_->groups_update_ = const_cast< ::server::TGroupsUpdate*>(
      ::server::TGroupsUpdate::internal_default_instance());
  Envelope_default_oneof_instance_->groups_remove_ = const_cast< ::server::TGroupsRemove*>(
      ::server::TGroupsRemove::internal_default_instance());
  Envelope_default_oneof_instance_->groups_fetch_ = const_cast< ::server::TGroupsFetch*>(
      ::server::TGroupsFetch::internal_default_instance());
  Envelope_default_oneof_instance_->groups_list_ = const_cast< ::server::TGroupsList*>(
      ::server::TGroupsList::internal_default_instance());
  Envelope_default_oneof_instance_->groups_self_list_ = const_cast< ::server::TGroupsSelfList*>(
      ::server::TGroupsSelfList::internal_default_instance());
  Envelope_default_oneof_instance_->group_users_list_ = const_cast< ::server::TGroupUsersList*>(
      ::server::TGroupUsersList::internal_default_instance());
  Envelope_default_oneof_instance_->groups_join_ = const_cast< ::server::TGroupsJoin*>(
      ::server::TGroupsJoin::internal_default_instance());
  Envelope_default_oneof_instance_->groups_leave_ = const_cast< ::server::TGroupsLeave*>(
      ::server::TGroupsLeave::internal_default_instance());
  Envelope_default_oneof_instance_->group_users_add_ = const_cast< ::server::TGroupUsersAdd*>(
      ::server::TGroupUsersAdd::internal_default_instance());
  Envelope_default_oneof_instance_->group_users_kick_ = const_cast< ::server::TGroupUsersKick*>(
      ::server::TGroupUsersKick::internal_default_instance());
  Envelope_default_oneof_instance_->group_users_promote_ = const_cast< ::server::TGroupUsersPromote*>(
      ::server::TGroupUsersPromote::internal_default_instance());
  Envelope_default_oneof_instance_->groups_ = const_cast< ::server::TGroups*>(
      ::server::TGroups::internal_default_instance());
  Envelope_default_oneof_instance_->groups_self_ = const_cast< ::server::TGroupsSelf*>(
      ::server::TGroupsSelf::internal_default_instance());
  Envelope_default_oneof_instance_->group_users_ = const_cast< ::server::TGroupUsers*>(
      ::server::TGroupUsers::internal_default_instance());
  Envelope_default_oneof_instance_->topics_join_ = const_cast< ::server::TTopicsJoin*>(
      ::server::TTopicsJoin::internal_default_instance());
  Envelope_default_oneof_instance_->topics_leave_ = const_cast< ::server::TTopicsLeave*>(
      ::server::TTopicsLeave::internal_default_instance());
  Envelope_default_oneof_instance_->topic_message_send_ = const_cast< ::server::TTopicMessageSend*>(
      ::server::TTopicMessageSend::internal_default_instance());
  Envelope_default_oneof_instance_->topic_messages_list_ = const_cast< ::server::TTopicMessagesList*>(
      ::server::TTopicMessagesList::internal_default_instance());
  Envelope_default_oneof_instance_->topics_ = const_cast< ::server::TTopics*>(
      ::server::TTopics::internal_default_instance());
  Envelope_default_oneof_instance_->topic_message_ack_ = const_cast< ::server::TTopicMessageAck*>(
      ::server::TTopicMessageAck::internal_default_instance());
  Envelope_default_oneof_instance_->topic_message_ = const_cast< ::server::TopicMessage*>(
      ::server::TopicMessage::internal_default_instance());
  Envelope_default_oneof_instance_->topic_messages_ = const_cast< ::server::TTopicMessages*>(
      ::server::TTopicMessages::internal_default_instance());
  Envelope_default_oneof_instance_->topic_presence_ = const_cast< ::server::TopicPresence*>(
      ::server::TopicPresence::internal_default_instance());
  Envelope_default_oneof_instance_->match_create_ = const_cast< ::server::TMatchCreate*>(
      ::server::TMatchCreate::internal_default_instance());
  Envelope_default_oneof_instance_->matches_join_ = const_cast< ::server::TMatchesJoin*>(
      ::server::TMatchesJoin::internal_default_instance());
  Envelope_default_oneof_instance_->matches_leave_ = const_cast< ::server::TMatchesLeave*>(
      ::server::TMatchesLeave::internal_default_instance());
  Envelope_default_oneof_instance_->match_data_send_ = const_cast< ::server::MatchDataSend*>(
      ::server::MatchDataSend::internal_default_instance());
  Envelope_default_oneof_instance_->match_ = const_cast< ::server::TMatch*>(
      ::server::TMatch::internal_default_instance());
  Envelope_default_oneof_instance_->matches_ = const_cast< ::server::TMatches*>(
      ::server::TMatches::internal_default_instance());
  Envelope_default_oneof_instance_->match_data_ = const_cast< ::server::MatchData*>(
      ::server::MatchData::internal_default_instance());
  Envelope_default_oneof_instance_->match_presence_ = const_cast< ::server::MatchPresence*>(
      ::server::MatchPresence::internal_default_instance());
  Envelope_default_oneof_instance_->storage_list_ = const_cast< ::server::TStorageList*>(
      ::server::TStorageList::internal_default_instance());
  Envelope_default_oneof_instance_->storage_fetch_ = const_cast< ::server::TStorageFetch*>(
      ::server::TStorageFetch::internal_default_instance());
  Envelope_default_oneof_instance_->storage_write_ = const_cast< ::server::TStorageWrite*>(
      ::server::TStorageWrite::internal_default_instance());
  Envelope_default_oneof_instance_->storage_update_ = const_cast< ::server::TStorageUpdate*>(
      ::server::TStorageUpdate::internal_default_instance());
  Envelope_default_oneof_instance_->storage_remove_ = const_cast< ::server::TStorageRemove*>(
      ::server::TStorageRemove::internal_default_instance());
  Envelope_default_oneof_instance_->storage_data_ = const_cast< ::server::TStorageData*>(
      ::server::TStorageData::internal_default_instance());
  Envelope_default_oneof_instance_->storage_keys_ = const_cast< ::server::TStorageKeys*>(
      ::server::TStorageKeys::internal_default_instance());
  Envelope_default_oneof_instance_->leaderboards_list_ = const_cast< ::server::TLeaderboardsList*>(
      ::server::TLeaderboardsList::internal_default_instance());
  Envelope_default_oneof_instance_->leaderboard_records_write_ = const_cast< ::server::TLeaderboardRecordsWrite*>(
      ::server::TLeaderboardRecordsWrite::internal_default_instance());
  Envelope_default_oneof_instance_->leaderboard_records_fetch_ = const_cast< ::server::TLeaderboardRecordsFetch*>(
      ::server::TLeaderboardRecordsFetch::internal_default_instance());
  Envelope_default_oneof_instance_->leaderboard_records_list_ = const_cast< ::server::TLeaderboardRecordsList*>(
      ::server::TLeaderboardRecordsList::internal_default_instance());
  Envelope_default_oneof_instance_->leaderboards_ = const_cast< ::server::TLeaderboards*>(
      ::server::TLeaderboards::internal_default_instance());
  Envelope_default_oneof_instance_->leaderboard_records_ = const_cast< ::server::TLeaderboardRecords*>(
      ::server::TLeaderboardRecords::internal_default_instance());
  Envelope_default_oneof_instance_->matchmake_add_ = const_cast< ::server::TMatchmakeAdd*>(
      ::server::TMatchmakeAdd::internal_default_instance());
  Envelope_default_oneof_instance_->matchmake_remove_ = const_cast< ::server::TMatchmakeRemove*>(
      ::server::TMatchmakeRemove::internal_default_instance());
  Envelope_default_oneof_instance_->matchmake_ticket_ = const_cast< ::server::TMatchmakeTicket*>(
      ::server::TMatchmakeTicket::internal_default_instance());
  Envelope_default_oneof_instance_->matchmake_matched_ = const_cast< ::server::MatchmakeMatched*>(
      ::server::MatchmakeMatched::internal_default_instance());
  Envelope_default_oneof_instance_->rpc_ = const_cast< ::server::TRpc*>(
      ::server::TRpc::internal_default_instance());
  Envelope_default_oneof_instance_->purchase_ = const_cast< ::server::TPurchaseValidation*>(
      ::server::TPurchaseValidation::internal_default_instance());
  Envelope_default_oneof_instance_->purchase_record_ = const_cast< ::server::TPurchaseRecord*>(
      ::server::TPurchaseRecord::internal_default_instance());
  Envelope_default_oneof_instance_->notifications_list_ = const_cast< ::server::TNotificationsList*>(
      ::server::TNotificationsList::internal_default_instance());
  Envelope_default_oneof_instance_->notifications_remove_ = const_cast< ::server::TNotificationsRemove*>(
      ::server::TNotificationsRemove::internal_default_instance());
  Envelope_default_oneof_instance_->notifications_ = const_cast< ::server::TNotifications*>(
      ::server::TNotifications::internal_default_instance());
  Envelope_default_oneof_instance_->live_notifications_ = const_cast< ::server::Notifications*>(
      ::server::Notifications::internal_default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Envelope)
}

void Envelope::SharedCtor() {
  collation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
  _cached_size_ = 0;
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:server.Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
  collation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Envelope> Envelope_default_instance_;

Envelope* Envelope::New(::google::protobuf::Arena* arena) const {
  Envelope* n = new Envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Envelope::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:server.Envelope)
  switch (payload_case()) {
    case kError: {
      delete payload_.error_;
      break;
    }
    case kHeartbeat: {
      delete payload_.heartbeat_;
      break;
    }
    case kLogout: {
      delete payload_.logout_;
      break;
    }
    case kLink: {
      delete payload_.link_;
      break;
    }
    case kUnlink: {
      delete payload_.unlink_;
      break;
    }
    case kSelfFetch: {
      delete payload_.self_fetch_;
      break;
    }
    case kSelfUpdate: {
      delete payload_.self_update_;
      break;
    }
    case kUsersFetch: {
      delete payload_.users_fetch_;
      break;
    }
    case kSelf: {
      delete payload_.self_;
      break;
    }
    case kUsers: {
      delete payload_.users_;
      break;
    }
    case kFriendsAdd: {
      delete payload_.friends_add_;
      break;
    }
    case kFriendsRemove: {
      delete payload_.friends_remove_;
      break;
    }
    case kFriendsBlock: {
      delete payload_.friends_block_;
      break;
    }
    case kFriendsList: {
      delete payload_.friends_list_;
      break;
    }
    case kFriends: {
      delete payload_.friends_;
      break;
    }
    case kGroupsCreate: {
      delete payload_.groups_create_;
      break;
    }
    case kGroupsUpdate: {
      delete payload_.groups_update_;
      break;
    }
    case kGroupsRemove: {
      delete payload_.groups_remove_;
      break;
    }
    case kGroupsFetch: {
      delete payload_.groups_fetch_;
      break;
    }
    case kGroupsList: {
      delete payload_.groups_list_;
      break;
    }
    case kGroupsSelfList: {
      delete payload_.groups_self_list_;
      break;
    }
    case kGroupUsersList: {
      delete payload_.group_users_list_;
      break;
    }
    case kGroupsJoin: {
      delete payload_.groups_join_;
      break;
    }
    case kGroupsLeave: {
      delete payload_.groups_leave_;
      break;
    }
    case kGroupUsersAdd: {
      delete payload_.group_users_add_;
      break;
    }
    case kGroupUsersKick: {
      delete payload_.group_users_kick_;
      break;
    }
    case kGroupUsersPromote: {
      delete payload_.group_users_promote_;
      break;
    }
    case kGroups: {
      delete payload_.groups_;
      break;
    }
    case kGroupsSelf: {
      delete payload_.groups_self_;
      break;
    }
    case kGroupUsers: {
      delete payload_.group_users_;
      break;
    }
    case kTopicsJoin: {
      delete payload_.topics_join_;
      break;
    }
    case kTopicsLeave: {
      delete payload_.topics_leave_;
      break;
    }
    case kTopicMessageSend: {
      delete payload_.topic_message_send_;
      break;
    }
    case kTopicMessagesList: {
      delete payload_.topic_messages_list_;
      break;
    }
    case kTopics: {
      delete payload_.topics_;
      break;
    }
    case kTopicMessageAck: {
      delete payload_.topic_message_ack_;
      break;
    }
    case kTopicMessage: {
      delete payload_.topic_message_;
      break;
    }
    case kTopicMessages: {
      delete payload_.topic_messages_;
      break;
    }
    case kTopicPresence: {
      delete payload_.topic_presence_;
      break;
    }
    case kMatchCreate: {
      delete payload_.match_create_;
      break;
    }
    case kMatchesJoin: {
      delete payload_.matches_join_;
      break;
    }
    case kMatchesLeave: {
      delete payload_.matches_leave_;
      break;
    }
    case kMatchDataSend: {
      delete payload_.match_data_send_;
      break;
    }
    case kMatch: {
      delete payload_.match_;
      break;
    }
    case kMatches: {
      delete payload_.matches_;
      break;
    }
    case kMatchData: {
      delete payload_.match_data_;
      break;
    }
    case kMatchPresence: {
      delete payload_.match_presence_;
      break;
    }
    case kStorageList: {
      delete payload_.storage_list_;
      break;
    }
    case kStorageFetch: {
      delete payload_.storage_fetch_;
      break;
    }
    case kStorageWrite: {
      delete payload_.storage_write_;
      break;
    }
    case kStorageUpdate: {
      delete payload_.storage_update_;
      break;
    }
    case kStorageRemove: {
      delete payload_.storage_remove_;
      break;
    }
    case kStorageData: {
      delete payload_.storage_data_;
      break;
    }
    case kStorageKeys: {
      delete payload_.storage_keys_;
      break;
    }
    case kLeaderboardsList: {
      delete payload_.leaderboards_list_;
      break;
    }
    case kLeaderboardRecordsWrite: {
      delete payload_.leaderboard_records_write_;
      break;
    }
    case kLeaderboardRecordsFetch: {
      delete payload_.leaderboard_records_fetch_;
      break;
    }
    case kLeaderboardRecordsList: {
      delete payload_.leaderboard_records_list_;
      break;
    }
    case kLeaderboards: {
      delete payload_.leaderboards_;
      break;
    }
    case kLeaderboardRecords: {
      delete payload_.leaderboard_records_;
      break;
    }
    case kMatchmakeAdd: {
      delete payload_.matchmake_add_;
      break;
    }
    case kMatchmakeRemove: {
      delete payload_.matchmake_remove_;
      break;
    }
    case kMatchmakeTicket: {
      delete payload_.matchmake_ticket_;
      break;
    }
    case kMatchmakeMatched: {
      delete payload_.matchmake_matched_;
      break;
    }
    case kRpc: {
      delete payload_.rpc_;
      break;
    }
    case kPurchase: {
      delete payload_.purchase_;
      break;
    }
    case kPurchaseRecord: {
      delete payload_.purchase_record_;
      break;
    }
    case kNotificationsList: {
      delete payload_.notifications_list_;
      break;
    }
    case kNotificationsRemove: {
      delete payload_.notifications_remove_;
      break;
    }
    case kNotifications: {
      delete payload_.notifications_;
      break;
    }
    case kLiveNotifications: {
      delete payload_.live_notifications_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Envelope)
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_payload();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collation_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collation_id().data(), this->collation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Envelope.collation_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .server.Error error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.Heartbeat heartbeat = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.Logout logout = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TLink link = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TUnlink unlink = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlink()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TSelfFetch self_fetch = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TSelfUpdate self_update = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_update()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TUsersFetch users_fetch = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_users_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TSelf self = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TUsers users = 11;
      case 11: {
        if (tag == 90) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_users()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TFriendsAdd friends_add = 12;
      case 12: {
        if (tag == 98) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_add()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TFriendsRemove friends_remove = 13;
      case 13: {
        if (tag == 106) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TFriendsBlock friends_block = 14;
      case 14: {
        if (tag == 114) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_block()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TFriendsList friends_list = 15;
      case 15: {
        if (tag == 122) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TFriends friends = 16;
      case 16: {
        if (tag == 130) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsCreate groups_create = 17;
      case 17: {
        if (tag == 138) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_create()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsUpdate groups_update = 18;
      case 18: {
        if (tag == 146) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_update()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsRemove groups_remove = 19;
      case 19: {
        if (tag == 154) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsFetch groups_fetch = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsList groups_list = 21;
      case 21: {
        if (tag == 170) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsSelfList groups_self_list = 22;
      case 22: {
        if (tag == 178) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_self_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupUsersList group_users_list = 23;
      case 23: {
        if (tag == 186) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_users_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsJoin groups_join = 24;
      case 24: {
        if (tag == 194) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_join()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsLeave groups_leave = 25;
      case 25: {
        if (tag == 202) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_leave()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupUsersAdd group_users_add = 26;
      case 26: {
        if (tag == 210) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_users_add()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupUsersKick group_users_kick = 27;
      case 27: {
        if (tag == 218) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_users_kick()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupUsersPromote group_users_promote = 28;
      case 28: {
        if (tag == 226) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_users_promote()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroups groups = 29;
      case 29: {
        if (tag == 234) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupsSelf groups_self = 30;
      case 30: {
        if (tag == 242) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_self()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TGroupUsers group_users = 31;
      case 31: {
        if (tag == 250) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_users()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TTopicsJoin topics_join = 32;
      case 32: {
        if (tag == 258) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topics_join()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TTopicsLeave topics_leave = 33;
      case 33: {
        if (tag == 266) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topics_leave()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TTopicMessageSend topic_message_send = 34;
      case 34: {
        if (tag == 274) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_message_send()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TTopicMessagesList topic_messages_list = 35;
      case 35: {
        if (tag == 282) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_messages_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TTopics topics = 36;
      case 36: {
        if (tag == 290) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topics()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TTopicMessageAck topic_message_ack = 37;
      case 37: {
        if (tag == 298) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_message_ack()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TopicMessage topic_message = 38;
      case 38: {
        if (tag == 306) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_message()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TTopicMessages topic_messages = 39;
      case 39: {
        if (tag == 314) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_messages()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TopicPresence topic_presence = 40;
      case 40: {
        if (tag == 322) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_presence()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatchCreate match_create = 41;
      case 41: {
        if (tag == 330) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_create()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatchesJoin matches_join = 42;
      case 42: {
        if (tag == 338) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matches_join()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatchesLeave matches_leave = 43;
      case 43: {
        if (tag == 346) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matches_leave()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.MatchDataSend match_data_send = 44;
      case 44: {
        if (tag == 354) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_data_send()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatch match = 45;
      case 45: {
        if (tag == 362) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatches matches = 46;
      case 46: {
        if (tag == 370) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matches()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.MatchData match_data = 47;
      case 47: {
        if (tag == 378) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_data()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.MatchPresence match_presence = 48;
      case 48: {
        if (tag == 386) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_presence()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TStorageList storage_list = 49;
      case 49: {
        if (tag == 394) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TStorageFetch storage_fetch = 50;
      case 50: {
        if (tag == 402) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TStorageWrite storage_write = 51;
      case 51: {
        if (tag == 410) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_write()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TStorageUpdate storage_update = 52;
      case 52: {
        if (tag == 418) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_update()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TStorageRemove storage_remove = 53;
      case 53: {
        if (tag == 426) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TStorageData storage_data = 54;
      case 54: {
        if (tag == 434) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_data()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TStorageKeys storage_keys = 55;
      case 55: {
        if (tag == 442) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_keys()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TLeaderboardsList leaderboards_list = 56;
      case 56: {
        if (tag == 450) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboards_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
      case 57: {
        if (tag == 458) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboard_records_write()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
      case 58: {
        if (tag == 466) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboard_records_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TLeaderboardRecordsList leaderboard_records_list = 59;
      case 59: {
        if (tag == 474) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboard_records_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TLeaderboards leaderboards = 60;
      case 60: {
        if (tag == 482) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboards()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TLeaderboardRecords leaderboard_records = 61;
      case 61: {
        if (tag == 490) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboard_records()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatchmakeAdd matchmake_add = 62;
      case 62: {
        if (tag == 498) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchmake_add()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatchmakeRemove matchmake_remove = 63;
      case 63: {
        if (tag == 506) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchmake_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TMatchmakeTicket matchmake_ticket = 64;
      case 64: {
        if (tag == 514) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchmake_ticket()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.MatchmakeMatched matchmake_matched = 65;
      case 65: {
        if (tag == 522) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchmake_matched()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TRpc rpc = 66;
      case 66: {
        if (tag == 530) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpc()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TPurchaseValidation purchase = 67;
      case 67: {
        if (tag == 538) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_purchase()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TPurchaseRecord purchase_record = 68;
      case 68: {
        if (tag == 546) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_purchase_record()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TNotificationsList notifications_list = 69;
      case 69: {
        if (tag == 554) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifications_list()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TNotificationsRemove notifications_remove = 70;
      case 70: {
        if (tag == 562) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifications_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_live_notifications;
        break;
      }

      // optional .server.TNotifications notifications = 71;
      case 71: {
        if (tag == 570) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifications()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_live_notifications;
        break;
      }

      // optional .server.Notifications live_notifications = 72;
      case 72: {
        if (tag == 578) {
         parse_live_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_live_notifications()));
        } else {
          goto handle_unusual;
        }
       after_live_notifications:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Envelope)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Envelope.collation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collation_id(), output);
  }

  // optional .server.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.error_, output);
  }

  // optional .server.Heartbeat heartbeat = 3;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.heartbeat_, output);
  }

  // optional .server.Logout logout = 4;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.logout_, output);
  }

  // optional .server.TLink link = 5;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.link_, output);
  }

  // optional .server.TUnlink unlink = 6;
  if (has_unlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.unlink_, output);
  }

  // optional .server.TSelfFetch self_fetch = 7;
  if (has_self_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.self_fetch_, output);
  }

  // optional .server.TSelfUpdate self_update = 8;
  if (has_self_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *payload_.self_update_, output);
  }

  // optional .server.TUsersFetch users_fetch = 9;
  if (has_users_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *payload_.users_fetch_, output);
  }

  // optional .server.TSelf self = 10;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *payload_.self_, output);
  }

  // optional .server.TUsers users = 11;
  if (has_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *payload_.users_, output);
  }

  // optional .server.TFriendsAdd friends_add = 12;
  if (has_friends_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *payload_.friends_add_, output);
  }

  // optional .server.TFriendsRemove friends_remove = 13;
  if (has_friends_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *payload_.friends_remove_, output);
  }

  // optional .server.TFriendsBlock friends_block = 14;
  if (has_friends_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *payload_.friends_block_, output);
  }

  // optional .server.TFriendsList friends_list = 15;
  if (has_friends_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *payload_.friends_list_, output);
  }

  // optional .server.TFriends friends = 16;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *payload_.friends_, output);
  }

  // optional .server.TGroupsCreate groups_create = 17;
  if (has_groups_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *payload_.groups_create_, output);
  }

  // optional .server.TGroupsUpdate groups_update = 18;
  if (has_groups_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *payload_.groups_update_, output);
  }

  // optional .server.TGroupsRemove groups_remove = 19;
  if (has_groups_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *payload_.groups_remove_, output);
  }

  // optional .server.TGroupsFetch groups_fetch = 20;
  if (has_groups_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *payload_.groups_fetch_, output);
  }

  // optional .server.TGroupsList groups_list = 21;
  if (has_groups_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *payload_.groups_list_, output);
  }

  // optional .server.TGroupsSelfList groups_self_list = 22;
  if (has_groups_self_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *payload_.groups_self_list_, output);
  }

  // optional .server.TGroupUsersList group_users_list = 23;
  if (has_group_users_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *payload_.group_users_list_, output);
  }

  // optional .server.TGroupsJoin groups_join = 24;
  if (has_groups_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *payload_.groups_join_, output);
  }

  // optional .server.TGroupsLeave groups_leave = 25;
  if (has_groups_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *payload_.groups_leave_, output);
  }

  // optional .server.TGroupUsersAdd group_users_add = 26;
  if (has_group_users_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *payload_.group_users_add_, output);
  }

  // optional .server.TGroupUsersKick group_users_kick = 27;
  if (has_group_users_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *payload_.group_users_kick_, output);
  }

  // optional .server.TGroupUsersPromote group_users_promote = 28;
  if (has_group_users_promote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *payload_.group_users_promote_, output);
  }

  // optional .server.TGroups groups = 29;
  if (has_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *payload_.groups_, output);
  }

  // optional .server.TGroupsSelf groups_self = 30;
  if (has_groups_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *payload_.groups_self_, output);
  }

  // optional .server.TGroupUsers group_users = 31;
  if (has_group_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *payload_.group_users_, output);
  }

  // optional .server.TTopicsJoin topics_join = 32;
  if (has_topics_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *payload_.topics_join_, output);
  }

  // optional .server.TTopicsLeave topics_leave = 33;
  if (has_topics_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *payload_.topics_leave_, output);
  }

  // optional .server.TTopicMessageSend topic_message_send = 34;
  if (has_topic_message_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *payload_.topic_message_send_, output);
  }

  // optional .server.TTopicMessagesList topic_messages_list = 35;
  if (has_topic_messages_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *payload_.topic_messages_list_, output);
  }

  // optional .server.TTopics topics = 36;
  if (has_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *payload_.topics_, output);
  }

  // optional .server.TTopicMessageAck topic_message_ack = 37;
  if (has_topic_message_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *payload_.topic_message_ack_, output);
  }

  // optional .server.TopicMessage topic_message = 38;
  if (has_topic_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *payload_.topic_message_, output);
  }

  // optional .server.TTopicMessages topic_messages = 39;
  if (has_topic_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *payload_.topic_messages_, output);
  }

  // optional .server.TopicPresence topic_presence = 40;
  if (has_topic_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *payload_.topic_presence_, output);
  }

  // optional .server.TMatchCreate match_create = 41;
  if (has_match_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *payload_.match_create_, output);
  }

  // optional .server.TMatchesJoin matches_join = 42;
  if (has_matches_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *payload_.matches_join_, output);
  }

  // optional .server.TMatchesLeave matches_leave = 43;
  if (has_matches_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *payload_.matches_leave_, output);
  }

  // optional .server.MatchDataSend match_data_send = 44;
  if (has_match_data_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *payload_.match_data_send_, output);
  }

  // optional .server.TMatch match = 45;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *payload_.match_, output);
  }

  // optional .server.TMatches matches = 46;
  if (has_matches()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *payload_.matches_, output);
  }

  // optional .server.MatchData match_data = 47;
  if (has_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *payload_.match_data_, output);
  }

  // optional .server.MatchPresence match_presence = 48;
  if (has_match_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *payload_.match_presence_, output);
  }

  // optional .server.TStorageList storage_list = 49;
  if (has_storage_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *payload_.storage_list_, output);
  }

  // optional .server.TStorageFetch storage_fetch = 50;
  if (has_storage_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *payload_.storage_fetch_, output);
  }

  // optional .server.TStorageWrite storage_write = 51;
  if (has_storage_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *payload_.storage_write_, output);
  }

  // optional .server.TStorageUpdate storage_update = 52;
  if (has_storage_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *payload_.storage_update_, output);
  }

  // optional .server.TStorageRemove storage_remove = 53;
  if (has_storage_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *payload_.storage_remove_, output);
  }

  // optional .server.TStorageData storage_data = 54;
  if (has_storage_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, *payload_.storage_data_, output);
  }

  // optional .server.TStorageKeys storage_keys = 55;
  if (has_storage_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *payload_.storage_keys_, output);
  }

  // optional .server.TLeaderboardsList leaderboards_list = 56;
  if (has_leaderboards_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, *payload_.leaderboards_list_, output);
  }

  // optional .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
  if (has_leaderboard_records_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *payload_.leaderboard_records_write_, output);
  }

  // optional .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
  if (has_leaderboard_records_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, *payload_.leaderboard_records_fetch_, output);
  }

  // optional .server.TLeaderboardRecordsList leaderboard_records_list = 59;
  if (has_leaderboard_records_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, *payload_.leaderboard_records_list_, output);
  }

  // optional .server.TLeaderboards leaderboards = 60;
  if (has_leaderboards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *payload_.leaderboards_, output);
  }

  // optional .server.TLeaderboardRecords leaderboard_records = 61;
  if (has_leaderboard_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *payload_.leaderboard_records_, output);
  }

  // optional .server.TMatchmakeAdd matchmake_add = 62;
  if (has_matchmake_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *payload_.matchmake_add_, output);
  }

  // optional .server.TMatchmakeRemove matchmake_remove = 63;
  if (has_matchmake_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *payload_.matchmake_remove_, output);
  }

  // optional .server.TMatchmakeTicket matchmake_ticket = 64;
  if (has_matchmake_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, *payload_.matchmake_ticket_, output);
  }

  // optional .server.MatchmakeMatched matchmake_matched = 65;
  if (has_matchmake_matched()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, *payload_.matchmake_matched_, output);
  }

  // optional .server.TRpc rpc = 66;
  if (has_rpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, *payload_.rpc_, output);
  }

  // optional .server.TPurchaseValidation purchase = 67;
  if (has_purchase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, *payload_.purchase_, output);
  }

  // optional .server.TPurchaseRecord purchase_record = 68;
  if (has_purchase_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, *payload_.purchase_record_, output);
  }

  // optional .server.TNotificationsList notifications_list = 69;
  if (has_notifications_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, *payload_.notifications_list_, output);
  }

  // optional .server.TNotificationsRemove notifications_remove = 70;
  if (has_notifications_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, *payload_.notifications_remove_, output);
  }

  // optional .server.TNotifications notifications = 71;
  if (has_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, *payload_.notifications_, output);
  }

  // optional .server.Notifications live_notifications = 72;
  if (has_live_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, *payload_.live_notifications_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.Envelope)
}

::google::protobuf::uint8* Envelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Envelope)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Envelope.collation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collation_id(), target);
  }

  // optional .server.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.error_, false, target);
  }

  // optional .server.Heartbeat heartbeat = 3;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.heartbeat_, false, target);
  }

  // optional .server.Logout logout = 4;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.logout_, false, target);
  }

  // optional .server.TLink link = 5;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.link_, false, target);
  }

  // optional .server.TUnlink unlink = 6;
  if (has_unlink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.unlink_, false, target);
  }

  // optional .server.TSelfFetch self_fetch = 7;
  if (has_self_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *payload_.self_fetch_, false, target);
  }

  // optional .server.TSelfUpdate self_update = 8;
  if (has_self_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *payload_.self_update_, false, target);
  }

  // optional .server.TUsersFetch users_fetch = 9;
  if (has_users_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *payload_.users_fetch_, false, target);
  }

  // optional .server.TSelf self = 10;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *payload_.self_, false, target);
  }

  // optional .server.TUsers users = 11;
  if (has_users()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *payload_.users_, false, target);
  }

  // optional .server.TFriendsAdd friends_add = 12;
  if (has_friends_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *payload_.friends_add_, false, target);
  }

  // optional .server.TFriendsRemove friends_remove = 13;
  if (has_friends_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *payload_.friends_remove_, false, target);
  }

  // optional .server.TFriendsBlock friends_block = 14;
  if (has_friends_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *payload_.friends_block_, false, target);
  }

  // optional .server.TFriendsList friends_list = 15;
  if (has_friends_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *payload_.friends_list_, false, target);
  }

  // optional .server.TFriends friends = 16;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *payload_.friends_, false, target);
  }

  // optional .server.TGroupsCreate groups_create = 17;
  if (has_groups_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *payload_.groups_create_, false, target);
  }

  // optional .server.TGroupsUpdate groups_update = 18;
  if (has_groups_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *payload_.groups_update_, false, target);
  }

  // optional .server.TGroupsRemove groups_remove = 19;
  if (has_groups_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *payload_.groups_remove_, false, target);
  }

  // optional .server.TGroupsFetch groups_fetch = 20;
  if (has_groups_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *payload_.groups_fetch_, false, target);
  }

  // optional .server.TGroupsList groups_list = 21;
  if (has_groups_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *payload_.groups_list_, false, target);
  }

  // optional .server.TGroupsSelfList groups_self_list = 22;
  if (has_groups_self_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *payload_.groups_self_list_, false, target);
  }

  // optional .server.TGroupUsersList group_users_list = 23;
  if (has_group_users_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *payload_.group_users_list_, false, target);
  }

  // optional .server.TGroupsJoin groups_join = 24;
  if (has_groups_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *payload_.groups_join_, false, target);
  }

  // optional .server.TGroupsLeave groups_leave = 25;
  if (has_groups_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *payload_.groups_leave_, false, target);
  }

  // optional .server.TGroupUsersAdd group_users_add = 26;
  if (has_group_users_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *payload_.group_users_add_, false, target);
  }

  // optional .server.TGroupUsersKick group_users_kick = 27;
  if (has_group_users_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *payload_.group_users_kick_, false, target);
  }

  // optional .server.TGroupUsersPromote group_users_promote = 28;
  if (has_group_users_promote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *payload_.group_users_promote_, false, target);
  }

  // optional .server.TGroups groups = 29;
  if (has_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *payload_.groups_, false, target);
  }

  // optional .server.TGroupsSelf groups_self = 30;
  if (has_groups_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *payload_.groups_self_, false, target);
  }

  // optional .server.TGroupUsers group_users = 31;
  if (has_group_users()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *payload_.group_users_, false, target);
  }

  // optional .server.TTopicsJoin topics_join = 32;
  if (has_topics_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *payload_.topics_join_, false, target);
  }

  // optional .server.TTopicsLeave topics_leave = 33;
  if (has_topics_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *payload_.topics_leave_, false, target);
  }

  // optional .server.TTopicMessageSend topic_message_send = 34;
  if (has_topic_message_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *payload_.topic_message_send_, false, target);
  }

  // optional .server.TTopicMessagesList topic_messages_list = 35;
  if (has_topic_messages_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *payload_.topic_messages_list_, false, target);
  }

  // optional .server.TTopics topics = 36;
  if (has_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *payload_.topics_, false, target);
  }

  // optional .server.TTopicMessageAck topic_message_ack = 37;
  if (has_topic_message_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *payload_.topic_message_ack_, false, target);
  }

  // optional .server.TopicMessage topic_message = 38;
  if (has_topic_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *payload_.topic_message_, false, target);
  }

  // optional .server.TTopicMessages topic_messages = 39;
  if (has_topic_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *payload_.topic_messages_, false, target);
  }

  // optional .server.TopicPresence topic_presence = 40;
  if (has_topic_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *payload_.topic_presence_, false, target);
  }

  // optional .server.TMatchCreate match_create = 41;
  if (has_match_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *payload_.match_create_, false, target);
  }

  // optional .server.TMatchesJoin matches_join = 42;
  if (has_matches_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *payload_.matches_join_, false, target);
  }

  // optional .server.TMatchesLeave matches_leave = 43;
  if (has_matches_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *payload_.matches_leave_, false, target);
  }

  // optional .server.MatchDataSend match_data_send = 44;
  if (has_match_data_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *payload_.match_data_send_, false, target);
  }

  // optional .server.TMatch match = 45;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *payload_.match_, false, target);
  }

  // optional .server.TMatches matches = 46;
  if (has_matches()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *payload_.matches_, false, target);
  }

  // optional .server.MatchData match_data = 47;
  if (has_match_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, *payload_.match_data_, false, target);
  }

  // optional .server.MatchPresence match_presence = 48;
  if (has_match_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *payload_.match_presence_, false, target);
  }

  // optional .server.TStorageList storage_list = 49;
  if (has_storage_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        49, *payload_.storage_list_, false, target);
  }

  // optional .server.TStorageFetch storage_fetch = 50;
  if (has_storage_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *payload_.storage_fetch_, false, target);
  }

  // optional .server.TStorageWrite storage_write = 51;
  if (has_storage_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *payload_.storage_write_, false, target);
  }

  // optional .server.TStorageUpdate storage_update = 52;
  if (has_storage_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *payload_.storage_update_, false, target);
  }

  // optional .server.TStorageRemove storage_remove = 53;
  if (has_storage_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, *payload_.storage_remove_, false, target);
  }

  // optional .server.TStorageData storage_data = 54;
  if (has_storage_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        54, *payload_.storage_data_, false, target);
  }

  // optional .server.TStorageKeys storage_keys = 55;
  if (has_storage_keys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        55, *payload_.storage_keys_, false, target);
  }

  // optional .server.TLeaderboardsList leaderboards_list = 56;
  if (has_leaderboards_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        56, *payload_.leaderboards_list_, false, target);
  }

  // optional .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
  if (has_leaderboard_records_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, *payload_.leaderboard_records_write_, false, target);
  }

  // optional .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
  if (has_leaderboard_records_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        58, *payload_.leaderboard_records_fetch_, false, target);
  }

  // optional .server.TLeaderboardRecordsList leaderboard_records_list = 59;
  if (has_leaderboard_records_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        59, *payload_.leaderboard_records_list_, false, target);
  }

  // optional .server.TLeaderboards leaderboards = 60;
  if (has_leaderboards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        60, *payload_.leaderboards_, false, target);
  }

  // optional .server.TLeaderboardRecords leaderboard_records = 61;
  if (has_leaderboard_records()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        61, *payload_.leaderboard_records_, false, target);
  }

  // optional .server.TMatchmakeAdd matchmake_add = 62;
  if (has_matchmake_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, *payload_.matchmake_add_, false, target);
  }

  // optional .server.TMatchmakeRemove matchmake_remove = 63;
  if (has_matchmake_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        63, *payload_.matchmake_remove_, false, target);
  }

  // optional .server.TMatchmakeTicket matchmake_ticket = 64;
  if (has_matchmake_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        64, *payload_.matchmake_ticket_, false, target);
  }

  // optional .server.MatchmakeMatched matchmake_matched = 65;
  if (has_matchmake_matched()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        65, *payload_.matchmake_matched_, false, target);
  }

  // optional .server.TRpc rpc = 66;
  if (has_rpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        66, *payload_.rpc_, false, target);
  }

  // optional .server.TPurchaseValidation purchase = 67;
  if (has_purchase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        67, *payload_.purchase_, false, target);
  }

  // optional .server.TPurchaseRecord purchase_record = 68;
  if (has_purchase_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        68, *payload_.purchase_record_, false, target);
  }

  // optional .server.TNotificationsList notifications_list = 69;
  if (has_notifications_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        69, *payload_.notifications_list_, false, target);
  }

  // optional .server.TNotificationsRemove notifications_remove = 70;
  if (has_notifications_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        70, *payload_.notifications_remove_, false, target);
  }

  // optional .server.TNotifications notifications = 71;
  if (has_notifications()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        71, *payload_.notifications_, false, target);
  }

  // optional .server.Notifications live_notifications = 72;
  if (has_live_notifications()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        72, *payload_.live_notifications_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Envelope)
  size_t total_size = 0;

  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collation_id());
  }

  switch (payload_case()) {
    // optional .server.Error error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.error_);
      break;
    }
    // optional .server.Heartbeat heartbeat = 3;
    case kHeartbeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.heartbeat_);
      break;
    }
    // optional .server.Logout logout = 4;
    case kLogout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.logout_);
      break;
    }
    // optional .server.TLink link = 5;
    case kLink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.link_);
      break;
    }
    // optional .server.TUnlink unlink = 6;
    case kUnlink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.unlink_);
      break;
    }
    // optional .server.TSelfFetch self_fetch = 7;
    case kSelfFetch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.self_fetch_);
      break;
    }
    // optional .server.TSelfUpdate self_update = 8;
    case kSelfUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.self_update_);
      break;
    }
    // optional .server.TUsersFetch users_fetch = 9;
    case kUsersFetch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.users_fetch_);
      break;
    }
    // optional .server.TSelf self = 10;
    case kSelf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.self_);
      break;
    }
    // optional .server.TUsers users = 11;
    case kUsers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.users_);
      break;
    }
    // optional .server.TFriendsAdd friends_add = 12;
    case kFriendsAdd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friends_add_);
      break;
    }
    // optional .server.TFriendsRemove friends_remove = 13;
    case kFriendsRemove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friends_remove_);
      break;
    }
    // optional .server.TFriendsBlock friends_block = 14;
    case kFriendsBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friends_block_);
      break;
    }
    // optional .server.TFriendsList friends_list = 15;
    case kFriendsList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friends_list_);
      break;
    }
    // optional .server.TFriends friends = 16;
    case kFriends: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friends_);
      break;
    }
    // optional .server.TGroupsCreate groups_create = 17;
    case kGroupsCreate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_create_);
      break;
    }
    // optional .server.TGroupsUpdate groups_update = 18;
    case kGroupsUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_update_);
      break;
    }
    // optional .server.TGroupsRemove groups_remove = 19;
    case kGroupsRemove: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_remove_);
      break;
    }
    // optional .server.TGroupsFetch groups_fetch = 20;
    case kGroupsFetch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_fetch_);
      break;
    }
    // optional .server.TGroupsList groups_list = 21;
    case kGroupsList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_list_);
      break;
    }
    // optional .server.TGroupsSelfList groups_self_list = 22;
    case kGroupsSelfList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_self_list_);
      break;
    }
    // optional .server.TGroupUsersList group_users_list = 23;
    case kGroupUsersList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_users_list_);
      break;
    }
    // optional .server.TGroupsJoin groups_join = 24;
    case kGroupsJoin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_join_);
      break;
    }
    // optional .server.TGroupsLeave groups_leave = 25;
    case kGroupsLeave: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_leave_);
      break;
    }
    // optional .server.TGroupUsersAdd group_users_add = 26;
    case kGroupUsersAdd: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_users_add_);
      break;
    }
    // optional .server.TGroupUsersKick group_users_kick = 27;
    case kGroupUsersKick: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_users_kick_);
      break;
    }
    // optional .server.TGroupUsersPromote group_users_promote = 28;
    case kGroupUsersPromote: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_users_promote_);
      break;
    }
    // optional .server.TGroups groups = 29;
    case kGroups: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_);
      break;
    }
    // optional .server.TGroupsSelf groups_self = 30;
    case kGroupsSelf: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_self_);
      break;
    }
    // optional .server.TGroupUsers group_users = 31;
    case kGroupUsers: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_users_);
      break;
    }
    // optional .server.TTopicsJoin topics_join = 32;
    case kTopicsJoin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topics_join_);
      break;
    }
    // optional .server.TTopicsLeave topics_leave = 33;
    case kTopicsLeave: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topics_leave_);
      break;
    }
    // optional .server.TTopicMessageSend topic_message_send = 34;
    case kTopicMessageSend: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_message_send_);
      break;
    }
    // optional .server.TTopicMessagesList topic_messages_list = 35;
    case kTopicMessagesList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_messages_list_);
      break;
    }
    // optional .server.TTopics topics = 36;
    case kTopics: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topics_);
      break;
    }
    // optional .server.TTopicMessageAck topic_message_ack = 37;
    case kTopicMessageAck: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_message_ack_);
      break;
    }
    // optional .server.TopicMessage topic_message = 38;
    case kTopicMessage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_message_);
      break;
    }
    // optional .server.TTopicMessages topic_messages = 39;
    case kTopicMessages: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_messages_);
      break;
    }
    // optional .server.TopicPresence topic_presence = 40;
    case kTopicPresence: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_presence_);
      break;
    }
    // optional .server.TMatchCreate match_create = 41;
    case kMatchCreate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_create_);
      break;
    }
    // optional .server.TMatchesJoin matches_join = 42;
    case kMatchesJoin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.matches_join_);
      break;
    }
    // optional .server.TMatchesLeave matches_leave = 43;
    case kMatchesLeave: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.matches_leave_);
      break;
    }
    // optional .server.MatchDataSend match_data_send = 44;
    case kMatchDataSend: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_data_send_);
      break;
    }
    // optional .server.TMatch match = 45;
    case kMatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_);
      break;
    }
    // optional .server.TMatches matches = 46;
    case kMatches: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.matches_);
      break;
    }
    // optional .server.MatchData match_data = 47;
    case kMatchData: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_data_);
      break;
    }
    // optional .server.MatchPresence match_presence = 48;
    case kMatchPresence: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_presence_);
      break;
    }
    // optional .server.TStorageList storage_list = 49;
    case kStorageList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_list_);
      break;
    }
    // optional .server.TStorageFetch storage_fetch = 50;
    case kStorageFetch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_fetch_);
      break;
    }
    // optional .server.TStorageWrite storage_write = 51;
    case kStorageWrite: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_write_);
      break;
    }
    // optional .server.TStorageUpdate storage_update = 52;
    case kStorageUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_update_);
      break;
    }
    // optional .server.TStorageRemove storage_remove = 53;
    case kStorageRemove: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_remove_);
      break;
    }
    // optional .server.TStorageData storage_data = 54;
    case kStorageData: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_data_);
      break;
    }
    // optional .server.TStorageKeys storage_keys = 55;
    case kStorageKeys: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_keys_);
      break;
    }
    // optional .server.TLeaderboardsList leaderboards_list = 56;
    case kLeaderboardsList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.leaderboards_list_);
      break;
    }
    // optional .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
    case kLeaderboardRecordsWrite: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.leaderboard_records_write_);
      break;
    }
    // optional .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
    case kLeaderboardRecordsFetch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.leaderboard_records_fetch_);
      break;
    }
    // optional .server.TLeaderboardRecordsList leaderboard_records_list = 59;
    case kLeaderboardRecordsList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.leaderboard_records_list_);
      break;
    }
    // optional .server.TLeaderboards leaderboards = 60;
    case kLeaderboards: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.leaderboards_);
      break;
    }
    // optional .server.TLeaderboardRecords leaderboard_records = 61;
    case kLeaderboardRecords: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.leaderboard_records_);
      break;
    }
    // optional .server.TMatchmakeAdd matchmake_add = 62;
    case kMatchmakeAdd: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.matchmake_add_);
      break;
    }
    // optional .server.TMatchmakeRemove matchmake_remove = 63;
    case kMatchmakeRemove: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.matchmake_remove_);
      break;
    }
    // optional .server.TMatchmakeTicket matchmake_ticket = 64;
    case kMatchmakeTicket: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.matchmake_ticket_);
      break;
    }
    // optional .server.MatchmakeMatched matchmake_matched = 65;
    case kMatchmakeMatched: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.matchmake_matched_);
      break;
    }
    // optional .server.TRpc rpc = 66;
    case kRpc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.rpc_);
      break;
    }
    // optional .server.TPurchaseValidation purchase = 67;
    case kPurchase: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.purchase_);
      break;
    }
    // optional .server.TPurchaseRecord purchase_record = 68;
    case kPurchaseRecord: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.purchase_record_);
      break;
    }
    // optional .server.TNotificationsList notifications_list = 69;
    case kNotificationsList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.notifications_list_);
      break;
    }
    // optional .server.TNotificationsRemove notifications_remove = 70;
    case kNotificationsRemove: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.notifications_remove_);
      break;
    }
    // optional .server.TNotifications notifications = 71;
    case kNotifications: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.notifications_);
      break;
    }
    // optional .server.Notifications live_notifications = 72;
    case kLiveNotifications: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.live_notifications_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Envelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Envelope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Envelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Envelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Envelope)
    UnsafeMergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Envelope)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Envelope::UnsafeMergeFrom(const Envelope& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kError: {
      mutable_error()->::server::Error::MergeFrom(from.error());
      break;
    }
    case kHeartbeat: {
      mutable_heartbeat()->::server::Heartbeat::MergeFrom(from.heartbeat());
      break;
    }
    case kLogout: {
      mutable_logout()->::server::Logout::MergeFrom(from.logout());
      break;
    }
    case kLink: {
      mutable_link()->::server::TLink::MergeFrom(from.link());
      break;
    }
    case kUnlink: {
      mutable_unlink()->::server::TUnlink::MergeFrom(from.unlink());
      break;
    }
    case kSelfFetch: {
      mutable_self_fetch()->::server::TSelfFetch::MergeFrom(from.self_fetch());
      break;
    }
    case kSelfUpdate: {
      mutable_self_update()->::server::TSelfUpdate::MergeFrom(from.self_update());
      break;
    }
    case kUsersFetch: {
      mutable_users_fetch()->::server::TUsersFetch::MergeFrom(from.users_fetch());
      break;
    }
    case kSelf: {
      mutable_self()->::server::TSelf::MergeFrom(from.self());
      break;
    }
    case kUsers: {
      mutable_users()->::server::TUsers::MergeFrom(from.users());
      break;
    }
    case kFriendsAdd: {
      mutable_friends_add()->::server::TFriendsAdd::MergeFrom(from.friends_add());
      break;
    }
    case kFriendsRemove: {
      mutable_friends_remove()->::server::TFriendsRemove::MergeFrom(from.friends_remove());
      break;
    }
    case kFriendsBlock: {
      mutable_friends_block()->::server::TFriendsBlock::MergeFrom(from.friends_block());
      break;
    }
    case kFriendsList: {
      mutable_friends_list()->::server::TFriendsList::MergeFrom(from.friends_list());
      break;
    }
    case kFriends: {
      mutable_friends()->::server::TFriends::MergeFrom(from.friends());
      break;
    }
    case kGroupsCreate: {
      mutable_groups_create()->::server::TGroupsCreate::MergeFrom(from.groups_create());
      break;
    }
    case kGroupsUpdate: {
      mutable_groups_update()->::server::TGroupsUpdate::MergeFrom(from.groups_update());
      break;
    }
    case kGroupsRemove: {
      mutable_groups_remove()->::server::TGroupsRemove::MergeFrom(from.groups_remove());
      break;
    }
    case kGroupsFetch: {
      mutable_groups_fetch()->::server::TGroupsFetch::MergeFrom(from.groups_fetch());
      break;
    }
    case kGroupsList: {
      mutable_groups_list()->::server::TGroupsList::MergeFrom(from.groups_list());
      break;
    }
    case kGroupsSelfList: {
      mutable_groups_self_list()->::server::TGroupsSelfList::MergeFrom(from.groups_self_list());
      break;
    }
    case kGroupUsersList: {
      mutable_group_users_list()->::server::TGroupUsersList::MergeFrom(from.group_users_list());
      break;
    }
    case kGroupsJoin: {
      mutable_groups_join()->::server::TGroupsJoin::MergeFrom(from.groups_join());
      break;
    }
    case kGroupsLeave: {
      mutable_groups_leave()->::server::TGroupsLeave::MergeFrom(from.groups_leave());
      break;
    }
    case kGroupUsersAdd: {
      mutable_group_users_add()->::server::TGroupUsersAdd::MergeFrom(from.group_users_add());
      break;
    }
    case kGroupUsersKick: {
      mutable_group_users_kick()->::server::TGroupUsersKick::MergeFrom(from.group_users_kick());
      break;
    }
    case kGroupUsersPromote: {
      mutable_group_users_promote()->::server::TGroupUsersPromote::MergeFrom(from.group_users_promote());
      break;
    }
    case kGroups: {
      mutable_groups()->::server::TGroups::MergeFrom(from.groups());
      break;
    }
    case kGroupsSelf: {
      mutable_groups_self()->::server::TGroupsSelf::MergeFrom(from.groups_self());
      break;
    }
    case kGroupUsers: {
      mutable_group_users()->::server::TGroupUsers::MergeFrom(from.group_users());
      break;
    }
    case kTopicsJoin: {
      mutable_topics_join()->::server::TTopicsJoin::MergeFrom(from.topics_join());
      break;
    }
    case kTopicsLeave: {
      mutable_topics_leave()->::server::TTopicsLeave::MergeFrom(from.topics_leave());
      break;
    }
    case kTopicMessageSend: {
      mutable_topic_message_send()->::server::TTopicMessageSend::MergeFrom(from.topic_message_send());
      break;
    }
    case kTopicMessagesList: {
      mutable_topic_messages_list()->::server::TTopicMessagesList::MergeFrom(from.topic_messages_list());
      break;
    }
    case kTopics: {
      mutable_topics()->::server::TTopics::MergeFrom(from.topics());
      break;
    }
    case kTopicMessageAck: {
      mutable_topic_message_ack()->::server::TTopicMessageAck::MergeFrom(from.topic_message_ack());
      break;
    }
    case kTopicMessage: {
      mutable_topic_message()->::server::TopicMessage::MergeFrom(from.topic_message());
      break;
    }
    case kTopicMessages: {
      mutable_topic_messages()->::server::TTopicMessages::MergeFrom(from.topic_messages());
      break;
    }
    case kTopicPresence: {
      mutable_topic_presence()->::server::TopicPresence::MergeFrom(from.topic_presence());
      break;
    }
    case kMatchCreate: {
      mutable_match_create()->::server::TMatchCreate::MergeFrom(from.match_create());
      break;
    }
    case kMatchesJoin: {
      mutable_matches_join()->::server::TMatchesJoin::MergeFrom(from.matches_join());
      break;
    }
    case kMatchesLeave: {
      mutable_matches_leave()->::server::TMatchesLeave::MergeFrom(from.matches_leave());
      break;
    }
    case kMatchDataSend: {
      mutable_match_data_send()->::server::MatchDataSend::MergeFrom(from.match_data_send());
      break;
    }
    case kMatch: {
      mutable_match()->::server::TMatch::MergeFrom(from.match());
      break;
    }
    case kMatches: {
      mutable_matches()->::server::TMatches::MergeFrom(from.matches());
      break;
    }
    case kMatchData: {
      mutable_match_data()->::server::MatchData::MergeFrom(from.match_data());
      break;
    }
    case kMatchPresence: {
      mutable_match_presence()->::server::MatchPresence::MergeFrom(from.match_presence());
      break;
    }
    case kStorageList: {
      mutable_storage_list()->::server::TStorageList::MergeFrom(from.storage_list());
      break;
    }
    case kStorageFetch: {
      mutable_storage_fetch()->::server::TStorageFetch::MergeFrom(from.storage_fetch());
      break;
    }
    case kStorageWrite: {
      mutable_storage_write()->::server::TStorageWrite::MergeFrom(from.storage_write());
      break;
    }
    case kStorageUpdate: {
      mutable_storage_update()->::server::TStorageUpdate::MergeFrom(from.storage_update());
      break;
    }
    case kStorageRemove: {
      mutable_storage_remove()->::server::TStorageRemove::MergeFrom(from.storage_remove());
      break;
    }
    case kStorageData: {
      mutable_storage_data()->::server::TStorageData::MergeFrom(from.storage_data());
      break;
    }
    case kStorageKeys: {
      mutable_storage_keys()->::server::TStorageKeys::MergeFrom(from.storage_keys());
      break;
    }
    case kLeaderboardsList: {
      mutable_leaderboards_list()->::server::TLeaderboardsList::MergeFrom(from.leaderboards_list());
      break;
    }
    case kLeaderboardRecordsWrite: {
      mutable_leaderboard_records_write()->::server::TLeaderboardRecordsWrite::MergeFrom(from.leaderboard_records_write());
      break;
    }
    case kLeaderboardRecordsFetch: {
      mutable_leaderboard_records_fetch()->::server::TLeaderboardRecordsFetch::MergeFrom(from.leaderboard_records_fetch());
      break;
    }
    case kLeaderboardRecordsList: {
      mutable_leaderboard_records_list()->::server::TLeaderboardRecordsList::MergeFrom(from.leaderboard_records_list());
      break;
    }
    case kLeaderboards: {
      mutable_leaderboards()->::server::TLeaderboards::MergeFrom(from.leaderboards());
      break;
    }
    case kLeaderboardRecords: {
      mutable_leaderboard_records()->::server::TLeaderboardRecords::MergeFrom(from.leaderboard_records());
      break;
    }
    case kMatchmakeAdd: {
      mutable_matchmake_add()->::server::TMatchmakeAdd::MergeFrom(from.matchmake_add());
      break;
    }
    case kMatchmakeRemove: {
      mutable_matchmake_remove()->::server::TMatchmakeRemove::MergeFrom(from.matchmake_remove());
      break;
    }
    case kMatchmakeTicket: {
      mutable_matchmake_ticket()->::server::TMatchmakeTicket::MergeFrom(from.matchmake_ticket());
      break;
    }
    case kMatchmakeMatched: {
      mutable_matchmake_matched()->::server::MatchmakeMatched::MergeFrom(from.matchmake_matched());
      break;
    }
    case kRpc: {
      mutable_rpc()->::server::TRpc::MergeFrom(from.rpc());
      break;
    }
    case kPurchase: {
      mutable_purchase()->::server::TPurchaseValidation::MergeFrom(from.purchase());
      break;
    }
    case kPurchaseRecord: {
      mutable_purchase_record()->::server::TPurchaseRecord::MergeFrom(from.purchase_record());
      break;
    }
    case kNotificationsList: {
      mutable_notifications_list()->::server::TNotificationsList::MergeFrom(from.notifications_list());
      break;
    }
    case kNotificationsRemove: {
      mutable_notifications_remove()->::server::TNotificationsRemove::MergeFrom(from.notifications_remove());
      break;
    }
    case kNotifications: {
      mutable_notifications()->::server::TNotifications::MergeFrom(from.notifications());
      break;
    }
    case kLiveNotifications: {
      mutable_live_notifications()->::server::Notifications::MergeFrom(from.live_notifications());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (from.collation_id().size() > 0) {

    collation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collation_id_);
  }
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Envelope)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Envelope::IsInitialized() const {

  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Envelope::InternalSwap(Envelope* other) {
  collation_id_.Swap(&other->collation_id_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Envelope

// optional string collation_id = 1;
void Envelope::clear_collation_id() {
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Envelope::collation_id() const {
  // @@protoc_insertion_point(field_get:server.Envelope.collation_id)
  return collation_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Envelope::set_collation_id(const ::std::string& value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Envelope.collation_id)
}
void Envelope::set_collation_id(const char* value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Envelope.collation_id)
}
void Envelope::set_collation_id(const char* value, size_t size) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Envelope.collation_id)
}
::std::string* Envelope::mutable_collation_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Envelope.collation_id)
  return collation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Envelope::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.Envelope.collation_id)
  
  return collation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Envelope::set_allocated_collation_id(::std::string* collation_id) {
  if (collation_id != NULL) {
    
  } else {
    
  }
  collation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collation_id);
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.collation_id)
}

// optional .server.Error error = 2;
bool Envelope::has_error() const {
  return payload_case() == kError;
}
void Envelope::set_has_error() {
  _oneof_case_[0] = kError;
}
void Envelope::clear_error() {
  if (has_error()) {
    delete payload_.error_;
    clear_has_payload();
  }
}
 const ::server::Error& Envelope::error() const {
  // @@protoc_insertion_point(field_get:server.Envelope.error)
  return has_error()
      ? *payload_.error_
      : ::server::Error::default_instance();
}
::server::Error* Envelope::mutable_error() {
  if (!has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = new ::server::Error;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.error)
  return payload_.error_;
}
::server::Error* Envelope::release_error() {
  // @@protoc_insertion_point(field_release:server.Envelope.error)
  if (has_error()) {
    clear_has_payload();
    ::server::Error* temp = payload_.error_;
    payload_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_error(::server::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.error)
}

// optional .server.Heartbeat heartbeat = 3;
bool Envelope::has_heartbeat() const {
  return payload_case() == kHeartbeat;
}
void Envelope::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
void Envelope::clear_heartbeat() {
  if (has_heartbeat()) {
    delete payload_.heartbeat_;
    clear_has_payload();
  }
}
 const ::server::Heartbeat& Envelope::heartbeat() const {
  // @@protoc_insertion_point(field_get:server.Envelope.heartbeat)
  return has_heartbeat()
      ? *payload_.heartbeat_
      : ::server::Heartbeat::default_instance();
}
::server::Heartbeat* Envelope::mutable_heartbeat() {
  if (!has_heartbeat()) {
    clear_payload();
    set_has_heartbeat();
    payload_.heartbeat_ = new ::server::Heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.heartbeat)
  return payload_.heartbeat_;
}
::server::Heartbeat* Envelope::release_heartbeat() {
  // @@protoc_insertion_point(field_release:server.Envelope.heartbeat)
  if (has_heartbeat()) {
    clear_has_payload();
    ::server::Heartbeat* temp = payload_.heartbeat_;
    payload_.heartbeat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_heartbeat(::server::Heartbeat* heartbeat) {
  clear_payload();
  if (heartbeat) {
    set_has_heartbeat();
    payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.heartbeat)
}

// optional .server.Logout logout = 4;
bool Envelope::has_logout() const {
  return payload_case() == kLogout;
}
void Envelope::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
void Envelope::clear_logout() {
  if (has_logout()) {
    delete payload_.logout_;
    clear_has_payload();
  }
}
 const ::server::Logout& Envelope::logout() const {
  // @@protoc_insertion_point(field_get:server.Envelope.logout)
  return has_logout()
      ? *payload_.logout_
      : ::server::Logout::default_instance();
}
::server::Logout* Envelope::mutable_logout() {
  if (!has_logout()) {
    clear_payload();
    set_has_logout();
    payload_.logout_ = new ::server::Logout;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.logout)
  return payload_.logout_;
}
::server::Logout* Envelope::release_logout() {
  // @@protoc_insertion_point(field_release:server.Envelope.logout)
  if (has_logout()) {
    clear_has_payload();
    ::server::Logout* temp = payload_.logout_;
    payload_.logout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_logout(::server::Logout* logout) {
  clear_payload();
  if (logout) {
    set_has_logout();
    payload_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.logout)
}

// optional .server.TLink link = 5;
bool Envelope::has_link() const {
  return payload_case() == kLink;
}
void Envelope::set_has_link() {
  _oneof_case_[0] = kLink;
}
void Envelope::clear_link() {
  if (has_link()) {
    delete payload_.link_;
    clear_has_payload();
  }
}
 const ::server::TLink& Envelope::link() const {
  // @@protoc_insertion_point(field_get:server.Envelope.link)
  return has_link()
      ? *payload_.link_
      : ::server::TLink::default_instance();
}
::server::TLink* Envelope::mutable_link() {
  if (!has_link()) {
    clear_payload();
    set_has_link();
    payload_.link_ = new ::server::TLink;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.link)
  return payload_.link_;
}
::server::TLink* Envelope::release_link() {
  // @@protoc_insertion_point(field_release:server.Envelope.link)
  if (has_link()) {
    clear_has_payload();
    ::server::TLink* temp = payload_.link_;
    payload_.link_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_link(::server::TLink* link) {
  clear_payload();
  if (link) {
    set_has_link();
    payload_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.link)
}

// optional .server.TUnlink unlink = 6;
bool Envelope::has_unlink() const {
  return payload_case() == kUnlink;
}
void Envelope::set_has_unlink() {
  _oneof_case_[0] = kUnlink;
}
void Envelope::clear_unlink() {
  if (has_unlink()) {
    delete payload_.unlink_;
    clear_has_payload();
  }
}
 const ::server::TUnlink& Envelope::unlink() const {
  // @@protoc_insertion_point(field_get:server.Envelope.unlink)
  return has_unlink()
      ? *payload_.unlink_
      : ::server::TUnlink::default_instance();
}
::server::TUnlink* Envelope::mutable_unlink() {
  if (!has_unlink()) {
    clear_payload();
    set_has_unlink();
    payload_.unlink_ = new ::server::TUnlink;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.unlink)
  return payload_.unlink_;
}
::server::TUnlink* Envelope::release_unlink() {
  // @@protoc_insertion_point(field_release:server.Envelope.unlink)
  if (has_unlink()) {
    clear_has_payload();
    ::server::TUnlink* temp = payload_.unlink_;
    payload_.unlink_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_unlink(::server::TUnlink* unlink) {
  clear_payload();
  if (unlink) {
    set_has_unlink();
    payload_.unlink_ = unlink;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.unlink)
}

// optional .server.TSelfFetch self_fetch = 7;
bool Envelope::has_self_fetch() const {
  return payload_case() == kSelfFetch;
}
void Envelope::set_has_self_fetch() {
  _oneof_case_[0] = kSelfFetch;
}
void Envelope::clear_self_fetch() {
  if (has_self_fetch()) {
    delete payload_.self_fetch_;
    clear_has_payload();
  }
}
 const ::server::TSelfFetch& Envelope::self_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_fetch)
  return has_self_fetch()
      ? *payload_.self_fetch_
      : ::server::TSelfFetch::default_instance();
}
::server::TSelfFetch* Envelope::mutable_self_fetch() {
  if (!has_self_fetch()) {
    clear_payload();
    set_has_self_fetch();
    payload_.self_fetch_ = new ::server::TSelfFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_fetch)
  return payload_.self_fetch_;
}
::server::TSelfFetch* Envelope::release_self_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_fetch)
  if (has_self_fetch()) {
    clear_has_payload();
    ::server::TSelfFetch* temp = payload_.self_fetch_;
    payload_.self_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_self_fetch(::server::TSelfFetch* self_fetch) {
  clear_payload();
  if (self_fetch) {
    set_has_self_fetch();
    payload_.self_fetch_ = self_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self_fetch)
}

// optional .server.TSelfUpdate self_update = 8;
bool Envelope::has_self_update() const {
  return payload_case() == kSelfUpdate;
}
void Envelope::set_has_self_update() {
  _oneof_case_[0] = kSelfUpdate;
}
void Envelope::clear_self_update() {
  if (has_self_update()) {
    delete payload_.self_update_;
    clear_has_payload();
  }
}
 const ::server::TSelfUpdate& Envelope::self_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_update)
  return has_self_update()
      ? *payload_.self_update_
      : ::server::TSelfUpdate::default_instance();
}
::server::TSelfUpdate* Envelope::mutable_self_update() {
  if (!has_self_update()) {
    clear_payload();
    set_has_self_update();
    payload_.self_update_ = new ::server::TSelfUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_update)
  return payload_.self_update_;
}
::server::TSelfUpdate* Envelope::release_self_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_update)
  if (has_self_update()) {
    clear_has_payload();
    ::server::TSelfUpdate* temp = payload_.self_update_;
    payload_.self_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_self_update(::server::TSelfUpdate* self_update) {
  clear_payload();
  if (self_update) {
    set_has_self_update();
    payload_.self_update_ = self_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self_update)
}

// optional .server.TUsersFetch users_fetch = 9;
bool Envelope::has_users_fetch() const {
  return payload_case() == kUsersFetch;
}
void Envelope::set_has_users_fetch() {
  _oneof_case_[0] = kUsersFetch;
}
void Envelope::clear_users_fetch() {
  if (has_users_fetch()) {
    delete payload_.users_fetch_;
    clear_has_payload();
  }
}
 const ::server::TUsersFetch& Envelope::users_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users_fetch)
  return has_users_fetch()
      ? *payload_.users_fetch_
      : ::server::TUsersFetch::default_instance();
}
::server::TUsersFetch* Envelope::mutable_users_fetch() {
  if (!has_users_fetch()) {
    clear_payload();
    set_has_users_fetch();
    payload_.users_fetch_ = new ::server::TUsersFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.users_fetch)
  return payload_.users_fetch_;
}
::server::TUsersFetch* Envelope::release_users_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.users_fetch)
  if (has_users_fetch()) {
    clear_has_payload();
    ::server::TUsersFetch* temp = payload_.users_fetch_;
    payload_.users_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_users_fetch(::server::TUsersFetch* users_fetch) {
  clear_payload();
  if (users_fetch) {
    set_has_users_fetch();
    payload_.users_fetch_ = users_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.users_fetch)
}

// optional .server.TSelf self = 10;
bool Envelope::has_self() const {
  return payload_case() == kSelf;
}
void Envelope::set_has_self() {
  _oneof_case_[0] = kSelf;
}
void Envelope::clear_self() {
  if (has_self()) {
    delete payload_.self_;
    clear_has_payload();
  }
}
 const ::server::TSelf& Envelope::self() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self)
  return has_self()
      ? *payload_.self_
      : ::server::TSelf::default_instance();
}
::server::TSelf* Envelope::mutable_self() {
  if (!has_self()) {
    clear_payload();
    set_has_self();
    payload_.self_ = new ::server::TSelf;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self)
  return payload_.self_;
}
::server::TSelf* Envelope::release_self() {
  // @@protoc_insertion_point(field_release:server.Envelope.self)
  if (has_self()) {
    clear_has_payload();
    ::server::TSelf* temp = payload_.self_;
    payload_.self_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_self(::server::TSelf* self) {
  clear_payload();
  if (self) {
    set_has_self();
    payload_.self_ = self;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self)
}

// optional .server.TUsers users = 11;
bool Envelope::has_users() const {
  return payload_case() == kUsers;
}
void Envelope::set_has_users() {
  _oneof_case_[0] = kUsers;
}
void Envelope::clear_users() {
  if (has_users()) {
    delete payload_.users_;
    clear_has_payload();
  }
}
 const ::server::TUsers& Envelope::users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users)
  return has_users()
      ? *payload_.users_
      : ::server::TUsers::default_instance();
}
::server::TUsers* Envelope::mutable_users() {
  if (!has_users()) {
    clear_payload();
    set_has_users();
    payload_.users_ = new ::server::TUsers;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.users)
  return payload_.users_;
}
::server::TUsers* Envelope::release_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.users)
  if (has_users()) {
    clear_has_payload();
    ::server::TUsers* temp = payload_.users_;
    payload_.users_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_users(::server::TUsers* users) {
  clear_payload();
  if (users) {
    set_has_users();
    payload_.users_ = users;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.users)
}

// optional .server.TFriendsAdd friends_add = 12;
bool Envelope::has_friends_add() const {
  return payload_case() == kFriendsAdd;
}
void Envelope::set_has_friends_add() {
  _oneof_case_[0] = kFriendsAdd;
}
void Envelope::clear_friends_add() {
  if (has_friends_add()) {
    delete payload_.friends_add_;
    clear_has_payload();
  }
}
 const ::server::TFriendsAdd& Envelope::friends_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_add)
  return has_friends_add()
      ? *payload_.friends_add_
      : ::server::TFriendsAdd::default_instance();
}
::server::TFriendsAdd* Envelope::mutable_friends_add() {
  if (!has_friends_add()) {
    clear_payload();
    set_has_friends_add();
    payload_.friends_add_ = new ::server::TFriendsAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_add)
  return payload_.friends_add_;
}
::server::TFriendsAdd* Envelope::release_friends_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_add)
  if (has_friends_add()) {
    clear_has_payload();
    ::server::TFriendsAdd* temp = payload_.friends_add_;
    payload_.friends_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friends_add(::server::TFriendsAdd* friends_add) {
  clear_payload();
  if (friends_add) {
    set_has_friends_add();
    payload_.friends_add_ = friends_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_add)
}

// optional .server.TFriendsRemove friends_remove = 13;
bool Envelope::has_friends_remove() const {
  return payload_case() == kFriendsRemove;
}
void Envelope::set_has_friends_remove() {
  _oneof_case_[0] = kFriendsRemove;
}
void Envelope::clear_friends_remove() {
  if (has_friends_remove()) {
    delete payload_.friends_remove_;
    clear_has_payload();
  }
}
 const ::server::TFriendsRemove& Envelope::friends_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_remove)
  return has_friends_remove()
      ? *payload_.friends_remove_
      : ::server::TFriendsRemove::default_instance();
}
::server::TFriendsRemove* Envelope::mutable_friends_remove() {
  if (!has_friends_remove()) {
    clear_payload();
    set_has_friends_remove();
    payload_.friends_remove_ = new ::server::TFriendsRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_remove)
  return payload_.friends_remove_;
}
::server::TFriendsRemove* Envelope::release_friends_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_remove)
  if (has_friends_remove()) {
    clear_has_payload();
    ::server::TFriendsRemove* temp = payload_.friends_remove_;
    payload_.friends_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friends_remove(::server::TFriendsRemove* friends_remove) {
  clear_payload();
  if (friends_remove) {
    set_has_friends_remove();
    payload_.friends_remove_ = friends_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_remove)
}

// optional .server.TFriendsBlock friends_block = 14;
bool Envelope::has_friends_block() const {
  return payload_case() == kFriendsBlock;
}
void Envelope::set_has_friends_block() {
  _oneof_case_[0] = kFriendsBlock;
}
void Envelope::clear_friends_block() {
  if (has_friends_block()) {
    delete payload_.friends_block_;
    clear_has_payload();
  }
}
 const ::server::TFriendsBlock& Envelope::friends_block() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_block)
  return has_friends_block()
      ? *payload_.friends_block_
      : ::server::TFriendsBlock::default_instance();
}
::server::TFriendsBlock* Envelope::mutable_friends_block() {
  if (!has_friends_block()) {
    clear_payload();
    set_has_friends_block();
    payload_.friends_block_ = new ::server::TFriendsBlock;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_block)
  return payload_.friends_block_;
}
::server::TFriendsBlock* Envelope::release_friends_block() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_block)
  if (has_friends_block()) {
    clear_has_payload();
    ::server::TFriendsBlock* temp = payload_.friends_block_;
    payload_.friends_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friends_block(::server::TFriendsBlock* friends_block) {
  clear_payload();
  if (friends_block) {
    set_has_friends_block();
    payload_.friends_block_ = friends_block;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_block)
}

// optional .server.TFriendsList friends_list = 15;
bool Envelope::has_friends_list() const {
  return payload_case() == kFriendsList;
}
void Envelope::set_has_friends_list() {
  _oneof_case_[0] = kFriendsList;
}
void Envelope::clear_friends_list() {
  if (has_friends_list()) {
    delete payload_.friends_list_;
    clear_has_payload();
  }
}
 const ::server::TFriendsList& Envelope::friends_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_list)
  return has_friends_list()
      ? *payload_.friends_list_
      : ::server::TFriendsList::default_instance();
}
::server::TFriendsList* Envelope::mutable_friends_list() {
  if (!has_friends_list()) {
    clear_payload();
    set_has_friends_list();
    payload_.friends_list_ = new ::server::TFriendsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_list)
  return payload_.friends_list_;
}
::server::TFriendsList* Envelope::release_friends_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_list)
  if (has_friends_list()) {
    clear_has_payload();
    ::server::TFriendsList* temp = payload_.friends_list_;
    payload_.friends_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friends_list(::server::TFriendsList* friends_list) {
  clear_payload();
  if (friends_list) {
    set_has_friends_list();
    payload_.friends_list_ = friends_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_list)
}

// optional .server.TFriends friends = 16;
bool Envelope::has_friends() const {
  return payload_case() == kFriends;
}
void Envelope::set_has_friends() {
  _oneof_case_[0] = kFriends;
}
void Envelope::clear_friends() {
  if (has_friends()) {
    delete payload_.friends_;
    clear_has_payload();
  }
}
 const ::server::TFriends& Envelope::friends() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends)
  return has_friends()
      ? *payload_.friends_
      : ::server::TFriends::default_instance();
}
::server::TFriends* Envelope::mutable_friends() {
  if (!has_friends()) {
    clear_payload();
    set_has_friends();
    payload_.friends_ = new ::server::TFriends;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends)
  return payload_.friends_;
}
::server::TFriends* Envelope::release_friends() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends)
  if (has_friends()) {
    clear_has_payload();
    ::server::TFriends* temp = payload_.friends_;
    payload_.friends_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friends(::server::TFriends* friends) {
  clear_payload();
  if (friends) {
    set_has_friends();
    payload_.friends_ = friends;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends)
}

// optional .server.TGroupsCreate groups_create = 17;
bool Envelope::has_groups_create() const {
  return payload_case() == kGroupsCreate;
}
void Envelope::set_has_groups_create() {
  _oneof_case_[0] = kGroupsCreate;
}
void Envelope::clear_groups_create() {
  if (has_groups_create()) {
    delete payload_.groups_create_;
    clear_has_payload();
  }
}
 const ::server::TGroupsCreate& Envelope::groups_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_create)
  return has_groups_create()
      ? *payload_.groups_create_
      : ::server::TGroupsCreate::default_instance();
}
::server::TGroupsCreate* Envelope::mutable_groups_create() {
  if (!has_groups_create()) {
    clear_payload();
    set_has_groups_create();
    payload_.groups_create_ = new ::server::TGroupsCreate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_create)
  return payload_.groups_create_;
}
::server::TGroupsCreate* Envelope::release_groups_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_create)
  if (has_groups_create()) {
    clear_has_payload();
    ::server::TGroupsCreate* temp = payload_.groups_create_;
    payload_.groups_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_create(::server::TGroupsCreate* groups_create) {
  clear_payload();
  if (groups_create) {
    set_has_groups_create();
    payload_.groups_create_ = groups_create;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_create)
}

// optional .server.TGroupsUpdate groups_update = 18;
bool Envelope::has_groups_update() const {
  return payload_case() == kGroupsUpdate;
}
void Envelope::set_has_groups_update() {
  _oneof_case_[0] = kGroupsUpdate;
}
void Envelope::clear_groups_update() {
  if (has_groups_update()) {
    delete payload_.groups_update_;
    clear_has_payload();
  }
}
 const ::server::TGroupsUpdate& Envelope::groups_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_update)
  return has_groups_update()
      ? *payload_.groups_update_
      : ::server::TGroupsUpdate::default_instance();
}
::server::TGroupsUpdate* Envelope::mutable_groups_update() {
  if (!has_groups_update()) {
    clear_payload();
    set_has_groups_update();
    payload_.groups_update_ = new ::server::TGroupsUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_update)
  return payload_.groups_update_;
}
::server::TGroupsUpdate* Envelope::release_groups_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_update)
  if (has_groups_update()) {
    clear_has_payload();
    ::server::TGroupsUpdate* temp = payload_.groups_update_;
    payload_.groups_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_update(::server::TGroupsUpdate* groups_update) {
  clear_payload();
  if (groups_update) {
    set_has_groups_update();
    payload_.groups_update_ = groups_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_update)
}

// optional .server.TGroupsRemove groups_remove = 19;
bool Envelope::has_groups_remove() const {
  return payload_case() == kGroupsRemove;
}
void Envelope::set_has_groups_remove() {
  _oneof_case_[0] = kGroupsRemove;
}
void Envelope::clear_groups_remove() {
  if (has_groups_remove()) {
    delete payload_.groups_remove_;
    clear_has_payload();
  }
}
 const ::server::TGroupsRemove& Envelope::groups_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_remove)
  return has_groups_remove()
      ? *payload_.groups_remove_
      : ::server::TGroupsRemove::default_instance();
}
::server::TGroupsRemove* Envelope::mutable_groups_remove() {
  if (!has_groups_remove()) {
    clear_payload();
    set_has_groups_remove();
    payload_.groups_remove_ = new ::server::TGroupsRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_remove)
  return payload_.groups_remove_;
}
::server::TGroupsRemove* Envelope::release_groups_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_remove)
  if (has_groups_remove()) {
    clear_has_payload();
    ::server::TGroupsRemove* temp = payload_.groups_remove_;
    payload_.groups_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_remove(::server::TGroupsRemove* groups_remove) {
  clear_payload();
  if (groups_remove) {
    set_has_groups_remove();
    payload_.groups_remove_ = groups_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_remove)
}

// optional .server.TGroupsFetch groups_fetch = 20;
bool Envelope::has_groups_fetch() const {
  return payload_case() == kGroupsFetch;
}
void Envelope::set_has_groups_fetch() {
  _oneof_case_[0] = kGroupsFetch;
}
void Envelope::clear_groups_fetch() {
  if (has_groups_fetch()) {
    delete payload_.groups_fetch_;
    clear_has_payload();
  }
}
 const ::server::TGroupsFetch& Envelope::groups_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_fetch)
  return has_groups_fetch()
      ? *payload_.groups_fetch_
      : ::server::TGroupsFetch::default_instance();
}
::server::TGroupsFetch* Envelope::mutable_groups_fetch() {
  if (!has_groups_fetch()) {
    clear_payload();
    set_has_groups_fetch();
    payload_.groups_fetch_ = new ::server::TGroupsFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_fetch)
  return payload_.groups_fetch_;
}
::server::TGroupsFetch* Envelope::release_groups_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_fetch)
  if (has_groups_fetch()) {
    clear_has_payload();
    ::server::TGroupsFetch* temp = payload_.groups_fetch_;
    payload_.groups_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_fetch(::server::TGroupsFetch* groups_fetch) {
  clear_payload();
  if (groups_fetch) {
    set_has_groups_fetch();
    payload_.groups_fetch_ = groups_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_fetch)
}

// optional .server.TGroupsList groups_list = 21;
bool Envelope::has_groups_list() const {
  return payload_case() == kGroupsList;
}
void Envelope::set_has_groups_list() {
  _oneof_case_[0] = kGroupsList;
}
void Envelope::clear_groups_list() {
  if (has_groups_list()) {
    delete payload_.groups_list_;
    clear_has_payload();
  }
}
 const ::server::TGroupsList& Envelope::groups_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_list)
  return has_groups_list()
      ? *payload_.groups_list_
      : ::server::TGroupsList::default_instance();
}
::server::TGroupsList* Envelope::mutable_groups_list() {
  if (!has_groups_list()) {
    clear_payload();
    set_has_groups_list();
    payload_.groups_list_ = new ::server::TGroupsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_list)
  return payload_.groups_list_;
}
::server::TGroupsList* Envelope::release_groups_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_list)
  if (has_groups_list()) {
    clear_has_payload();
    ::server::TGroupsList* temp = payload_.groups_list_;
    payload_.groups_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_list(::server::TGroupsList* groups_list) {
  clear_payload();
  if (groups_list) {
    set_has_groups_list();
    payload_.groups_list_ = groups_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_list)
}

// optional .server.TGroupsSelfList groups_self_list = 22;
bool Envelope::has_groups_self_list() const {
  return payload_case() == kGroupsSelfList;
}
void Envelope::set_has_groups_self_list() {
  _oneof_case_[0] = kGroupsSelfList;
}
void Envelope::clear_groups_self_list() {
  if (has_groups_self_list()) {
    delete payload_.groups_self_list_;
    clear_has_payload();
  }
}
 const ::server::TGroupsSelfList& Envelope::groups_self_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_self_list)
  return has_groups_self_list()
      ? *payload_.groups_self_list_
      : ::server::TGroupsSelfList::default_instance();
}
::server::TGroupsSelfList* Envelope::mutable_groups_self_list() {
  if (!has_groups_self_list()) {
    clear_payload();
    set_has_groups_self_list();
    payload_.groups_self_list_ = new ::server::TGroupsSelfList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_self_list)
  return payload_.groups_self_list_;
}
::server::TGroupsSelfList* Envelope::release_groups_self_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_self_list)
  if (has_groups_self_list()) {
    clear_has_payload();
    ::server::TGroupsSelfList* temp = payload_.groups_self_list_;
    payload_.groups_self_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_self_list(::server::TGroupsSelfList* groups_self_list) {
  clear_payload();
  if (groups_self_list) {
    set_has_groups_self_list();
    payload_.groups_self_list_ = groups_self_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_self_list)
}

// optional .server.TGroupUsersList group_users_list = 23;
bool Envelope::has_group_users_list() const {
  return payload_case() == kGroupUsersList;
}
void Envelope::set_has_group_users_list() {
  _oneof_case_[0] = kGroupUsersList;
}
void Envelope::clear_group_users_list() {
  if (has_group_users_list()) {
    delete payload_.group_users_list_;
    clear_has_payload();
  }
}
 const ::server::TGroupUsersList& Envelope::group_users_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_list)
  return has_group_users_list()
      ? *payload_.group_users_list_
      : ::server::TGroupUsersList::default_instance();
}
::server::TGroupUsersList* Envelope::mutable_group_users_list() {
  if (!has_group_users_list()) {
    clear_payload();
    set_has_group_users_list();
    payload_.group_users_list_ = new ::server::TGroupUsersList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_list)
  return payload_.group_users_list_;
}
::server::TGroupUsersList* Envelope::release_group_users_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_list)
  if (has_group_users_list()) {
    clear_has_payload();
    ::server::TGroupUsersList* temp = payload_.group_users_list_;
    payload_.group_users_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_users_list(::server::TGroupUsersList* group_users_list) {
  clear_payload();
  if (group_users_list) {
    set_has_group_users_list();
    payload_.group_users_list_ = group_users_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_list)
}

// optional .server.TGroupsJoin groups_join = 24;
bool Envelope::has_groups_join() const {
  return payload_case() == kGroupsJoin;
}
void Envelope::set_has_groups_join() {
  _oneof_case_[0] = kGroupsJoin;
}
void Envelope::clear_groups_join() {
  if (has_groups_join()) {
    delete payload_.groups_join_;
    clear_has_payload();
  }
}
 const ::server::TGroupsJoin& Envelope::groups_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_join)
  return has_groups_join()
      ? *payload_.groups_join_
      : ::server::TGroupsJoin::default_instance();
}
::server::TGroupsJoin* Envelope::mutable_groups_join() {
  if (!has_groups_join()) {
    clear_payload();
    set_has_groups_join();
    payload_.groups_join_ = new ::server::TGroupsJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_join)
  return payload_.groups_join_;
}
::server::TGroupsJoin* Envelope::release_groups_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_join)
  if (has_groups_join()) {
    clear_has_payload();
    ::server::TGroupsJoin* temp = payload_.groups_join_;
    payload_.groups_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_join(::server::TGroupsJoin* groups_join) {
  clear_payload();
  if (groups_join) {
    set_has_groups_join();
    payload_.groups_join_ = groups_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_join)
}

// optional .server.TGroupsLeave groups_leave = 25;
bool Envelope::has_groups_leave() const {
  return payload_case() == kGroupsLeave;
}
void Envelope::set_has_groups_leave() {
  _oneof_case_[0] = kGroupsLeave;
}
void Envelope::clear_groups_leave() {
  if (has_groups_leave()) {
    delete payload_.groups_leave_;
    clear_has_payload();
  }
}
 const ::server::TGroupsLeave& Envelope::groups_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_leave)
  return has_groups_leave()
      ? *payload_.groups_leave_
      : ::server::TGroupsLeave::default_instance();
}
::server::TGroupsLeave* Envelope::mutable_groups_leave() {
  if (!has_groups_leave()) {
    clear_payload();
    set_has_groups_leave();
    payload_.groups_leave_ = new ::server::TGroupsLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_leave)
  return payload_.groups_leave_;
}
::server::TGroupsLeave* Envelope::release_groups_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_leave)
  if (has_groups_leave()) {
    clear_has_payload();
    ::server::TGroupsLeave* temp = payload_.groups_leave_;
    payload_.groups_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_leave(::server::TGroupsLeave* groups_leave) {
  clear_payload();
  if (groups_leave) {
    set_has_groups_leave();
    payload_.groups_leave_ = groups_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_leave)
}

// optional .server.TGroupUsersAdd group_users_add = 26;
bool Envelope::has_group_users_add() const {
  return payload_case() == kGroupUsersAdd;
}
void Envelope::set_has_group_users_add() {
  _oneof_case_[0] = kGroupUsersAdd;
}
void Envelope::clear_group_users_add() {
  if (has_group_users_add()) {
    delete payload_.group_users_add_;
    clear_has_payload();
  }
}
 const ::server::TGroupUsersAdd& Envelope::group_users_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_add)
  return has_group_users_add()
      ? *payload_.group_users_add_
      : ::server::TGroupUsersAdd::default_instance();
}
::server::TGroupUsersAdd* Envelope::mutable_group_users_add() {
  if (!has_group_users_add()) {
    clear_payload();
    set_has_group_users_add();
    payload_.group_users_add_ = new ::server::TGroupUsersAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_add)
  return payload_.group_users_add_;
}
::server::TGroupUsersAdd* Envelope::release_group_users_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_add)
  if (has_group_users_add()) {
    clear_has_payload();
    ::server::TGroupUsersAdd* temp = payload_.group_users_add_;
    payload_.group_users_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_users_add(::server::TGroupUsersAdd* group_users_add) {
  clear_payload();
  if (group_users_add) {
    set_has_group_users_add();
    payload_.group_users_add_ = group_users_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_add)
}

// optional .server.TGroupUsersKick group_users_kick = 27;
bool Envelope::has_group_users_kick() const {
  return payload_case() == kGroupUsersKick;
}
void Envelope::set_has_group_users_kick() {
  _oneof_case_[0] = kGroupUsersKick;
}
void Envelope::clear_group_users_kick() {
  if (has_group_users_kick()) {
    delete payload_.group_users_kick_;
    clear_has_payload();
  }
}
 const ::server::TGroupUsersKick& Envelope::group_users_kick() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_kick)
  return has_group_users_kick()
      ? *payload_.group_users_kick_
      : ::server::TGroupUsersKick::default_instance();
}
::server::TGroupUsersKick* Envelope::mutable_group_users_kick() {
  if (!has_group_users_kick()) {
    clear_payload();
    set_has_group_users_kick();
    payload_.group_users_kick_ = new ::server::TGroupUsersKick;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_kick)
  return payload_.group_users_kick_;
}
::server::TGroupUsersKick* Envelope::release_group_users_kick() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_kick)
  if (has_group_users_kick()) {
    clear_has_payload();
    ::server::TGroupUsersKick* temp = payload_.group_users_kick_;
    payload_.group_users_kick_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_users_kick(::server::TGroupUsersKick* group_users_kick) {
  clear_payload();
  if (group_users_kick) {
    set_has_group_users_kick();
    payload_.group_users_kick_ = group_users_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_kick)
}

// optional .server.TGroupUsersPromote group_users_promote = 28;
bool Envelope::has_group_users_promote() const {
  return payload_case() == kGroupUsersPromote;
}
void Envelope::set_has_group_users_promote() {
  _oneof_case_[0] = kGroupUsersPromote;
}
void Envelope::clear_group_users_promote() {
  if (has_group_users_promote()) {
    delete payload_.group_users_promote_;
    clear_has_payload();
  }
}
 const ::server::TGroupUsersPromote& Envelope::group_users_promote() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_promote)
  return has_group_users_promote()
      ? *payload_.group_users_promote_
      : ::server::TGroupUsersPromote::default_instance();
}
::server::TGroupUsersPromote* Envelope::mutable_group_users_promote() {
  if (!has_group_users_promote()) {
    clear_payload();
    set_has_group_users_promote();
    payload_.group_users_promote_ = new ::server::TGroupUsersPromote;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_promote)
  return payload_.group_users_promote_;
}
::server::TGroupUsersPromote* Envelope::release_group_users_promote() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_promote)
  if (has_group_users_promote()) {
    clear_has_payload();
    ::server::TGroupUsersPromote* temp = payload_.group_users_promote_;
    payload_.group_users_promote_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_users_promote(::server::TGroupUsersPromote* group_users_promote) {
  clear_payload();
  if (group_users_promote) {
    set_has_group_users_promote();
    payload_.group_users_promote_ = group_users_promote;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_promote)
}

// optional .server.TGroups groups = 29;
bool Envelope::has_groups() const {
  return payload_case() == kGroups;
}
void Envelope::set_has_groups() {
  _oneof_case_[0] = kGroups;
}
void Envelope::clear_groups() {
  if (has_groups()) {
    delete payload_.groups_;
    clear_has_payload();
  }
}
 const ::server::TGroups& Envelope::groups() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups)
  return has_groups()
      ? *payload_.groups_
      : ::server::TGroups::default_instance();
}
::server::TGroups* Envelope::mutable_groups() {
  if (!has_groups()) {
    clear_payload();
    set_has_groups();
    payload_.groups_ = new ::server::TGroups;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups)
  return payload_.groups_;
}
::server::TGroups* Envelope::release_groups() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups)
  if (has_groups()) {
    clear_has_payload();
    ::server::TGroups* temp = payload_.groups_;
    payload_.groups_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups(::server::TGroups* groups) {
  clear_payload();
  if (groups) {
    set_has_groups();
    payload_.groups_ = groups;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups)
}

// optional .server.TGroupsSelf groups_self = 30;
bool Envelope::has_groups_self() const {
  return payload_case() == kGroupsSelf;
}
void Envelope::set_has_groups_self() {
  _oneof_case_[0] = kGroupsSelf;
}
void Envelope::clear_groups_self() {
  if (has_groups_self()) {
    delete payload_.groups_self_;
    clear_has_payload();
  }
}
 const ::server::TGroupsSelf& Envelope::groups_self() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_self)
  return has_groups_self()
      ? *payload_.groups_self_
      : ::server::TGroupsSelf::default_instance();
}
::server::TGroupsSelf* Envelope::mutable_groups_self() {
  if (!has_groups_self()) {
    clear_payload();
    set_has_groups_self();
    payload_.groups_self_ = new ::server::TGroupsSelf;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_self)
  return payload_.groups_self_;
}
::server::TGroupsSelf* Envelope::release_groups_self() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_self)
  if (has_groups_self()) {
    clear_has_payload();
    ::server::TGroupsSelf* temp = payload_.groups_self_;
    payload_.groups_self_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_self(::server::TGroupsSelf* groups_self) {
  clear_payload();
  if (groups_self) {
    set_has_groups_self();
    payload_.groups_self_ = groups_self;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_self)
}

// optional .server.TGroupUsers group_users = 31;
bool Envelope::has_group_users() const {
  return payload_case() == kGroupUsers;
}
void Envelope::set_has_group_users() {
  _oneof_case_[0] = kGroupUsers;
}
void Envelope::clear_group_users() {
  if (has_group_users()) {
    delete payload_.group_users_;
    clear_has_payload();
  }
}
 const ::server::TGroupUsers& Envelope::group_users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users)
  return has_group_users()
      ? *payload_.group_users_
      : ::server::TGroupUsers::default_instance();
}
::server::TGroupUsers* Envelope::mutable_group_users() {
  if (!has_group_users()) {
    clear_payload();
    set_has_group_users();
    payload_.group_users_ = new ::server::TGroupUsers;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users)
  return payload_.group_users_;
}
::server::TGroupUsers* Envelope::release_group_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users)
  if (has_group_users()) {
    clear_has_payload();
    ::server::TGroupUsers* temp = payload_.group_users_;
    payload_.group_users_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_users(::server::TGroupUsers* group_users) {
  clear_payload();
  if (group_users) {
    set_has_group_users();
    payload_.group_users_ = group_users;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users)
}

// optional .server.TTopicsJoin topics_join = 32;
bool Envelope::has_topics_join() const {
  return payload_case() == kTopicsJoin;
}
void Envelope::set_has_topics_join() {
  _oneof_case_[0] = kTopicsJoin;
}
void Envelope::clear_topics_join() {
  if (has_topics_join()) {
    delete payload_.topics_join_;
    clear_has_payload();
  }
}
 const ::server::TTopicsJoin& Envelope::topics_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics_join)
  return has_topics_join()
      ? *payload_.topics_join_
      : ::server::TTopicsJoin::default_instance();
}
::server::TTopicsJoin* Envelope::mutable_topics_join() {
  if (!has_topics_join()) {
    clear_payload();
    set_has_topics_join();
    payload_.topics_join_ = new ::server::TTopicsJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics_join)
  return payload_.topics_join_;
}
::server::TTopicsJoin* Envelope::release_topics_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics_join)
  if (has_topics_join()) {
    clear_has_payload();
    ::server::TTopicsJoin* temp = payload_.topics_join_;
    payload_.topics_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topics_join(::server::TTopicsJoin* topics_join) {
  clear_payload();
  if (topics_join) {
    set_has_topics_join();
    payload_.topics_join_ = topics_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topics_join)
}

// optional .server.TTopicsLeave topics_leave = 33;
bool Envelope::has_topics_leave() const {
  return payload_case() == kTopicsLeave;
}
void Envelope::set_has_topics_leave() {
  _oneof_case_[0] = kTopicsLeave;
}
void Envelope::clear_topics_leave() {
  if (has_topics_leave()) {
    delete payload_.topics_leave_;
    clear_has_payload();
  }
}
 const ::server::TTopicsLeave& Envelope::topics_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics_leave)
  return has_topics_leave()
      ? *payload_.topics_leave_
      : ::server::TTopicsLeave::default_instance();
}
::server::TTopicsLeave* Envelope::mutable_topics_leave() {
  if (!has_topics_leave()) {
    clear_payload();
    set_has_topics_leave();
    payload_.topics_leave_ = new ::server::TTopicsLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics_leave)
  return payload_.topics_leave_;
}
::server::TTopicsLeave* Envelope::release_topics_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics_leave)
  if (has_topics_leave()) {
    clear_has_payload();
    ::server::TTopicsLeave* temp = payload_.topics_leave_;
    payload_.topics_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topics_leave(::server::TTopicsLeave* topics_leave) {
  clear_payload();
  if (topics_leave) {
    set_has_topics_leave();
    payload_.topics_leave_ = topics_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topics_leave)
}

// optional .server.TTopicMessageSend topic_message_send = 34;
bool Envelope::has_topic_message_send() const {
  return payload_case() == kTopicMessageSend;
}
void Envelope::set_has_topic_message_send() {
  _oneof_case_[0] = kTopicMessageSend;
}
void Envelope::clear_topic_message_send() {
  if (has_topic_message_send()) {
    delete payload_.topic_message_send_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessageSend& Envelope::topic_message_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_send)
  return has_topic_message_send()
      ? *payload_.topic_message_send_
      : ::server::TTopicMessageSend::default_instance();
}
::server::TTopicMessageSend* Envelope::mutable_topic_message_send() {
  if (!has_topic_message_send()) {
    clear_payload();
    set_has_topic_message_send();
    payload_.topic_message_send_ = new ::server::TTopicMessageSend;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_send)
  return payload_.topic_message_send_;
}
::server::TTopicMessageSend* Envelope::release_topic_message_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_send)
  if (has_topic_message_send()) {
    clear_has_payload();
    ::server::TTopicMessageSend* temp = payload_.topic_message_send_;
    payload_.topic_message_send_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_message_send(::server::TTopicMessageSend* topic_message_send) {
  clear_payload();
  if (topic_message_send) {
    set_has_topic_message_send();
    payload_.topic_message_send_ = topic_message_send;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_send)
}

// optional .server.TTopicMessagesList topic_messages_list = 35;
bool Envelope::has_topic_messages_list() const {
  return payload_case() == kTopicMessagesList;
}
void Envelope::set_has_topic_messages_list() {
  _oneof_case_[0] = kTopicMessagesList;
}
void Envelope::clear_topic_messages_list() {
  if (has_topic_messages_list()) {
    delete payload_.topic_messages_list_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessagesList& Envelope::topic_messages_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages_list)
  return has_topic_messages_list()
      ? *payload_.topic_messages_list_
      : ::server::TTopicMessagesList::default_instance();
}
::server::TTopicMessagesList* Envelope::mutable_topic_messages_list() {
  if (!has_topic_messages_list()) {
    clear_payload();
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = new ::server::TTopicMessagesList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages_list)
  return payload_.topic_messages_list_;
}
::server::TTopicMessagesList* Envelope::release_topic_messages_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages_list)
  if (has_topic_messages_list()) {
    clear_has_payload();
    ::server::TTopicMessagesList* temp = payload_.topic_messages_list_;
    payload_.topic_messages_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_messages_list(::server::TTopicMessagesList* topic_messages_list) {
  clear_payload();
  if (topic_messages_list) {
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = topic_messages_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages_list)
}

// optional .server.TTopics topics = 36;
bool Envelope::has_topics() const {
  return payload_case() == kTopics;
}
void Envelope::set_has_topics() {
  _oneof_case_[0] = kTopics;
}
void Envelope::clear_topics() {
  if (has_topics()) {
    delete payload_.topics_;
    clear_has_payload();
  }
}
 const ::server::TTopics& Envelope::topics() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics)
  return has_topics()
      ? *payload_.topics_
      : ::server::TTopics::default_instance();
}
::server::TTopics* Envelope::mutable_topics() {
  if (!has_topics()) {
    clear_payload();
    set_has_topics();
    payload_.topics_ = new ::server::TTopics;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics)
  return payload_.topics_;
}
::server::TTopics* Envelope::release_topics() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics)
  if (has_topics()) {
    clear_has_payload();
    ::server::TTopics* temp = payload_.topics_;
    payload_.topics_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topics(::server::TTopics* topics) {
  clear_payload();
  if (topics) {
    set_has_topics();
    payload_.topics_ = topics;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topics)
}

// optional .server.TTopicMessageAck topic_message_ack = 37;
bool Envelope::has_topic_message_ack() const {
  return payload_case() == kTopicMessageAck;
}
void Envelope::set_has_topic_message_ack() {
  _oneof_case_[0] = kTopicMessageAck;
}
void Envelope::clear_topic_message_ack() {
  if (has_topic_message_ack()) {
    delete payload_.topic_message_ack_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessageAck& Envelope::topic_message_ack() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_ack)
  return has_topic_message_ack()
      ? *payload_.topic_message_ack_
      : ::server::TTopicMessageAck::default_instance();
}
::server::TTopicMessageAck* Envelope::mutable_topic_message_ack() {
  if (!has_topic_message_ack()) {
    clear_payload();
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = new ::server::TTopicMessageAck;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_ack)
  return payload_.topic_message_ack_;
}
::server::TTopicMessageAck* Envelope::release_topic_message_ack() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_ack)
  if (has_topic_message_ack()) {
    clear_has_payload();
    ::server::TTopicMessageAck* temp = payload_.topic_message_ack_;
    payload_.topic_message_ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_message_ack(::server::TTopicMessageAck* topic_message_ack) {
  clear_payload();
  if (topic_message_ack) {
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = topic_message_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_ack)
}

// optional .server.TopicMessage topic_message = 38;
bool Envelope::has_topic_message() const {
  return payload_case() == kTopicMessage;
}
void Envelope::set_has_topic_message() {
  _oneof_case_[0] = kTopicMessage;
}
void Envelope::clear_topic_message() {
  if (has_topic_message()) {
    delete payload_.topic_message_;
    clear_has_payload();
  }
}
 const ::server::TopicMessage& Envelope::topic_message() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message)
  return has_topic_message()
      ? *payload_.topic_message_
      : ::server::TopicMessage::default_instance();
}
::server::TopicMessage* Envelope::mutable_topic_message() {
  if (!has_topic_message()) {
    clear_payload();
    set_has_topic_message();
    payload_.topic_message_ = new ::server::TopicMessage;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message)
  return payload_.topic_message_;
}
::server::TopicMessage* Envelope::release_topic_message() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message)
  if (has_topic_message()) {
    clear_has_payload();
    ::server::TopicMessage* temp = payload_.topic_message_;
    payload_.topic_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_message(::server::TopicMessage* topic_message) {
  clear_payload();
  if (topic_message) {
    set_has_topic_message();
    payload_.topic_message_ = topic_message;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message)
}

// optional .server.TTopicMessages topic_messages = 39;
bool Envelope::has_topic_messages() const {
  return payload_case() == kTopicMessages;
}
void Envelope::set_has_topic_messages() {
  _oneof_case_[0] = kTopicMessages;
}
void Envelope::clear_topic_messages() {
  if (has_topic_messages()) {
    delete payload_.topic_messages_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessages& Envelope::topic_messages() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages)
  return has_topic_messages()
      ? *payload_.topic_messages_
      : ::server::TTopicMessages::default_instance();
}
::server::TTopicMessages* Envelope::mutable_topic_messages() {
  if (!has_topic_messages()) {
    clear_payload();
    set_has_topic_messages();
    payload_.topic_messages_ = new ::server::TTopicMessages;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages)
  return payload_.topic_messages_;
}
::server::TTopicMessages* Envelope::release_topic_messages() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages)
  if (has_topic_messages()) {
    clear_has_payload();
    ::server::TTopicMessages* temp = payload_.topic_messages_;
    payload_.topic_messages_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_messages(::server::TTopicMessages* topic_messages) {
  clear_payload();
  if (topic_messages) {
    set_has_topic_messages();
    payload_.topic_messages_ = topic_messages;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages)
}

// optional .server.TopicPresence topic_presence = 40;
bool Envelope::has_topic_presence() const {
  return payload_case() == kTopicPresence;
}
void Envelope::set_has_topic_presence() {
  _oneof_case_[0] = kTopicPresence;
}
void Envelope::clear_topic_presence() {
  if (has_topic_presence()) {
    delete payload_.topic_presence_;
    clear_has_payload();
  }
}
 const ::server::TopicPresence& Envelope::topic_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_presence)
  return has_topic_presence()
      ? *payload_.topic_presence_
      : ::server::TopicPresence::default_instance();
}
::server::TopicPresence* Envelope::mutable_topic_presence() {
  if (!has_topic_presence()) {
    clear_payload();
    set_has_topic_presence();
    payload_.topic_presence_ = new ::server::TopicPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_presence)
  return payload_.topic_presence_;
}
::server::TopicPresence* Envelope::release_topic_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_presence)
  if (has_topic_presence()) {
    clear_has_payload();
    ::server::TopicPresence* temp = payload_.topic_presence_;
    payload_.topic_presence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_presence(::server::TopicPresence* topic_presence) {
  clear_payload();
  if (topic_presence) {
    set_has_topic_presence();
    payload_.topic_presence_ = topic_presence;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_presence)
}

// optional .server.TMatchCreate match_create = 41;
bool Envelope::has_match_create() const {
  return payload_case() == kMatchCreate;
}
void Envelope::set_has_match_create() {
  _oneof_case_[0] = kMatchCreate;
}
void Envelope::clear_match_create() {
  if (has_match_create()) {
    delete payload_.match_create_;
    clear_has_payload();
  }
}
 const ::server::TMatchCreate& Envelope::match_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_create)
  return has_match_create()
      ? *payload_.match_create_
      : ::server::TMatchCreate::default_instance();
}
::server::TMatchCreate* Envelope::mutable_match_create() {
  if (!has_match_create()) {
    clear_payload();
    set_has_match_create();
    payload_.match_create_ = new ::server::TMatchCreate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_create)
  return payload_.match_create_;
}
::server::TMatchCreate* Envelope::release_match_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_create)
  if (has_match_create()) {
    clear_has_payload();
    ::server::TMatchCreate* temp = payload_.match_create_;
    payload_.match_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_create(::server::TMatchCreate* match_create) {
  clear_payload();
  if (match_create) {
    set_has_match_create();
    payload_.match_create_ = match_create;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_create)
}

// optional .server.TMatchesJoin matches_join = 42;
bool Envelope::has_matches_join() const {
  return payload_case() == kMatchesJoin;
}
void Envelope::set_has_matches_join() {
  _oneof_case_[0] = kMatchesJoin;
}
void Envelope::clear_matches_join() {
  if (has_matches_join()) {
    delete payload_.matches_join_;
    clear_has_payload();
  }
}
 const ::server::TMatchesJoin& Envelope::matches_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches_join)
  return has_matches_join()
      ? *payload_.matches_join_
      : ::server::TMatchesJoin::default_instance();
}
::server::TMatchesJoin* Envelope::mutable_matches_join() {
  if (!has_matches_join()) {
    clear_payload();
    set_has_matches_join();
    payload_.matches_join_ = new ::server::TMatchesJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches_join)
  return payload_.matches_join_;
}
::server::TMatchesJoin* Envelope::release_matches_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches_join)
  if (has_matches_join()) {
    clear_has_payload();
    ::server::TMatchesJoin* temp = payload_.matches_join_;
    payload_.matches_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_matches_join(::server::TMatchesJoin* matches_join) {
  clear_payload();
  if (matches_join) {
    set_has_matches_join();
    payload_.matches_join_ = matches_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matches_join)
}

// optional .server.TMatchesLeave matches_leave = 43;
bool Envelope::has_matches_leave() const {
  return payload_case() == kMatchesLeave;
}
void Envelope::set_has_matches_leave() {
  _oneof_case_[0] = kMatchesLeave;
}
void Envelope::clear_matches_leave() {
  if (has_matches_leave()) {
    delete payload_.matches_leave_;
    clear_has_payload();
  }
}
 const ::server::TMatchesLeave& Envelope::matches_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches_leave)
  return has_matches_leave()
      ? *payload_.matches_leave_
      : ::server::TMatchesLeave::default_instance();
}
::server::TMatchesLeave* Envelope::mutable_matches_leave() {
  if (!has_matches_leave()) {
    clear_payload();
    set_has_matches_leave();
    payload_.matches_leave_ = new ::server::TMatchesLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches_leave)
  return payload_.matches_leave_;
}
::server::TMatchesLeave* Envelope::release_matches_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches_leave)
  if (has_matches_leave()) {
    clear_has_payload();
    ::server::TMatchesLeave* temp = payload_.matches_leave_;
    payload_.matches_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_matches_leave(::server::TMatchesLeave* matches_leave) {
  clear_payload();
  if (matches_leave) {
    set_has_matches_leave();
    payload_.matches_leave_ = matches_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matches_leave)
}

// optional .server.MatchDataSend match_data_send = 44;
bool Envelope::has_match_data_send() const {
  return payload_case() == kMatchDataSend;
}
void Envelope::set_has_match_data_send() {
  _oneof_case_[0] = kMatchDataSend;
}
void Envelope::clear_match_data_send() {
  if (has_match_data_send()) {
    delete payload_.match_data_send_;
    clear_has_payload();
  }
}
 const ::server::MatchDataSend& Envelope::match_data_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data_send)
  return has_match_data_send()
      ? *payload_.match_data_send_
      : ::server::MatchDataSend::default_instance();
}
::server::MatchDataSend* Envelope::mutable_match_data_send() {
  if (!has_match_data_send()) {
    clear_payload();
    set_has_match_data_send();
    payload_.match_data_send_ = new ::server::MatchDataSend;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data_send)
  return payload_.match_data_send_;
}
::server::MatchDataSend* Envelope::release_match_data_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data_send)
  if (has_match_data_send()) {
    clear_has_payload();
    ::server::MatchDataSend* temp = payload_.match_data_send_;
    payload_.match_data_send_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_data_send(::server::MatchDataSend* match_data_send) {
  clear_payload();
  if (match_data_send) {
    set_has_match_data_send();
    payload_.match_data_send_ = match_data_send;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data_send)
}

// optional .server.TMatch match = 45;
bool Envelope::has_match() const {
  return payload_case() == kMatch;
}
void Envelope::set_has_match() {
  _oneof_case_[0] = kMatch;
}
void Envelope::clear_match() {
  if (has_match()) {
    delete payload_.match_;
    clear_has_payload();
  }
}
 const ::server::TMatch& Envelope::match() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match)
  return has_match()
      ? *payload_.match_
      : ::server::TMatch::default_instance();
}
::server::TMatch* Envelope::mutable_match() {
  if (!has_match()) {
    clear_payload();
    set_has_match();
    payload_.match_ = new ::server::TMatch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match)
  return payload_.match_;
}
::server::TMatch* Envelope::release_match() {
  // @@protoc_insertion_point(field_release:server.Envelope.match)
  if (has_match()) {
    clear_has_payload();
    ::server::TMatch* temp = payload_.match_;
    payload_.match_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match(::server::TMatch* match) {
  clear_payload();
  if (match) {
    set_has_match();
    payload_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match)
}

// optional .server.TMatches matches = 46;
bool Envelope::has_matches() const {
  return payload_case() == kMatches;
}
void Envelope::set_has_matches() {
  _oneof_case_[0] = kMatches;
}
void Envelope::clear_matches() {
  if (has_matches()) {
    delete payload_.matches_;
    clear_has_payload();
  }
}
 const ::server::TMatches& Envelope::matches() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches)
  return has_matches()
      ? *payload_.matches_
      : ::server::TMatches::default_instance();
}
::server::TMatches* Envelope::mutable_matches() {
  if (!has_matches()) {
    clear_payload();
    set_has_matches();
    payload_.matches_ = new ::server::TMatches;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches)
  return payload_.matches_;
}
::server::TMatches* Envelope::release_matches() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches)
  if (has_matches()) {
    clear_has_payload();
    ::server::TMatches* temp = payload_.matches_;
    payload_.matches_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_matches(::server::TMatches* matches) {
  clear_payload();
  if (matches) {
    set_has_matches();
    payload_.matches_ = matches;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matches)
}

// optional .server.MatchData match_data = 47;
bool Envelope::has_match_data() const {
  return payload_case() == kMatchData;
}
void Envelope::set_has_match_data() {
  _oneof_case_[0] = kMatchData;
}
void Envelope::clear_match_data() {
  if (has_match_data()) {
    delete payload_.match_data_;
    clear_has_payload();
  }
}
 const ::server::MatchData& Envelope::match_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data)
  return has_match_data()
      ? *payload_.match_data_
      : ::server::MatchData::default_instance();
}
::server::MatchData* Envelope::mutable_match_data() {
  if (!has_match_data()) {
    clear_payload();
    set_has_match_data();
    payload_.match_data_ = new ::server::MatchData;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data)
  return payload_.match_data_;
}
::server::MatchData* Envelope::release_match_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data)
  if (has_match_data()) {
    clear_has_payload();
    ::server::MatchData* temp = payload_.match_data_;
    payload_.match_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_data(::server::MatchData* match_data) {
  clear_payload();
  if (match_data) {
    set_has_match_data();
    payload_.match_data_ = match_data;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data)
}

// optional .server.MatchPresence match_presence = 48;
bool Envelope::has_match_presence() const {
  return payload_case() == kMatchPresence;
}
void Envelope::set_has_match_presence() {
  _oneof_case_[0] = kMatchPresence;
}
void Envelope::clear_match_presence() {
  if (has_match_presence()) {
    delete payload_.match_presence_;
    clear_has_payload();
  }
}
 const ::server::MatchPresence& Envelope::match_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_presence)
  return has_match_presence()
      ? *payload_.match_presence_
      : ::server::MatchPresence::default_instance();
}
::server::MatchPresence* Envelope::mutable_match_presence() {
  if (!has_match_presence()) {
    clear_payload();
    set_has_match_presence();
    payload_.match_presence_ = new ::server::MatchPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_presence)
  return payload_.match_presence_;
}
::server::MatchPresence* Envelope::release_match_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_presence)
  if (has_match_presence()) {
    clear_has_payload();
    ::server::MatchPresence* temp = payload_.match_presence_;
    payload_.match_presence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_presence(::server::MatchPresence* match_presence) {
  clear_payload();
  if (match_presence) {
    set_has_match_presence();
    payload_.match_presence_ = match_presence;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_presence)
}

// optional .server.TStorageList storage_list = 49;
bool Envelope::has_storage_list() const {
  return payload_case() == kStorageList;
}
void Envelope::set_has_storage_list() {
  _oneof_case_[0] = kStorageList;
}
void Envelope::clear_storage_list() {
  if (has_storage_list()) {
    delete payload_.storage_list_;
    clear_has_payload();
  }
}
 const ::server::TStorageList& Envelope::storage_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_list)
  return has_storage_list()
      ? *payload_.storage_list_
      : ::server::TStorageList::default_instance();
}
::server::TStorageList* Envelope::mutable_storage_list() {
  if (!has_storage_list()) {
    clear_payload();
    set_has_storage_list();
    payload_.storage_list_ = new ::server::TStorageList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_list)
  return payload_.storage_list_;
}
::server::TStorageList* Envelope::release_storage_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_list)
  if (has_storage_list()) {
    clear_has_payload();
    ::server::TStorageList* temp = payload_.storage_list_;
    payload_.storage_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_list(::server::TStorageList* storage_list) {
  clear_payload();
  if (storage_list) {
    set_has_storage_list();
    payload_.storage_list_ = storage_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_list)
}

// optional .server.TStorageFetch storage_fetch = 50;
bool Envelope::has_storage_fetch() const {
  return payload_case() == kStorageFetch;
}
void Envelope::set_has_storage_fetch() {
  _oneof_case_[0] = kStorageFetch;
}
void Envelope::clear_storage_fetch() {
  if (has_storage_fetch()) {
    delete payload_.storage_fetch_;
    clear_has_payload();
  }
}
 const ::server::TStorageFetch& Envelope::storage_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_fetch)
  return has_storage_fetch()
      ? *payload_.storage_fetch_
      : ::server::TStorageFetch::default_instance();
}
::server::TStorageFetch* Envelope::mutable_storage_fetch() {
  if (!has_storage_fetch()) {
    clear_payload();
    set_has_storage_fetch();
    payload_.storage_fetch_ = new ::server::TStorageFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_fetch)
  return payload_.storage_fetch_;
}
::server::TStorageFetch* Envelope::release_storage_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_fetch)
  if (has_storage_fetch()) {
    clear_has_payload();
    ::server::TStorageFetch* temp = payload_.storage_fetch_;
    payload_.storage_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_fetch(::server::TStorageFetch* storage_fetch) {
  clear_payload();
  if (storage_fetch) {
    set_has_storage_fetch();
    payload_.storage_fetch_ = storage_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_fetch)
}

// optional .server.TStorageWrite storage_write = 51;
bool Envelope::has_storage_write() const {
  return payload_case() == kStorageWrite;
}
void Envelope::set_has_storage_write() {
  _oneof_case_[0] = kStorageWrite;
}
void Envelope::clear_storage_write() {
  if (has_storage_write()) {
    delete payload_.storage_write_;
    clear_has_payload();
  }
}
 const ::server::TStorageWrite& Envelope::storage_write() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_write)
  return has_storage_write()
      ? *payload_.storage_write_
      : ::server::TStorageWrite::default_instance();
}
::server::TStorageWrite* Envelope::mutable_storage_write() {
  if (!has_storage_write()) {
    clear_payload();
    set_has_storage_write();
    payload_.storage_write_ = new ::server::TStorageWrite;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_write)
  return payload_.storage_write_;
}
::server::TStorageWrite* Envelope::release_storage_write() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_write)
  if (has_storage_write()) {
    clear_has_payload();
    ::server::TStorageWrite* temp = payload_.storage_write_;
    payload_.storage_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_write(::server::TStorageWrite* storage_write) {
  clear_payload();
  if (storage_write) {
    set_has_storage_write();
    payload_.storage_write_ = storage_write;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_write)
}

// optional .server.TStorageUpdate storage_update = 52;
bool Envelope::has_storage_update() const {
  return payload_case() == kStorageUpdate;
}
void Envelope::set_has_storage_update() {
  _oneof_case_[0] = kStorageUpdate;
}
void Envelope::clear_storage_update() {
  if (has_storage_update()) {
    delete payload_.storage_update_;
    clear_has_payload();
  }
}
 const ::server::TStorageUpdate& Envelope::storage_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_update)
  return has_storage_update()
      ? *payload_.storage_update_
      : ::server::TStorageUpdate::default_instance();
}
::server::TStorageUpdate* Envelope::mutable_storage_update() {
  if (!has_storage_update()) {
    clear_payload();
    set_has_storage_update();
    payload_.storage_update_ = new ::server::TStorageUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_update)
  return payload_.storage_update_;
}
::server::TStorageUpdate* Envelope::release_storage_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_update)
  if (has_storage_update()) {
    clear_has_payload();
    ::server::TStorageUpdate* temp = payload_.storage_update_;
    payload_.storage_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_update(::server::TStorageUpdate* storage_update) {
  clear_payload();
  if (storage_update) {
    set_has_storage_update();
    payload_.storage_update_ = storage_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_update)
}

// optional .server.TStorageRemove storage_remove = 53;
bool Envelope::has_storage_remove() const {
  return payload_case() == kStorageRemove;
}
void Envelope::set_has_storage_remove() {
  _oneof_case_[0] = kStorageRemove;
}
void Envelope::clear_storage_remove() {
  if (has_storage_remove()) {
    delete payload_.storage_remove_;
    clear_has_payload();
  }
}
 const ::server::TStorageRemove& Envelope::storage_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_remove)
  return has_storage_remove()
      ? *payload_.storage_remove_
      : ::server::TStorageRemove::default_instance();
}
::server::TStorageRemove* Envelope::mutable_storage_remove() {
  if (!has_storage_remove()) {
    clear_payload();
    set_has_storage_remove();
    payload_.storage_remove_ = new ::server::TStorageRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_remove)
  return payload_.storage_remove_;
}
::server::TStorageRemove* Envelope::release_storage_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_remove)
  if (has_storage_remove()) {
    clear_has_payload();
    ::server::TStorageRemove* temp = payload_.storage_remove_;
    payload_.storage_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_remove(::server::TStorageRemove* storage_remove) {
  clear_payload();
  if (storage_remove) {
    set_has_storage_remove();
    payload_.storage_remove_ = storage_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_remove)
}

// optional .server.TStorageData storage_data = 54;
bool Envelope::has_storage_data() const {
  return payload_case() == kStorageData;
}
void Envelope::set_has_storage_data() {
  _oneof_case_[0] = kStorageData;
}
void Envelope::clear_storage_data() {
  if (has_storage_data()) {
    delete payload_.storage_data_;
    clear_has_payload();
  }
}
 const ::server::TStorageData& Envelope::storage_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_data)
  return has_storage_data()
      ? *payload_.storage_data_
      : ::server::TStorageData::default_instance();
}
::server::TStorageData* Envelope::mutable_storage_data() {
  if (!has_storage_data()) {
    clear_payload();
    set_has_storage_data();
    payload_.storage_data_ = new ::server::TStorageData;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_data)
  return payload_.storage_data_;
}
::server::TStorageData* Envelope::release_storage_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_data)
  if (has_storage_data()) {
    clear_has_payload();
    ::server::TStorageData* temp = payload_.storage_data_;
    payload_.storage_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_data(::server::TStorageData* storage_data) {
  clear_payload();
  if (storage_data) {
    set_has_storage_data();
    payload_.storage_data_ = storage_data;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_data)
}

// optional .server.TStorageKeys storage_keys = 55;
bool Envelope::has_storage_keys() const {
  return payload_case() == kStorageKeys;
}
void Envelope::set_has_storage_keys() {
  _oneof_case_[0] = kStorageKeys;
}
void Envelope::clear_storage_keys() {
  if (has_storage_keys()) {
    delete payload_.storage_keys_;
    clear_has_payload();
  }
}
 const ::server::TStorageKeys& Envelope::storage_keys() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_keys)
  return has_storage_keys()
      ? *payload_.storage_keys_
      : ::server::TStorageKeys::default_instance();
}
::server::TStorageKeys* Envelope::mutable_storage_keys() {
  if (!has_storage_keys()) {
    clear_payload();
    set_has_storage_keys();
    payload_.storage_keys_ = new ::server::TStorageKeys;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_keys)
  return payload_.storage_keys_;
}
::server::TStorageKeys* Envelope::release_storage_keys() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_keys)
  if (has_storage_keys()) {
    clear_has_payload();
    ::server::TStorageKeys* temp = payload_.storage_keys_;
    payload_.storage_keys_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_keys(::server::TStorageKeys* storage_keys) {
  clear_payload();
  if (storage_keys) {
    set_has_storage_keys();
    payload_.storage_keys_ = storage_keys;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_keys)
}

// optional .server.TLeaderboardsList leaderboards_list = 56;
bool Envelope::has_leaderboards_list() const {
  return payload_case() == kLeaderboardsList;
}
void Envelope::set_has_leaderboards_list() {
  _oneof_case_[0] = kLeaderboardsList;
}
void Envelope::clear_leaderboards_list() {
  if (has_leaderboards_list()) {
    delete payload_.leaderboards_list_;
    clear_has_payload();
  }
}
 const ::server::TLeaderboardsList& Envelope::leaderboards_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboards_list)
  return has_leaderboards_list()
      ? *payload_.leaderboards_list_
      : ::server::TLeaderboardsList::default_instance();
}
::server::TLeaderboardsList* Envelope::mutable_leaderboards_list() {
  if (!has_leaderboards_list()) {
    clear_payload();
    set_has_leaderboards_list();
    payload_.leaderboards_list_ = new ::server::TLeaderboardsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboards_list)
  return payload_.leaderboards_list_;
}
::server::TLeaderboardsList* Envelope::release_leaderboards_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboards_list)
  if (has_leaderboards_list()) {
    clear_has_payload();
    ::server::TLeaderboardsList* temp = payload_.leaderboards_list_;
    payload_.leaderboards_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_leaderboards_list(::server::TLeaderboardsList* leaderboards_list) {
  clear_payload();
  if (leaderboards_list) {
    set_has_leaderboards_list();
    payload_.leaderboards_list_ = leaderboards_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboards_list)
}

// optional .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
bool Envelope::has_leaderboard_records_write() const {
  return payload_case() == kLeaderboardRecordsWrite;
}
void Envelope::set_has_leaderboard_records_write() {
  _oneof_case_[0] = kLeaderboardRecordsWrite;
}
void Envelope::clear_leaderboard_records_write() {
  if (has_leaderboard_records_write()) {
    delete payload_.leaderboard_records_write_;
    clear_has_payload();
  }
}
 const ::server::TLeaderboardRecordsWrite& Envelope::leaderboard_records_write() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_write)
  return has_leaderboard_records_write()
      ? *payload_.leaderboard_records_write_
      : ::server::TLeaderboardRecordsWrite::default_instance();
}
::server::TLeaderboardRecordsWrite* Envelope::mutable_leaderboard_records_write() {
  if (!has_leaderboard_records_write()) {
    clear_payload();
    set_has_leaderboard_records_write();
    payload_.leaderboard_records_write_ = new ::server::TLeaderboardRecordsWrite;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_write)
  return payload_.leaderboard_records_write_;
}
::server::TLeaderboardRecordsWrite* Envelope::release_leaderboard_records_write() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_write)
  if (has_leaderboard_records_write()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsWrite* temp = payload_.leaderboard_records_write_;
    payload_.leaderboard_records_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_leaderboard_records_write(::server::TLeaderboardRecordsWrite* leaderboard_records_write) {
  clear_payload();
  if (leaderboard_records_write) {
    set_has_leaderboard_records_write();
    payload_.leaderboard_records_write_ = leaderboard_records_write;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_write)
}

// optional .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
bool Envelope::has_leaderboard_records_fetch() const {
  return payload_case() == kLeaderboardRecordsFetch;
}
void Envelope::set_has_leaderboard_records_fetch() {
  _oneof_case_[0] = kLeaderboardRecordsFetch;
}
void Envelope::clear_leaderboard_records_fetch() {
  if (has_leaderboard_records_fetch()) {
    delete payload_.leaderboard_records_fetch_;
    clear_has_payload();
  }
}
 const ::server::TLeaderboardRecordsFetch& Envelope::leaderboard_records_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_fetch)
  return has_leaderboard_records_fetch()
      ? *payload_.leaderboard_records_fetch_
      : ::server::TLeaderboardRecordsFetch::default_instance();
}
::server::TLeaderboardRecordsFetch* Envelope::mutable_leaderboard_records_fetch() {
  if (!has_leaderboard_records_fetch()) {
    clear_payload();
    set_has_leaderboard_records_fetch();
    payload_.leaderboard_records_fetch_ = new ::server::TLeaderboardRecordsFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_fetch)
  return payload_.leaderboard_records_fetch_;
}
::server::TLeaderboardRecordsFetch* Envelope::release_leaderboard_records_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_fetch)
  if (has_leaderboard_records_fetch()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsFetch* temp = payload_.leaderboard_records_fetch_;
    payload_.leaderboard_records_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_leaderboard_records_fetch(::server::TLeaderboardRecordsFetch* leaderboard_records_fetch) {
  clear_payload();
  if (leaderboard_records_fetch) {
    set_has_leaderboard_records_fetch();
    payload_.leaderboard_records_fetch_ = leaderboard_records_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_fetch)
}

// optional .server.TLeaderboardRecordsList leaderboard_records_list = 59;
bool Envelope::has_leaderboard_records_list() const {
  return payload_case() == kLeaderboardRecordsList;
}
void Envelope::set_has_leaderboard_records_list() {
  _oneof_case_[0] = kLeaderboardRecordsList;
}
void Envelope::clear_leaderboard_records_list() {
  if (has_leaderboard_records_list()) {
    delete payload_.leaderboard_records_list_;
    clear_has_payload();
  }
}
 const ::server::TLeaderboardRecordsList& Envelope::leaderboard_records_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_list)
  return has_leaderboard_records_list()
      ? *payload_.leaderboard_records_list_
      : ::server::TLeaderboardRecordsList::default_instance();
}
::server::TLeaderboardRecordsList* Envelope::mutable_leaderboard_records_list() {
  if (!has_leaderboard_records_list()) {
    clear_payload();
    set_has_leaderboard_records_list();
    payload_.leaderboard_records_list_ = new ::server::TLeaderboardRecordsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_list)
  return payload_.leaderboard_records_list_;
}
::server::TLeaderboardRecordsList* Envelope::release_leaderboard_records_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_list)
  if (has_leaderboard_records_list()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsList* temp = payload_.leaderboard_records_list_;
    payload_.leaderboard_records_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_leaderboard_records_list(::server::TLeaderboardRecordsList* leaderboard_records_list) {
  clear_payload();
  if (leaderboard_records_list) {
    set_has_leaderboard_records_list();
    payload_.leaderboard_records_list_ = leaderboard_records_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_list)
}

// optional .server.TLeaderboards leaderboards = 60;
bool Envelope::has_leaderboards() const {
  return payload_case() == kLeaderboards;
}
void Envelope::set_has_leaderboards() {
  _oneof_case_[0] = kLeaderboards;
}
void Envelope::clear_leaderboards() {
  if (has_leaderboards()) {
    delete payload_.leaderboards_;
    clear_has_payload();
  }
}
 const ::server::TLeaderboards& Envelope::leaderboards() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboards)
  return has_leaderboards()
      ? *payload_.leaderboards_
      : ::server::TLeaderboards::default_instance();
}
::server::TLeaderboards* Envelope::mutable_leaderboards() {
  if (!has_leaderboards()) {
    clear_payload();
    set_has_leaderboards();
    payload_.leaderboards_ = new ::server::TLeaderboards;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboards)
  return payload_.leaderboards_;
}
::server::TLeaderboards* Envelope::release_leaderboards() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboards)
  if (has_leaderboards()) {
    clear_has_payload();
    ::server::TLeaderboards* temp = payload_.leaderboards_;
    payload_.leaderboards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_leaderboards(::server::TLeaderboards* leaderboards) {
  clear_payload();
  if (leaderboards) {
    set_has_leaderboards();
    payload_.leaderboards_ = leaderboards;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboards)
}

// optional .server.TLeaderboardRecords leaderboard_records = 61;
bool Envelope::has_leaderboard_records() const {
  return payload_case() == kLeaderboardRecords;
}
void Envelope::set_has_leaderboard_records() {
  _oneof_case_[0] = kLeaderboardRecords;
}
void Envelope::clear_leaderboard_records() {
  if (has_leaderboard_records()) {
    delete payload_.leaderboard_records_;
    clear_has_payload();
  }
}
 const ::server::TLeaderboardRecords& Envelope::leaderboard_records() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records)
  return has_leaderboard_records()
      ? *payload_.leaderboard_records_
      : ::server::TLeaderboardRecords::default_instance();
}
::server::TLeaderboardRecords* Envelope::mutable_leaderboard_records() {
  if (!has_leaderboard_records()) {
    clear_payload();
    set_has_leaderboard_records();
    payload_.leaderboard_records_ = new ::server::TLeaderboardRecords;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records)
  return payload_.leaderboard_records_;
}
::server::TLeaderboardRecords* Envelope::release_leaderboard_records() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records)
  if (has_leaderboard_records()) {
    clear_has_payload();
    ::server::TLeaderboardRecords* temp = payload_.leaderboard_records_;
    payload_.leaderboard_records_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_leaderboard_records(::server::TLeaderboardRecords* leaderboard_records) {
  clear_payload();
  if (leaderboard_records) {
    set_has_leaderboard_records();
    payload_.leaderboard_records_ = leaderboard_records;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records)
}

// optional .server.TMatchmakeAdd matchmake_add = 62;
bool Envelope::has_matchmake_add() const {
  return payload_case() == kMatchmakeAdd;
}
void Envelope::set_has_matchmake_add() {
  _oneof_case_[0] = kMatchmakeAdd;
}
void Envelope::clear_matchmake_add() {
  if (has_matchmake_add()) {
    delete payload_.matchmake_add_;
    clear_has_payload();
  }
}
 const ::server::TMatchmakeAdd& Envelope::matchmake_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_add)
  return has_matchmake_add()
      ? *payload_.matchmake_add_
      : ::server::TMatchmakeAdd::default_instance();
}
::server::TMatchmakeAdd* Envelope::mutable_matchmake_add() {
  if (!has_matchmake_add()) {
    clear_payload();
    set_has_matchmake_add();
    payload_.matchmake_add_ = new ::server::TMatchmakeAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_add)
  return payload_.matchmake_add_;
}
::server::TMatchmakeAdd* Envelope::release_matchmake_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_add)
  if (has_matchmake_add()) {
    clear_has_payload();
    ::server::TMatchmakeAdd* temp = payload_.matchmake_add_;
    payload_.matchmake_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_matchmake_add(::server::TMatchmakeAdd* matchmake_add) {
  clear_payload();
  if (matchmake_add) {
    set_has_matchmake_add();
    payload_.matchmake_add_ = matchmake_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_add)
}

// optional .server.TMatchmakeRemove matchmake_remove = 63;
bool Envelope::has_matchmake_remove() const {
  return payload_case() == kMatchmakeRemove;
}
void Envelope::set_has_matchmake_remove() {
  _oneof_case_[0] = kMatchmakeRemove;
}
void Envelope::clear_matchmake_remove() {
  if (has_matchmake_remove()) {
    delete payload_.matchmake_remove_;
    clear_has_payload();
  }
}
 const ::server::TMatchmakeRemove& Envelope::matchmake_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_remove)
  return has_matchmake_remove()
      ? *payload_.matchmake_remove_
      : ::server::TMatchmakeRemove::default_instance();
}
::server::TMatchmakeRemove* Envelope::mutable_matchmake_remove() {
  if (!has_matchmake_remove()) {
    clear_payload();
    set_has_matchmake_remove();
    payload_.matchmake_remove_ = new ::server::TMatchmakeRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_remove)
  return payload_.matchmake_remove_;
}
::server::TMatchmakeRemove* Envelope::release_matchmake_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_remove)
  if (has_matchmake_remove()) {
    clear_has_payload();
    ::server::TMatchmakeRemove* temp = payload_.matchmake_remove_;
    payload_.matchmake_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_matchmake_remove(::server::TMatchmakeRemove* matchmake_remove) {
  clear_payload();
  if (matchmake_remove) {
    set_has_matchmake_remove();
    payload_.matchmake_remove_ = matchmake_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_remove)
}

// optional .server.TMatchmakeTicket matchmake_ticket = 64;
bool Envelope::has_matchmake_ticket() const {
  return payload_case() == kMatchmakeTicket;
}
void Envelope::set_has_matchmake_ticket() {
  _oneof_case_[0] = kMatchmakeTicket;
}
void Envelope::clear_matchmake_ticket() {
  if (has_matchmake_ticket()) {
    delete payload_.matchmake_ticket_;
    clear_has_payload();
  }
}
 const ::server::TMatchmakeTicket& Envelope::matchmake_ticket() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_ticket)
  return has_matchmake_ticket()
      ? *payload_.matchmake_ticket_
      : ::server::TMatchmakeTicket::default_instance();
}
::server::TMatchmakeTicket* Envelope::mutable_matchmake_ticket() {
  if (!has_matchmake_ticket()) {
    clear_payload();
    set_has_matchmake_ticket();
    payload_.matchmake_ticket_ = new ::server::TMatchmakeTicket;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_ticket)
  return payload_.matchmake_ticket_;
}
::server::TMatchmakeTicket* Envelope::release_matchmake_ticket() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_ticket)
  if (has_matchmake_ticket()) {
    clear_has_payload();
    ::server::TMatchmakeTicket* temp = payload_.matchmake_ticket_;
    payload_.matchmake_ticket_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_matchmake_ticket(::server::TMatchmakeTicket* matchmake_ticket) {
  clear_payload();
  if (matchmake_ticket) {
    set_has_matchmake_ticket();
    payload_.matchmake_ticket_ = matchmake_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_ticket)
}

// optional .server.MatchmakeMatched matchmake_matched = 65;
bool Envelope::has_matchmake_matched() const {
  return payload_case() == kMatchmakeMatched;
}
void Envelope::set_has_matchmake_matched() {
  _oneof_case_[0] = kMatchmakeMatched;
}
void Envelope::clear_matchmake_matched() {
  if (has_matchmake_matched()) {
    delete payload_.matchmake_matched_;
    clear_has_payload();
  }
}
 const ::server::MatchmakeMatched& Envelope::matchmake_matched() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_matched)
  return has_matchmake_matched()
      ? *payload_.matchmake_matched_
      : ::server::MatchmakeMatched::default_instance();
}
::server::MatchmakeMatched* Envelope::mutable_matchmake_matched() {
  if (!has_matchmake_matched()) {
    clear_payload();
    set_has_matchmake_matched();
    payload_.matchmake_matched_ = new ::server::MatchmakeMatched;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_matched)
  return payload_.matchmake_matched_;
}
::server::MatchmakeMatched* Envelope::release_matchmake_matched() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_matched)
  if (has_matchmake_matched()) {
    clear_has_payload();
    ::server::MatchmakeMatched* temp = payload_.matchmake_matched_;
    payload_.matchmake_matched_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_matchmake_matched(::server::MatchmakeMatched* matchmake_matched) {
  clear_payload();
  if (matchmake_matched) {
    set_has_matchmake_matched();
    payload_.matchmake_matched_ = matchmake_matched;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_matched)
}

// optional .server.TRpc rpc = 66;
bool Envelope::has_rpc() const {
  return payload_case() == kRpc;
}
void Envelope::set_has_rpc() {
  _oneof_case_[0] = kRpc;
}
void Envelope::clear_rpc() {
  if (has_rpc()) {
    delete payload_.rpc_;
    clear_has_payload();
  }
}
 const ::server::TRpc& Envelope::rpc() const {
  // @@protoc_insertion_point(field_get:server.Envelope.rpc)
  return has_rpc()
      ? *payload_.rpc_
      : ::server::TRpc::default_instance();
}
::server::TRpc* Envelope::mutable_rpc() {
  if (!has_rpc()) {
    clear_payload();
    set_has_rpc();
    payload_.rpc_ = new ::server::TRpc;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.rpc)
  return payload_.rpc_;
}
::server::TRpc* Envelope::release_rpc() {
  // @@protoc_insertion_point(field_release:server.Envelope.rpc)
  if (has_rpc()) {
    clear_has_payload();
    ::server::TRpc* temp = payload_.rpc_;
    payload_.rpc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_rpc(::server::TRpc* rpc) {
  clear_payload();
  if (rpc) {
    set_has_rpc();
    payload_.rpc_ = rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.rpc)
}

// optional .server.TPurchaseValidation purchase = 67;
bool Envelope::has_purchase() const {
  return payload_case() == kPurchase;
}
void Envelope::set_has_purchase() {
  _oneof_case_[0] = kPurchase;
}
void Envelope::clear_purchase() {
  if (has_purchase()) {
    delete payload_.purchase_;
    clear_has_payload();
  }
}
 const ::server::TPurchaseValidation& Envelope::purchase() const {
  // @@protoc_insertion_point(field_get:server.Envelope.purchase)
  return has_purchase()
      ? *payload_.purchase_
      : ::server::TPurchaseValidation::default_instance();
}
::server::TPurchaseValidation* Envelope::mutable_purchase() {
  if (!has_purchase()) {
    clear_payload();
    set_has_purchase();
    payload_.purchase_ = new ::server::TPurchaseValidation;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.purchase)
  return payload_.purchase_;
}
::server::TPurchaseValidation* Envelope::release_purchase() {
  // @@protoc_insertion_point(field_release:server.Envelope.purchase)
  if (has_purchase()) {
    clear_has_payload();
    ::server::TPurchaseValidation* temp = payload_.purchase_;
    payload_.purchase_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_purchase(::server::TPurchaseValidation* purchase) {
  clear_payload();
  if (purchase) {
    set_has_purchase();
    payload_.purchase_ = purchase;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.purchase)
}

// optional .server.TPurchaseRecord purchase_record = 68;
bool Envelope::has_purchase_record() const {
  return payload_case() == kPurchaseRecord;
}
void Envelope::set_has_purchase_record() {
  _oneof_case_[0] = kPurchaseRecord;
}
void Envelope::clear_purchase_record() {
  if (has_purchase_record()) {
    delete payload_.purchase_record_;
    clear_has_payload();
  }
}
 const ::server::TPurchaseRecord& Envelope::purchase_record() const {
  // @@protoc_insertion_point(field_get:server.Envelope.purchase_record)
  return has_purchase_record()
      ? *payload_.purchase_record_
      : ::server::TPurchaseRecord::default_instance();
}
::server::TPurchaseRecord* Envelope::mutable_purchase_record() {
  if (!has_purchase_record()) {
    clear_payload();
    set_has_purchase_record();
    payload_.purchase_record_ = new ::server::TPurchaseRecord;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.purchase_record)
  return payload_.purchase_record_;
}
::server::TPurchaseRecord* Envelope::release_purchase_record() {
  // @@protoc_insertion_point(field_release:server.Envelope.purchase_record)
  if (has_purchase_record()) {
    clear_has_payload();
    ::server::TPurchaseRecord* temp = payload_.purchase_record_;
    payload_.purchase_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_purchase_record(::server::TPurchaseRecord* purchase_record) {
  clear_payload();
  if (purchase_record) {
    set_has_purchase_record();
    payload_.purchase_record_ = purchase_record;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.purchase_record)
}

// optional .server.TNotificationsList notifications_list = 69;
bool Envelope::has_notifications_list() const {
  return payload_case() == kNotificationsList;
}
void Envelope::set_has_notifications_list() {
  _oneof_case_[0] = kNotificationsList;
}
void Envelope::clear_notifications_list() {
  if (has_notifications_list()) {
    delete payload_.notifications_list_;
    clear_has_payload();
  }
}
 const ::server::TNotificationsList& Envelope::notifications_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications_list)
  return has_notifications_list()
      ? *payload_.notifications_list_
      : ::server::TNotificationsList::default_instance();
}
::server::TNotificationsList* Envelope::mutable_notifications_list() {
  if (!has_notifications_list()) {
    clear_payload();
    set_has_notifications_list();
    payload_.notifications_list_ = new ::server::TNotificationsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications_list)
  return payload_.notifications_list_;
}
::server::TNotificationsList* Envelope::release_notifications_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications_list)
  if (has_notifications_list()) {
    clear_has_payload();
    ::server::TNotificationsList* temp = payload_.notifications_list_;
    payload_.notifications_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_notifications_list(::server::TNotificationsList* notifications_list) {
  clear_payload();
  if (notifications_list) {
    set_has_notifications_list();
    payload_.notifications_list_ = notifications_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications_list)
}

// optional .server.TNotificationsRemove notifications_remove = 70;
bool Envelope::has_notifications_remove() const {
  return payload_case() == kNotificationsRemove;
}
void Envelope::set_has_notifications_remove() {
  _oneof_case_[0] = kNotificationsRemove;
}
void Envelope::clear_notifications_remove() {
  if (has_notifications_remove()) {
    delete payload_.notifications_remove_;
    clear_has_payload();
  }
}
 const ::server::TNotificationsRemove& Envelope::notifications_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications_remove)
  return has_notifications_remove()
      ? *payload_.notifications_remove_
      : ::server::TNotificationsRemove::default_instance();
}
::server::TNotificationsRemove* Envelope::mutable_notifications_remove() {
  if (!has_notifications_remove()) {
    clear_payload();
    set_has_notifications_remove();
    payload_.notifications_remove_ = new ::server::TNotificationsRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications_remove)
  return payload_.notifications_remove_;
}
::server::TNotificationsRemove* Envelope::release_notifications_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications_remove)
  if (has_notifications_remove()) {
    clear_has_payload();
    ::server::TNotificationsRemove* temp = payload_.notifications_remove_;
    payload_.notifications_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_notifications_remove(::server::TNotificationsRemove* notifications_remove) {
  clear_payload();
  if (notifications_remove) {
    set_has_notifications_remove();
    payload_.notifications_remove_ = notifications_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications_remove)
}

// optional .server.TNotifications notifications = 71;
bool Envelope::has_notifications() const {
  return payload_case() == kNotifications;
}
void Envelope::set_has_notifications() {
  _oneof_case_[0] = kNotifications;
}
void Envelope::clear_notifications() {
  if (has_notifications()) {
    delete payload_.notifications_;
    clear_has_payload();
  }
}
 const ::server::TNotifications& Envelope::notifications() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications)
  return has_notifications()
      ? *payload_.notifications_
      : ::server::TNotifications::default_instance();
}
::server::TNotifications* Envelope::mutable_notifications() {
  if (!has_notifications()) {
    clear_payload();
    set_has_notifications();
    payload_.notifications_ = new ::server::TNotifications;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications)
  return payload_.notifications_;
}
::server::TNotifications* Envelope::release_notifications() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications)
  if (has_notifications()) {
    clear_has_payload();
    ::server::TNotifications* temp = payload_.notifications_;
    payload_.notifications_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_notifications(::server::TNotifications* notifications) {
  clear_payload();
  if (notifications) {
    set_has_notifications();
    payload_.notifications_ = notifications;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications)
}

// optional .server.Notifications live_notifications = 72;
bool Envelope::has_live_notifications() const {
  return payload_case() == kLiveNotifications;
}
void Envelope::set_has_live_notifications() {
  _oneof_case_[0] = kLiveNotifications;
}
void Envelope::clear_live_notifications() {
  if (has_live_notifications()) {
    delete payload_.live_notifications_;
    clear_has_payload();
  }
}
 const ::server::Notifications& Envelope::live_notifications() const {
  // @@protoc_insertion_point(field_get:server.Envelope.live_notifications)
  return has_live_notifications()
      ? *payload_.live_notifications_
      : ::server::Notifications::default_instance();
}
::server::Notifications* Envelope::mutable_live_notifications() {
  if (!has_live_notifications()) {
    clear_payload();
    set_has_live_notifications();
    payload_.live_notifications_ = new ::server::Notifications;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.live_notifications)
  return payload_.live_notifications_;
}
::server::Notifications* Envelope::release_live_notifications() {
  // @@protoc_insertion_point(field_release:server.Envelope.live_notifications)
  if (has_live_notifications()) {
    clear_has_payload();
    ::server::Notifications* temp = payload_.live_notifications_;
    payload_.live_notifications_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_live_notifications(::server::Notifications* live_notifications) {
  clear_payload();
  if (live_notifications) {
    set_has_live_notifications();
    payload_.live_notifications_ = live_notifications;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.live_notifications)
}

bool Envelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Envelope::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Envelope::PayloadCase Envelope::payload_case() const {
  return Envelope::PayloadCase(_oneof_case_[0]);
}
inline const Envelope* Envelope::internal_default_instance() {
  return &Envelope_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Logout)
}

void Logout::InitAsDefaultInstance() {
}

Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Logout)
}

void Logout::SharedCtor() {
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:server.Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logout_descriptor_;
}

const Logout& Logout::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Logout> Logout_default_instance_;

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  Logout* n = new Logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Logout)
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Logout)
  // @@protoc_insertion_point(serialize_end:server.Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Logout)
  // @@protoc_insertion_point(serialize_to_array_end:server.Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Logout)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Logout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Logout)
    UnsafeMergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Logout)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Logout::UnsafeMergeFrom(const Logout& from) {
  GOOGLE_DCHECK(&from != this);
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Logout)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Logout::IsInitialized() const {

  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logout_descriptor_;
  metadata.reflection = Logout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logout

inline const Logout* Logout::internal_default_instance() {
  return &Logout_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLink::kEmailFieldNumber;
const int TLink::kFacebookFieldNumber;
const int TLink::kGoogleFieldNumber;
const int TLink::kGameCenterFieldNumber;
const int TLink::kSteamFieldNumber;
const int TLink::kDeviceFieldNumber;
const int TLink::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLink::TLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLink)
}

void TLink::InitAsDefaultInstance() {
  TLink_default_oneof_instance_->email_ = const_cast< ::server::AuthenticateRequest_Email*>(
      ::server::AuthenticateRequest_Email::internal_default_instance());
  TLink_default_oneof_instance_->facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->game_center_ = const_cast< ::server::AuthenticateRequest_GameCenter*>(
      ::server::AuthenticateRequest_GameCenter::internal_default_instance());
  TLink_default_oneof_instance_->steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TLink::TLink(const TLink& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLink)
}

void TLink::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TLink::~TLink() {
  // @@protoc_insertion_point(destructor:server.TLink)
  SharedDtor();
}

void TLink::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLink_descriptor_;
}

const TLink& TLink::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLink> TLink_default_instance_;

TLink* TLink::New(::google::protobuf::Arena* arena) const {
  TLink* n = new TLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLink::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TLink)
  switch (id_case()) {
    case kEmail: {
      delete id_.email_;
      break;
    }
    case kFacebook: {
      id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGoogle: {
      id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGameCenter: {
      delete id_.game_center_;
      break;
    }
    case kSteam: {
      id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDevice: {
      id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCustom: {
      id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TLink::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLink)
  clear_id();
}

bool TLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.AuthenticateRequest.Email email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string facebook = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook().data(), this->facebook().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.facebook"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string google = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google().data(), this->google().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.google"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional .server.AuthenticateRequest.GameCenter game_center = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_center()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string steam = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam().data(), this->steam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.steam"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string device = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_custom;
        break;
      }

      // optional string custom = 7;
      case 7: {
        if (tag == 58) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom().data(), this->custom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.custom"));
        } else {
          goto handle_unusual;
        }
       after_custom:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLink)
  return false;
#undef DO_
}

void TLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLink)
  // optional .server.AuthenticateRequest.Email email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *id_.email_, output);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.facebook");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->facebook(), output);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.google");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->google(), output);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 4;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *id_.game_center_, output);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.steam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->steam(), output);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device(), output);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->custom(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLink)
}

::google::protobuf::uint8* TLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLink)
  // optional .server.AuthenticateRequest.Email email = 1;
  if (has_email()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *id_.email_, false, target);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.facebook");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->facebook(), target);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.google");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->google(), target);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 4;
  if (has_game_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *id_.game_center_, false, target);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.steam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->steam(), target);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device(), target);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->custom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLink)
  return target;
}

size_t TLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLink)
  size_t total_size = 0;

  switch (id_case()) {
    // optional .server.AuthenticateRequest.Email email = 1;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.email_);
      break;
    }
    // optional string facebook = 2;
    case kFacebook: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook());
      break;
    }
    // optional string google = 3;
    case kGoogle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google());
      break;
    }
    // optional .server.AuthenticateRequest.GameCenter game_center = 4;
    case kGameCenter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.game_center_);
      break;
    }
    // optional string steam = 5;
    case kSteam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam());
      break;
    }
    // optional string device = 6;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
      break;
    }
    // optional string custom = 7;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLink)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLink)
    UnsafeMergeFrom(*source);
  }
}

void TLink::MergeFrom(const TLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLink)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLink::UnsafeMergeFrom(const TLink& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kEmail: {
      mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from.email());
      break;
    }
    case kFacebook: {
      set_facebook(from.facebook());
      break;
    }
    case kGoogle: {
      set_google(from.google());
      break;
    }
    case kGameCenter: {
      mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from.game_center());
      break;
    }
    case kSteam: {
      set_steam(from.steam());
      break;
    }
    case kDevice: {
      set_device(from.device());
      break;
    }
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLink::CopyFrom(const TLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLink)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLink::IsInitialized() const {

  return true;
}

void TLink::Swap(TLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLink::InternalSwap(TLink* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLink_descriptor_;
  metadata.reflection = TLink_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLink

// optional .server.AuthenticateRequest.Email email = 1;
bool TLink::has_email() const {
  return id_case() == kEmail;
}
void TLink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
void TLink::clear_email() {
  if (has_email()) {
    delete id_.email_;
    clear_has_id();
  }
}
 const ::server::AuthenticateRequest_Email& TLink::email() const {
  // @@protoc_insertion_point(field_get:server.TLink.email)
  return has_email()
      ? *id_.email_
      : ::server::AuthenticateRequest_Email::default_instance();
}
::server::AuthenticateRequest_Email* TLink::mutable_email() {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_ = new ::server::AuthenticateRequest_Email;
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.email)
  return id_.email_;
}
::server::AuthenticateRequest_Email* TLink::release_email() {
  // @@protoc_insertion_point(field_release:server.TLink.email)
  if (has_email()) {
    clear_has_id();
    ::server::AuthenticateRequest_Email* temp = id_.email_;
    id_.email_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TLink::set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_id();
  if (email) {
    set_has_email();
    id_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.email)
}

// optional string facebook = 2;
bool TLink::has_facebook() const {
  return id_case() == kFacebook;
}
void TLink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
void TLink::clear_facebook() {
  if (has_facebook()) {
    id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TLink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TLink.facebook)
  if (has_facebook()) {
    return id_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
}
void TLink::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.facebook)
}
void TLink::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.facebook)
}
::std::string* TLink::mutable_facebook() {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.facebook)
  return id_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TLink.facebook)
  if (has_facebook()) {
    clear_has_id();
    return id_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (facebook != NULL) {
    set_has_facebook();
    id_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.facebook)
}

// optional string google = 3;
bool TLink::has_google() const {
  return id_case() == kGoogle;
}
void TLink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
void TLink::clear_google() {
  if (has_google()) {
    id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TLink::google() const {
  // @@protoc_insertion_point(field_get:server.TLink.google)
  if (has_google()) {
    return id_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.google)
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.google)
}
void TLink::set_google(const char* value) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.google)
}
void TLink::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.google)
}
::std::string* TLink::mutable_google() {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.google)
  return id_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_google() {
  // @@protoc_insertion_point(field_release:server.TLink.google)
  if (has_google()) {
    clear_has_id();
    return id_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (google != NULL) {
    set_has_google();
    id_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.google)
}

// optional .server.AuthenticateRequest.GameCenter game_center = 4;
bool TLink::has_game_center() const {
  return id_case() == kGameCenter;
}
void TLink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
void TLink::clear_game_center() {
  if (has_game_center()) {
    delete id_.game_center_;
    clear_has_id();
  }
}
 const ::server::AuthenticateRequest_GameCenter& TLink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TLink.game_center)
  return has_game_center()
      ? *id_.game_center_
      : ::server::AuthenticateRequest_GameCenter::default_instance();
}
::server::AuthenticateRequest_GameCenter* TLink::mutable_game_center() {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_ = new ::server::AuthenticateRequest_GameCenter;
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.game_center)
  return id_.game_center_;
}
::server::AuthenticateRequest_GameCenter* TLink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TLink.game_center)
  if (has_game_center()) {
    clear_has_id();
    ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    id_.game_center_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TLink::set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_id();
  if (game_center) {
    set_has_game_center();
    id_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.game_center)
}

// optional string steam = 5;
bool TLink::has_steam() const {
  return id_case() == kSteam;
}
void TLink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
void TLink::clear_steam() {
  if (has_steam()) {
    id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TLink::steam() const {
  // @@protoc_insertion_point(field_get:server.TLink.steam)
  if (has_steam()) {
    return id_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.steam)
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.steam)
}
void TLink::set_steam(const char* value) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.steam)
}
void TLink::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.steam)
}
::std::string* TLink::mutable_steam() {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.steam)
  return id_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TLink.steam)
  if (has_steam()) {
    clear_has_id();
    return id_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (steam != NULL) {
    set_has_steam();
    id_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.steam)
}

// optional string device = 6;
bool TLink::has_device() const {
  return id_case() == kDevice;
}
void TLink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void TLink::clear_device() {
  if (has_device()) {
    id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TLink::device() const {
  // @@protoc_insertion_point(field_get:server.TLink.device)
  if (has_device()) {
    return id_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.device)
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.device)
}
void TLink::set_device(const char* value) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.device)
}
void TLink::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.device)
}
::std::string* TLink::mutable_device() {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.device)
  return id_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_device() {
  // @@protoc_insertion_point(field_release:server.TLink.device)
  if (has_device()) {
    clear_has_id();
    return id_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (device != NULL) {
    set_has_device();
    id_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.device)
}

// optional string custom = 7;
bool TLink::has_custom() const {
  return id_case() == kCustom;
}
void TLink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
void TLink::clear_custom() {
  if (has_custom()) {
    id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TLink::custom() const {
  // @@protoc_insertion_point(field_get:server.TLink.custom)
  if (has_custom()) {
    return id_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.custom)
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.custom)
}
void TLink::set_custom(const char* value) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.custom)
}
void TLink::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.custom)
}
::std::string* TLink::mutable_custom() {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.custom)
  return id_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TLink.custom)
  if (has_custom()) {
    clear_has_id();
    return id_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (custom != NULL) {
    set_has_custom();
    id_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.custom)
}

bool TLink::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TLink::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TLink::IdCase TLink::id_case() const {
  return TLink::IdCase(_oneof_case_[0]);
}
inline const TLink* TLink::internal_default_instance() {
  return &TLink_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TUnlink::kEmailFieldNumber;
const int TUnlink::kFacebookFieldNumber;
const int TUnlink::kGoogleFieldNumber;
const int TUnlink::kGameCenterFieldNumber;
const int TUnlink::kSteamFieldNumber;
const int TUnlink::kDeviceFieldNumber;
const int TUnlink::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TUnlink::TUnlink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TUnlink)
}

void TUnlink::InitAsDefaultInstance() {
  TUnlink_default_oneof_instance_->email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TUnlink::TUnlink(const TUnlink& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TUnlink)
}

void TUnlink::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TUnlink::~TUnlink() {
  // @@protoc_insertion_point(destructor:server.TUnlink)
  SharedDtor();
}

void TUnlink::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TUnlink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnlink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnlink_descriptor_;
}

const TUnlink& TUnlink::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TUnlink> TUnlink_default_instance_;

TUnlink* TUnlink::New(::google::protobuf::Arena* arena) const {
  TUnlink* n = new TUnlink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TUnlink::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TUnlink)
  switch (id_case()) {
    case kEmail: {
      id_.email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFacebook: {
      id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGoogle: {
      id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGameCenter: {
      id_.game_center_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSteam: {
      id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDevice: {
      id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCustom: {
      id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TUnlink::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TUnlink)
  clear_id();
}

bool TUnlink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TUnlink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.email"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string facebook = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook().data(), this->facebook().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.facebook"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string google = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google().data(), this->google().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.google"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string game_center = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_center()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_center().data(), this->game_center().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.game_center"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string steam = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam().data(), this->steam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.steam"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string device = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_custom;
        break;
      }

      // optional string custom = 7;
      case 7: {
        if (tag == 58) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom().data(), this->custom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.custom"));
        } else {
          goto handle_unusual;
        }
       after_custom:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TUnlink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TUnlink)
  return false;
#undef DO_
}

void TUnlink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TUnlink)
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.facebook");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->facebook(), output);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.google");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->google(), output);
  }

  // optional string game_center = 4;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_center().data(), this->game_center().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.game_center");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_center(), output);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.steam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->steam(), output);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device(), output);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->custom(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TUnlink)
}

::google::protobuf::uint8* TUnlink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TUnlink)
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.facebook");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->facebook(), target);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.google");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->google(), target);
  }

  // optional string game_center = 4;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_center().data(), this->game_center().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.game_center");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_center(), target);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.steam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->steam(), target);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device(), target);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->custom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TUnlink)
  return target;
}

size_t TUnlink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TUnlink)
  size_t total_size = 0;

  switch (id_case()) {
    // optional string email = 1;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
      break;
    }
    // optional string facebook = 2;
    case kFacebook: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook());
      break;
    }
    // optional string google = 3;
    case kGoogle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google());
      break;
    }
    // optional string game_center = 4;
    case kGameCenter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_center());
      break;
    }
    // optional string steam = 5;
    case kSteam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam());
      break;
    }
    // optional string device = 6;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
      break;
    }
    // optional string custom = 7;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnlink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TUnlink)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TUnlink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TUnlink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUnlink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUnlink)
    UnsafeMergeFrom(*source);
  }
}

void TUnlink::MergeFrom(const TUnlink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TUnlink)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TUnlink::UnsafeMergeFrom(const TUnlink& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kEmail: {
      set_email(from.email());
      break;
    }
    case kFacebook: {
      set_facebook(from.facebook());
      break;
    }
    case kGoogle: {
      set_google(from.google());
      break;
    }
    case kGameCenter: {
      set_game_center(from.game_center());
      break;
    }
    case kSteam: {
      set_steam(from.steam());
      break;
    }
    case kDevice: {
      set_device(from.device());
      break;
    }
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TUnlink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TUnlink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnlink::CopyFrom(const TUnlink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TUnlink)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TUnlink::IsInitialized() const {

  return true;
}

void TUnlink::Swap(TUnlink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TUnlink::InternalSwap(TUnlink* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TUnlink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnlink_descriptor_;
  metadata.reflection = TUnlink_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TUnlink

// optional string email = 1;
bool TUnlink::has_email() const {
  return id_case() == kEmail;
}
void TUnlink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
void TUnlink::clear_email() {
  if (has_email()) {
    id_.email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUnlink::email() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.email)
  if (has_email()) {
    return id_.email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_email(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
}
void TUnlink::set_email(const char* value) {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.email)
}
void TUnlink::set_email(const char* value, size_t size) {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.email)
}
::std::string* TUnlink::mutable_email() {
  if (!has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.email)
  return id_.email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_email() {
  // @@protoc_insertion_point(field_release:server.TUnlink.email)
  if (has_email()) {
    clear_has_id();
    return id_.email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_email(::std::string* email) {
  if (!has_email()) {
    id_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (email != NULL) {
    set_has_email();
    id_.email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        email);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.email)
}

// optional string facebook = 2;
bool TUnlink::has_facebook() const {
  return id_case() == kFacebook;
}
void TUnlink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
void TUnlink::clear_facebook() {
  if (has_facebook()) {
    id_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUnlink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.facebook)
  if (has_facebook()) {
    return id_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
}
void TUnlink::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.facebook)
}
void TUnlink::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.facebook)
}
::std::string* TUnlink::mutable_facebook() {
  if (!has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.facebook)
  return id_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TUnlink.facebook)
  if (has_facebook()) {
    clear_has_id();
    return id_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    id_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (facebook != NULL) {
    set_has_facebook();
    id_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.facebook)
}

// optional string google = 3;
bool TUnlink::has_google() const {
  return id_case() == kGoogle;
}
void TUnlink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
void TUnlink::clear_google() {
  if (has_google()) {
    id_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUnlink::google() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.google)
  if (has_google()) {
    return id_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
}
void TUnlink::set_google(const char* value) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.google)
}
void TUnlink::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.google)
}
::std::string* TUnlink::mutable_google() {
  if (!has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.google)
  return id_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_google() {
  // @@protoc_insertion_point(field_release:server.TUnlink.google)
  if (has_google()) {
    clear_has_id();
    return id_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    id_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (google != NULL) {
    set_has_google();
    id_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.google)
}

// optional string game_center = 4;
bool TUnlink::has_game_center() const {
  return id_case() == kGameCenter;
}
void TUnlink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
void TUnlink::clear_game_center() {
  if (has_game_center()) {
    id_.game_center_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUnlink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.game_center)
  if (has_game_center()) {
    return id_.game_center_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_game_center(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
}
void TUnlink::set_game_center(const char* value) {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.game_center)
}
void TUnlink::set_game_center(const char* value, size_t size) {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.game_center)
}
::std::string* TUnlink::mutable_game_center() {
  if (!has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.game_center)
  return id_.game_center_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TUnlink.game_center)
  if (has_game_center()) {
    clear_has_id();
    return id_.game_center_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_game_center(::std::string* game_center) {
  if (!has_game_center()) {
    id_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (game_center != NULL) {
    set_has_game_center();
    id_.game_center_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        game_center);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.game_center)
}

// optional string steam = 5;
bool TUnlink::has_steam() const {
  return id_case() == kSteam;
}
void TUnlink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
void TUnlink::clear_steam() {
  if (has_steam()) {
    id_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUnlink::steam() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.steam)
  if (has_steam()) {
    return id_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
}
void TUnlink::set_steam(const char* value) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.steam)
}
void TUnlink::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.steam)
}
::std::string* TUnlink::mutable_steam() {
  if (!has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.steam)
  return id_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TUnlink.steam)
  if (has_steam()) {
    clear_has_id();
    return id_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    id_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (steam != NULL) {
    set_has_steam();
    id_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.steam)
}

// optional string device = 6;
bool TUnlink::has_device() const {
  return id_case() == kDevice;
}
void TUnlink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void TUnlink::clear_device() {
  if (has_device()) {
    id_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUnlink::device() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.device)
  if (has_device()) {
    return id_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
}
void TUnlink::set_device(const char* value) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.device)
}
void TUnlink::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.device)
}
::std::string* TUnlink::mutable_device() {
  if (!has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.device)
  return id_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_device() {
  // @@protoc_insertion_point(field_release:server.TUnlink.device)
  if (has_device()) {
    clear_has_id();
    return id_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    id_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (device != NULL) {
    set_has_device();
    id_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.device)
}

// optional string custom = 7;
bool TUnlink::has_custom() const {
  return id_case() == kCustom;
}
void TUnlink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
void TUnlink::clear_custom() {
  if (has_custom()) {
    id_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUnlink::custom() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.custom)
  if (has_custom()) {
    return id_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
}
void TUnlink::set_custom(const char* value) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.custom)
}
void TUnlink::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.custom)
}
::std::string* TUnlink::mutable_custom() {
  if (!has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.custom)
  return id_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TUnlink.custom)
  if (has_custom()) {
    clear_has_id();
    return id_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    id_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (custom != NULL) {
    set_has_custom();
    id_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.custom)
}

bool TUnlink::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TUnlink::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TUnlink::IdCase TUnlink::id_case() const {
  return TUnlink::IdCase(_oneof_case_[0]);
}
inline const TUnlink* TUnlink::internal_default_instance() {
  return &TUnlink_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kIdFieldNumber;
const int User::kHandleFieldNumber;
const int User::kFullnameFieldNumber;
const int User::kAvatarUrlFieldNumber;
const int User::kLangFieldNumber;
const int User::kLocationFieldNumber;
const int User::kTimezoneFieldNumber;
const int User::kMetadataFieldNumber;
const int User::kCreatedAtFieldNumber;
const int User::kUpdatedAtFieldNumber;
const int User::kLastOnlineAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.User)
}

void User::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, reinterpret_cast<char*>(&last_online_at_) -
    reinterpret_cast<char*>(&created_at_) + sizeof(last_online_at_));
  _cached_size_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:server.User)
  SharedDtor();
}

void User::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:server.User)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(User, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<User*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(created_at_, last_online_at_);

#undef ZR_HELPER_
#undef ZR_

}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_handle;
        break;
      }

      // optional string handle = 2;
      case 2: {
        if (tag == 18) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fullname;
        break;
      }

      // optional string fullname = 3;
      case 3: {
        if (tag == 26) {
         parse_fullname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fullname().data(), this->fullname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.fullname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lang;
        break;
      }

      // optional string lang = 5;
      case 5: {
        if (tag == 42) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional string location = 6;
      case 6: {
        if (tag == 50) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_timezone;
        break;
      }

      // optional string timezone = 7;
      case 7: {
        if (tag == 58) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.timezone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_metadata;
        break;
      }

      // optional string metadata = 8;
      case 8: {
        if (tag == 66) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 9;
      case 9: {
        if (tag == 72) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_updated_at;
        break;
      }

      // optional int64 updated_at = 10;
      case 10: {
        if (tag == 80) {
         parse_updated_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_last_online_at;
        break;
      }

      // optional int64 last_online_at = 11;
      case 11: {
        if (tag == 88) {
         parse_last_online_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_online_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.User)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string handle = 2;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->handle(), output);
  }

  // optional string fullname = 3;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.fullname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fullname(), output);
  }

  // optional string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar_url(), output);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang(), output);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->location(), output);
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone(), output);
  }

  // optional string metadata = 8;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->metadata(), output);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->created_at(), output);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updated_at(), output);
  }

  // optional int64 last_online_at = 11;
  if (this->last_online_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_online_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.User)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string handle = 2;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->handle(), target);
  }

  // optional string fullname = 3;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.fullname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fullname(), target);
  }

  // optional string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar_url(), target);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lang(), target);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timezone(), target);
  }

  // optional string metadata = 8;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->metadata(), target);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->created_at(), target);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updated_at(), target);
  }

  // optional int64 last_online_at = 11;
  if (this->last_online_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_online_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.User)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string handle = 2;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // optional string fullname = 3;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullname());
  }

  // optional string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // optional string metadata = 8;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updated_at());
  }

  // optional int64 last_online_at = 11;
  if (this->last_online_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_online_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.User)
    UnsafeMergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.User)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void User::UnsafeMergeFrom(const User& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
  if (from.last_online_at() != 0) {
    set_last_online_at(from.last_online_at());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.User)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  id_.Swap(&other->id_);
  handle_.Swap(&other->handle_);
  fullname_.Swap(&other->fullname_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  location_.Swap(&other->location_);
  timezone_.Swap(&other->timezone_);
  metadata_.Swap(&other->metadata_);
  std::swap(created_at_, other->created_at_);
  std::swap(updated_at_, other->updated_at_);
  std::swap(last_online_at_, other->last_online_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional string id = 1;
void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:server.User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.id)
}
void User::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.id)
}
void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.id)
}
::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:server.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.User.id)
}

// optional string handle = 2;
void User::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::handle() const {
  // @@protoc_insertion_point(field_get:server.User.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.handle)
}
void User::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.handle)
}
void User::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.handle)
}
::std::string* User::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.User.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_handle() {
  // @@protoc_insertion_point(field_release:server.User.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.User.handle)
}

// optional string fullname = 3;
void User::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::fullname() const {
  // @@protoc_insertion_point(field_get:server.User.fullname)
  return fullname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_fullname(const ::std::string& value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.fullname)
}
void User::set_fullname(const char* value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.fullname)
}
void User::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.fullname)
}
::std::string* User::mutable_fullname() {
  
  // @@protoc_insertion_point(field_mutable:server.User.fullname)
  return fullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_fullname() {
  // @@protoc_insertion_point(field_release:server.User.fullname)
  
  return fullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_fullname(::std::string* fullname) {
  if (fullname != NULL) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:server.User.fullname)
}

// optional string avatar_url = 4;
void User::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.User.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.avatar_url)
}
void User::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.avatar_url)
}
void User::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.avatar_url)
}
::std::string* User::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.User.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.User.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.User.avatar_url)
}

// optional string lang = 5;
void User::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::lang() const {
  // @@protoc_insertion_point(field_get:server.User.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.lang)
}
void User::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.lang)
}
void User::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.lang)
}
::std::string* User::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.User.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_lang() {
  // @@protoc_insertion_point(field_release:server.User.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.User.lang)
}

// optional string location = 6;
void User::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::location() const {
  // @@protoc_insertion_point(field_get:server.User.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.location)
}
void User::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.location)
}
void User::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.location)
}
::std::string* User::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.User.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_location() {
  // @@protoc_insertion_point(field_release:server.User.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.User.location)
}

// optional string timezone = 7;
void User::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::timezone() const {
  // @@protoc_insertion_point(field_get:server.User.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.timezone)
}
void User::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.timezone)
}
void User::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.timezone)
}
::std::string* User::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.User.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_timezone() {
  // @@protoc_insertion_point(field_release:server.User.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.User.timezone)
}

// optional string metadata = 8;
void User::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::metadata() const {
  // @@protoc_insertion_point(field_get:server.User.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.metadata)
}
void User::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.metadata)
}
void User::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.metadata)
}
::std::string* User::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.User.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_metadata() {
  // @@protoc_insertion_point(field_release:server.User.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.User.metadata)
}

// optional int64 created_at = 9;
void User::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 User::created_at() const {
  // @@protoc_insertion_point(field_get:server.User.created_at)
  return created_at_;
}
void User::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.created_at)
}

// optional int64 updated_at = 10;
void User::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 User::updated_at() const {
  // @@protoc_insertion_point(field_get:server.User.updated_at)
  return updated_at_;
}
void User::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.updated_at)
}

// optional int64 last_online_at = 11;
void User::clear_last_online_at() {
  last_online_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 User::last_online_at() const {
  // @@protoc_insertion_point(field_get:server.User.last_online_at)
  return last_online_at_;
}
void User::set_last_online_at(::google::protobuf::int64 value) {
  
  last_online_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.last_online_at)
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Self::kUserFieldNumber;
const int Self::kVerifiedFieldNumber;
const int Self::kEmailFieldNumber;
const int Self::kDeviceIdsFieldNumber;
const int Self::kFacebookIdFieldNumber;
const int Self::kGoogleIdFieldNumber;
const int Self::kGamecenterIdFieldNumber;
const int Self::kSteamIdFieldNumber;
const int Self::kCustomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Self::Self()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Self)
}

void Self::InitAsDefaultInstance() {
  user_ = const_cast< ::server::User*>(
      ::server::User::internal_default_instance());
}

Self::Self(const Self& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Self)
}

void Self::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
  verified_ = false;
  _cached_size_ = 0;
}

Self::~Self() {
  // @@protoc_insertion_point(destructor:server.Self)
  SharedDtor();
}

void Self::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Self_default_instance_.get()) {
    delete user_;
  }
}

void Self::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Self::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Self_descriptor_;
}

const Self& Self::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Self> Self_default_instance_;

Self* Self::New(::google::protobuf::Arena* arena) const {
  Self* n = new Self;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Self::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Self)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
  verified_ = false;
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ids_.Clear();
}

bool Self::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Self)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_verified;
        break;
      }

      // optional bool verified = 2;
      case 2: {
        if (tag == 16) {
         parse_verified:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_ids;
        break;
      }

      // repeated string device_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_device_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_ids(this->device_ids_size() - 1).data(),
            this->device_ids(this->device_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.device_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_ids;
        if (input->ExpectTag(42)) goto parse_facebook_id;
        break;
      }

      // optional string facebook_id = 5;
      case 5: {
        if (tag == 42) {
         parse_facebook_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook_id().data(), this->facebook_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.facebook_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_google_id;
        break;
      }

      // optional string google_id = 6;
      case 6: {
        if (tag == 50) {
         parse_google_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google_id().data(), this->google_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.google_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gamecenter_id;
        break;
      }

      // optional string gamecenter_id = 7;
      case 7: {
        if (tag == 58) {
         parse_gamecenter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamecenter_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamecenter_id().data(), this->gamecenter_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.gamecenter_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_steam_id;
        break;
      }

      // optional string steam_id = 8;
      case 8: {
        if (tag == 66) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam_id().data(), this->steam_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.steam_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_custom_id;
        break;
      }

      // optional string custom_id = 9;
      case 9: {
        if (tag == 74) {
         parse_custom_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_id().data(), this->custom_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.custom_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Self)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Self)
  return false;
#undef DO_
}

void Self::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Self)
  // optional .server.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // optional bool verified = 2;
  if (this->verified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->verified(), output);
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated string device_ids = 4;
  for (int i = 0; i < this->device_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_ids(i).data(), this->device_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.device_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_ids(i), output);
  }

  // optional string facebook_id = 5;
  if (this->facebook_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_id().data(), this->facebook_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.facebook_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->facebook_id(), output);
  }

  // optional string google_id = 6;
  if (this->google_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google_id().data(), this->google_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.google_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->google_id(), output);
  }

  // optional string gamecenter_id = 7;
  if (this->gamecenter_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamecenter_id().data(), this->gamecenter_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.gamecenter_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gamecenter_id(), output);
  }

  // optional string steam_id = 8;
  if (this->steam_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam_id().data(), this->steam_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.steam_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->steam_id(), output);
  }

  // optional string custom_id = 9;
  if (this->custom_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_id().data(), this->custom_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.custom_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->custom_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Self)
}

::google::protobuf::uint8* Self::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Self)
  // optional .server.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // optional bool verified = 2;
  if (this->verified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->verified(), target);
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated string device_ids = 4;
  for (int i = 0; i < this->device_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_ids(i).data(), this->device_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.device_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->device_ids(i), target);
  }

  // optional string facebook_id = 5;
  if (this->facebook_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_id().data(), this->facebook_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.facebook_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->facebook_id(), target);
  }

  // optional string google_id = 6;
  if (this->google_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google_id().data(), this->google_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.google_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->google_id(), target);
  }

  // optional string gamecenter_id = 7;
  if (this->gamecenter_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamecenter_id().data(), this->gamecenter_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.gamecenter_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gamecenter_id(), target);
  }

  // optional string steam_id = 8;
  if (this->steam_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam_id().data(), this->steam_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.steam_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->steam_id(), target);
  }

  // optional string custom_id = 9;
  if (this->custom_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_id().data(), this->custom_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.custom_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->custom_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Self)
  return target;
}

size_t Self::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Self)
  size_t total_size = 0;

  // optional .server.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // optional bool verified = 2;
  if (this->verified() != 0) {
    total_size += 1 + 1;
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional string facebook_id = 5;
  if (this->facebook_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->facebook_id());
  }

  // optional string google_id = 6;
  if (this->google_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->google_id());
  }

  // optional string gamecenter_id = 7;
  if (this->gamecenter_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamecenter_id());
  }

  // optional string steam_id = 8;
  if (this->steam_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->steam_id());
  }

  // optional string custom_id = 9;
  if (this->custom_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_id());
  }

  // repeated string device_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->device_ids_size());
  for (int i = 0; i < this->device_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Self::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Self)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Self* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Self>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Self)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Self)
    UnsafeMergeFrom(*source);
  }
}

void Self::MergeFrom(const Self& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Self)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Self::UnsafeMergeFrom(const Self& from) {
  GOOGLE_DCHECK(&from != this);
  device_ids_.UnsafeMergeFrom(from.device_ids_);
  if (from.has_user()) {
    mutable_user()->::server::User::MergeFrom(from.user());
  }
  if (from.verified() != 0) {
    set_verified(from.verified());
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.facebook_id().size() > 0) {

    facebook_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_id_);
  }
  if (from.google_id().size() > 0) {

    google_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.google_id_);
  }
  if (from.gamecenter_id().size() > 0) {

    gamecenter_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamecenter_id_);
  }
  if (from.steam_id().size() > 0) {

    steam_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_id_);
  }
  if (from.custom_id().size() > 0) {

    custom_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_id_);
  }
}

void Self::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Self)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Self::CopyFrom(const Self& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Self)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Self::IsInitialized() const {

  return true;
}

void Self::Swap(Self* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Self::InternalSwap(Self* other) {
  std::swap(user_, other->user_);
  std::swap(verified_, other->verified_);
  email_.Swap(&other->email_);
  device_ids_.UnsafeArenaSwap(&other->device_ids_);
  facebook_id_.Swap(&other->facebook_id_);
  google_id_.Swap(&other->google_id_);
  gamecenter_id_.Swap(&other->gamecenter_id_);
  steam_id_.Swap(&other->steam_id_);
  custom_id_.Swap(&other->custom_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Self::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Self_descriptor_;
  metadata.reflection = Self_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Self

// optional .server.User user = 1;
bool Self::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void Self::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::server::User& Self::user() const {
  // @@protoc_insertion_point(field_get:server.Self.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
::server::User* Self::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.Self.user)
  return user_;
}
::server::User* Self::release_user() {
  // @@protoc_insertion_point(field_release:server.Self.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
void Self::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Self.user)
}

// optional bool verified = 2;
void Self::clear_verified() {
  verified_ = false;
}
bool Self::verified() const {
  // @@protoc_insertion_point(field_get:server.Self.verified)
  return verified_;
}
void Self::set_verified(bool value) {
  
  verified_ = value;
  // @@protoc_insertion_point(field_set:server.Self.verified)
}

// optional string email = 3;
void Self::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::email() const {
  // @@protoc_insertion_point(field_get:server.Self.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.email)
}
void Self::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.email)
}
void Self::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.email)
}
::std::string* Self::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_email() {
  // @@protoc_insertion_point(field_release:server.Self.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.Self.email)
}

// repeated string device_ids = 4;
int Self::device_ids_size() const {
  return device_ids_.size();
}
void Self::clear_device_ids() {
  device_ids_.Clear();
}
const ::std::string& Self::device_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.Self.device_ids)
  return device_ids_.Get(index);
}
::std::string* Self::mutable_device_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.Self.device_ids)
  return device_ids_.Mutable(index);
}
void Self::set_device_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.Self.device_ids)
  device_ids_.Mutable(index)->assign(value);
}
void Self::set_device_ids(int index, const char* value) {
  device_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.Self.device_ids)
}
void Self::set_device_ids(int index, const char* value, size_t size) {
  device_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.Self.device_ids)
}
::std::string* Self::add_device_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.Self.device_ids)
  return device_ids_.Add();
}
void Self::add_device_ids(const ::std::string& value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.Self.device_ids)
}
void Self::add_device_ids(const char* value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.Self.device_ids)
}
void Self::add_device_ids(const char* value, size_t size) {
  device_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.Self.device_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Self::device_ids() const {
  // @@protoc_insertion_point(field_list:server.Self.device_ids)
  return device_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Self::mutable_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.Self.device_ids)
  return &device_ids_;
}

// optional string facebook_id = 5;
void Self::clear_facebook_id() {
  facebook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::facebook_id() const {
  // @@protoc_insertion_point(field_get:server.Self.facebook_id)
  return facebook_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_facebook_id(const ::std::string& value) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.facebook_id)
}
void Self::set_facebook_id(const char* value) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.facebook_id)
}
void Self::set_facebook_id(const char* value, size_t size) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.facebook_id)
}
::std::string* Self::mutable_facebook_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.facebook_id)
  return facebook_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_facebook_id() {
  // @@protoc_insertion_point(field_release:server.Self.facebook_id)
  
  return facebook_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_facebook_id(::std::string* facebook_id) {
  if (facebook_id != NULL) {
    
  } else {
    
  }
  facebook_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facebook_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.facebook_id)
}

// optional string google_id = 6;
void Self::clear_google_id() {
  google_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::google_id() const {
  // @@protoc_insertion_point(field_get:server.Self.google_id)
  return google_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_google_id(const ::std::string& value) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.google_id)
}
void Self::set_google_id(const char* value) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.google_id)
}
void Self::set_google_id(const char* value, size_t size) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.google_id)
}
::std::string* Self::mutable_google_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.google_id)
  return google_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_google_id() {
  // @@protoc_insertion_point(field_release:server.Self.google_id)
  
  return google_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_google_id(::std::string* google_id) {
  if (google_id != NULL) {
    
  } else {
    
  }
  google_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), google_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.google_id)
}

// optional string gamecenter_id = 7;
void Self::clear_gamecenter_id() {
  gamecenter_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::gamecenter_id() const {
  // @@protoc_insertion_point(field_get:server.Self.gamecenter_id)
  return gamecenter_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_gamecenter_id(const ::std::string& value) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.gamecenter_id)
}
void Self::set_gamecenter_id(const char* value) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.gamecenter_id)
}
void Self::set_gamecenter_id(const char* value, size_t size) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.gamecenter_id)
}
::std::string* Self::mutable_gamecenter_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.gamecenter_id)
  return gamecenter_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_gamecenter_id() {
  // @@protoc_insertion_point(field_release:server.Self.gamecenter_id)
  
  return gamecenter_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_gamecenter_id(::std::string* gamecenter_id) {
  if (gamecenter_id != NULL) {
    
  } else {
    
  }
  gamecenter_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamecenter_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.gamecenter_id)
}

// optional string steam_id = 8;
void Self::clear_steam_id() {
  steam_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::steam_id() const {
  // @@protoc_insertion_point(field_get:server.Self.steam_id)
  return steam_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_steam_id(const ::std::string& value) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.steam_id)
}
void Self::set_steam_id(const char* value) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.steam_id)
}
void Self::set_steam_id(const char* value, size_t size) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.steam_id)
}
::std::string* Self::mutable_steam_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.steam_id)
  return steam_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_steam_id() {
  // @@protoc_insertion_point(field_release:server.Self.steam_id)
  
  return steam_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_steam_id(::std::string* steam_id) {
  if (steam_id != NULL) {
    
  } else {
    
  }
  steam_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.steam_id)
}

// optional string custom_id = 9;
void Self::clear_custom_id() {
  custom_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::custom_id() const {
  // @@protoc_insertion_point(field_get:server.Self.custom_id)
  return custom_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_custom_id(const ::std::string& value) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.custom_id)
}
void Self::set_custom_id(const char* value) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.custom_id)
}
void Self::set_custom_id(const char* value, size_t size) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.custom_id)
}
::std::string* Self::mutable_custom_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.custom_id)
  return custom_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_custom_id() {
  // @@protoc_insertion_point(field_release:server.Self.custom_id)
  
  return custom_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_custom_id(::std::string* custom_id) {
  if (custom_id != NULL) {
    
  } else {
    
  }
  custom_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.custom_id)
}

inline const Self* Self::internal_default_instance() {
  return &Self_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSelfFetch::TSelfFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TSelfFetch)
}

void TSelfFetch::InitAsDefaultInstance() {
}

TSelfFetch::TSelfFetch(const TSelfFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TSelfFetch)
}

void TSelfFetch::SharedCtor() {
  _cached_size_ = 0;
}

TSelfFetch::~TSelfFetch() {
  // @@protoc_insertion_point(destructor:server.TSelfFetch)
  SharedDtor();
}

void TSelfFetch::SharedDtor() {
}

void TSelfFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSelfFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSelfFetch_descriptor_;
}

const TSelfFetch& TSelfFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TSelfFetch> TSelfFetch_default_instance_;

TSelfFetch* TSelfFetch::New(::google::protobuf::Arena* arena) const {
  TSelfFetch* n = new TSelfFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSelfFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TSelfFetch)
}

bool TSelfFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TSelfFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TSelfFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TSelfFetch)
  return false;
#undef DO_
}

void TSelfFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TSelfFetch)
  // @@protoc_insertion_point(serialize_end:server.TSelfFetch)
}

::google::protobuf::uint8* TSelfFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TSelfFetch)
  // @@protoc_insertion_point(serialize_to_array_end:server.TSelfFetch)
  return target;
}

size_t TSelfFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TSelfFetch)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSelfFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TSelfFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TSelfFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TSelfFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelfFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelfFetch)
    UnsafeMergeFrom(*source);
  }
}

void TSelfFetch::MergeFrom(const TSelfFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelfFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TSelfFetch::UnsafeMergeFrom(const TSelfFetch& from) {
  GOOGLE_DCHECK(&from != this);
}

void TSelfFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TSelfFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSelfFetch::CopyFrom(const TSelfFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelfFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TSelfFetch::IsInitialized() const {

  return true;
}

void TSelfFetch::Swap(TSelfFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSelfFetch::InternalSwap(TSelfFetch* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSelfFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSelfFetch_descriptor_;
  metadata.reflection = TSelfFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSelfFetch

inline const TSelfFetch* TSelfFetch::internal_default_instance() {
  return &TSelfFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSelf::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSelf::TSelf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TSelf)
}

void TSelf::InitAsDefaultInstance() {
  self_ = const_cast< ::server::Self*>(
      ::server::Self::internal_default_instance());
}

TSelf::TSelf(const TSelf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TSelf)
}

void TSelf::SharedCtor() {
  self_ = NULL;
  _cached_size_ = 0;
}

TSelf::~TSelf() {
  // @@protoc_insertion_point(destructor:server.TSelf)
  SharedDtor();
}

void TSelf::SharedDtor() {
  if (this != &TSelf_default_instance_.get()) {
    delete self_;
  }
}

void TSelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSelf_descriptor_;
}

const TSelf& TSelf::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TSelf> TSelf_default_instance_;

TSelf* TSelf::New(::google::protobuf::Arena* arena) const {
  TSelf* n = new TSelf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSelf::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TSelf)
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}

bool TSelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TSelf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.Self self = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TSelf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TSelf)
  return false;
#undef DO_
}

void TSelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TSelf)
  // optional .server.Self self = 1;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->self_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TSelf)
}

::google::protobuf::uint8* TSelf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TSelf)
  // optional .server.Self self = 1;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->self_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TSelf)
  return target;
}

size_t TSelf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TSelf)
  size_t total_size = 0;

  // optional .server.Self self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSelf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TSelf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TSelf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TSelf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelf)
    UnsafeMergeFrom(*source);
  }
}

void TSelf::MergeFrom(const TSelf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TSelf::UnsafeMergeFrom(const TSelf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_self()) {
    mutable_self()->::server::Self::MergeFrom(from.self());
  }
}

void TSelf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TSelf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSelf::CopyFrom(const TSelf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TSelf::IsInitialized() const {

  return true;
}

void TSelf::Swap(TSelf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSelf::InternalSwap(TSelf* other) {
  std::swap(self_, other->self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSelf_descriptor_;
  metadata.reflection = TSelf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSelf

// optional .server.Self self = 1;
bool TSelf::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
void TSelf::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
const ::server::Self& TSelf::self() const {
  // @@protoc_insertion_point(field_get:server.TSelf.self)
  return self_ != NULL ? *self_
                         : *::server::Self::internal_default_instance();
}
::server::Self* TSelf::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::Self;
  }
  // @@protoc_insertion_point(field_mutable:server.TSelf.self)
  return self_;
}
::server::Self* TSelf::release_self() {
  // @@protoc_insertion_point(field_release:server.TSelf.self)
  
  ::server::Self* temp = self_;
  self_ = NULL;
  return temp;
}
void TSelf::set_allocated_self(::server::Self* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TSelf.self)
}

inline const TSelf* TSelf::internal_default_instance() {
  return &TSelf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSelfUpdate::kHandleFieldNumber;
const int TSelfUpdate::kFullnameFieldNumber;
const int TSelfUpdate::kTimezoneFieldNumber;
const int TSelfUpdate::kLocationFieldNumber;
const int TSelfUpdate::kLangFieldNumber;
const int TSelfUpdate::kMetadataFieldNumber;
const int TSelfUpdate::kAvatarUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSelfUpdate::TSelfUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TSelfUpdate)
}

void TSelfUpdate::InitAsDefaultInstance() {
}

TSelfUpdate::TSelfUpdate(const TSelfUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TSelfUpdate)
}

void TSelfUpdate::SharedCtor() {
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TSelfUpdate::~TSelfUpdate() {
  // @@protoc_insertion_point(destructor:server.TSelfUpdate)
  SharedDtor();
}

void TSelfUpdate::SharedDtor() {
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TSelfUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSelfUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSelfUpdate_descriptor_;
}

const TSelfUpdate& TSelfUpdate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TSelfUpdate> TSelfUpdate_default_instance_;

TSelfUpdate* TSelfUpdate::New(::google::protobuf::Arena* arena) const {
  TSelfUpdate* n = new TSelfUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSelfUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TSelfUpdate)
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TSelfUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TSelfUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fullname;
        break;
      }

      // optional string fullname = 2;
      case 2: {
        if (tag == 18) {
         parse_fullname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fullname().data(), this->fullname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.fullname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timezone;
        break;
      }

      // optional string timezone = 3;
      case 3: {
        if (tag == 26) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.timezone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional string location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lang;
        break;
      }

      // optional string lang = 5;
      case 5: {
        if (tag == 42) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_metadata;
        break;
      }

      // optional string metadata = 6;
      case 6: {
        if (tag == 50) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TSelfUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TSelfUpdate)
  return false;
#undef DO_
}

void TSelfUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TSelfUpdate)
  // optional string handle = 1;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->handle(), output);
  }

  // optional string fullname = 2;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.fullname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fullname(), output);
  }

  // optional string timezone = 3;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timezone(), output);
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location(), output);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang(), output);
  }

  // optional string metadata = 6;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->metadata(), output);
  }

  // optional string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TSelfUpdate)
}

::google::protobuf::uint8* TSelfUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TSelfUpdate)
  // optional string handle = 1;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->handle(), target);
  }

  // optional string fullname = 2;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.fullname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fullname(), target);
  }

  // optional string timezone = 3;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timezone(), target);
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location(), target);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lang(), target);
  }

  // optional string metadata = 6;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metadata(), target);
  }

  // optional string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TSelfUpdate)
  return target;
}

size_t TSelfUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TSelfUpdate)
  size_t total_size = 0;

  // optional string handle = 1;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // optional string fullname = 2;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullname());
  }

  // optional string timezone = 3;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional string metadata = 6;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // optional string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSelfUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TSelfUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TSelfUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TSelfUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelfUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelfUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TSelfUpdate::MergeFrom(const TSelfUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelfUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TSelfUpdate::UnsafeMergeFrom(const TSelfUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
}

void TSelfUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TSelfUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSelfUpdate::CopyFrom(const TSelfUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelfUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TSelfUpdate::IsInitialized() const {

  return true;
}

void TSelfUpdate::Swap(TSelfUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSelfUpdate::InternalSwap(TSelfUpdate* other) {
  handle_.Swap(&other->handle_);
  fullname_.Swap(&other->fullname_);
  timezone_.Swap(&other->timezone_);
  location_.Swap(&other->location_);
  lang_.Swap(&other->lang_);
  metadata_.Swap(&other->metadata_);
  avatar_url_.Swap(&other->avatar_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSelfUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSelfUpdate_descriptor_;
  metadata.reflection = TSelfUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSelfUpdate

// optional string handle = 1;
void TSelfUpdate::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::handle() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.handle)
}
void TSelfUpdate::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.handle)
}
void TSelfUpdate::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.handle)
}
::std::string* TSelfUpdate::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_handle() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.handle)
}

// optional string fullname = 2;
void TSelfUpdate::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::fullname() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.fullname)
  return fullname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_fullname(const ::std::string& value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.fullname)
}
void TSelfUpdate::set_fullname(const char* value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.fullname)
}
void TSelfUpdate::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.fullname)
}
::std::string* TSelfUpdate::mutable_fullname() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.fullname)
  return fullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_fullname() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.fullname)
  
  return fullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_fullname(::std::string* fullname) {
  if (fullname != NULL) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.fullname)
}

// optional string timezone = 3;
void TSelfUpdate::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::timezone() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.timezone)
}
void TSelfUpdate::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.timezone)
}
void TSelfUpdate::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.timezone)
}
::std::string* TSelfUpdate::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.timezone)
}

// optional string location = 4;
void TSelfUpdate::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::location() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.location)
}
void TSelfUpdate::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.location)
}
void TSelfUpdate::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.location)
}
::std::string* TSelfUpdate::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_location() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.location)
}

// optional string lang = 5;
void TSelfUpdate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.lang)
}
void TSelfUpdate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.lang)
}
void TSelfUpdate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.lang)
}
::std::string* TSelfUpdate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.lang)
}

// optional string metadata = 6;
void TSelfUpdate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.metadata)
}
void TSelfUpdate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.metadata)
}
void TSelfUpdate::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.metadata)
}
::std::string* TSelfUpdate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.metadata)
}

// optional string avatar_url = 7;
void TSelfUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.avatar_url)
}
void TSelfUpdate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.avatar_url)
}
void TSelfUpdate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.avatar_url)
}
::std::string* TSelfUpdate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.avatar_url)
}

inline const TSelfUpdate* TSelfUpdate::internal_default_instance() {
  return &TSelfUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TUsersFetch_UsersFetch::kUserIdFieldNumber;
const int TUsersFetch_UsersFetch::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TUsersFetch_UsersFetch::TUsersFetch_UsersFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TUsersFetch.UsersFetch)
}

void TUsersFetch_UsersFetch::InitAsDefaultInstance() {
  TUsersFetch_UsersFetch_default_oneof_instance_->user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUsersFetch_UsersFetch_default_oneof_instance_->handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TUsersFetch_UsersFetch::TUsersFetch_UsersFetch(const TUsersFetch_UsersFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TUsersFetch.UsersFetch)
}

void TUsersFetch_UsersFetch::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TUsersFetch_UsersFetch::~TUsersFetch_UsersFetch() {
  // @@protoc_insertion_point(destructor:server.TUsersFetch.UsersFetch)
  SharedDtor();
}

void TUsersFetch_UsersFetch::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TUsersFetch_UsersFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUsersFetch_UsersFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUsersFetch_UsersFetch_descriptor_;
}

const TUsersFetch_UsersFetch& TUsersFetch_UsersFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TUsersFetch_UsersFetch> TUsersFetch_UsersFetch_default_instance_;

TUsersFetch_UsersFetch* TUsersFetch_UsersFetch::New(::google::protobuf::Arena* arena) const {
  TUsersFetch_UsersFetch* n = new TUsersFetch_UsersFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TUsersFetch_UsersFetch::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TUsersFetch.UsersFetch)
  switch (id_case()) {
    case kUserId: {
      id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHandle: {
      id_.handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TUsersFetch_UsersFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TUsersFetch.UsersFetch)
  clear_id();
}

bool TUsersFetch_UsersFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TUsersFetch.UsersFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUsersFetch.UsersFetch.user_id"));
        } else {
          goto handle_unusual;
        }
        goto after_handle;
        break;
      }

      // optional string handle = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUsersFetch.UsersFetch.handle"));
        } else {
          goto handle_unusual;
        }
       after_handle:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TUsersFetch.UsersFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TUsersFetch.UsersFetch)
  return false;
#undef DO_
}

void TUsersFetch_UsersFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TUsersFetch.UsersFetch)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUsersFetch.UsersFetch.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUsersFetch.UsersFetch.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TUsersFetch.UsersFetch)
}

::google::protobuf::uint8* TUsersFetch_UsersFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TUsersFetch.UsersFetch)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUsersFetch.UsersFetch.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUsersFetch.UsersFetch.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TUsersFetch.UsersFetch)
  return target;
}

size_t TUsersFetch_UsersFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TUsersFetch.UsersFetch)
  size_t total_size = 0;

  switch (id_case()) {
    // optional string user_id = 1;
    case kUserId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
      break;
    }
    // optional string handle = 2;
    case kHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->handle());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUsersFetch_UsersFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TUsersFetch.UsersFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TUsersFetch_UsersFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TUsersFetch_UsersFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsersFetch.UsersFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsersFetch.UsersFetch)
    UnsafeMergeFrom(*source);
  }
}

void TUsersFetch_UsersFetch::MergeFrom(const TUsersFetch_UsersFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsersFetch.UsersFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TUsersFetch_UsersFetch::UnsafeMergeFrom(const TUsersFetch_UsersFetch& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUserId: {
      set_user_id(from.user_id());
      break;
    }
    case kHandle: {
      set_handle(from.handle());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TUsersFetch_UsersFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TUsersFetch.UsersFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUsersFetch_UsersFetch::CopyFrom(const TUsersFetch_UsersFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsersFetch.UsersFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TUsersFetch_UsersFetch::IsInitialized() const {

  return true;
}

void TUsersFetch_UsersFetch::Swap(TUsersFetch_UsersFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TUsersFetch_UsersFetch::InternalSwap(TUsersFetch_UsersFetch* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TUsersFetch_UsersFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUsersFetch_UsersFetch_descriptor_;
  metadata.reflection = TUsersFetch_UsersFetch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TUsersFetch::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TUsersFetch::TUsersFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TUsersFetch)
}

void TUsersFetch::InitAsDefaultInstance() {
}

TUsersFetch::TUsersFetch(const TUsersFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TUsersFetch)
}

void TUsersFetch::SharedCtor() {
  _cached_size_ = 0;
}

TUsersFetch::~TUsersFetch() {
  // @@protoc_insertion_point(destructor:server.TUsersFetch)
  SharedDtor();
}

void TUsersFetch::SharedDtor() {
}

void TUsersFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUsersFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUsersFetch_descriptor_;
}

const TUsersFetch& TUsersFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TUsersFetch> TUsersFetch_default_instance_;

TUsersFetch* TUsersFetch::New(::google::protobuf::Arena* arena) const {
  TUsersFetch* n = new TUsersFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TUsersFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TUsersFetch)
  users_.Clear();
}

bool TUsersFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TUsersFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TUsersFetch.UsersFetch users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TUsersFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TUsersFetch)
  return false;
#undef DO_
}

void TUsersFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TUsersFetch)
  // repeated .server.TUsersFetch.UsersFetch users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TUsersFetch)
}

::google::protobuf::uint8* TUsersFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TUsersFetch)
  // repeated .server.TUsersFetch.UsersFetch users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TUsersFetch)
  return target;
}

size_t TUsersFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TUsersFetch)
  size_t total_size = 0;

  // repeated .server.TUsersFetch.UsersFetch users = 1;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUsersFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TUsersFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TUsersFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TUsersFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsersFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsersFetch)
    UnsafeMergeFrom(*source);
  }
}

void TUsersFetch::MergeFrom(const TUsersFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsersFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TUsersFetch::UnsafeMergeFrom(const TUsersFetch& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
}

void TUsersFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TUsersFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUsersFetch::CopyFrom(const TUsersFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsersFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TUsersFetch::IsInitialized() const {

  return true;
}

void TUsersFetch::Swap(TUsersFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TUsersFetch::InternalSwap(TUsersFetch* other) {
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TUsersFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUsersFetch_descriptor_;
  metadata.reflection = TUsersFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TUsersFetch_UsersFetch

// optional string user_id = 1;
bool TUsersFetch_UsersFetch::has_user_id() const {
  return id_case() == kUserId;
}
void TUsersFetch_UsersFetch::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
void TUsersFetch_UsersFetch::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUsersFetch_UsersFetch::user_id() const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.UsersFetch.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUsersFetch_UsersFetch::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.user_id)
}
void TUsersFetch_UsersFetch::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUsersFetch.UsersFetch.user_id)
}
void TUsersFetch_UsersFetch::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUsersFetch.UsersFetch.user_id)
}
::std::string* TUsersFetch_UsersFetch::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.UsersFetch.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUsersFetch_UsersFetch::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TUsersFetch.UsersFetch.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUsersFetch_UsersFetch::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUsersFetch.UsersFetch.user_id)
}

// optional string handle = 2;
bool TUsersFetch_UsersFetch::has_handle() const {
  return id_case() == kHandle;
}
void TUsersFetch_UsersFetch::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
void TUsersFetch_UsersFetch::clear_handle() {
  if (has_handle()) {
    id_.handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TUsersFetch_UsersFetch::handle() const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.UsersFetch.handle)
  if (has_handle()) {
    return id_.handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUsersFetch_UsersFetch::set_handle(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.handle)
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.handle)
}
void TUsersFetch_UsersFetch::set_handle(const char* value) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUsersFetch.UsersFetch.handle)
}
void TUsersFetch_UsersFetch::set_handle(const char* value, size_t size) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUsersFetch.UsersFetch.handle)
}
::std::string* TUsersFetch_UsersFetch::mutable_handle() {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.UsersFetch.handle)
  return id_.handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUsersFetch_UsersFetch::release_handle() {
  // @@protoc_insertion_point(field_release:server.TUsersFetch.UsersFetch.handle)
  if (has_handle()) {
    clear_has_id();
    return id_.handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUsersFetch_UsersFetch::set_allocated_handle(::std::string* handle) {
  if (!has_handle()) {
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (handle != NULL) {
    set_has_handle();
    id_.handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        handle);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUsersFetch.UsersFetch.handle)
}

bool TUsersFetch_UsersFetch::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TUsersFetch_UsersFetch::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TUsersFetch_UsersFetch::IdCase TUsersFetch_UsersFetch::id_case() const {
  return TUsersFetch_UsersFetch::IdCase(_oneof_case_[0]);
}
inline const TUsersFetch_UsersFetch* TUsersFetch_UsersFetch::internal_default_instance() {
  return &TUsersFetch_UsersFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TUsersFetch

// repeated .server.TUsersFetch.UsersFetch users = 1;
int TUsersFetch::users_size() const {
  return users_.size();
}
void TUsersFetch::clear_users() {
  users_.Clear();
}
const ::server::TUsersFetch_UsersFetch& TUsersFetch::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.users)
  return users_.Get(index);
}
::server::TUsersFetch_UsersFetch* TUsersFetch::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.users)
  return users_.Mutable(index);
}
::server::TUsersFetch_UsersFetch* TUsersFetch::add_users() {
  // @@protoc_insertion_point(field_add:server.TUsersFetch.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >*
TUsersFetch::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsersFetch.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >&
TUsersFetch::users() const {
  // @@protoc_insertion_point(field_list:server.TUsersFetch.users)
  return users_;
}

inline const TUsersFetch* TUsersFetch::internal_default_instance() {
  return &TUsersFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TUsers::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TUsers::TUsers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TUsers)
}

void TUsers::InitAsDefaultInstance() {
}

TUsers::TUsers(const TUsers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TUsers)
}

void TUsers::SharedCtor() {
  _cached_size_ = 0;
}

TUsers::~TUsers() {
  // @@protoc_insertion_point(destructor:server.TUsers)
  SharedDtor();
}

void TUsers::SharedDtor() {
}

void TUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUsers_descriptor_;
}

const TUsers& TUsers::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TUsers> TUsers_default_instance_;

TUsers* TUsers::New(::google::protobuf::Arena* arena) const {
  TUsers* n = new TUsers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TUsers)
  users_.Clear();
}

bool TUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TUsers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.User users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TUsers)
  return false;
#undef DO_
}

void TUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TUsers)
  // repeated .server.User users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TUsers)
}

::google::protobuf::uint8* TUsers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TUsers)
  // repeated .server.User users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TUsers)
  return target;
}

size_t TUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TUsers)
  size_t total_size = 0;

  // repeated .server.User users = 1;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TUsers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TUsers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TUsers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsers)
    UnsafeMergeFrom(*source);
  }
}

void TUsers::MergeFrom(const TUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsers)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TUsers::UnsafeMergeFrom(const TUsers& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
}

void TUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUsers::CopyFrom(const TUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsers)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TUsers::IsInitialized() const {

  return true;
}

void TUsers::Swap(TUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TUsers::InternalSwap(TUsers* other) {
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUsers_descriptor_;
  metadata.reflection = TUsers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TUsers

// repeated .server.User users = 1;
int TUsers::users_size() const {
  return users_.size();
}
void TUsers::clear_users() {
  users_.Clear();
}
const ::server::User& TUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsers.users)
  return users_.Get(index);
}
::server::User* TUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsers.users)
  return users_.Mutable(index);
}
::server::User* TUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TUsers.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::User >*
TUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsers.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::User >&
TUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TUsers.users)
  return users_;
}

inline const TUsers* TUsers::internal_default_instance() {
  return &TUsers_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friend::kUserFieldNumber;
const int Friend::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friend::Friend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Friend)
}

void Friend::InitAsDefaultInstance() {
  user_ = const_cast< ::server::User*>(
      ::server::User::internal_default_instance());
}

Friend::Friend(const Friend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Friend)
}

void Friend::SharedCtor() {
  user_ = NULL;
  state_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:server.Friend)
  SharedDtor();
}

void Friend::SharedDtor() {
  if (this != &Friend_default_instance_.get()) {
    delete user_;
  }
}

void Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_descriptor_;
}

const Friend& Friend::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Friend> Friend_default_instance_;

Friend* Friend::New(::google::protobuf::Arena* arena) const {
  Friend* n = new Friend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Friend)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
  state_ = GOOGLE_LONGLONG(0);
}

bool Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int64 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Friend)
  return false;
#undef DO_
}

void Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Friend)
  // optional .server.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Friend)
}

::google::protobuf::uint8* Friend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Friend)
  // optional .server.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Friend)
  return target;
}

size_t Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Friend)
  size_t total_size = 0;

  // optional .server.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Friend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Friend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Friend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Friend)
    UnsafeMergeFrom(*source);
  }
}

void Friend::MergeFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Friend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Friend::UnsafeMergeFrom(const Friend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_user()) {
    mutable_user()->::server::User::MergeFrom(from.user());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend::CopyFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Friend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Friend::IsInitialized() const {

  return true;
}

void Friend::Swap(Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friend::InternalSwap(Friend* other) {
  std::swap(user_, other->user_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_descriptor_;
  metadata.reflection = Friend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Friend

// optional .server.User user = 1;
bool Friend::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void Friend::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::server::User& Friend::user() const {
  // @@protoc_insertion_point(field_get:server.Friend.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
::server::User* Friend::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.Friend.user)
  return user_;
}
::server::User* Friend::release_user() {
  // @@protoc_insertion_point(field_release:server.Friend.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
void Friend::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Friend.user)
}

// optional int64 state = 2;
void Friend::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Friend::state() const {
  // @@protoc_insertion_point(field_get:server.Friend.state)
  return state_;
}
void Friend::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:server.Friend.state)
}

inline const Friend* Friend::internal_default_instance() {
  return &Friend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriendsAdd_FriendsAdd::kUserIdFieldNumber;
const int TFriendsAdd_FriendsAdd::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendsAdd_FriendsAdd::TFriendsAdd_FriendsAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendsAdd.FriendsAdd)
}

void TFriendsAdd_FriendsAdd::InitAsDefaultInstance() {
  TFriendsAdd_FriendsAdd_default_oneof_instance_->user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TFriendsAdd_FriendsAdd_default_oneof_instance_->handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TFriendsAdd_FriendsAdd::TFriendsAdd_FriendsAdd(const TFriendsAdd_FriendsAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendsAdd.FriendsAdd)
}

void TFriendsAdd_FriendsAdd::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TFriendsAdd_FriendsAdd::~TFriendsAdd_FriendsAdd() {
  // @@protoc_insertion_point(destructor:server.TFriendsAdd.FriendsAdd)
  SharedDtor();
}

void TFriendsAdd_FriendsAdd::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TFriendsAdd_FriendsAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendsAdd_FriendsAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendsAdd_FriendsAdd_descriptor_;
}

const TFriendsAdd_FriendsAdd& TFriendsAdd_FriendsAdd::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendsAdd_FriendsAdd> TFriendsAdd_FriendsAdd_default_instance_;

TFriendsAdd_FriendsAdd* TFriendsAdd_FriendsAdd::New(::google::protobuf::Arena* arena) const {
  TFriendsAdd_FriendsAdd* n = new TFriendsAdd_FriendsAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendsAdd_FriendsAdd::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TFriendsAdd.FriendsAdd)
  switch (id_case()) {
    case kUserId: {
      id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHandle: {
      id_.handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TFriendsAdd_FriendsAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendsAdd.FriendsAdd)
  clear_id();
}

bool TFriendsAdd_FriendsAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendsAdd.FriendsAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TFriendsAdd.FriendsAdd.user_id"));
        } else {
          goto handle_unusual;
        }
        goto after_handle;
        break;
      }

      // optional string handle = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TFriendsAdd.FriendsAdd.handle"));
        } else {
          goto handle_unusual;
        }
       after_handle:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendsAdd.FriendsAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendsAdd.FriendsAdd)
  return false;
#undef DO_
}

void TFriendsAdd_FriendsAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendsAdd.FriendsAdd)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsAdd.FriendsAdd.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsAdd.FriendsAdd.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriendsAdd.FriendsAdd)
}

::google::protobuf::uint8* TFriendsAdd_FriendsAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendsAdd.FriendsAdd)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsAdd.FriendsAdd.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsAdd.FriendsAdd.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendsAdd.FriendsAdd)
  return target;
}

size_t TFriendsAdd_FriendsAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendsAdd.FriendsAdd)
  size_t total_size = 0;

  switch (id_case()) {
    // optional string user_id = 1;
    case kUserId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
      break;
    }
    // optional string handle = 2;
    case kHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->handle());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendsAdd_FriendsAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsAdd.FriendsAdd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendsAdd_FriendsAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendsAdd_FriendsAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsAdd.FriendsAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsAdd.FriendsAdd)
    UnsafeMergeFrom(*source);
  }
}

void TFriendsAdd_FriendsAdd::MergeFrom(const TFriendsAdd_FriendsAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsAdd.FriendsAdd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendsAdd_FriendsAdd::UnsafeMergeFrom(const TFriendsAdd_FriendsAdd& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUserId: {
      set_user_id(from.user_id());
      break;
    }
    case kHandle: {
      set_handle(from.handle());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TFriendsAdd_FriendsAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsAdd.FriendsAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendsAdd_FriendsAdd::CopyFrom(const TFriendsAdd_FriendsAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsAdd.FriendsAdd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendsAdd_FriendsAdd::IsInitialized() const {

  return true;
}

void TFriendsAdd_FriendsAdd::Swap(TFriendsAdd_FriendsAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendsAdd_FriendsAdd::InternalSwap(TFriendsAdd_FriendsAdd* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendsAdd_FriendsAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendsAdd_FriendsAdd_descriptor_;
  metadata.reflection = TFriendsAdd_FriendsAdd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriendsAdd::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendsAdd::TFriendsAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendsAdd)
}

void TFriendsAdd::InitAsDefaultInstance() {
}

TFriendsAdd::TFriendsAdd(const TFriendsAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendsAdd)
}

void TFriendsAdd::SharedCtor() {
  _cached_size_ = 0;
}

TFriendsAdd::~TFriendsAdd() {
  // @@protoc_insertion_point(destructor:server.TFriendsAdd)
  SharedDtor();
}

void TFriendsAdd::SharedDtor() {
}

void TFriendsAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendsAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendsAdd_descriptor_;
}

const TFriendsAdd& TFriendsAdd::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendsAdd> TFriendsAdd_default_instance_;

TFriendsAdd* TFriendsAdd::New(::google::protobuf::Arena* arena) const {
  TFriendsAdd* n = new TFriendsAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendsAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendsAdd)
  friends_.Clear();
}

bool TFriendsAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendsAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TFriendsAdd.FriendsAdd friends = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_friends;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendsAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendsAdd)
  return false;
#undef DO_
}

void TFriendsAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendsAdd)
  // repeated .server.TFriendsAdd.FriendsAdd friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriendsAdd)
}

::google::protobuf::uint8* TFriendsAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendsAdd)
  // repeated .server.TFriendsAdd.FriendsAdd friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->friends(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendsAdd)
  return target;
}

size_t TFriendsAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendsAdd)
  size_t total_size = 0;

  // repeated .server.TFriendsAdd.FriendsAdd friends = 1;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendsAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsAdd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendsAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendsAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsAdd)
    UnsafeMergeFrom(*source);
  }
}

void TFriendsAdd::MergeFrom(const TFriendsAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsAdd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendsAdd::UnsafeMergeFrom(const TFriendsAdd& from) {
  GOOGLE_DCHECK(&from != this);
  friends_.MergeFrom(from.friends_);
}

void TFriendsAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendsAdd::CopyFrom(const TFriendsAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsAdd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendsAdd::IsInitialized() const {

  return true;
}

void TFriendsAdd::Swap(TFriendsAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendsAdd::InternalSwap(TFriendsAdd* other) {
  friends_.UnsafeArenaSwap(&other->friends_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendsAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendsAdd_descriptor_;
  metadata.reflection = TFriendsAdd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendsAdd_FriendsAdd

// optional string user_id = 1;
bool TFriendsAdd_FriendsAdd::has_user_id() const {
  return id_case() == kUserId;
}
void TFriendsAdd_FriendsAdd::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
void TFriendsAdd_FriendsAdd::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TFriendsAdd_FriendsAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.FriendsAdd.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TFriendsAdd_FriendsAdd::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.user_id)
}
void TFriendsAdd_FriendsAdd::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TFriendsAdd.FriendsAdd.user_id)
}
void TFriendsAdd_FriendsAdd::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsAdd.FriendsAdd.user_id)
}
::std::string* TFriendsAdd_FriendsAdd::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.FriendsAdd.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFriendsAdd_FriendsAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TFriendsAdd.FriendsAdd.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TFriendsAdd_FriendsAdd::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TFriendsAdd.FriendsAdd.user_id)
}

// optional string handle = 2;
bool TFriendsAdd_FriendsAdd::has_handle() const {
  return id_case() == kHandle;
}
void TFriendsAdd_FriendsAdd::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
void TFriendsAdd_FriendsAdd::clear_handle() {
  if (has_handle()) {
    id_.handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TFriendsAdd_FriendsAdd::handle() const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.FriendsAdd.handle)
  if (has_handle()) {
    return id_.handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TFriendsAdd_FriendsAdd::set_handle(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.handle)
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.handle)
}
void TFriendsAdd_FriendsAdd::set_handle(const char* value) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TFriendsAdd.FriendsAdd.handle)
}
void TFriendsAdd_FriendsAdd::set_handle(const char* value, size_t size) {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsAdd.FriendsAdd.handle)
}
::std::string* TFriendsAdd_FriendsAdd::mutable_handle() {
  if (!has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.FriendsAdd.handle)
  return id_.handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFriendsAdd_FriendsAdd::release_handle() {
  // @@protoc_insertion_point(field_release:server.TFriendsAdd.FriendsAdd.handle)
  if (has_handle()) {
    clear_has_id();
    return id_.handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TFriendsAdd_FriendsAdd::set_allocated_handle(::std::string* handle) {
  if (!has_handle()) {
    id_.handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (handle != NULL) {
    set_has_handle();
    id_.handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        handle);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TFriendsAdd.FriendsAdd.handle)
}

bool TFriendsAdd_FriendsAdd::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TFriendsAdd_FriendsAdd::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TFriendsAdd_FriendsAdd::IdCase TFriendsAdd_FriendsAdd::id_case() const {
  return TFriendsAdd_FriendsAdd::IdCase(_oneof_case_[0]);
}
inline const TFriendsAdd_FriendsAdd* TFriendsAdd_FriendsAdd::internal_default_instance() {
  return &TFriendsAdd_FriendsAdd_default_instance_.get();
}
// -------------------------------------------------------------------

// TFriendsAdd

// repeated .server.TFriendsAdd.FriendsAdd friends = 1;
int TFriendsAdd::friends_size() const {
  return friends_.size();
}
void TFriendsAdd::clear_friends() {
  friends_.Clear();
}
const ::server::TFriendsAdd_FriendsAdd& TFriendsAdd::friends(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.friends)
  return friends_.Get(index);
}
::server::TFriendsAdd_FriendsAdd* TFriendsAdd::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.friends)
  return friends_.Mutable(index);
}
::server::TFriendsAdd_FriendsAdd* TFriendsAdd::add_friends() {
  // @@protoc_insertion_point(field_add:server.TFriendsAdd.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >*
TFriendsAdd::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsAdd.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >&
TFriendsAdd::friends() const {
  // @@protoc_insertion_point(field_list:server.TFriendsAdd.friends)
  return friends_;
}

inline const TFriendsAdd* TFriendsAdd::internal_default_instance() {
  return &TFriendsAdd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriendsRemove::kUserIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendsRemove::TFriendsRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendsRemove)
}

void TFriendsRemove::InitAsDefaultInstance() {
}

TFriendsRemove::TFriendsRemove(const TFriendsRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendsRemove)
}

void TFriendsRemove::SharedCtor() {
  _cached_size_ = 0;
}

TFriendsRemove::~TFriendsRemove() {
  // @@protoc_insertion_point(destructor:server.TFriendsRemove)
  SharedDtor();
}

void TFriendsRemove::SharedDtor() {
}

void TFriendsRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendsRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendsRemove_descriptor_;
}

const TFriendsRemove& TFriendsRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendsRemove> TFriendsRemove_default_instance_;

TFriendsRemove* TFriendsRemove::New(::google::protobuf::Arena* arena) const {
  TFriendsRemove* n = new TFriendsRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendsRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendsRemove)
  user_ids_.Clear();
}

bool TFriendsRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendsRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string user_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_user_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_ids(this->user_ids_size() - 1).data(),
            this->user_ids(this->user_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TFriendsRemove.user_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendsRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendsRemove)
  return false;
#undef DO_
}

void TFriendsRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendsRemove)
  // repeated string user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), this->user_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsRemove.user_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriendsRemove)
}

::google::protobuf::uint8* TFriendsRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendsRemove)
  // repeated string user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), this->user_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsRemove.user_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->user_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendsRemove)
  return target;
}

size_t TFriendsRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendsRemove)
  size_t total_size = 0;

  // repeated string user_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_ids_size());
  for (int i = 0; i < this->user_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendsRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendsRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendsRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsRemove)
    UnsafeMergeFrom(*source);
  }
}

void TFriendsRemove::MergeFrom(const TFriendsRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendsRemove::UnsafeMergeFrom(const TFriendsRemove& from) {
  GOOGLE_DCHECK(&from != this);
  user_ids_.UnsafeMergeFrom(from.user_ids_);
}

void TFriendsRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendsRemove::CopyFrom(const TFriendsRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendsRemove::IsInitialized() const {

  return true;
}

void TFriendsRemove::Swap(TFriendsRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendsRemove::InternalSwap(TFriendsRemove* other) {
  user_ids_.UnsafeArenaSwap(&other->user_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendsRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendsRemove_descriptor_;
  metadata.reflection = TFriendsRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendsRemove

// repeated string user_ids = 1;
int TFriendsRemove::user_ids_size() const {
  return user_ids_.size();
}
void TFriendsRemove::clear_user_ids() {
  user_ids_.Clear();
}
const ::std::string& TFriendsRemove::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsRemove.user_ids)
  return user_ids_.Get(index);
}
::std::string* TFriendsRemove::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsRemove.user_ids)
  return user_ids_.Mutable(index);
}
void TFriendsRemove::set_user_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsRemove.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
void TFriendsRemove::set_user_ids(int index, const char* value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TFriendsRemove.user_ids)
}
void TFriendsRemove::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsRemove.user_ids)
}
::std::string* TFriendsRemove::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TFriendsRemove.user_ids)
  return user_ids_.Add();
}
void TFriendsRemove::add_user_ids(const ::std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TFriendsRemove.user_ids)
}
void TFriendsRemove::add_user_ids(const char* value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TFriendsRemove.user_ids)
}
void TFriendsRemove::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TFriendsRemove.user_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFriendsRemove::user_ids() const {
  // @@protoc_insertion_point(field_list:server.TFriendsRemove.user_ids)
  return user_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TFriendsRemove::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsRemove.user_ids)
  return &user_ids_;
}

inline const TFriendsRemove* TFriendsRemove::internal_default_instance() {
  return &TFriendsRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriendsBlock::kUserIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendsBlock::TFriendsBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendsBlock)
}

void TFriendsBlock::InitAsDefaultInstance() {
}

TFriendsBlock::TFriendsBlock(const TFriendsBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendsBlock)
}

void TFriendsBlock::SharedCtor() {
  _cached_size_ = 0;
}

TFriendsBlock::~TFriendsBlock() {
  // @@protoc_insertion_point(destructor:server.TFriendsBlock)
  SharedDtor();
}

void TFriendsBlock::SharedDtor() {
}

void TFriendsBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendsBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendsBlock_descriptor_;
}

const TFriendsBlock& TFriendsBlock::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendsBlock> TFriendsBlock_default_instance_;

TFriendsBlock* TFriendsBlock::New(::google::protobuf::Arena* arena) const {
  TFriendsBlock* n = new TFriendsBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendsBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendsBlock)
  user_ids_.Clear();
}

bool TFriendsBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendsBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string user_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_user_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_ids(this->user_ids_size() - 1).data(),
            this->user_ids(this->user_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TFriendsBlock.user_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendsBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendsBlock)
  return false;
#undef DO_
}

void TFriendsBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendsBlock)
  // repeated string user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), this->user_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsBlock.user_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriendsBlock)
}

::google::protobuf::uint8* TFriendsBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendsBlock)
  // repeated string user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_ids(i).data(), this->user_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TFriendsBlock.user_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->user_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendsBlock)
  return target;
}

size_t TFriendsBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendsBlock)
  size_t total_size = 0;

  // repeated string user_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_ids_size());
  for (int i = 0; i < this->user_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendsBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendsBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendsBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsBlock)
    UnsafeMergeFrom(*source);
  }
}

void TFriendsBlock::MergeFrom(const TFriendsBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsBlock)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendsBlock::UnsafeMergeFrom(const TFriendsBlock& from) {
  GOOGLE_DCHECK(&from != this);
  user_ids_.UnsafeMergeFrom(from.user_ids_);
}

void TFriendsBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendsBlock::CopyFrom(const TFriendsBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsBlock)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendsBlock::IsInitialized() const {

  return true;
}

void TFriendsBlock::Swap(TFriendsBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendsBlock::InternalSwap(TFriendsBlock* other) {
  user_ids_.UnsafeArenaSwap(&other->user_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendsBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendsBlock_descriptor_;
  metadata.reflection = TFriendsBlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendsBlock

// repeated string user_ids = 1;
int TFriendsBlock::user_ids_size() const {
  return user_ids_.size();
}
void TFriendsBlock::clear_user_ids() {
  user_ids_.Clear();
}
const ::std::string& TFriendsBlock::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsBlock.user_ids)
  return user_ids_.Get(index);
}
::std::string* TFriendsBlock::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsBlock.user_ids)
  return user_ids_.Mutable(index);
}
void TFriendsBlock::set_user_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsBlock.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
void TFriendsBlock::set_user_ids(int index, const char* value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TFriendsBlock.user_ids)
}
void TFriendsBlock::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsBlock.user_ids)
}
::std::string* TFriendsBlock::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TFriendsBlock.user_ids)
  return user_ids_.Add();
}
void TFriendsBlock::add_user_ids(const ::std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TFriendsBlock.user_ids)
}
void TFriendsBlock::add_user_ids(const char* value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TFriendsBlock.user_ids)
}
void TFriendsBlock::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TFriendsBlock.user_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFriendsBlock::user_ids() const {
  // @@protoc_insertion_point(field_list:server.TFriendsBlock.user_ids)
  return user_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TFriendsBlock::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsBlock.user_ids)
  return &user_ids_;
}

inline const TFriendsBlock* TFriendsBlock::internal_default_instance() {
  return &TFriendsBlock_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendsList::TFriendsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendsList)
}

void TFriendsList::InitAsDefaultInstance() {
}

TFriendsList::TFriendsList(const TFriendsList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendsList)
}

void TFriendsList::SharedCtor() {
  _cached_size_ = 0;
}

TFriendsList::~TFriendsList() {
  // @@protoc_insertion_point(destructor:server.TFriendsList)
  SharedDtor();
}

void TFriendsList::SharedDtor() {
}

void TFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendsList_descriptor_;
}

const TFriendsList& TFriendsList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendsList> TFriendsList_default_instance_;

TFriendsList* TFriendsList::New(::google::protobuf::Arena* arena) const {
  TFriendsList* n = new TFriendsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendsList)
}

bool TFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendsList)
  return false;
#undef DO_
}

void TFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendsList)
  // @@protoc_insertion_point(serialize_end:server.TFriendsList)
}

::google::protobuf::uint8* TFriendsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendsList)
  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendsList)
  return target;
}

size_t TFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendsList)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsList)
    UnsafeMergeFrom(*source);
  }
}

void TFriendsList::MergeFrom(const TFriendsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendsList::UnsafeMergeFrom(const TFriendsList& from) {
  GOOGLE_DCHECK(&from != this);
}

void TFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendsList::CopyFrom(const TFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendsList::IsInitialized() const {

  return true;
}

void TFriendsList::Swap(TFriendsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendsList::InternalSwap(TFriendsList* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendsList_descriptor_;
  metadata.reflection = TFriendsList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendsList

inline const TFriendsList* TFriendsList::internal_default_instance() {
  return &TFriendsList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriends::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriends::TFriends()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriends)
}

void TFriends::InitAsDefaultInstance() {
}

TFriends::TFriends(const TFriends& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriends)
}

void TFriends::SharedCtor() {
  _cached_size_ = 0;
}

TFriends::~TFriends() {
  // @@protoc_insertion_point(destructor:server.TFriends)
  SharedDtor();
}

void TFriends::SharedDtor() {
}

void TFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriends_descriptor_;
}

const TFriends& TFriends::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriends> TFriends_default_instance_;

TFriends* TFriends::New(::google::protobuf::Arena* arena) const {
  TFriends* n = new TFriends;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriends::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriends)
  friends_.Clear();
}

bool TFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Friend friends = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_friends;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriends)
  return false;
#undef DO_
}

void TFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriends)
  // repeated .server.Friend friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriends)
}

::google::protobuf::uint8* TFriends::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriends)
  // repeated .server.Friend friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->friends(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriends)
  return target;
}

size_t TFriends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriends)
  size_t total_size = 0;

  // repeated .server.Friend friends = 1;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriends)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriends* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriends>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriends)
    UnsafeMergeFrom(*source);
  }
}

void TFriends::MergeFrom(const TFriends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriends)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriends::UnsafeMergeFrom(const TFriends& from) {
  GOOGLE_DCHECK(&from != this);
  friends_.MergeFrom(from.friends_);
}

void TFriends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriends::CopyFrom(const TFriends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriends)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriends::IsInitialized() const {

  return true;
}

void TFriends::Swap(TFriends* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriends::InternalSwap(TFriends* other) {
  friends_.UnsafeArenaSwap(&other->friends_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriends_descriptor_;
  metadata.reflection = TFriends_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriends

// repeated .server.Friend friends = 1;
int TFriends::friends_size() const {
  return friends_.size();
}
void TFriends::clear_friends() {
  friends_.Clear();
}
const ::server::Friend& TFriends::friends(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriends.friends)
  return friends_.Get(index);
}
::server::Friend* TFriends::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriends.friends)
  return friends_.Mutable(index);
}
::server::Friend* TFriends::add_friends() {
  // @@protoc_insertion_point(field_add:server.TFriends.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Friend >*
TFriends::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriends.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Friend >&
TFriends::friends() const {
  // @@protoc_insertion_point(field_list:server.TFriends.friends)
  return friends_;
}

inline const TFriends* TFriends::internal_default_instance() {
  return &TFriends_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kIdFieldNumber;
const int Group::kPrivateFieldNumber;
const int Group::kCreatorIdFieldNumber;
const int Group::kNameFieldNumber;
const int Group::kDescriptionFieldNumber;
const int Group::kAvatarUrlFieldNumber;
const int Group::kLangFieldNumber;
const int Group::kUtcOffsetMsFieldNumber;
const int Group::kMetadataFieldNumber;
const int Group::kCountFieldNumber;
const int Group::kCreatedAtFieldNumber;
const int Group::kUpdatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Group)
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Group)
}

void Group::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&utc_offset_ms_, 0, reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&utc_offset_ms_) + sizeof(private__));
  _cached_size_ = 0;
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:server.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Group> Group_default_instance_;

Group* Group::New(::google::protobuf::Arena* arena) const {
  Group* n = new Group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Group)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Group, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Group*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  creator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_offset_ms_ = GOOGLE_LONGLONG(0);
  ZR_(count_, updated_at_);
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_private;
        break;
      }

      // optional bool private = 2;
      case 2: {
        if (tag == 16) {
         parse_private:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creator_id;
        break;
      }

      // optional string creator_id = 3;
      case 3: {
        if (tag == 26) {
         parse_creator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_id().data(), this->creator_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.creator_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_lang;
        break;
      }

      // optional string lang = 7;
      case 7: {
        if (tag == 58) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_utc_offset_ms;
        break;
      }

      // optional int64 utc_offset_ms = 8;
      case 8: {
        if (tag == 64) {
         parse_utc_offset_ms:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_metadata;
        break;
      }

      // optional string metadata = 9;
      case 9: {
        if (tag == 74) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }

      // optional int64 count = 10;
      case 10: {
        if (tag == 80) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 11;
      case 11: {
        if (tag == 88) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_updated_at;
        break;
      }

      // optional int64 updated_at = 12;
      case 12: {
        if (tag == 96) {
         parse_updated_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Group)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->private_(), output);
  }

  // optional string creator_id = 3;
  if (this->creator_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_id().data(), this->creator_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.creator_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creator_id(), output);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string avatar_url = 6;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar_url(), output);
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->lang(), output);
  }

  // optional int64 utc_offset_ms = 8;
  if (this->utc_offset_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->utc_offset_ms(), output);
  }

  // optional string metadata = 9;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->metadata(), output);
  }

  // optional int64 count = 10;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->count(), output);
  }

  // optional int64 created_at = 11;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->created_at(), output);
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->updated_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Group)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->private_(), target);
  }

  // optional string creator_id = 3;
  if (this->creator_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_id().data(), this->creator_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.creator_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creator_id(), target);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string avatar_url = 6;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar_url(), target);
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lang(), target);
  }

  // optional int64 utc_offset_ms = 8;
  if (this->utc_offset_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->utc_offset_ms(), target);
  }

  // optional string metadata = 9;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->metadata(), target);
  }

  // optional int64 count = 10;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->count(), target);
  }

  // optional int64 created_at = 11;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->created_at(), target);
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->updated_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Group)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  // optional string creator_id = 3;
  if (this->creator_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_id());
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string avatar_url = 6;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional int64 utc_offset_ms = 8;
  if (this->utc_offset_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->utc_offset_ms());
  }

  // optional string metadata = 9;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // optional int64 count = 10;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // optional int64 created_at = 11;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updated_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Group)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Group)
    UnsafeMergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Group)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Group::UnsafeMergeFrom(const Group& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
  if (from.creator_id().size() > 0) {

    creator_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.utc_offset_ms() != 0) {
    set_utc_offset_ms(from.utc_offset_ms());
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Group)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  id_.Swap(&other->id_);
  std::swap(private__, other->private__);
  creator_id_.Swap(&other->creator_id_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  std::swap(utc_offset_ms_, other->utc_offset_ms_);
  metadata_.Swap(&other->metadata_);
  std::swap(count_, other->count_);
  std::swap(created_at_, other->created_at_);
  std::swap(updated_at_, other->updated_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// optional string id = 1;
void Group::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::id() const {
  // @@protoc_insertion_point(field_get:server.Group.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.id)
}
void Group::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.id)
}
void Group::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.id)
}
::std::string* Group::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_id() {
  // @@protoc_insertion_point(field_release:server.Group.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.Group.id)
}

// optional bool private = 2;
void Group::clear_private_() {
  private__ = false;
}
bool Group::private_() const {
  // @@protoc_insertion_point(field_get:server.Group.private)
  return private__;
}
void Group::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.Group.private)
}

// optional string creator_id = 3;
void Group::clear_creator_id() {
  creator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::creator_id() const {
  // @@protoc_insertion_point(field_get:server.Group.creator_id)
  return creator_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_creator_id(const ::std::string& value) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.creator_id)
}
void Group::set_creator_id(const char* value) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.creator_id)
}
void Group::set_creator_id(const char* value, size_t size) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.creator_id)
}
::std::string* Group::mutable_creator_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.creator_id)
  return creator_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_creator_id() {
  // @@protoc_insertion_point(field_release:server.Group.creator_id)
  
  return creator_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_creator_id(::std::string* creator_id) {
  if (creator_id != NULL) {
    
  } else {
    
  }
  creator_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_id);
  // @@protoc_insertion_point(field_set_allocated:server.Group.creator_id)
}

// optional string name = 4;
void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:server.Group.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.name)
}
void Group::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.name)
}
void Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.name)
}
::std::string* Group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:server.Group.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.Group.name)
}

// optional string description = 5;
void Group::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:server.Group.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.description)
}
void Group::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.description)
}
void Group::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.description)
}
::std::string* Group::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:server.Group.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.Group.description)
}

// optional string avatar_url = 6;
void Group::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.Group.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.avatar_url)
}
void Group::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.avatar_url)
}
void Group::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.avatar_url)
}
::std::string* Group::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.Group.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.Group.avatar_url)
}

// optional string lang = 7;
void Group::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::lang() const {
  // @@protoc_insertion_point(field_get:server.Group.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.lang)
}
void Group::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.lang)
}
void Group::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.lang)
}
::std::string* Group::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_lang() {
  // @@protoc_insertion_point(field_release:server.Group.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.Group.lang)
}

// optional int64 utc_offset_ms = 8;
void Group::clear_utc_offset_ms() {
  utc_offset_ms_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::utc_offset_ms() const {
  // @@protoc_insertion_point(field_get:server.Group.utc_offset_ms)
  return utc_offset_ms_;
}
void Group::set_utc_offset_ms(::google::protobuf::int64 value) {
  
  utc_offset_ms_ = value;
  // @@protoc_insertion_point(field_set:server.Group.utc_offset_ms)
}

// optional string metadata = 9;
void Group::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::metadata() const {
  // @@protoc_insertion_point(field_get:server.Group.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.metadata)
}
void Group::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.metadata)
}
void Group::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.metadata)
}
::std::string* Group::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_metadata() {
  // @@protoc_insertion_point(field_release:server.Group.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.Group.metadata)
}

// optional int64 count = 10;
void Group::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::count() const {
  // @@protoc_insertion_point(field_get:server.Group.count)
  return count_;
}
void Group::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:server.Group.count)
}

// optional int64 created_at = 11;
void Group::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::created_at() const {
  // @@protoc_insertion_point(field_get:server.Group.created_at)
  return created_at_;
}
void Group::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.Group.created_at)
}

// optional int64 updated_at = 12;
void Group::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::updated_at() const {
  // @@protoc_insertion_point(field_get:server.Group.updated_at)
  return updated_at_;
}
void Group::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.Group.updated_at)
}

inline const Group* Group::internal_default_instance() {
  return &Group_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsCreate_GroupCreate::kNameFieldNumber;
const int TGroupsCreate_GroupCreate::kDescriptionFieldNumber;
const int TGroupsCreate_GroupCreate::kAvatarUrlFieldNumber;
const int TGroupsCreate_GroupCreate::kLangFieldNumber;
const int TGroupsCreate_GroupCreate::kMetadataFieldNumber;
const int TGroupsCreate_GroupCreate::kPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsCreate_GroupCreate::TGroupsCreate_GroupCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsCreate.GroupCreate)
}

void TGroupsCreate_GroupCreate::InitAsDefaultInstance() {
}

TGroupsCreate_GroupCreate::TGroupsCreate_GroupCreate(const TGroupsCreate_GroupCreate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsCreate.GroupCreate)
}

void TGroupsCreate_GroupCreate::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  _cached_size_ = 0;
}

TGroupsCreate_GroupCreate::~TGroupsCreate_GroupCreate() {
  // @@protoc_insertion_point(destructor:server.TGroupsCreate.GroupCreate)
  SharedDtor();
}

void TGroupsCreate_GroupCreate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupsCreate_GroupCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsCreate_GroupCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsCreate_GroupCreate_descriptor_;
}

const TGroupsCreate_GroupCreate& TGroupsCreate_GroupCreate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsCreate_GroupCreate> TGroupsCreate_GroupCreate_default_instance_;

TGroupsCreate_GroupCreate* TGroupsCreate_GroupCreate::New(::google::protobuf::Arena* arena) const {
  TGroupsCreate_GroupCreate* n = new TGroupsCreate_GroupCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsCreate_GroupCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsCreate.GroupCreate)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
}

bool TGroupsCreate_GroupCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsCreate.GroupCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsCreate.GroupCreate.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsCreate.GroupCreate.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsCreate.GroupCreate.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lang;
        break;
      }

      // optional string lang = 4;
      case 4: {
        if (tag == 34) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsCreate.GroupCreate.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_metadata;
        break;
      }

      // optional string metadata = 5;
      case 5: {
        if (tag == 42) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsCreate.GroupCreate.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_private;
        break;
      }

      // optional bool private = 6;
      case 6: {
        if (tag == 48) {
         parse_private:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsCreate.GroupCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsCreate.GroupCreate)
  return false;
#undef DO_
}

void TGroupsCreate_GroupCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsCreate.GroupCreate)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar_url(), output);
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lang(), output);
  }

  // optional string metadata = 5;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->metadata(), output);
  }

  // optional bool private = 6;
  if (this->private_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->private_(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsCreate.GroupCreate)
}

::google::protobuf::uint8* TGroupsCreate_GroupCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsCreate.GroupCreate)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar_url(), target);
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lang(), target);
  }

  // optional string metadata = 5;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsCreate.GroupCreate.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->metadata(), target);
  }

  // optional bool private = 6;
  if (this->private_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->private_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsCreate.GroupCreate)
  return target;
}

size_t TGroupsCreate_GroupCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsCreate.GroupCreate)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional string metadata = 5;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // optional bool private = 6;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsCreate_GroupCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsCreate.GroupCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsCreate_GroupCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsCreate_GroupCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsCreate.GroupCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsCreate.GroupCreate)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsCreate_GroupCreate::MergeFrom(const TGroupsCreate_GroupCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsCreate.GroupCreate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsCreate_GroupCreate::UnsafeMergeFrom(const TGroupsCreate_GroupCreate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
}

void TGroupsCreate_GroupCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsCreate.GroupCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsCreate_GroupCreate::CopyFrom(const TGroupsCreate_GroupCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsCreate.GroupCreate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsCreate_GroupCreate::IsInitialized() const {

  return true;
}

void TGroupsCreate_GroupCreate::Swap(TGroupsCreate_GroupCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsCreate_GroupCreate::InternalSwap(TGroupsCreate_GroupCreate* other) {
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  metadata_.Swap(&other->metadata_);
  std::swap(private__, other->private__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsCreate_GroupCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsCreate_GroupCreate_descriptor_;
  metadata.reflection = TGroupsCreate_GroupCreate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsCreate::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsCreate::TGroupsCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsCreate)
}

void TGroupsCreate::InitAsDefaultInstance() {
}

TGroupsCreate::TGroupsCreate(const TGroupsCreate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsCreate)
}

void TGroupsCreate::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsCreate::~TGroupsCreate() {
  // @@protoc_insertion_point(destructor:server.TGroupsCreate)
  SharedDtor();
}

void TGroupsCreate::SharedDtor() {
}

void TGroupsCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsCreate_descriptor_;
}

const TGroupsCreate& TGroupsCreate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsCreate> TGroupsCreate_default_instance_;

TGroupsCreate* TGroupsCreate::New(::google::protobuf::Arena* arena) const {
  TGroupsCreate* n = new TGroupsCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsCreate)
  groups_.Clear();
}

bool TGroupsCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TGroupsCreate.GroupCreate groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsCreate)
  return false;
#undef DO_
}

void TGroupsCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsCreate)
  // repeated .server.TGroupsCreate.GroupCreate groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsCreate)
}

::google::protobuf::uint8* TGroupsCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsCreate)
  // repeated .server.TGroupsCreate.GroupCreate groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsCreate)
  return target;
}

size_t TGroupsCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsCreate)
  size_t total_size = 0;

  // repeated .server.TGroupsCreate.GroupCreate groups = 1;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsCreate)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsCreate::MergeFrom(const TGroupsCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsCreate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsCreate::UnsafeMergeFrom(const TGroupsCreate& from) {
  GOOGLE_DCHECK(&from != this);
  groups_.MergeFrom(from.groups_);
}

void TGroupsCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsCreate::CopyFrom(const TGroupsCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsCreate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsCreate::IsInitialized() const {

  return true;
}

void TGroupsCreate::Swap(TGroupsCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsCreate::InternalSwap(TGroupsCreate* other) {
  groups_.UnsafeArenaSwap(&other->groups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsCreate_descriptor_;
  metadata.reflection = TGroupsCreate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsCreate_GroupCreate

// optional string name = 1;
void TGroupsCreate_GroupCreate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsCreate_GroupCreate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.name)
}
void TGroupsCreate_GroupCreate::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.name)
}
void TGroupsCreate_GroupCreate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.name)
}
::std::string* TGroupsCreate_GroupCreate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsCreate_GroupCreate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.name)
}

// optional string description = 2;
void TGroupsCreate_GroupCreate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsCreate_GroupCreate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.description)
}
void TGroupsCreate_GroupCreate::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.description)
}
void TGroupsCreate_GroupCreate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.description)
}
::std::string* TGroupsCreate_GroupCreate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsCreate_GroupCreate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.description)
}

// optional string avatar_url = 3;
void TGroupsCreate_GroupCreate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsCreate_GroupCreate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.avatar_url)
}
void TGroupsCreate_GroupCreate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.avatar_url)
}
void TGroupsCreate_GroupCreate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.avatar_url)
}
::std::string* TGroupsCreate_GroupCreate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsCreate_GroupCreate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.avatar_url)
}

// optional string lang = 4;
void TGroupsCreate_GroupCreate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsCreate_GroupCreate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.lang)
}
void TGroupsCreate_GroupCreate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.lang)
}
void TGroupsCreate_GroupCreate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.lang)
}
::std::string* TGroupsCreate_GroupCreate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsCreate_GroupCreate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.lang)
}

// optional string metadata = 5;
void TGroupsCreate_GroupCreate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsCreate_GroupCreate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.metadata)
}
void TGroupsCreate_GroupCreate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.metadata)
}
void TGroupsCreate_GroupCreate::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.metadata)
}
::std::string* TGroupsCreate_GroupCreate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsCreate_GroupCreate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsCreate_GroupCreate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.metadata)
}

// optional bool private = 6;
void TGroupsCreate_GroupCreate::clear_private_() {
  private__ = false;
}
bool TGroupsCreate_GroupCreate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.private)
  return private__;
}
void TGroupsCreate_GroupCreate::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.private)
}

inline const TGroupsCreate_GroupCreate* TGroupsCreate_GroupCreate::internal_default_instance() {
  return &TGroupsCreate_GroupCreate_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsCreate

// repeated .server.TGroupsCreate.GroupCreate groups = 1;
int TGroupsCreate::groups_size() const {
  return groups_.size();
}
void TGroupsCreate::clear_groups() {
  groups_.Clear();
}
const ::server::TGroupsCreate_GroupCreate& TGroupsCreate::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.groups)
  return groups_.Get(index);
}
::server::TGroupsCreate_GroupCreate* TGroupsCreate::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.groups)
  return groups_.Mutable(index);
}
::server::TGroupsCreate_GroupCreate* TGroupsCreate::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsCreate.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >*
TGroupsCreate::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsCreate.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >&
TGroupsCreate::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsCreate.groups)
  return groups_;
}

inline const TGroupsCreate* TGroupsCreate::internal_default_instance() {
  return &TGroupsCreate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsUpdate_GroupUpdate::kGroupIdFieldNumber;
const int TGroupsUpdate_GroupUpdate::kPrivateFieldNumber;
const int TGroupsUpdate_GroupUpdate::kNameFieldNumber;
const int TGroupsUpdate_GroupUpdate::kDescriptionFieldNumber;
const int TGroupsUpdate_GroupUpdate::kAvatarUrlFieldNumber;
const int TGroupsUpdate_GroupUpdate::kLangFieldNumber;
const int TGroupsUpdate_GroupUpdate::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsUpdate_GroupUpdate::TGroupsUpdate_GroupUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsUpdate.GroupUpdate)
}

void TGroupsUpdate_GroupUpdate::InitAsDefaultInstance() {
}

TGroupsUpdate_GroupUpdate::TGroupsUpdate_GroupUpdate(const TGroupsUpdate_GroupUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsUpdate.GroupUpdate)
}

void TGroupsUpdate_GroupUpdate::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  _cached_size_ = 0;
}

TGroupsUpdate_GroupUpdate::~TGroupsUpdate_GroupUpdate() {
  // @@protoc_insertion_point(destructor:server.TGroupsUpdate.GroupUpdate)
  SharedDtor();
}

void TGroupsUpdate_GroupUpdate::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupsUpdate_GroupUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsUpdate_GroupUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsUpdate_GroupUpdate_descriptor_;
}

const TGroupsUpdate_GroupUpdate& TGroupsUpdate_GroupUpdate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsUpdate_GroupUpdate> TGroupsUpdate_GroupUpdate_default_instance_;

TGroupsUpdate_GroupUpdate* TGroupsUpdate_GroupUpdate::New(::google::protobuf::Arena* arena) const {
  TGroupsUpdate_GroupUpdate* n = new TGroupsUpdate_GroupUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsUpdate_GroupUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsUpdate.GroupUpdate)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupsUpdate_GroupUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsUpdate.GroupUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsUpdate.GroupUpdate.group_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_private;
        break;
      }

      // optional bool private = 2;
      case 2: {
        if (tag == 16) {
         parse_private:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsUpdate.GroupUpdate.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsUpdate.GroupUpdate.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsUpdate.GroupUpdate.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lang;
        break;
      }

      // optional string lang = 6;
      case 6: {
        if (tag == 50) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsUpdate.GroupUpdate.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_metadata;
        break;
      }

      // optional string metadata = 7;
      case 7: {
        if (tag == 58) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsUpdate.GroupUpdate.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsUpdate.GroupUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsUpdate.GroupUpdate)
  return false;
#undef DO_
}

void TGroupsUpdate_GroupUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsUpdate.GroupUpdate)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->private_(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional string avatar_url = 5;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar_url(), output);
  }

  // optional string lang = 6;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lang(), output);
  }

  // optional string metadata = 7;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->metadata(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsUpdate.GroupUpdate)
}

::google::protobuf::uint8* TGroupsUpdate_GroupUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsUpdate.GroupUpdate)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->private_(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string avatar_url = 5;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar_url(), target);
  }

  // optional string lang = 6;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lang(), target);
  }

  // optional string metadata = 7;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsUpdate.GroupUpdate.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->metadata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsUpdate.GroupUpdate)
  return target;
}

size_t TGroupsUpdate_GroupUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsUpdate.GroupUpdate)
  size_t total_size = 0;

  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string avatar_url = 5;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 6;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional string metadata = 7;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsUpdate_GroupUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsUpdate.GroupUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsUpdate_GroupUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsUpdate_GroupUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsUpdate.GroupUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsUpdate.GroupUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsUpdate_GroupUpdate::MergeFrom(const TGroupsUpdate_GroupUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsUpdate.GroupUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsUpdate_GroupUpdate::UnsafeMergeFrom(const TGroupsUpdate_GroupUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
}

void TGroupsUpdate_GroupUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsUpdate.GroupUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsUpdate_GroupUpdate::CopyFrom(const TGroupsUpdate_GroupUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsUpdate.GroupUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsUpdate_GroupUpdate::IsInitialized() const {

  return true;
}

void TGroupsUpdate_GroupUpdate::Swap(TGroupsUpdate_GroupUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsUpdate_GroupUpdate::InternalSwap(TGroupsUpdate_GroupUpdate* other) {
  group_id_.Swap(&other->group_id_);
  std::swap(private__, other->private__);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  metadata_.Swap(&other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsUpdate_GroupUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsUpdate_GroupUpdate_descriptor_;
  metadata.reflection = TGroupsUpdate_GroupUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsUpdate::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsUpdate::TGroupsUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsUpdate)
}

void TGroupsUpdate::InitAsDefaultInstance() {
}

TGroupsUpdate::TGroupsUpdate(const TGroupsUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsUpdate)
}

void TGroupsUpdate::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsUpdate::~TGroupsUpdate() {
  // @@protoc_insertion_point(destructor:server.TGroupsUpdate)
  SharedDtor();
}

void TGroupsUpdate::SharedDtor() {
}

void TGroupsUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsUpdate_descriptor_;
}

const TGroupsUpdate& TGroupsUpdate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsUpdate> TGroupsUpdate_default_instance_;

TGroupsUpdate* TGroupsUpdate::New(::google::protobuf::Arena* arena) const {
  TGroupsUpdate* n = new TGroupsUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsUpdate)
  groups_.Clear();
}

bool TGroupsUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsUpdate)
  return false;
#undef DO_
}

void TGroupsUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsUpdate)
  // repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsUpdate)
}

::google::protobuf::uint8* TGroupsUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsUpdate)
  // repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsUpdate)
  return target;
}

size_t TGroupsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsUpdate)
  size_t total_size = 0;

  // repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsUpdate::MergeFrom(const TGroupsUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsUpdate::UnsafeMergeFrom(const TGroupsUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  groups_.MergeFrom(from.groups_);
}

void TGroupsUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsUpdate::CopyFrom(const TGroupsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsUpdate::IsInitialized() const {

  return true;
}

void TGroupsUpdate::Swap(TGroupsUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsUpdate::InternalSwap(TGroupsUpdate* other) {
  groups_.UnsafeArenaSwap(&other->groups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsUpdate_descriptor_;
  metadata.reflection = TGroupsUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsUpdate_GroupUpdate

// optional string group_id = 1;
void TGroupsUpdate_GroupUpdate::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsUpdate_GroupUpdate::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.group_id)
}
void TGroupsUpdate_GroupUpdate::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.group_id)
}
void TGroupsUpdate_GroupUpdate::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.group_id)
}
::std::string* TGroupsUpdate_GroupUpdate::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsUpdate_GroupUpdate::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.group_id)
}

// optional bool private = 2;
void TGroupsUpdate_GroupUpdate::clear_private_() {
  private__ = false;
}
bool TGroupsUpdate_GroupUpdate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.private)
  return private__;
}
void TGroupsUpdate_GroupUpdate::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.private)
}

// optional string name = 3;
void TGroupsUpdate_GroupUpdate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsUpdate_GroupUpdate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.name)
}
void TGroupsUpdate_GroupUpdate::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.name)
}
void TGroupsUpdate_GroupUpdate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.name)
}
::std::string* TGroupsUpdate_GroupUpdate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsUpdate_GroupUpdate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.name)
}

// optional string description = 4;
void TGroupsUpdate_GroupUpdate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsUpdate_GroupUpdate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.description)
}
void TGroupsUpdate_GroupUpdate::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.description)
}
void TGroupsUpdate_GroupUpdate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.description)
}
::std::string* TGroupsUpdate_GroupUpdate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsUpdate_GroupUpdate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.description)
}

// optional string avatar_url = 5;
void TGroupsUpdate_GroupUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsUpdate_GroupUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
void TGroupsUpdate_GroupUpdate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
void TGroupsUpdate_GroupUpdate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
::std::string* TGroupsUpdate_GroupUpdate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsUpdate_GroupUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.avatar_url)
}

// optional string lang = 6;
void TGroupsUpdate_GroupUpdate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsUpdate_GroupUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.lang)
}
void TGroupsUpdate_GroupUpdate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.lang)
}
void TGroupsUpdate_GroupUpdate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.lang)
}
::std::string* TGroupsUpdate_GroupUpdate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsUpdate_GroupUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.lang)
}

// optional string metadata = 7;
void TGroupsUpdate_GroupUpdate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsUpdate_GroupUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.metadata)
}
void TGroupsUpdate_GroupUpdate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.metadata)
}
void TGroupsUpdate_GroupUpdate::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.metadata)
}
::std::string* TGroupsUpdate_GroupUpdate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsUpdate_GroupUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsUpdate_GroupUpdate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.metadata)
}

inline const TGroupsUpdate_GroupUpdate* TGroupsUpdate_GroupUpdate::internal_default_instance() {
  return &TGroupsUpdate_GroupUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsUpdate

// repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
int TGroupsUpdate::groups_size() const {
  return groups_.size();
}
void TGroupsUpdate::clear_groups() {
  groups_.Clear();
}
const ::server::TGroupsUpdate_GroupUpdate& TGroupsUpdate::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.groups)
  return groups_.Get(index);
}
::server::TGroupsUpdate_GroupUpdate* TGroupsUpdate::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.groups)
  return groups_.Mutable(index);
}
::server::TGroupsUpdate_GroupUpdate* TGroupsUpdate::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsUpdate.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >*
TGroupsUpdate::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsUpdate.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >&
TGroupsUpdate::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsUpdate.groups)
  return groups_;
}

inline const TGroupsUpdate* TGroupsUpdate::internal_default_instance() {
  return &TGroupsUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsRemove::kGroupIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsRemove::TGroupsRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsRemove)
}

void TGroupsRemove::InitAsDefaultInstance() {
}

TGroupsRemove::TGroupsRemove(const TGroupsRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsRemove)
}

void TGroupsRemove::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsRemove::~TGroupsRemove() {
  // @@protoc_insertion_point(destructor:server.TGroupsRemove)
  SharedDtor();
}

void TGroupsRemove::SharedDtor() {
}

void TGroupsRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsRemove_descriptor_;
}

const TGroupsRemove& TGroupsRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsRemove> TGroupsRemove_default_instance_;

TGroupsRemove* TGroupsRemove::New(::google::protobuf::Arena* arena) const {
  TGroupsRemove* n = new TGroupsRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsRemove)
  group_ids_.Clear();
}

bool TGroupsRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string group_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_group_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_ids(this->group_ids_size() - 1).data(),
            this->group_ids(this->group_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsRemove.group_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_group_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsRemove)
  return false;
#undef DO_
}

void TGroupsRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsRemove)
  // repeated string group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_ids(i).data(), this->group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsRemove.group_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsRemove)
}

::google::protobuf::uint8* TGroupsRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsRemove)
  // repeated string group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_ids(i).data(), this->group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsRemove.group_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->group_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsRemove)
  return target;
}

size_t TGroupsRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsRemove)
  size_t total_size = 0;

  // repeated string group_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->group_ids_size());
  for (int i = 0; i < this->group_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsRemove)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsRemove::MergeFrom(const TGroupsRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsRemove::UnsafeMergeFrom(const TGroupsRemove& from) {
  GOOGLE_DCHECK(&from != this);
  group_ids_.UnsafeMergeFrom(from.group_ids_);
}

void TGroupsRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsRemove::CopyFrom(const TGroupsRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsRemove::IsInitialized() const {

  return true;
}

void TGroupsRemove::Swap(TGroupsRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsRemove::InternalSwap(TGroupsRemove* other) {
  group_ids_.UnsafeArenaSwap(&other->group_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsRemove_descriptor_;
  metadata.reflection = TGroupsRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsRemove

// repeated string group_ids = 1;
int TGroupsRemove::group_ids_size() const {
  return group_ids_.size();
}
void TGroupsRemove::clear_group_ids() {
  group_ids_.Clear();
}
const ::std::string& TGroupsRemove::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsRemove.group_ids)
  return group_ids_.Get(index);
}
::std::string* TGroupsRemove::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsRemove.group_ids)
  return group_ids_.Mutable(index);
}
void TGroupsRemove::set_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsRemove.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
void TGroupsRemove::set_group_ids(int index, const char* value) {
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsRemove.group_ids)
}
void TGroupsRemove::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsRemove.group_ids)
}
::std::string* TGroupsRemove::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsRemove.group_ids)
  return group_ids_.Add();
}
void TGroupsRemove::add_group_ids(const ::std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsRemove.group_ids)
}
void TGroupsRemove::add_group_ids(const char* value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsRemove.group_ids)
}
void TGroupsRemove::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsRemove.group_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGroupsRemove::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsRemove.group_ids)
  return group_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TGroupsRemove::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsRemove.group_ids)
  return &group_ids_;
}

inline const TGroupsRemove* TGroupsRemove::internal_default_instance() {
  return &TGroupsRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsSelfList::TGroupsSelfList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsSelfList)
}

void TGroupsSelfList::InitAsDefaultInstance() {
}

TGroupsSelfList::TGroupsSelfList(const TGroupsSelfList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsSelfList)
}

void TGroupsSelfList::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsSelfList::~TGroupsSelfList() {
  // @@protoc_insertion_point(destructor:server.TGroupsSelfList)
  SharedDtor();
}

void TGroupsSelfList::SharedDtor() {
}

void TGroupsSelfList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsSelfList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsSelfList_descriptor_;
}

const TGroupsSelfList& TGroupsSelfList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsSelfList> TGroupsSelfList_default_instance_;

TGroupsSelfList* TGroupsSelfList::New(::google::protobuf::Arena* arena) const {
  TGroupsSelfList* n = new TGroupsSelfList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsSelfList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsSelfList)
}

bool TGroupsSelfList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsSelfList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsSelfList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsSelfList)
  return false;
#undef DO_
}

void TGroupsSelfList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsSelfList)
  // @@protoc_insertion_point(serialize_end:server.TGroupsSelfList)
}

::google::protobuf::uint8* TGroupsSelfList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsSelfList)
  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsSelfList)
  return target;
}

size_t TGroupsSelfList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsSelfList)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsSelfList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsSelfList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsSelfList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsSelfList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsSelfList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsSelfList)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsSelfList::MergeFrom(const TGroupsSelfList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsSelfList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsSelfList::UnsafeMergeFrom(const TGroupsSelfList& from) {
  GOOGLE_DCHECK(&from != this);
}

void TGroupsSelfList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsSelfList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsSelfList::CopyFrom(const TGroupsSelfList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsSelfList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsSelfList::IsInitialized() const {

  return true;
}

void TGroupsSelfList::Swap(TGroupsSelfList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsSelfList::InternalSwap(TGroupsSelfList* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsSelfList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsSelfList_descriptor_;
  metadata.reflection = TGroupsSelfList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsSelfList

inline const TGroupsSelfList* TGroupsSelfList::internal_default_instance() {
  return &TGroupsSelfList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsFetch_GroupFetch::kGroupIdFieldNumber;
const int TGroupsFetch_GroupFetch::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsFetch_GroupFetch::TGroupsFetch_GroupFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsFetch.GroupFetch)
}

void TGroupsFetch_GroupFetch::InitAsDefaultInstance() {
  TGroupsFetch_GroupFetch_default_oneof_instance_->group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TGroupsFetch_GroupFetch_default_oneof_instance_->name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TGroupsFetch_GroupFetch::TGroupsFetch_GroupFetch(const TGroupsFetch_GroupFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsFetch.GroupFetch)
}

void TGroupsFetch_GroupFetch::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TGroupsFetch_GroupFetch::~TGroupsFetch_GroupFetch() {
  // @@protoc_insertion_point(destructor:server.TGroupsFetch.GroupFetch)
  SharedDtor();
}

void TGroupsFetch_GroupFetch::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TGroupsFetch_GroupFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsFetch_GroupFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsFetch_GroupFetch_descriptor_;
}

const TGroupsFetch_GroupFetch& TGroupsFetch_GroupFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsFetch_GroupFetch> TGroupsFetch_GroupFetch_default_instance_;

TGroupsFetch_GroupFetch* TGroupsFetch_GroupFetch::New(::google::protobuf::Arena* arena) const {
  TGroupsFetch_GroupFetch* n = new TGroupsFetch_GroupFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsFetch_GroupFetch::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TGroupsFetch.GroupFetch)
  switch (id_case()) {
    case kGroupId: {
      id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kName: {
      id_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TGroupsFetch_GroupFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsFetch.GroupFetch)
  clear_id();
}

bool TGroupsFetch_GroupFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsFetch.GroupFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsFetch.GroupFetch.group_id"));
        } else {
          goto handle_unusual;
        }
        goto after_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsFetch.GroupFetch.name"));
        } else {
          goto handle_unusual;
        }
       after_name:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsFetch.GroupFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsFetch.GroupFetch)
  return false;
#undef DO_
}

void TGroupsFetch_GroupFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsFetch.GroupFetch)
  // optional string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsFetch.GroupFetch.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsFetch.GroupFetch.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsFetch.GroupFetch)
}

::google::protobuf::uint8* TGroupsFetch_GroupFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsFetch.GroupFetch)
  // optional string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsFetch.GroupFetch.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsFetch.GroupFetch.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsFetch.GroupFetch)
  return target;
}

size_t TGroupsFetch_GroupFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsFetch.GroupFetch)
  size_t total_size = 0;

  switch (id_case()) {
    // optional string group_id = 1;
    case kGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
      break;
    }
    // optional string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsFetch_GroupFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsFetch.GroupFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsFetch_GroupFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsFetch_GroupFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsFetch.GroupFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsFetch.GroupFetch)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsFetch_GroupFetch::MergeFrom(const TGroupsFetch_GroupFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsFetch.GroupFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsFetch_GroupFetch::UnsafeMergeFrom(const TGroupsFetch_GroupFetch& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kGroupId: {
      set_group_id(from.group_id());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TGroupsFetch_GroupFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsFetch.GroupFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsFetch_GroupFetch::CopyFrom(const TGroupsFetch_GroupFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsFetch.GroupFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsFetch_GroupFetch::IsInitialized() const {

  return true;
}

void TGroupsFetch_GroupFetch::Swap(TGroupsFetch_GroupFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsFetch_GroupFetch::InternalSwap(TGroupsFetch_GroupFetch* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsFetch_GroupFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsFetch_GroupFetch_descriptor_;
  metadata.reflection = TGroupsFetch_GroupFetch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsFetch::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsFetch::TGroupsFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsFetch)
}

void TGroupsFetch::InitAsDefaultInstance() {
}

TGroupsFetch::TGroupsFetch(const TGroupsFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsFetch)
}

void TGroupsFetch::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsFetch::~TGroupsFetch() {
  // @@protoc_insertion_point(destructor:server.TGroupsFetch)
  SharedDtor();
}

void TGroupsFetch::SharedDtor() {
}

void TGroupsFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsFetch_descriptor_;
}

const TGroupsFetch& TGroupsFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsFetch> TGroupsFetch_default_instance_;

TGroupsFetch* TGroupsFetch::New(::google::protobuf::Arena* arena) const {
  TGroupsFetch* n = new TGroupsFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsFetch)
  groups_.Clear();
}

bool TGroupsFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TGroupsFetch.GroupFetch groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsFetch)
  return false;
#undef DO_
}

void TGroupsFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsFetch)
  // repeated .server.TGroupsFetch.GroupFetch groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsFetch)
}

::google::protobuf::uint8* TGroupsFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsFetch)
  // repeated .server.TGroupsFetch.GroupFetch groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsFetch)
  return target;
}

size_t TGroupsFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsFetch)
  size_t total_size = 0;

  // repeated .server.TGroupsFetch.GroupFetch groups = 1;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsFetch)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsFetch::MergeFrom(const TGroupsFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsFetch::UnsafeMergeFrom(const TGroupsFetch& from) {
  GOOGLE_DCHECK(&from != this);
  groups_.MergeFrom(from.groups_);
}

void TGroupsFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsFetch::CopyFrom(const TGroupsFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsFetch::IsInitialized() const {

  return true;
}

void TGroupsFetch::Swap(TGroupsFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsFetch::InternalSwap(TGroupsFetch* other) {
  groups_.UnsafeArenaSwap(&other->groups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsFetch_descriptor_;
  metadata.reflection = TGroupsFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsFetch_GroupFetch

// optional string group_id = 1;
bool TGroupsFetch_GroupFetch::has_group_id() const {
  return id_case() == kGroupId;
}
void TGroupsFetch_GroupFetch::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
void TGroupsFetch_GroupFetch::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TGroupsFetch_GroupFetch::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.GroupFetch.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TGroupsFetch_GroupFetch::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.group_id)
}
void TGroupsFetch_GroupFetch::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsFetch.GroupFetch.group_id)
}
void TGroupsFetch_GroupFetch::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsFetch.GroupFetch.group_id)
}
::std::string* TGroupsFetch_GroupFetch::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.GroupFetch.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsFetch_GroupFetch::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupsFetch.GroupFetch.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TGroupsFetch_GroupFetch::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsFetch.GroupFetch.group_id)
}

// optional string name = 2;
bool TGroupsFetch_GroupFetch::has_name() const {
  return id_case() == kName;
}
void TGroupsFetch_GroupFetch::set_has_name() {
  _oneof_case_[0] = kName;
}
void TGroupsFetch_GroupFetch::clear_name() {
  if (has_name()) {
    id_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TGroupsFetch_GroupFetch::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.GroupFetch.name)
  if (has_name()) {
    return id_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TGroupsFetch_GroupFetch::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.name)
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.name)
}
void TGroupsFetch_GroupFetch::set_name(const char* value) {
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsFetch.GroupFetch.name)
}
void TGroupsFetch_GroupFetch::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsFetch.GroupFetch.name)
}
::std::string* TGroupsFetch_GroupFetch::mutable_name() {
  if (!has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.GroupFetch.name)
  return id_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsFetch_GroupFetch::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsFetch.GroupFetch.name)
  if (has_name()) {
    clear_has_id();
    return id_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TGroupsFetch_GroupFetch::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    id_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (name != NULL) {
    set_has_name();
    id_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsFetch.GroupFetch.name)
}

bool TGroupsFetch_GroupFetch::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TGroupsFetch_GroupFetch::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TGroupsFetch_GroupFetch::IdCase TGroupsFetch_GroupFetch::id_case() const {
  return TGroupsFetch_GroupFetch::IdCase(_oneof_case_[0]);
}
inline const TGroupsFetch_GroupFetch* TGroupsFetch_GroupFetch::internal_default_instance() {
  return &TGroupsFetch_GroupFetch_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsFetch

// repeated .server.TGroupsFetch.GroupFetch groups = 1;
int TGroupsFetch::groups_size() const {
  return groups_.size();
}
void TGroupsFetch::clear_groups() {
  groups_.Clear();
}
const ::server::TGroupsFetch_GroupFetch& TGroupsFetch::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.groups)
  return groups_.Get(index);
}
::server::TGroupsFetch_GroupFetch* TGroupsFetch::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.groups)
  return groups_.Mutable(index);
}
::server::TGroupsFetch_GroupFetch* TGroupsFetch::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsFetch.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >*
TGroupsFetch::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsFetch.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >&
TGroupsFetch::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsFetch.groups)
  return groups_;
}

inline const TGroupsFetch* TGroupsFetch::internal_default_instance() {
  return &TGroupsFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsList::kPageLimitFieldNumber;
const int TGroupsList::kOrderByAscFieldNumber;
const int TGroupsList::kLangFieldNumber;
const int TGroupsList::kCreatedAtFieldNumber;
const int TGroupsList::kCountFieldNumber;
const int TGroupsList::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsList::TGroupsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsList)
}

void TGroupsList::InitAsDefaultInstance() {
  TGroupsList_default_oneof_instance_->lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TGroupsList_default_oneof_instance_->created_at_ = GOOGLE_LONGLONG(0);
  TGroupsList_default_oneof_instance_->count_ = GOOGLE_LONGLONG(0);
}

TGroupsList::TGroupsList(const TGroupsList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsList)
}

void TGroupsList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_limit_, 0, reinterpret_cast<char*>(&order_by_asc_) -
    reinterpret_cast<char*>(&page_limit_) + sizeof(order_by_asc_));
  clear_has_filter();
  _cached_size_ = 0;
}

TGroupsList::~TGroupsList() {
  // @@protoc_insertion_point(destructor:server.TGroupsList)
  SharedDtor();
}

void TGroupsList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_filter()) {
    clear_filter();
  }
}

void TGroupsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsList_descriptor_;
}

const TGroupsList& TGroupsList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsList> TGroupsList_default_instance_;

TGroupsList* TGroupsList::New(::google::protobuf::Arena* arena) const {
  TGroupsList* n = new TGroupsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsList::clear_filter() {
// @@protoc_insertion_point(one_of_clear_start:server.TGroupsList)
  switch (filter_case()) {
    case kLang: {
      filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCreatedAt: {
      // No need to clear
      break;
    }
    case kCount: {
      // No need to clear
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_NOT_SET;
}


void TGroupsList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TGroupsList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TGroupsList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_limit_, order_by_asc_);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_filter();
}

bool TGroupsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 page_limit = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &page_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_by_asc;
        break;
      }

      // optional bool order_by_asc = 2;
      case 2: {
        if (tag == 16) {
         parse_order_by_asc:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &order_by_asc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lang;
        break;
      }

      // optional string lang = 3;
      case 3: {
        if (tag == 26) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsList.lang"));
        } else {
          goto handle_unusual;
        }
        goto after_count;
        break;
      }

      // optional int64 created_at = 4;
      case 4: {
        if (tag == 32) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_.created_at_)));
          set_has_created_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int64 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_.count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
       after_count:
        if (input->ExpectTag(58)) goto parse_cursor;
        break;
      }

      // optional string cursor = 7;
      case 7: {
        if (tag == 58) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsList.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsList)
  return false;
#undef DO_
}

void TGroupsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsList)
  // optional int64 page_limit = 1;
  if (this->page_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->page_limit(), output);
  }

  // optional bool order_by_asc = 2;
  if (this->order_by_asc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->order_by_asc(), output);
  }

  // optional string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsList.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lang(), output);
  }

  // optional int64 created_at = 4;
  if (has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->created_at(), output);
  }

  // optional int64 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->count(), output);
  }

  // optional string cursor = 7;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsList)
}

::google::protobuf::uint8* TGroupsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsList)
  // optional int64 page_limit = 1;
  if (this->page_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->page_limit(), target);
  }

  // optional bool order_by_asc = 2;
  if (this->order_by_asc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->order_by_asc(), target);
  }

  // optional string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsList.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lang(), target);
  }

  // optional int64 created_at = 4;
  if (has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->created_at(), target);
  }

  // optional int64 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->count(), target);
  }

  // optional string cursor = 7;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsList)
  return target;
}

size_t TGroupsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsList)
  size_t total_size = 0;

  // optional int64 page_limit = 1;
  if (this->page_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->page_limit());
  }

  // optional bool order_by_asc = 2;
  if (this->order_by_asc() != 0) {
    total_size += 1 + 1;
  }

  // optional string cursor = 7;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  switch (filter_case()) {
    // optional string lang = 3;
    case kLang: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
      break;
    }
    // optional int64 created_at = 4;
    case kCreatedAt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created_at());
      break;
    }
    // optional int64 count = 5;
    case kCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsList)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsList::MergeFrom(const TGroupsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsList::UnsafeMergeFrom(const TGroupsList& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.filter_case()) {
    case kLang: {
      set_lang(from.lang());
      break;
    }
    case kCreatedAt: {
      set_created_at(from.created_at());
      break;
    }
    case kCount: {
      set_count(from.count());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  if (from.page_limit() != 0) {
    set_page_limit(from.page_limit());
  }
  if (from.order_by_asc() != 0) {
    set_order_by_asc(from.order_by_asc());
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TGroupsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsList::CopyFrom(const TGroupsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsList::IsInitialized() const {

  return true;
}

void TGroupsList::Swap(TGroupsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsList::InternalSwap(TGroupsList* other) {
  std::swap(page_limit_, other->page_limit_);
  std::swap(order_by_asc_, other->order_by_asc_);
  cursor_.Swap(&other->cursor_);
  std::swap(filter_, other->filter_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsList_descriptor_;
  metadata.reflection = TGroupsList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsList

// optional int64 page_limit = 1;
void TGroupsList::clear_page_limit() {
  page_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TGroupsList::page_limit() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.page_limit)
  return page_limit_;
}
void TGroupsList::set_page_limit(::google::protobuf::int64 value) {
  
  page_limit_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.page_limit)
}

// optional bool order_by_asc = 2;
void TGroupsList::clear_order_by_asc() {
  order_by_asc_ = false;
}
bool TGroupsList::order_by_asc() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.order_by_asc)
  return order_by_asc_;
}
void TGroupsList::set_order_by_asc(bool value) {
  
  order_by_asc_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.order_by_asc)
}

// optional string lang = 3;
bool TGroupsList::has_lang() const {
  return filter_case() == kLang;
}
void TGroupsList::set_has_lang() {
  _oneof_case_[0] = kLang;
}
void TGroupsList::clear_lang() {
  if (has_lang()) {
    filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& TGroupsList::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.lang)
  if (has_lang()) {
    return filter_.lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TGroupsList::set_lang(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
}
void TGroupsList::set_lang(const char* value) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.lang)
}
void TGroupsList::set_lang(const char* value, size_t size) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.lang)
}
::std::string* TGroupsList::mutable_lang() {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.lang)
  return filter_.lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsList::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.lang)
  if (has_lang()) {
    clear_has_filter();
    return filter_.lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TGroupsList::set_allocated_lang(::std::string* lang) {
  if (!has_lang()) {
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (lang != NULL) {
    set_has_lang();
    filter_.lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        lang);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.lang)
}

// optional int64 created_at = 4;
bool TGroupsList::has_created_at() const {
  return filter_case() == kCreatedAt;
}
void TGroupsList::set_has_created_at() {
  _oneof_case_[0] = kCreatedAt;
}
void TGroupsList::clear_created_at() {
  if (has_created_at()) {
    filter_.created_at_ = GOOGLE_LONGLONG(0);
    clear_has_filter();
  }
}
::google::protobuf::int64 TGroupsList::created_at() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.created_at)
  if (has_created_at()) {
    return filter_.created_at_;
  }
  return GOOGLE_LONGLONG(0);
}
void TGroupsList::set_created_at(::google::protobuf::int64 value) {
  if (!has_created_at()) {
    clear_filter();
    set_has_created_at();
  }
  filter_.created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.created_at)
}

// optional int64 count = 5;
bool TGroupsList::has_count() const {
  return filter_case() == kCount;
}
void TGroupsList::set_has_count() {
  _oneof_case_[0] = kCount;
}
void TGroupsList::clear_count() {
  if (has_count()) {
    filter_.count_ = GOOGLE_LONGLONG(0);
    clear_has_filter();
  }
}
::google::protobuf::int64 TGroupsList::count() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.count)
  if (has_count()) {
    return filter_.count_;
  }
  return GOOGLE_LONGLONG(0);
}
void TGroupsList::set_count(::google::protobuf::int64 value) {
  if (!has_count()) {
    clear_filter();
    set_has_count();
  }
  filter_.count_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.count)
}

// optional string cursor = 7;
void TGroupsList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.cursor)
}
void TGroupsList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.cursor)
}
void TGroupsList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.cursor)
}
::std::string* TGroupsList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.cursor)
}

bool TGroupsList::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
void TGroupsList::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
TGroupsList::FilterCase TGroupsList::filter_case() const {
  return TGroupsList::FilterCase(_oneof_case_[0]);
}
inline const TGroupsList* TGroupsList::internal_default_instance() {
  return &TGroupsList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroups::kGroupsFieldNumber;
const int TGroups::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroups::TGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroups)
}

void TGroups::InitAsDefaultInstance() {
}

TGroups::TGroups(const TGroups& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroups)
}

void TGroups::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroups::~TGroups() {
  // @@protoc_insertion_point(destructor:server.TGroups)
  SharedDtor();
}

void TGroups::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroups_descriptor_;
}

const TGroups& TGroups::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroups> TGroups_default_instance_;

TGroups* TGroups::New(::google::protobuf::Arena* arena) const {
  TGroups* n = new TGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroups)
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groups_.Clear();
}

bool TGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Group groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional string cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroups.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroups)
  return false;
#undef DO_
}

void TGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroups)
  // repeated .server.Group groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroups.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroups)
}

::google::protobuf::uint8* TGroups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroups)
  // repeated .server.Group groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups(i), false, target);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroups.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroups)
  return target;
}

size_t TGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroups)
  size_t total_size = 0;

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // repeated .server.Group groups = 1;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroups)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroups)
    UnsafeMergeFrom(*source);
  }
}

void TGroups::MergeFrom(const TGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroups)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroups::UnsafeMergeFrom(const TGroups& from) {
  GOOGLE_DCHECK(&from != this);
  groups_.MergeFrom(from.groups_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroups::CopyFrom(const TGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroups)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroups::IsInitialized() const {

  return true;
}

void TGroups::Swap(TGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroups::InternalSwap(TGroups* other) {
  groups_.UnsafeArenaSwap(&other->groups_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroups_descriptor_;
  metadata.reflection = TGroups_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroups

// repeated .server.Group groups = 1;
int TGroups::groups_size() const {
  return groups_.size();
}
void TGroups::clear_groups() {
  groups_.Clear();
}
const ::server::Group& TGroups::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroups.groups)
  return groups_.Get(index);
}
::server::Group* TGroups::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroups.groups)
  return groups_.Mutable(index);
}
::server::Group* TGroups::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroups.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Group >*
TGroups::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroups.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Group >&
TGroups::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroups.groups)
  return groups_;
}

// optional string cursor = 2;
void TGroups::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroups::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroups.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroups::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroups.cursor)
}
void TGroups::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroups.cursor)
}
void TGroups::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroups.cursor)
}
::std::string* TGroups::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroups.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroups::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroups.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroups::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TGroups.cursor)
}

inline const TGroups* TGroups::internal_default_instance() {
  return &TGroups_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsSelf_GroupSelf::kGroupFieldNumber;
const int TGroupsSelf_GroupSelf::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsSelf_GroupSelf::TGroupsSelf_GroupSelf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsSelf.GroupSelf)
}

void TGroupsSelf_GroupSelf::InitAsDefaultInstance() {
  group_ = const_cast< ::server::Group*>(
      ::server::Group::internal_default_instance());
}

TGroupsSelf_GroupSelf::TGroupsSelf_GroupSelf(const TGroupsSelf_GroupSelf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsSelf.GroupSelf)
}

void TGroupsSelf_GroupSelf::SharedCtor() {
  group_ = NULL;
  state_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TGroupsSelf_GroupSelf::~TGroupsSelf_GroupSelf() {
  // @@protoc_insertion_point(destructor:server.TGroupsSelf.GroupSelf)
  SharedDtor();
}

void TGroupsSelf_GroupSelf::SharedDtor() {
  if (this != &TGroupsSelf_GroupSelf_default_instance_.get()) {
    delete group_;
  }
}

void TGroupsSelf_GroupSelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsSelf_GroupSelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsSelf_GroupSelf_descriptor_;
}

const TGroupsSelf_GroupSelf& TGroupsSelf_GroupSelf::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsSelf_GroupSelf> TGroupsSelf_GroupSelf_default_instance_;

TGroupsSelf_GroupSelf* TGroupsSelf_GroupSelf::New(::google::protobuf::Arena* arena) const {
  TGroupsSelf_GroupSelf* n = new TGroupsSelf_GroupSelf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsSelf_GroupSelf::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsSelf.GroupSelf)
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
  state_ = GOOGLE_LONGLONG(0);
}

bool TGroupsSelf_GroupSelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsSelf.GroupSelf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.Group group = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int64 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsSelf.GroupSelf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsSelf.GroupSelf)
  return false;
#undef DO_
}

void TGroupsSelf_GroupSelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsSelf.GroupSelf)
  // optional .server.Group group = 1;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->group_, output);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsSelf.GroupSelf)
}

::google::protobuf::uint8* TGroupsSelf_GroupSelf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsSelf.GroupSelf)
  // optional .server.Group group = 1;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->group_, false, target);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsSelf.GroupSelf)
  return target;
}

size_t TGroupsSelf_GroupSelf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsSelf.GroupSelf)
  size_t total_size = 0;

  // optional .server.Group group = 1;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsSelf_GroupSelf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsSelf.GroupSelf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsSelf_GroupSelf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsSelf_GroupSelf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsSelf.GroupSelf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsSelf.GroupSelf)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsSelf_GroupSelf::MergeFrom(const TGroupsSelf_GroupSelf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsSelf.GroupSelf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsSelf_GroupSelf::UnsafeMergeFrom(const TGroupsSelf_GroupSelf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_group()) {
    mutable_group()->::server::Group::MergeFrom(from.group());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void TGroupsSelf_GroupSelf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsSelf.GroupSelf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsSelf_GroupSelf::CopyFrom(const TGroupsSelf_GroupSelf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsSelf.GroupSelf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsSelf_GroupSelf::IsInitialized() const {

  return true;
}

void TGroupsSelf_GroupSelf::Swap(TGroupsSelf_GroupSelf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsSelf_GroupSelf::InternalSwap(TGroupsSelf_GroupSelf* other) {
  std::swap(group_, other->group_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsSelf_GroupSelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsSelf_GroupSelf_descriptor_;
  metadata.reflection = TGroupsSelf_GroupSelf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsSelf::kGroupsSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsSelf::TGroupsSelf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsSelf)
}

void TGroupsSelf::InitAsDefaultInstance() {
}

TGroupsSelf::TGroupsSelf(const TGroupsSelf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsSelf)
}

void TGroupsSelf::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsSelf::~TGroupsSelf() {
  // @@protoc_insertion_point(destructor:server.TGroupsSelf)
  SharedDtor();
}

void TGroupsSelf::SharedDtor() {
}

void TGroupsSelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsSelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsSelf_descriptor_;
}

const TGroupsSelf& TGroupsSelf::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsSelf> TGroupsSelf_default_instance_;

TGroupsSelf* TGroupsSelf::New(::google::protobuf::Arena* arena) const {
  TGroupsSelf* n = new TGroupsSelf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsSelf::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsSelf)
  groups_self_.Clear();
}

bool TGroupsSelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsSelf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups_self;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsSelf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsSelf)
  return false;
#undef DO_
}

void TGroupsSelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsSelf)
  // repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
  for (unsigned int i = 0, n = this->groups_self_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups_self(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsSelf)
}

::google::protobuf::uint8* TGroupsSelf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsSelf)
  // repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
  for (unsigned int i = 0, n = this->groups_self_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups_self(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsSelf)
  return target;
}

size_t TGroupsSelf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsSelf)
  size_t total_size = 0;

  // repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
  {
    unsigned int count = this->groups_self_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups_self(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsSelf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsSelf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsSelf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsSelf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsSelf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsSelf)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsSelf::MergeFrom(const TGroupsSelf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsSelf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsSelf::UnsafeMergeFrom(const TGroupsSelf& from) {
  GOOGLE_DCHECK(&from != this);
  groups_self_.MergeFrom(from.groups_self_);
}

void TGroupsSelf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsSelf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsSelf::CopyFrom(const TGroupsSelf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsSelf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsSelf::IsInitialized() const {

  return true;
}

void TGroupsSelf::Swap(TGroupsSelf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsSelf::InternalSwap(TGroupsSelf* other) {
  groups_self_.UnsafeArenaSwap(&other->groups_self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsSelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsSelf_descriptor_;
  metadata.reflection = TGroupsSelf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsSelf_GroupSelf

// optional .server.Group group = 1;
bool TGroupsSelf_GroupSelf::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
void TGroupsSelf_GroupSelf::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::server::Group& TGroupsSelf_GroupSelf::group() const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.GroupSelf.group)
  return group_ != NULL ? *group_
                         : *::server::Group::internal_default_instance();
}
::server::Group* TGroupsSelf_GroupSelf::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::server::Group;
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsSelf.GroupSelf.group)
  return group_;
}
::server::Group* TGroupsSelf_GroupSelf::release_group() {
  // @@protoc_insertion_point(field_release:server.TGroupsSelf.GroupSelf.group)
  
  ::server::Group* temp = group_;
  group_ = NULL;
  return temp;
}
void TGroupsSelf_GroupSelf::set_allocated_group(::server::Group* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsSelf.GroupSelf.group)
}

// optional int64 state = 2;
void TGroupsSelf_GroupSelf::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TGroupsSelf_GroupSelf::state() const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.GroupSelf.state)
  return state_;
}
void TGroupsSelf_GroupSelf::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsSelf.GroupSelf.state)
}

inline const TGroupsSelf_GroupSelf* TGroupsSelf_GroupSelf::internal_default_instance() {
  return &TGroupsSelf_GroupSelf_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupsSelf

// repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
int TGroupsSelf::groups_self_size() const {
  return groups_self_.size();
}
void TGroupsSelf::clear_groups_self() {
  groups_self_.Clear();
}
const ::server::TGroupsSelf_GroupSelf& TGroupsSelf::groups_self(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.groups_self)
  return groups_self_.Get(index);
}
::server::TGroupsSelf_GroupSelf* TGroupsSelf::mutable_groups_self(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsSelf.groups_self)
  return groups_self_.Mutable(index);
}
::server::TGroupsSelf_GroupSelf* TGroupsSelf::add_groups_self() {
  // @@protoc_insertion_point(field_add:server.TGroupsSelf.groups_self)
  return groups_self_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >*
TGroupsSelf::mutable_groups_self() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsSelf.groups_self)
  return &groups_self_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >&
TGroupsSelf::groups_self() const {
  // @@protoc_insertion_point(field_list:server.TGroupsSelf.groups_self)
  return groups_self_;
}

inline const TGroupsSelf* TGroupsSelf::internal_default_instance() {
  return &TGroupsSelf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUser::kUserFieldNumber;
const int GroupUser::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUser::GroupUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.GroupUser)
}

void GroupUser::InitAsDefaultInstance() {
  user_ = const_cast< ::server::User*>(
      ::server::User::internal_default_instance());
}

GroupUser::GroupUser(const GroupUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.GroupUser)
}

void GroupUser::SharedCtor() {
  user_ = NULL;
  state_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

GroupUser::~GroupUser() {
  // @@protoc_insertion_point(destructor:server.GroupUser)
  SharedDtor();
}

void GroupUser::SharedDtor() {
  if (this != &GroupUser_default_instance_.get()) {
    delete user_;
  }
}

void GroupUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUser_descriptor_;
}

const GroupUser& GroupUser::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GroupUser> GroupUser_default_instance_;

GroupUser* GroupUser::New(::google::protobuf::Arena* arena) const {
  GroupUser* n = new GroupUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:server.GroupUser)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
  state_ = GOOGLE_LONGLONG(0);
}

bool GroupUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.GroupUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int64 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.GroupUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.GroupUser)
  return false;
#undef DO_
}

void GroupUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.GroupUser)
  // optional .server.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.GroupUser)
}

::google::protobuf::uint8* GroupUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.GroupUser)
  // optional .server.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.GroupUser)
  return target;
}

size_t GroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.GroupUser)
  size_t total_size = 0;

  // optional .server.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // optional int64 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.GroupUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.GroupUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.GroupUser)
    UnsafeMergeFrom(*source);
  }
}

void GroupUser::MergeFrom(const GroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.GroupUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GroupUser::UnsafeMergeFrom(const GroupUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_user()) {
    mutable_user()->::server::User::MergeFrom(from.user());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GroupUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUser::CopyFrom(const GroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.GroupUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GroupUser::IsInitialized() const {

  return true;
}

void GroupUser::Swap(GroupUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUser::InternalSwap(GroupUser* other) {
  std::swap(user_, other->user_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupUser_descriptor_;
  metadata.reflection = GroupUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupUser

// optional .server.User user = 1;
bool GroupUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void GroupUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::server::User& GroupUser::user() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
::server::User* GroupUser::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.GroupUser.user)
  return user_;
}
::server::User* GroupUser::release_user() {
  // @@protoc_insertion_point(field_release:server.GroupUser.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
void GroupUser::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.GroupUser.user)
}

// optional int64 state = 2;
void GroupUser::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GroupUser::state() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.state)
  return state_;
}
void GroupUser::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:server.GroupUser.state)
}

inline const GroupUser* GroupUser::internal_default_instance() {
  return &GroupUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersList::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersList::TGroupUsersList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersList)
}

void TGroupUsersList::InitAsDefaultInstance() {
}

TGroupUsersList::TGroupUsersList(const TGroupUsersList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersList)
}

void TGroupUsersList::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUsersList::~TGroupUsersList() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersList)
  SharedDtor();
}

void TGroupUsersList::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersList_descriptor_;
}

const TGroupUsersList& TGroupUsersList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersList> TGroupUsersList_default_instance_;

TGroupUsersList* TGroupUsersList::New(::google::protobuf::Arena* arena) const {
  TGroupUsersList* n = new TGroupUsersList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersList)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUsersList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUsersList.group_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersList)
  return false;
#undef DO_
}

void TGroupUsersList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersList)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersList.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersList)
}

::google::protobuf::uint8* TGroupUsersList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersList)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersList.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersList)
  return target;
}

size_t TGroupUsersList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersList)
  size_t total_size = 0;

  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersList)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersList::MergeFrom(const TGroupUsersList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersList::UnsafeMergeFrom(const TGroupUsersList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void TGroupUsersList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersList::CopyFrom(const TGroupUsersList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersList::IsInitialized() const {

  return true;
}

void TGroupUsersList::Swap(TGroupUsersList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersList::InternalSwap(TGroupUsersList* other) {
  group_id_.Swap(&other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersList_descriptor_;
  metadata.reflection = TGroupUsersList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUsersList

// optional string group_id = 1;
void TGroupUsersList::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersList.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersList::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersList.group_id)
}
void TGroupUsersList::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersList.group_id)
}
void TGroupUsersList::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersList.group_id)
}
::std::string* TGroupUsersList::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersList.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersList.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersList::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersList.group_id)
}

inline const TGroupUsersList* TGroupUsersList::internal_default_instance() {
  return &TGroupUsersList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsers::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsers::TGroupUsers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsers)
}

void TGroupUsers::InitAsDefaultInstance() {
}

TGroupUsers::TGroupUsers(const TGroupUsers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsers)
}

void TGroupUsers::SharedCtor() {
  _cached_size_ = 0;
}

TGroupUsers::~TGroupUsers() {
  // @@protoc_insertion_point(destructor:server.TGroupUsers)
  SharedDtor();
}

void TGroupUsers::SharedDtor() {
}

void TGroupUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsers_descriptor_;
}

const TGroupUsers& TGroupUsers::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsers> TGroupUsers_default_instance_;

TGroupUsers* TGroupUsers::New(::google::protobuf::Arena* arena) const {
  TGroupUsers* n = new TGroupUsers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsers)
  users_.Clear();
}

bool TGroupUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.GroupUser users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsers)
  return false;
#undef DO_
}

void TGroupUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsers)
  // repeated .server.GroupUser users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsers)
}

::google::protobuf::uint8* TGroupUsers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsers)
  // repeated .server.GroupUser users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsers)
  return target;
}

size_t TGroupUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsers)
  size_t total_size = 0;

  // repeated .server.GroupUser users = 1;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsers)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsers::MergeFrom(const TGroupUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsers)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsers::UnsafeMergeFrom(const TGroupUsers& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
}

void TGroupUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsers::CopyFrom(const TGroupUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsers)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsers::IsInitialized() const {

  return true;
}

void TGroupUsers::Swap(TGroupUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsers::InternalSwap(TGroupUsers* other) {
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsers_descriptor_;
  metadata.reflection = TGroupUsers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUsers

// repeated .server.GroupUser users = 1;
int TGroupUsers::users_size() const {
  return users_.size();
}
void TGroupUsers::clear_users() {
  users_.Clear();
}
const ::server::GroupUser& TGroupUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsers.users)
  return users_.Get(index);
}
::server::GroupUser* TGroupUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsers.users)
  return users_.Mutable(index);
}
::server::GroupUser* TGroupUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsers.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::GroupUser >*
TGroupUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsers.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::GroupUser >&
TGroupUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsers.users)
  return users_;
}

inline const TGroupUsers* TGroupUsers::internal_default_instance() {
  return &TGroupUsers_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsJoin::kGroupIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsJoin::TGroupsJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsJoin)
}

void TGroupsJoin::InitAsDefaultInstance() {
}

TGroupsJoin::TGroupsJoin(const TGroupsJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsJoin)
}

void TGroupsJoin::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsJoin::~TGroupsJoin() {
  // @@protoc_insertion_point(destructor:server.TGroupsJoin)
  SharedDtor();
}

void TGroupsJoin::SharedDtor() {
}

void TGroupsJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsJoin_descriptor_;
}

const TGroupsJoin& TGroupsJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsJoin> TGroupsJoin_default_instance_;

TGroupsJoin* TGroupsJoin::New(::google::protobuf::Arena* arena) const {
  TGroupsJoin* n = new TGroupsJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsJoin)
  group_ids_.Clear();
}

bool TGroupsJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string group_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_group_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_ids(this->group_ids_size() - 1).data(),
            this->group_ids(this->group_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsJoin.group_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_group_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsJoin)
  return false;
#undef DO_
}

void TGroupsJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsJoin)
  // repeated string group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_ids(i).data(), this->group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsJoin.group_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsJoin)
}

::google::protobuf::uint8* TGroupsJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsJoin)
  // repeated string group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_ids(i).data(), this->group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsJoin.group_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->group_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsJoin)
  return target;
}

size_t TGroupsJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsJoin)
  size_t total_size = 0;

  // repeated string group_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->group_ids_size());
  for (int i = 0; i < this->group_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsJoin)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsJoin::MergeFrom(const TGroupsJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsJoin::UnsafeMergeFrom(const TGroupsJoin& from) {
  GOOGLE_DCHECK(&from != this);
  group_ids_.UnsafeMergeFrom(from.group_ids_);
}

void TGroupsJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsJoin::CopyFrom(const TGroupsJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsJoin::IsInitialized() const {

  return true;
}

void TGroupsJoin::Swap(TGroupsJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsJoin::InternalSwap(TGroupsJoin* other) {
  group_ids_.UnsafeArenaSwap(&other->group_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsJoin_descriptor_;
  metadata.reflection = TGroupsJoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsJoin

// repeated string group_ids = 1;
int TGroupsJoin::group_ids_size() const {
  return group_ids_.size();
}
void TGroupsJoin::clear_group_ids() {
  group_ids_.Clear();
}
const ::std::string& TGroupsJoin::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsJoin.group_ids)
  return group_ids_.Get(index);
}
::std::string* TGroupsJoin::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsJoin.group_ids)
  return group_ids_.Mutable(index);
}
void TGroupsJoin::set_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsJoin.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
void TGroupsJoin::set_group_ids(int index, const char* value) {
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsJoin.group_ids)
}
void TGroupsJoin::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsJoin.group_ids)
}
::std::string* TGroupsJoin::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsJoin.group_ids)
  return group_ids_.Add();
}
void TGroupsJoin::add_group_ids(const ::std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsJoin.group_ids)
}
void TGroupsJoin::add_group_ids(const char* value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsJoin.group_ids)
}
void TGroupsJoin::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsJoin.group_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGroupsJoin::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsJoin.group_ids)
  return group_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TGroupsJoin::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsJoin.group_ids)
  return &group_ids_;
}

inline const TGroupsJoin* TGroupsJoin::internal_default_instance() {
  return &TGroupsJoin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsLeave::kGroupIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsLeave::TGroupsLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsLeave)
}

void TGroupsLeave::InitAsDefaultInstance() {
}

TGroupsLeave::TGroupsLeave(const TGroupsLeave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsLeave)
}

void TGroupsLeave::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsLeave::~TGroupsLeave() {
  // @@protoc_insertion_point(destructor:server.TGroupsLeave)
  SharedDtor();
}

void TGroupsLeave::SharedDtor() {
}

void TGroupsLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsLeave_descriptor_;
}

const TGroupsLeave& TGroupsLeave::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsLeave> TGroupsLeave_default_instance_;

TGroupsLeave* TGroupsLeave::New(::google::protobuf::Arena* arena) const {
  TGroupsLeave* n = new TGroupsLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsLeave)
  group_ids_.Clear();
}

bool TGroupsLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string group_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_group_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_ids(this->group_ids_size() - 1).data(),
            this->group_ids(this->group_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsLeave.group_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_group_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsLeave)
  return false;
#undef DO_
}

void TGroupsLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsLeave)
  // repeated string group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_ids(i).data(), this->group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsLeave.group_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsLeave)
}

::google::protobuf::uint8* TGroupsLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsLeave)
  // repeated string group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_ids(i).data(), this->group_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsLeave.group_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->group_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsLeave)
  return target;
}

size_t TGroupsLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsLeave)
  size_t total_size = 0;

  // repeated string group_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->group_ids_size());
  for (int i = 0; i < this->group_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsLeave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsLeave)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsLeave::MergeFrom(const TGroupsLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsLeave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsLeave::UnsafeMergeFrom(const TGroupsLeave& from) {
  GOOGLE_DCHECK(&from != this);
  group_ids_.UnsafeMergeFrom(from.group_ids_);
}

void TGroupsLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsLeave::CopyFrom(const TGroupsLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsLeave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsLeave::IsInitialized() const {

  return true;
}

void TGroupsLeave::Swap(TGroupsLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsLeave::InternalSwap(TGroupsLeave* other) {
  group_ids_.UnsafeArenaSwap(&other->group_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsLeave_descriptor_;
  metadata.reflection = TGroupsLeave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsLeave

// repeated string group_ids = 1;
int TGroupsLeave::group_ids_size() const {
  return group_ids_.size();
}
void TGroupsLeave::clear_group_ids() {
  group_ids_.Clear();
}
const ::std::string& TGroupsLeave::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsLeave.group_ids)
  return group_ids_.Get(index);
}
::std::string* TGroupsLeave::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsLeave.group_ids)
  return group_ids_.Mutable(index);
}
void TGroupsLeave::set_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsLeave.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
void TGroupsLeave::set_group_ids(int index, const char* value) {
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsLeave.group_ids)
}
void TGroupsLeave::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsLeave.group_ids)
}
::std::string* TGroupsLeave::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsLeave.group_ids)
  return group_ids_.Add();
}
void TGroupsLeave::add_group_ids(const ::std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsLeave.group_ids)
}
void TGroupsLeave::add_group_ids(const char* value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsLeave.group_ids)
}
void TGroupsLeave::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsLeave.group_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGroupsLeave::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsLeave.group_ids)
  return group_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TGroupsLeave::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsLeave.group_ids)
  return &group_ids_;
}

inline const TGroupsLeave* TGroupsLeave::internal_default_instance() {
  return &TGroupsLeave_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersAdd_GroupUserAdd::kGroupIdFieldNumber;
const int TGroupUsersAdd_GroupUserAdd::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersAdd_GroupUserAdd::TGroupUsersAdd_GroupUserAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersAdd.GroupUserAdd)
}

void TGroupUsersAdd_GroupUserAdd::InitAsDefaultInstance() {
}

TGroupUsersAdd_GroupUserAdd::TGroupUsersAdd_GroupUserAdd(const TGroupUsersAdd_GroupUserAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersAdd.GroupUserAdd)
}

void TGroupUsersAdd_GroupUserAdd::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUsersAdd_GroupUserAdd::~TGroupUsersAdd_GroupUserAdd() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersAdd.GroupUserAdd)
  SharedDtor();
}

void TGroupUsersAdd_GroupUserAdd::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersAdd_GroupUserAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersAdd_GroupUserAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersAdd_GroupUserAdd_descriptor_;
}

const TGroupUsersAdd_GroupUserAdd& TGroupUsersAdd_GroupUserAdd::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersAdd_GroupUserAdd> TGroupUsersAdd_GroupUserAdd_default_instance_;

TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd_GroupUserAdd::New(::google::protobuf::Arena* arena) const {
  TGroupUsersAdd_GroupUserAdd* n = new TGroupUsersAdd_GroupUserAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersAdd_GroupUserAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersAdd.GroupUserAdd)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUsersAdd_GroupUserAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersAdd.GroupUserAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUsersAdd.GroupUserAdd.group_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUsersAdd.GroupUserAdd.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersAdd.GroupUserAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersAdd.GroupUserAdd)
  return false;
#undef DO_
}

void TGroupUsersAdd_GroupUserAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersAdd.GroupUserAdd)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersAdd.GroupUserAdd.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersAdd.GroupUserAdd.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersAdd.GroupUserAdd)
}

::google::protobuf::uint8* TGroupUsersAdd_GroupUserAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersAdd.GroupUserAdd)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersAdd.GroupUserAdd.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersAdd.GroupUserAdd.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersAdd.GroupUserAdd)
  return target;
}

size_t TGroupUsersAdd_GroupUserAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersAdd.GroupUserAdd)
  size_t total_size = 0;

  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersAdd_GroupUserAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersAdd.GroupUserAdd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersAdd_GroupUserAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersAdd_GroupUserAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersAdd.GroupUserAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersAdd.GroupUserAdd)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersAdd_GroupUserAdd::MergeFrom(const TGroupUsersAdd_GroupUserAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersAdd.GroupUserAdd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersAdd_GroupUserAdd::UnsafeMergeFrom(const TGroupUsersAdd_GroupUserAdd& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TGroupUsersAdd_GroupUserAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersAdd.GroupUserAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersAdd_GroupUserAdd::CopyFrom(const TGroupUsersAdd_GroupUserAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersAdd.GroupUserAdd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersAdd_GroupUserAdd::IsInitialized() const {

  return true;
}

void TGroupUsersAdd_GroupUserAdd::Swap(TGroupUsersAdd_GroupUserAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersAdd_GroupUserAdd::InternalSwap(TGroupUsersAdd_GroupUserAdd* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersAdd_GroupUserAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersAdd_GroupUserAdd_descriptor_;
  metadata.reflection = TGroupUsersAdd_GroupUserAdd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersAdd::kGroupUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersAdd::TGroupUsersAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersAdd)
}

void TGroupUsersAdd::InitAsDefaultInstance() {
}

TGroupUsersAdd::TGroupUsersAdd(const TGroupUsersAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersAdd)
}

void TGroupUsersAdd::SharedCtor() {
  _cached_size_ = 0;
}

TGroupUsersAdd::~TGroupUsersAdd() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersAdd)
  SharedDtor();
}

void TGroupUsersAdd::SharedDtor() {
}

void TGroupUsersAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersAdd_descriptor_;
}

const TGroupUsersAdd& TGroupUsersAdd::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersAdd> TGroupUsersAdd_default_instance_;

TGroupUsersAdd* TGroupUsersAdd::New(::google::protobuf::Arena* arena) const {
  TGroupUsersAdd* n = new TGroupUsersAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersAdd)
  group_users_.Clear();
}

bool TGroupUsersAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_group_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_group_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersAdd)
  return false;
#undef DO_
}

void TGroupUsersAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersAdd)
  // repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
  for (unsigned int i = 0, n = this->group_users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersAdd)
}

::google::protobuf::uint8* TGroupUsersAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersAdd)
  // repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
  for (unsigned int i = 0, n = this->group_users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->group_users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersAdd)
  return target;
}

size_t TGroupUsersAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersAdd)
  size_t total_size = 0;

  // repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
  {
    unsigned int count = this->group_users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersAdd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersAdd)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersAdd::MergeFrom(const TGroupUsersAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersAdd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersAdd::UnsafeMergeFrom(const TGroupUsersAdd& from) {
  GOOGLE_DCHECK(&from != this);
  group_users_.MergeFrom(from.group_users_);
}

void TGroupUsersAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersAdd::CopyFrom(const TGroupUsersAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersAdd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersAdd::IsInitialized() const {

  return true;
}

void TGroupUsersAdd::Swap(TGroupUsersAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersAdd::InternalSwap(TGroupUsersAdd* other) {
  group_users_.UnsafeArenaSwap(&other->group_users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersAdd_descriptor_;
  metadata.reflection = TGroupUsersAdd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUsersAdd_GroupUserAdd

// optional string group_id = 1;
void TGroupUsersAdd_GroupUserAdd::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersAdd_GroupUserAdd::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.GroupUserAdd.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersAdd_GroupUserAdd::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
void TGroupUsersAdd_GroupUserAdd::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
void TGroupUsersAdd_GroupUserAdd::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
::std::string* TGroupUsersAdd_GroupUserAdd::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.GroupUserAdd.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersAdd_GroupUserAdd::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersAdd.GroupUserAdd.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersAdd_GroupUserAdd::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersAdd.GroupUserAdd.group_id)
}

// optional string user_id = 2;
void TGroupUsersAdd_GroupUserAdd::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersAdd_GroupUserAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.GroupUserAdd.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersAdd_GroupUserAdd::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
void TGroupUsersAdd_GroupUserAdd::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
void TGroupUsersAdd_GroupUserAdd::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
::std::string* TGroupUsersAdd_GroupUserAdd::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.GroupUserAdd.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersAdd_GroupUserAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersAdd.GroupUserAdd.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersAdd_GroupUserAdd::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersAdd.GroupUserAdd.user_id)
}

inline const TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd_GroupUserAdd::internal_default_instance() {
  return &TGroupUsersAdd_GroupUserAdd_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersAdd

// repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
int TGroupUsersAdd::group_users_size() const {
  return group_users_.size();
}
void TGroupUsersAdd::clear_group_users() {
  group_users_.Clear();
}
const ::server::TGroupUsersAdd_GroupUserAdd& TGroupUsersAdd::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.group_users)
  return group_users_.Get(index);
}
::server::TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.group_users)
  return group_users_.Mutable(index);
}
::server::TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersAdd.group_users)
  return group_users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >*
TGroupUsersAdd::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersAdd.group_users)
  return &group_users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >&
TGroupUsersAdd::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersAdd.group_users)
  return group_users_;
}

inline const TGroupUsersAdd* TGroupUsersAdd::internal_default_instance() {
  return &TGroupUsersAdd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersKick_GroupUserKick::kGroupIdFieldNumber;
const int TGroupUsersKick_GroupUserKick::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersKick_GroupUserKick::TGroupUsersKick_GroupUserKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersKick.GroupUserKick)
}

void TGroupUsersKick_GroupUserKick::InitAsDefaultInstance() {
}

TGroupUsersKick_GroupUserKick::TGroupUsersKick_GroupUserKick(const TGroupUsersKick_GroupUserKick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersKick.GroupUserKick)
}

void TGroupUsersKick_GroupUserKick::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUsersKick_GroupUserKick::~TGroupUsersKick_GroupUserKick() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersKick.GroupUserKick)
  SharedDtor();
}

void TGroupUsersKick_GroupUserKick::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersKick_GroupUserKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersKick_GroupUserKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersKick_GroupUserKick_descriptor_;
}

const TGroupUsersKick_GroupUserKick& TGroupUsersKick_GroupUserKick::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersKick_GroupUserKick> TGroupUsersKick_GroupUserKick_default_instance_;

TGroupUsersKick_GroupUserKick* TGroupUsersKick_GroupUserKick::New(::google::protobuf::Arena* arena) const {
  TGroupUsersKick_GroupUserKick* n = new TGroupUsersKick_GroupUserKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersKick_GroupUserKick::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersKick.GroupUserKick)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUsersKick_GroupUserKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersKick.GroupUserKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUsersKick.GroupUserKick.group_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUsersKick.GroupUserKick.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersKick.GroupUserKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersKick.GroupUserKick)
  return false;
#undef DO_
}

void TGroupUsersKick_GroupUserKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersKick.GroupUserKick)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersKick.GroupUserKick.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersKick.GroupUserKick.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersKick.GroupUserKick)
}

::google::protobuf::uint8* TGroupUsersKick_GroupUserKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersKick.GroupUserKick)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersKick.GroupUserKick.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersKick.GroupUserKick.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersKick.GroupUserKick)
  return target;
}

size_t TGroupUsersKick_GroupUserKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersKick.GroupUserKick)
  size_t total_size = 0;

  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersKick_GroupUserKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersKick.GroupUserKick)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersKick_GroupUserKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersKick_GroupUserKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersKick.GroupUserKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersKick.GroupUserKick)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersKick_GroupUserKick::MergeFrom(const TGroupUsersKick_GroupUserKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersKick.GroupUserKick)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersKick_GroupUserKick::UnsafeMergeFrom(const TGroupUsersKick_GroupUserKick& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TGroupUsersKick_GroupUserKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersKick.GroupUserKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersKick_GroupUserKick::CopyFrom(const TGroupUsersKick_GroupUserKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersKick.GroupUserKick)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersKick_GroupUserKick::IsInitialized() const {

  return true;
}

void TGroupUsersKick_GroupUserKick::Swap(TGroupUsersKick_GroupUserKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersKick_GroupUserKick::InternalSwap(TGroupUsersKick_GroupUserKick* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersKick_GroupUserKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersKick_GroupUserKick_descriptor_;
  metadata.reflection = TGroupUsersKick_GroupUserKick_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersKick::kGroupUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersKick::TGroupUsersKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersKick)
}

void TGroupUsersKick::InitAsDefaultInstance() {
}

TGroupUsersKick::TGroupUsersKick(const TGroupUsersKick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersKick)
}

void TGroupUsersKick::SharedCtor() {
  _cached_size_ = 0;
}

TGroupUsersKick::~TGroupUsersKick() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersKick)
  SharedDtor();
}

void TGroupUsersKick::SharedDtor() {
}

void TGroupUsersKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersKick_descriptor_;
}

const TGroupUsersKick& TGroupUsersKick::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersKick> TGroupUsersKick_default_instance_;

TGroupUsersKick* TGroupUsersKick::New(::google::protobuf::Arena* arena) const {
  TGroupUsersKick* n = new TGroupUsersKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersKick::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersKick)
  group_users_.Clear();
}

bool TGroupUsersKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_group_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_group_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersKick)
  return false;
#undef DO_
}

void TGroupUsersKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersKick)
  // repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
  for (unsigned int i = 0, n = this->group_users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersKick)
}

::google::protobuf::uint8* TGroupUsersKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersKick)
  // repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
  for (unsigned int i = 0, n = this->group_users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->group_users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersKick)
  return target;
}

size_t TGroupUsersKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersKick)
  size_t total_size = 0;

  // repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
  {
    unsigned int count = this->group_users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersKick)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersKick)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersKick::MergeFrom(const TGroupUsersKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersKick)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersKick::UnsafeMergeFrom(const TGroupUsersKick& from) {
  GOOGLE_DCHECK(&from != this);
  group_users_.MergeFrom(from.group_users_);
}

void TGroupUsersKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersKick::CopyFrom(const TGroupUsersKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersKick)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersKick::IsInitialized() const {

  return true;
}

void TGroupUsersKick::Swap(TGroupUsersKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersKick::InternalSwap(TGroupUsersKick* other) {
  group_users_.UnsafeArenaSwap(&other->group_users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersKick_descriptor_;
  metadata.reflection = TGroupUsersKick_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUsersKick_GroupUserKick

// optional string group_id = 1;
void TGroupUsersKick_GroupUserKick::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersKick_GroupUserKick::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.GroupUserKick.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersKick_GroupUserKick::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersKick.GroupUserKick.group_id)
}
void TGroupUsersKick_GroupUserKick::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersKick.GroupUserKick.group_id)
}
void TGroupUsersKick_GroupUserKick::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersKick.GroupUserKick.group_id)
}
::std::string* TGroupUsersKick_GroupUserKick::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.GroupUserKick.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersKick_GroupUserKick::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersKick.GroupUserKick.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersKick_GroupUserKick::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersKick.GroupUserKick.group_id)
}

// optional string user_id = 2;
void TGroupUsersKick_GroupUserKick::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersKick_GroupUserKick::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.GroupUserKick.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersKick_GroupUserKick::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersKick.GroupUserKick.user_id)
}
void TGroupUsersKick_GroupUserKick::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersKick.GroupUserKick.user_id)
}
void TGroupUsersKick_GroupUserKick::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersKick.GroupUserKick.user_id)
}
::std::string* TGroupUsersKick_GroupUserKick::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.GroupUserKick.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersKick_GroupUserKick::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersKick.GroupUserKick.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersKick_GroupUserKick::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersKick.GroupUserKick.user_id)
}

inline const TGroupUsersKick_GroupUserKick* TGroupUsersKick_GroupUserKick::internal_default_instance() {
  return &TGroupUsersKick_GroupUserKick_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersKick

// repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
int TGroupUsersKick::group_users_size() const {
  return group_users_.size();
}
void TGroupUsersKick::clear_group_users() {
  group_users_.Clear();
}
const ::server::TGroupUsersKick_GroupUserKick& TGroupUsersKick::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.group_users)
  return group_users_.Get(index);
}
::server::TGroupUsersKick_GroupUserKick* TGroupUsersKick::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.group_users)
  return group_users_.Mutable(index);
}
::server::TGroupUsersKick_GroupUserKick* TGroupUsersKick::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersKick.group_users)
  return group_users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >*
TGroupUsersKick::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersKick.group_users)
  return &group_users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >&
TGroupUsersKick::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersKick.group_users)
  return group_users_;
}

inline const TGroupUsersKick* TGroupUsersKick::internal_default_instance() {
  return &TGroupUsersKick_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersPromote_GroupUserPromote::kGroupIdFieldNumber;
const int TGroupUsersPromote_GroupUserPromote::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersPromote_GroupUserPromote::TGroupUsersPromote_GroupUserPromote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersPromote.GroupUserPromote)
}

void TGroupUsersPromote_GroupUserPromote::InitAsDefaultInstance() {
}

TGroupUsersPromote_GroupUserPromote::TGroupUsersPromote_GroupUserPromote(const TGroupUsersPromote_GroupUserPromote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersPromote.GroupUserPromote)
}

void TGroupUsersPromote_GroupUserPromote::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUsersPromote_GroupUserPromote::~TGroupUsersPromote_GroupUserPromote() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersPromote.GroupUserPromote)
  SharedDtor();
}

void TGroupUsersPromote_GroupUserPromote::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersPromote_GroupUserPromote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersPromote_GroupUserPromote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersPromote_GroupUserPromote_descriptor_;
}

const TGroupUsersPromote_GroupUserPromote& TGroupUsersPromote_GroupUserPromote::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersPromote_GroupUserPromote> TGroupUsersPromote_GroupUserPromote_default_instance_;

TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote_GroupUserPromote::New(::google::protobuf::Arena* arena) const {
  TGroupUsersPromote_GroupUserPromote* n = new TGroupUsersPromote_GroupUserPromote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersPromote_GroupUserPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersPromote.GroupUserPromote)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUsersPromote_GroupUserPromote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersPromote.GroupUserPromote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUsersPromote.GroupUserPromote.group_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUsersPromote.GroupUserPromote.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersPromote.GroupUserPromote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersPromote.GroupUserPromote)
  return false;
#undef DO_
}

void TGroupUsersPromote_GroupUserPromote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersPromote.GroupUserPromote)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersPromote.GroupUserPromote.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersPromote.GroupUserPromote.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersPromote.GroupUserPromote)
}

::google::protobuf::uint8* TGroupUsersPromote_GroupUserPromote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersPromote.GroupUserPromote)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersPromote.GroupUserPromote.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUsersPromote.GroupUserPromote.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersPromote.GroupUserPromote)
  return target;
}

size_t TGroupUsersPromote_GroupUserPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersPromote.GroupUserPromote)
  size_t total_size = 0;

  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersPromote_GroupUserPromote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersPromote.GroupUserPromote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersPromote_GroupUserPromote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersPromote_GroupUserPromote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersPromote.GroupUserPromote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersPromote.GroupUserPromote)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersPromote_GroupUserPromote::MergeFrom(const TGroupUsersPromote_GroupUserPromote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersPromote.GroupUserPromote)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersPromote_GroupUserPromote::UnsafeMergeFrom(const TGroupUsersPromote_GroupUserPromote& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TGroupUsersPromote_GroupUserPromote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersPromote.GroupUserPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersPromote_GroupUserPromote::CopyFrom(const TGroupUsersPromote_GroupUserPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersPromote.GroupUserPromote)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersPromote_GroupUserPromote::IsInitialized() const {

  return true;
}

void TGroupUsersPromote_GroupUserPromote::Swap(TGroupUsersPromote_GroupUserPromote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersPromote_GroupUserPromote::InternalSwap(TGroupUsersPromote_GroupUserPromote* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersPromote_GroupUserPromote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersPromote_GroupUserPromote_descriptor_;
  metadata.reflection = TGroupUsersPromote_GroupUserPromote_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersPromote::kGroupUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersPromote::TGroupUsersPromote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersPromote)
}

void TGroupUsersPromote::InitAsDefaultInstance() {
}

TGroupUsersPromote::TGroupUsersPromote(const TGroupUsersPromote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersPromote)
}

void TGroupUsersPromote::SharedCtor() {
  _cached_size_ = 0;
}

TGroupUsersPromote::~TGroupUsersPromote() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersPromote)
  SharedDtor();
}

void TGroupUsersPromote::SharedDtor() {
}

void TGroupUsersPromote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersPromote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersPromote_descriptor_;
}

const TGroupUsersPromote& TGroupUsersPromote::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersPromote> TGroupUsersPromote_default_instance_;

TGroupUsersPromote* TGroupUsersPromote::New(::google::protobuf::Arena* arena) const {
  TGroupUsersPromote* n = new TGroupUsersPromote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersPromote)
  group_users_.Clear();
}

bool TGroupUsersPromote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersPromote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_group_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_group_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersPromote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersPromote)
  return false;
#undef DO_
}

void TGroupUsersPromote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersPromote)
  // repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
  for (unsigned int i = 0, n = this->group_users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersPromote)
}

::google::protobuf::uint8* TGroupUsersPromote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersPromote)
  // repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
  for (unsigned int i = 0, n = this->group_users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->group_users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersPromote)
  return target;
}

size_t TGroupUsersPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersPromote)
  size_t total_size = 0;

  // repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
  {
    unsigned int count = this->group_users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersPromote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersPromote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersPromote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersPromote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersPromote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersPromote)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersPromote::MergeFrom(const TGroupUsersPromote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersPromote)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersPromote::UnsafeMergeFrom(const TGroupUsersPromote& from) {
  GOOGLE_DCHECK(&from != this);
  group_users_.MergeFrom(from.group_users_);
}

void TGroupUsersPromote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersPromote::CopyFrom(const TGroupUsersPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersPromote)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersPromote::IsInitialized() const {

  return true;
}

void TGroupUsersPromote::Swap(TGroupUsersPromote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersPromote::InternalSwap(TGroupUsersPromote* other) {
  group_users_.UnsafeArenaSwap(&other->group_users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersPromote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersPromote_descriptor_;
  metadata.reflection = TGroupUsersPromote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUsersPromote_GroupUserPromote

// optional string group_id = 1;
void TGroupUsersPromote_GroupUserPromote::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersPromote_GroupUserPromote::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.GroupUserPromote.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersPromote_GroupUserPromote::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
void TGroupUsersPromote_GroupUserPromote::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
void TGroupUsersPromote_GroupUserPromote::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
::std::string* TGroupUsersPromote_GroupUserPromote::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.GroupUserPromote.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersPromote_GroupUserPromote::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersPromote.GroupUserPromote.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersPromote_GroupUserPromote::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersPromote.GroupUserPromote.group_id)
}

// optional string user_id = 2;
void TGroupUsersPromote_GroupUserPromote::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersPromote_GroupUserPromote::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.GroupUserPromote.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersPromote_GroupUserPromote::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
void TGroupUsersPromote_GroupUserPromote::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
void TGroupUsersPromote_GroupUserPromote::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
::std::string* TGroupUsersPromote_GroupUserPromote::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.GroupUserPromote.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersPromote_GroupUserPromote::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersPromote.GroupUserPromote.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersPromote_GroupUserPromote::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersPromote.GroupUserPromote.user_id)
}

inline const TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote_GroupUserPromote::internal_default_instance() {
  return &TGroupUsersPromote_GroupUserPromote_default_instance_.get();
}
// -------------------------------------------------------------------

// TGroupUsersPromote

// repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
int TGroupUsersPromote::group_users_size() const {
  return group_users_.size();
}
void TGroupUsersPromote::clear_group_users() {
  group_users_.Clear();
}
const ::server::TGroupUsersPromote_GroupUserPromote& TGroupUsersPromote::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.group_users)
  return group_users_.Get(index);
}
::server::TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.group_users)
  return group_users_.Mutable(index);
}
::server::TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersPromote.group_users)
  return group_users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >*
TGroupUsersPromote::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersPromote.group_users)
  return &group_users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >&
TGroupUsersPromote::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersPromote.group_users)
  return group_users_;
}

inline const TGroupUsersPromote* TGroupUsersPromote::internal_default_instance() {
  return &TGroupUsersPromote_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicId::kDmFieldNumber;
const int TopicId::kRoomFieldNumber;
const int TopicId::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicId::TopicId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TopicId)
}

void TopicId::InitAsDefaultInstance() {
  TopicId_default_oneof_instance_->dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TopicId_default_oneof_instance_->room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TopicId_default_oneof_instance_->group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopicId::TopicId(const TopicId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TopicId)
}

void TopicId::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TopicId::~TopicId() {
  // @@protoc_insertion_point(destructor:server.TopicId)
  SharedDtor();
}

void TopicId::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TopicId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicId_descriptor_;
}

const TopicId& TopicId::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopicId> TopicId_default_instance_;

TopicId* TopicId::New(::google::protobuf::Arena* arena) const {
  TopicId* n = new TopicId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicId::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TopicId)
  switch (id_case()) {
    case kDm: {
      id_.dm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRoom: {
      id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGroupId: {
      id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TopicId::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TopicId)
  clear_id();
}

bool TopicId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TopicId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dm = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dm().data(), this->dm().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicId.dm"));
        } else {
          goto handle_unusual;
        }
        goto after_group_id;
        break;
      }

      // optional string room = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicId.room"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional string group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicId.group_id"));
        } else {
          goto handle_unusual;
        }
       after_group_id:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TopicId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TopicId)
  return false;
#undef DO_
}

void TopicId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TopicId)
  // optional string dm = 1;
  if (has_dm()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dm().data(), this->dm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicId.dm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dm(), output);
  }

  // optional string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicId.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  // optional string group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicId.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TopicId)
}

::google::protobuf::uint8* TopicId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TopicId)
  // optional string dm = 1;
  if (has_dm()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dm().data(), this->dm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicId.dm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dm(), target);
  }

  // optional string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicId.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  // optional string group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicId.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TopicId)
  return target;
}

size_t TopicId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TopicId)
  size_t total_size = 0;

  switch (id_case()) {
    // optional string dm = 1;
    case kDm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dm());
      break;
    }
    // optional string room = 2;
    case kRoom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room());
      break;
    }
    // optional string group_id = 3;
    case kGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TopicId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopicId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicId)
    UnsafeMergeFrom(*source);
  }
}

void TopicId::MergeFrom(const TopicId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopicId::UnsafeMergeFrom(const TopicId& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kDm: {
      set_dm(from.dm());
      break;
    }
    case kRoom: {
      set_room(from.room());
      break;
    }
    case kGroupId: {
      set_group_id(from.group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TopicId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TopicId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicId::CopyFrom(const TopicId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopicId::IsInitialized() const {

  return true;
}

void TopicId::Swap(TopicId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicId::InternalSwap(TopicId* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicId_descriptor_;
  metadata.reflection = TopicId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicId

// optional string dm = 1;
bool TopicId::has_dm() const {
  return id_case() == kDm;
}
void TopicId::set_has_dm() {
  _oneof_case_[0] = kDm;
}
void TopicId::clear_dm() {
  if (has_dm()) {
    id_.dm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TopicId::dm() const {
  // @@protoc_insertion_point(field_get:server.TopicId.dm)
  if (has_dm()) {
    return id_.dm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TopicId::set_dm(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
}
void TopicId::set_dm(const char* value) {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.dm)
}
void TopicId::set_dm(const char* value, size_t size) {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.dm)
}
::std::string* TopicId::mutable_dm() {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.dm)
  return id_.dm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicId::release_dm() {
  // @@protoc_insertion_point(field_release:server.TopicId.dm)
  if (has_dm()) {
    clear_has_id();
    return id_.dm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TopicId::set_allocated_dm(::std::string* dm) {
  if (!has_dm()) {
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (dm != NULL) {
    set_has_dm();
    id_.dm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        dm);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.dm)
}

// optional string room = 2;
bool TopicId::has_room() const {
  return id_case() == kRoom;
}
void TopicId::set_has_room() {
  _oneof_case_[0] = kRoom;
}
void TopicId::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TopicId::room() const {
  // @@protoc_insertion_point(field_get:server.TopicId.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TopicId::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.room)
}
void TopicId::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.room)
}
void TopicId::set_room(const char* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.room)
}
::std::string* TopicId::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicId::release_room() {
  // @@protoc_insertion_point(field_release:server.TopicId.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TopicId::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.room)
}

// optional string group_id = 3;
bool TopicId::has_group_id() const {
  return id_case() == kGroupId;
}
void TopicId::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
void TopicId::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TopicId::group_id() const {
  // @@protoc_insertion_point(field_get:server.TopicId.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TopicId::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
}
void TopicId::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.group_id)
}
void TopicId::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.group_id)
}
::std::string* TopicId::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicId::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TopicId.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TopicId::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.group_id)
}

bool TopicId::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TopicId::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TopicId::IdCase TopicId::id_case() const {
  return TopicId::IdCase(_oneof_case_[0]);
}
inline const TopicId* TopicId::internal_default_instance() {
  return &TopicId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPresence::kUserIdFieldNumber;
const int UserPresence::kSessionIdFieldNumber;
const int UserPresence::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPresence::UserPresence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.UserPresence)
}

void UserPresence::InitAsDefaultInstance() {
}

UserPresence::UserPresence(const UserPresence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.UserPresence)
}

void UserPresence::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserPresence::~UserPresence() {
  // @@protoc_insertion_point(destructor:server.UserPresence)
  SharedDtor();
}

void UserPresence::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPresence_descriptor_;
}

const UserPresence& UserPresence::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserPresence> UserPresence_default_instance_;

UserPresence* UserPresence::New(::google::protobuf::Arena* arena) const {
  UserPresence* n = new UserPresence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:server.UserPresence)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.UserPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.UserPresence.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.UserPresence.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_handle;
        break;
      }

      // optional string handle = 3;
      case 3: {
        if (tag == 26) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.UserPresence.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.UserPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.UserPresence)
  return false;
#undef DO_
}

void UserPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.UserPresence)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.UserPresence.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.UserPresence.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional string handle = 3;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.UserPresence.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.UserPresence)
}

::google::protobuf::uint8* UserPresence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.UserPresence)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.UserPresence.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.UserPresence.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // optional string handle = 3;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.UserPresence.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.UserPresence)
  return target;
}

size_t UserPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.UserPresence)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional string handle = 3;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPresence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.UserPresence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserPresence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPresence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.UserPresence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.UserPresence)
    UnsafeMergeFrom(*source);
  }
}

void UserPresence::MergeFrom(const UserPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.UserPresence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserPresence::UnsafeMergeFrom(const UserPresence& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
}

void UserPresence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.UserPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPresence::CopyFrom(const UserPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.UserPresence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserPresence::IsInitialized() const {

  return true;
}

void UserPresence::Swap(UserPresence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserPresence::InternalSwap(UserPresence* other) {
  user_id_.Swap(&other->user_id_);
  session_id_.Swap(&other->session_id_);
  handle_.Swap(&other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPresence_descriptor_;
  metadata.reflection = UserPresence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserPresence

// optional string user_id = 1;
void UserPresence::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserPresence::user_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.user_id)
}
void UserPresence::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.user_id)
}
void UserPresence::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.user_id)
}
::std::string* UserPresence::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserPresence::release_user_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.user_id)
}

// optional string session_id = 2;
void UserPresence::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserPresence::session_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.session_id)
}
void UserPresence::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.session_id)
}
void UserPresence::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.session_id)
}
::std::string* UserPresence::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserPresence::release_session_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.session_id)
}

// optional string handle = 3;
void UserPresence::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserPresence::handle() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.handle)
}
void UserPresence::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.handle)
}
void UserPresence::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.handle)
}
::std::string* UserPresence::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserPresence::release_handle() {
  // @@protoc_insertion_point(field_release:server.UserPresence.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.handle)
}

inline const UserPresence* UserPresence::internal_default_instance() {
  return &UserPresence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicsJoin_TopicJoin::kUserIdFieldNumber;
const int TTopicsJoin_TopicJoin::kRoomFieldNumber;
const int TTopicsJoin_TopicJoin::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicsJoin_TopicJoin::TTopicsJoin_TopicJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicsJoin.TopicJoin)
}

void TTopicsJoin_TopicJoin::InitAsDefaultInstance() {
  TTopicsJoin_TopicJoin_default_oneof_instance_->user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicsJoin_TopicJoin_default_oneof_instance_->room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicsJoin_TopicJoin_default_oneof_instance_->group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TTopicsJoin_TopicJoin::TTopicsJoin_TopicJoin(const TTopicsJoin_TopicJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicsJoin.TopicJoin)
}

void TTopicsJoin_TopicJoin::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TTopicsJoin_TopicJoin::~TTopicsJoin_TopicJoin() {
  // @@protoc_insertion_point(destructor:server.TTopicsJoin.TopicJoin)
  SharedDtor();
}

void TTopicsJoin_TopicJoin::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TTopicsJoin_TopicJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicsJoin_TopicJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicsJoin_TopicJoin_descriptor_;
}

const TTopicsJoin_TopicJoin& TTopicsJoin_TopicJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicsJoin_TopicJoin> TTopicsJoin_TopicJoin_default_instance_;

TTopicsJoin_TopicJoin* TTopicsJoin_TopicJoin::New(::google::protobuf::Arena* arena) const {
  TTopicsJoin_TopicJoin* n = new TTopicsJoin_TopicJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicsJoin_TopicJoin::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TTopicsJoin.TopicJoin)
  switch (id_case()) {
    case kUserId: {
      id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRoom: {
      id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGroupId: {
      id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TTopicsJoin_TopicJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicsJoin.TopicJoin)
  clear_id();
}

bool TTopicsJoin_TopicJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicsJoin.TopicJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicsJoin.TopicJoin.user_id"));
        } else {
          goto handle_unusual;
        }
        goto after_group_id;
        break;
      }

      // optional string room = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicsJoin.TopicJoin.room"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional string group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicsJoin.TopicJoin.group_id"));
        } else {
          goto handle_unusual;
        }
       after_group_id:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicsJoin.TopicJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicsJoin.TopicJoin)
  return false;
#undef DO_
}

void TTopicsJoin_TopicJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicsJoin.TopicJoin)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicsJoin.TopicJoin.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicsJoin.TopicJoin.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  // optional string group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicsJoin.TopicJoin.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicsJoin.TopicJoin)
}

::google::protobuf::uint8* TTopicsJoin_TopicJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicsJoin.TopicJoin)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicsJoin.TopicJoin.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicsJoin.TopicJoin.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  // optional string group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicsJoin.TopicJoin.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicsJoin.TopicJoin)
  return target;
}

size_t TTopicsJoin_TopicJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicsJoin.TopicJoin)
  size_t total_size = 0;

  switch (id_case()) {
    // optional string user_id = 1;
    case kUserId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
      break;
    }
    // optional string room = 2;
    case kRoom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room());
      break;
    }
    // optional string group_id = 3;
    case kGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicsJoin_TopicJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicsJoin.TopicJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicsJoin_TopicJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicsJoin_TopicJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicsJoin.TopicJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicsJoin.TopicJoin)
    UnsafeMergeFrom(*source);
  }
}

void TTopicsJoin_TopicJoin::MergeFrom(const TTopicsJoin_TopicJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicsJoin.TopicJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicsJoin_TopicJoin::UnsafeMergeFrom(const TTopicsJoin_TopicJoin& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUserId: {
      set_user_id(from.user_id());
      break;
    }
    case kRoom: {
      set_room(from.room());
      break;
    }
    case kGroupId: {
      set_group_id(from.group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TTopicsJoin_TopicJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicsJoin.TopicJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicsJoin_TopicJoin::CopyFrom(const TTopicsJoin_TopicJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicsJoin.TopicJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicsJoin_TopicJoin::IsInitialized() const {

  return true;
}

void TTopicsJoin_TopicJoin::Swap(TTopicsJoin_TopicJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicsJoin_TopicJoin::InternalSwap(TTopicsJoin_TopicJoin* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicsJoin_TopicJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicsJoin_TopicJoin_descriptor_;
  metadata.reflection = TTopicsJoin_TopicJoin_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicsJoin::kJoinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicsJoin::TTopicsJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicsJoin)
}

void TTopicsJoin::InitAsDefaultInstance() {
}

TTopicsJoin::TTopicsJoin(const TTopicsJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicsJoin)
}

void TTopicsJoin::SharedCtor() {
  _cached_size_ = 0;
}

TTopicsJoin::~TTopicsJoin() {
  // @@protoc_insertion_point(destructor:server.TTopicsJoin)
  SharedDtor();
}

void TTopicsJoin::SharedDtor() {
}

void TTopicsJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicsJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicsJoin_descriptor_;
}

const TTopicsJoin& TTopicsJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicsJoin> TTopicsJoin_default_instance_;

TTopicsJoin* TTopicsJoin::New(::google::protobuf::Arena* arena) const {
  TTopicsJoin* n = new TTopicsJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicsJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicsJoin)
  joins_.Clear();
}

bool TTopicsJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicsJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TTopicsJoin.TopicJoin joins = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_joins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_joins;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicsJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicsJoin)
  return false;
#undef DO_
}

void TTopicsJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicsJoin)
  // repeated .server.TTopicsJoin.TopicJoin joins = 1;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->joins(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicsJoin)
}

::google::protobuf::uint8* TTopicsJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicsJoin)
  // repeated .server.TTopicsJoin.TopicJoin joins = 1;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->joins(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicsJoin)
  return target;
}

size_t TTopicsJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicsJoin)
  size_t total_size = 0;

  // repeated .server.TTopicsJoin.TopicJoin joins = 1;
  {
    unsigned int count = this->joins_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joins(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicsJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicsJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicsJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicsJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicsJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicsJoin)
    UnsafeMergeFrom(*source);
  }
}

void TTopicsJoin::MergeFrom(const TTopicsJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicsJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicsJoin::UnsafeMergeFrom(const TTopicsJoin& from) {
  GOOGLE_DCHECK(&from != this);
  joins_.MergeFrom(from.joins_);
}

void TTopicsJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicsJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicsJoin::CopyFrom(const TTopicsJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicsJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicsJoin::IsInitialized() const {

  return true;
}

void TTopicsJoin::Swap(TTopicsJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicsJoin::InternalSwap(TTopicsJoin* other) {
  joins_.UnsafeArenaSwap(&other->joins_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicsJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicsJoin_descriptor_;
  metadata.reflection = TTopicsJoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicsJoin_TopicJoin

// optional string user_id = 1;
bool TTopicsJoin_TopicJoin::has_user_id() const {
  return id_case() == kUserId;
}
void TTopicsJoin_TopicJoin::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
void TTopicsJoin_TopicJoin::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicsJoin_TopicJoin::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicsJoin_TopicJoin::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.user_id)
}
void TTopicsJoin_TopicJoin::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.user_id)
}
void TTopicsJoin_TopicJoin::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.user_id)
}
::std::string* TTopicsJoin_TopicJoin::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicsJoin_TopicJoin::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicsJoin_TopicJoin::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.user_id)
}

// optional string room = 2;
bool TTopicsJoin_TopicJoin::has_room() const {
  return id_case() == kRoom;
}
void TTopicsJoin_TopicJoin::set_has_room() {
  _oneof_case_[0] = kRoom;
}
void TTopicsJoin_TopicJoin::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicsJoin_TopicJoin::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicsJoin_TopicJoin::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.room)
}
void TTopicsJoin_TopicJoin::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.room)
}
void TTopicsJoin_TopicJoin::set_room(const char* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.room)
}
::std::string* TTopicsJoin_TopicJoin::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicsJoin_TopicJoin::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicsJoin_TopicJoin::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.room)
}

// optional string group_id = 3;
bool TTopicsJoin_TopicJoin::has_group_id() const {
  return id_case() == kGroupId;
}
void TTopicsJoin_TopicJoin::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
void TTopicsJoin_TopicJoin::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicsJoin_TopicJoin::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicsJoin_TopicJoin::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.group_id)
}
void TTopicsJoin_TopicJoin::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.group_id)
}
void TTopicsJoin_TopicJoin::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.group_id)
}
::std::string* TTopicsJoin_TopicJoin::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicsJoin_TopicJoin::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicsJoin_TopicJoin::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.group_id)
}

bool TTopicsJoin_TopicJoin::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TTopicsJoin_TopicJoin::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TTopicsJoin_TopicJoin::IdCase TTopicsJoin_TopicJoin::id_case() const {
  return TTopicsJoin_TopicJoin::IdCase(_oneof_case_[0]);
}
inline const TTopicsJoin_TopicJoin* TTopicsJoin_TopicJoin::internal_default_instance() {
  return &TTopicsJoin_TopicJoin_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopicsJoin

// repeated .server.TTopicsJoin.TopicJoin joins = 1;
int TTopicsJoin::joins_size() const {
  return joins_.size();
}
void TTopicsJoin::clear_joins() {
  joins_.Clear();
}
const ::server::TTopicsJoin_TopicJoin& TTopicsJoin::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.joins)
  return joins_.Get(index);
}
::server::TTopicsJoin_TopicJoin* TTopicsJoin::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.joins)
  return joins_.Mutable(index);
}
::server::TTopicsJoin_TopicJoin* TTopicsJoin::add_joins() {
  // @@protoc_insertion_point(field_add:server.TTopicsJoin.joins)
  return joins_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >*
TTopicsJoin::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicsJoin.joins)
  return &joins_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >&
TTopicsJoin::joins() const {
  // @@protoc_insertion_point(field_list:server.TTopicsJoin.joins)
  return joins_;
}

inline const TTopicsJoin* TTopicsJoin::internal_default_instance() {
  return &TTopicsJoin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopics_Topic::kTopicFieldNumber;
const int TTopics_Topic::kPresencesFieldNumber;
const int TTopics_Topic::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopics_Topic::TTopics_Topic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopics.Topic)
}

void TTopics_Topic::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
  self_ = const_cast< ::server::UserPresence*>(
      ::server::UserPresence::internal_default_instance());
}

TTopics_Topic::TTopics_Topic(const TTopics_Topic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopics.Topic)
}

void TTopics_Topic::SharedCtor() {
  topic_ = NULL;
  self_ = NULL;
  _cached_size_ = 0;
}

TTopics_Topic::~TTopics_Topic() {
  // @@protoc_insertion_point(destructor:server.TTopics.Topic)
  SharedDtor();
}

void TTopics_Topic::SharedDtor() {
  if (this != &TTopics_Topic_default_instance_.get()) {
    delete topic_;
    delete self_;
  }
}

void TTopics_Topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopics_Topic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopics_Topic_descriptor_;
}

const TTopics_Topic& TTopics_Topic::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopics_Topic> TTopics_Topic_default_instance_;

TTopics_Topic* TTopics_Topic::New(::google::protobuf::Arena* arena) const {
  TTopics_Topic* n = new TTopics_Topic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopics_Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopics.Topic)
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
  presences_.Clear();
}

bool TTopics_Topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopics.Topic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_presences;
        break;
      }

      // repeated .server.UserPresence presences = 2;
      case 2: {
        if (tag == 18) {
         parse_presences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_presences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_presences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_presences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_self;
        break;
      }

      // optional .server.UserPresence self = 3;
      case 3: {
        if (tag == 26) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopics.Topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopics.Topic)
  return false;
#undef DO_
}

void TTopics_Topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopics.Topic)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->presences(i), output);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->self_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopics.Topic)
}

::google::protobuf::uint8* TTopics_Topic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopics.Topic)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->presences(i), false, target);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->self_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopics.Topic)
  return target;
}

size_t TTopics_Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopics.Topic)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_);
  }

  // repeated .server.UserPresence presences = 2;
  {
    unsigned int count = this->presences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopics_Topic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopics.Topic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopics_Topic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopics_Topic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopics.Topic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopics.Topic)
    UnsafeMergeFrom(*source);
  }
}

void TTopics_Topic::MergeFrom(const TTopics_Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopics.Topic)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopics_Topic::UnsafeMergeFrom(const TTopics_Topic& from) {
  GOOGLE_DCHECK(&from != this);
  presences_.MergeFrom(from.presences_);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
  if (from.has_self()) {
    mutable_self()->::server::UserPresence::MergeFrom(from.self());
  }
}

void TTopics_Topic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopics.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopics_Topic::CopyFrom(const TTopics_Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopics.Topic)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopics_Topic::IsInitialized() const {

  return true;
}

void TTopics_Topic::Swap(TTopics_Topic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopics_Topic::InternalSwap(TTopics_Topic* other) {
  std::swap(topic_, other->topic_);
  presences_.UnsafeArenaSwap(&other->presences_);
  std::swap(self_, other->self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopics_Topic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopics_Topic_descriptor_;
  metadata.reflection = TTopics_Topic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopics::kTopicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopics::TTopics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopics)
}

void TTopics::InitAsDefaultInstance() {
}

TTopics::TTopics(const TTopics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopics)
}

void TTopics::SharedCtor() {
  _cached_size_ = 0;
}

TTopics::~TTopics() {
  // @@protoc_insertion_point(destructor:server.TTopics)
  SharedDtor();
}

void TTopics::SharedDtor() {
}

void TTopics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopics_descriptor_;
}

const TTopics& TTopics::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopics> TTopics_default_instance_;

TTopics* TTopics::New(::google::protobuf::Arena* arena) const {
  TTopics* n = new TTopics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopics::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopics)
  topics_.Clear();
}

bool TTopics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TTopics.Topic topics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_topics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopics)
  return false;
#undef DO_
}

void TTopics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopics)
  // repeated .server.TTopics.Topic topics = 1;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topics(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopics)
}

::google::protobuf::uint8* TTopics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopics)
  // repeated .server.TTopics.Topic topics = 1;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->topics(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopics)
  return target;
}

size_t TTopics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopics)
  size_t total_size = 0;

  // repeated .server.TTopics.Topic topics = 1;
  {
    unsigned int count = this->topics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topics(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopics)
    UnsafeMergeFrom(*source);
  }
}

void TTopics::MergeFrom(const TTopics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopics)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopics::UnsafeMergeFrom(const TTopics& from) {
  GOOGLE_DCHECK(&from != this);
  topics_.MergeFrom(from.topics_);
}

void TTopics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopics::CopyFrom(const TTopics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopics)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopics::IsInitialized() const {

  return true;
}

void TTopics::Swap(TTopics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopics::InternalSwap(TTopics* other) {
  topics_.UnsafeArenaSwap(&other->topics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopics_descriptor_;
  metadata.reflection = TTopics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopics_Topic

// optional .server.TopicId topic = 1;
bool TTopics_Topic::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TTopics_Topic::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TTopics_Topic::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TTopics_Topic::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.topic)
  return topic_;
}
::server::TopicId* TTopics_Topic::release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopics.Topic.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TTopics_Topic::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopics.Topic.topic)
}

// repeated .server.UserPresence presences = 2;
int TTopics_Topic::presences_size() const {
  return presences_.size();
}
void TTopics_Topic::clear_presences() {
  presences_.Clear();
}
const ::server::UserPresence& TTopics_Topic::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.presences)
  return presences_.Get(index);
}
::server::UserPresence* TTopics_Topic::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.presences)
  return presences_.Mutable(index);
}
::server::UserPresence* TTopics_Topic::add_presences() {
  // @@protoc_insertion_point(field_add:server.TTopics.Topic.presences)
  return presences_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TTopics_Topic::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopics.Topic.presences)
  return &presences_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TTopics_Topic::presences() const {
  // @@protoc_insertion_point(field_list:server.TTopics.Topic.presences)
  return presences_;
}

// optional .server.UserPresence self = 3;
bool TTopics_Topic::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
void TTopics_Topic::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
const ::server::UserPresence& TTopics_Topic::self() const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
::server::UserPresence* TTopics_Topic::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.self)
  return self_;
}
::server::UserPresence* TTopics_Topic::release_self() {
  // @@protoc_insertion_point(field_release:server.TTopics.Topic.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
void TTopics_Topic::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopics.Topic.self)
}

inline const TTopics_Topic* TTopics_Topic::internal_default_instance() {
  return &TTopics_Topic_default_instance_.get();
}
// -------------------------------------------------------------------

// TTopics

// repeated .server.TTopics.Topic topics = 1;
int TTopics::topics_size() const {
  return topics_.size();
}
void TTopics::clear_topics() {
  topics_.Clear();
}
const ::server::TTopics_Topic& TTopics::topics(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopics.topics)
  return topics_.Get(index);
}
::server::TTopics_Topic* TTopics::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopics.topics)
  return topics_.Mutable(index);
}
::server::TTopics_Topic* TTopics::add_topics() {
  // @@protoc_insertion_point(field_add:server.TTopics.topics)
  return topics_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TTopics_Topic >*
TTopics::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopics.topics)
  return &topics_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TTopics_Topic >&
TTopics::topics() const {
  // @@protoc_insertion_point(field_list:server.TTopics.topics)
  return topics_;
}

inline const TTopics* TTopics::internal_default_instance() {
  return &TTopics_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicsLeave::kTopicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicsLeave::TTopicsLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicsLeave)
}

void TTopicsLeave::InitAsDefaultInstance() {
}

TTopicsLeave::TTopicsLeave(const TTopicsLeave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicsLeave)
}

void TTopicsLeave::SharedCtor() {
  _cached_size_ = 0;
}

TTopicsLeave::~TTopicsLeave() {
  // @@protoc_insertion_point(destructor:server.TTopicsLeave)
  SharedDtor();
}

void TTopicsLeave::SharedDtor() {
}

void TTopicsLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicsLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicsLeave_descriptor_;
}

const TTopicsLeave& TTopicsLeave::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicsLeave> TTopicsLeave_default_instance_;

TTopicsLeave* TTopicsLeave::New(::google::protobuf::Arena* arena) const {
  TTopicsLeave* n = new TTopicsLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicsLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicsLeave)
  topics_.Clear();
}

bool TTopicsLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicsLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TopicId topics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_topics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicsLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicsLeave)
  return false;
#undef DO_
}

void TTopicsLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicsLeave)
  // repeated .server.TopicId topics = 1;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topics(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicsLeave)
}

::google::protobuf::uint8* TTopicsLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicsLeave)
  // repeated .server.TopicId topics = 1;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->topics(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicsLeave)
  return target;
}

size_t TTopicsLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicsLeave)
  size_t total_size = 0;

  // repeated .server.TopicId topics = 1;
  {
    unsigned int count = this->topics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topics(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicsLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicsLeave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicsLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicsLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicsLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicsLeave)
    UnsafeMergeFrom(*source);
  }
}

void TTopicsLeave::MergeFrom(const TTopicsLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicsLeave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicsLeave::UnsafeMergeFrom(const TTopicsLeave& from) {
  GOOGLE_DCHECK(&from != this);
  topics_.MergeFrom(from.topics_);
}

void TTopicsLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicsLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicsLeave::CopyFrom(const TTopicsLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicsLeave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicsLeave::IsInitialized() const {

  return true;
}

void TTopicsLeave::Swap(TTopicsLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicsLeave::InternalSwap(TTopicsLeave* other) {
  topics_.UnsafeArenaSwap(&other->topics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicsLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicsLeave_descriptor_;
  metadata.reflection = TTopicsLeave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicsLeave

// repeated .server.TopicId topics = 1;
int TTopicsLeave::topics_size() const {
  return topics_.size();
}
void TTopicsLeave::clear_topics() {
  topics_.Clear();
}
const ::server::TopicId& TTopicsLeave::topics(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicsLeave.topics)
  return topics_.Get(index);
}
::server::TopicId* TTopicsLeave::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicsLeave.topics)
  return topics_.Mutable(index);
}
::server::TopicId* TTopicsLeave::add_topics() {
  // @@protoc_insertion_point(field_add:server.TTopicsLeave.topics)
  return topics_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TopicId >*
TTopicsLeave::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicsLeave.topics)
  return &topics_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TopicId >&
TTopicsLeave::topics() const {
  // @@protoc_insertion_point(field_list:server.TTopicsLeave.topics)
  return topics_;
}

inline const TTopicsLeave* TTopicsLeave::internal_default_instance() {
  return &TTopicsLeave_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessageSend::kTopicFieldNumber;
const int TTopicMessageSend::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessageSend::TTopicMessageSend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessageSend)
}

void TTopicMessageSend::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
}

TTopicMessageSend::TTopicMessageSend(const TTopicMessageSend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessageSend)
}

void TTopicMessageSend::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = NULL;
  _cached_size_ = 0;
}

TTopicMessageSend::~TTopicMessageSend() {
  // @@protoc_insertion_point(destructor:server.TTopicMessageSend)
  SharedDtor();
}

void TTopicMessageSend::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TTopicMessageSend_default_instance_.get()) {
    delete topic_;
  }
}

void TTopicMessageSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessageSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessageSend_descriptor_;
}

const TTopicMessageSend& TTopicMessageSend::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessageSend> TTopicMessageSend_default_instance_;

TTopicMessageSend* TTopicMessageSend::New(::google::protobuf::Arena* arena) const {
  TTopicMessageSend* n = new TTopicMessageSend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessageSend::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessageSend)
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TTopicMessageSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessageSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessageSend.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessageSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessageSend)
  return false;
#undef DO_
}

void TTopicMessageSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessageSend)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageSend.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessageSend)
}

::google::protobuf::uint8* TTopicMessageSend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessageSend)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageSend.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessageSend)
  return target;
}

size_t TTopicMessageSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessageSend)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessageSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessageSend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessageSend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessageSend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessageSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessageSend)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessageSend::MergeFrom(const TTopicMessageSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessageSend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessageSend::UnsafeMergeFrom(const TTopicMessageSend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TTopicMessageSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessageSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessageSend::CopyFrom(const TTopicMessageSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessageSend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessageSend::IsInitialized() const {

  return true;
}

void TTopicMessageSend::Swap(TTopicMessageSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessageSend::InternalSwap(TTopicMessageSend* other) {
  std::swap(topic_, other->topic_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessageSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessageSend_descriptor_;
  metadata.reflection = TTopicMessageSend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessageSend

// optional .server.TopicId topic = 1;
bool TTopicMessageSend::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TTopicMessageSend::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TTopicMessageSend::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TTopicMessageSend::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.topic)
  return topic_;
}
::server::TopicId* TTopicMessageSend::release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TTopicMessageSend::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.topic)
}

// optional string data = 2;
void TTopicMessageSend::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessageSend::data() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageSend::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageSend.data)
}
void TTopicMessageSend::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageSend.data)
}
void TTopicMessageSend::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageSend.data)
}
::std::string* TTopicMessageSend::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessageSend::release_data() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageSend::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.data)
}

inline const TTopicMessageSend* TTopicMessageSend::internal_default_instance() {
  return &TTopicMessageSend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessageAck::kMessageIdFieldNumber;
const int TTopicMessageAck::kCreatedAtFieldNumber;
const int TTopicMessageAck::kExpiresAtFieldNumber;
const int TTopicMessageAck::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessageAck::TTopicMessageAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessageAck)
}

void TTopicMessageAck::InitAsDefaultInstance() {
}

TTopicMessageAck::TTopicMessageAck(const TTopicMessageAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessageAck)
}

void TTopicMessageAck::SharedCtor() {
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&created_at_) + sizeof(expires_at_));
  _cached_size_ = 0;
}

TTopicMessageAck::~TTopicMessageAck() {
  // @@protoc_insertion_point(destructor:server.TTopicMessageAck)
  SharedDtor();
}

void TTopicMessageAck::SharedDtor() {
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TTopicMessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessageAck_descriptor_;
}

const TTopicMessageAck& TTopicMessageAck::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessageAck> TTopicMessageAck_default_instance_;

TTopicMessageAck* TTopicMessageAck::New(::google::protobuf::Arena* arena) const {
  TTopicMessageAck* n = new TTopicMessageAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessageAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TTopicMessageAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TTopicMessageAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(created_at_, expires_at_);
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TTopicMessageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessageAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessageAck.message_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 2;
      case 2: {
        if (tag == 16) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 3;
      case 3: {
        if (tag == 24) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_handle;
        break;
      }

      // optional string handle = 4;
      case 4: {
        if (tag == 34) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessageAck.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessageAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessageAck)
  return false;
#undef DO_
}

void TTopicMessageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessageAck)
  // optional string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageAck.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_id(), output);
  }

  // optional int64 created_at = 2;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->created_at(), output);
  }

  // optional int64 expires_at = 3;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expires_at(), output);
  }

  // optional string handle = 4;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageAck.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessageAck)
}

::google::protobuf::uint8* TTopicMessageAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessageAck)
  // optional string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageAck.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_id(), target);
  }

  // optional int64 created_at = 2;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->created_at(), target);
  }

  // optional int64 expires_at = 3;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expires_at(), target);
  }

  // optional string handle = 4;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageAck.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessageAck)
  return target;
}

size_t TTopicMessageAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessageAck)
  size_t total_size = 0;

  // optional string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // optional int64 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 expires_at = 3;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  // optional string handle = 4;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessageAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessageAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessageAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessageAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessageAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessageAck)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessageAck::MergeFrom(const TTopicMessageAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessageAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessageAck::UnsafeMergeFrom(const TTopicMessageAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
}

void TTopicMessageAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessageAck::CopyFrom(const TTopicMessageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessageAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessageAck::IsInitialized() const {

  return true;
}

void TTopicMessageAck::Swap(TTopicMessageAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessageAck::InternalSwap(TTopicMessageAck* other) {
  message_id_.Swap(&other->message_id_);
  std::swap(created_at_, other->created_at_);
  std::swap(expires_at_, other->expires_at_);
  handle_.Swap(&other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessageAck_descriptor_;
  metadata.reflection = TTopicMessageAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessageAck

// optional string message_id = 1;
void TTopicMessageAck::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessageAck::message_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.message_id)
}
void TTopicMessageAck::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.message_id)
}
void TTopicMessageAck::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.message_id)
}
::std::string* TTopicMessageAck::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessageAck::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.message_id)
}

// optional int64 created_at = 2;
void TTopicMessageAck::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TTopicMessageAck::created_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.created_at)
  return created_at_;
}
void TTopicMessageAck::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.created_at)
}

// optional int64 expires_at = 3;
void TTopicMessageAck::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TTopicMessageAck::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.expires_at)
  return expires_at_;
}
void TTopicMessageAck::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.expires_at)
}

// optional string handle = 4;
void TTopicMessageAck::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessageAck::handle() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.handle)
}
void TTopicMessageAck::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.handle)
}
void TTopicMessageAck::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.handle)
}
::std::string* TTopicMessageAck::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessageAck::release_handle() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.handle)
}

inline const TTopicMessageAck* TTopicMessageAck::internal_default_instance() {
  return &TTopicMessageAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicMessage::kTopicFieldNumber;
const int TopicMessage::kUserIdFieldNumber;
const int TopicMessage::kMessageIdFieldNumber;
const int TopicMessage::kCreatedAtFieldNumber;
const int TopicMessage::kExpiresAtFieldNumber;
const int TopicMessage::kHandleFieldNumber;
const int TopicMessage::kTypeFieldNumber;
const int TopicMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicMessage::TopicMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TopicMessage)
}

void TopicMessage::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
}

TopicMessage::TopicMessage(const TopicMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TopicMessage)
}

void TopicMessage::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = NULL;
  ::memset(&created_at_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&created_at_) + sizeof(type_));
  _cached_size_ = 0;
}

TopicMessage::~TopicMessage() {
  // @@protoc_insertion_point(destructor:server.TopicMessage)
  SharedDtor();
}

void TopicMessage::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TopicMessage_default_instance_.get()) {
    delete topic_;
  }
}

void TopicMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMessage_descriptor_;
}

const TopicMessage& TopicMessage::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopicMessage> TopicMessage_default_instance_;

TopicMessage* TopicMessage::New(::google::protobuf::Arena* arena) const {
  TopicMessage* n = new TopicMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TopicMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopicMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopicMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(created_at_, type_);
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TopicMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TopicMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicMessage.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message_id;
        break;
      }

      // optional string message_id = 3;
      case 3: {
        if (tag == 26) {
         parse_message_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicMessage.message_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 4;
      case 4: {
        if (tag == 32) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 5;
      case 5: {
        if (tag == 40) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_handle;
        break;
      }

      // optional string handle = 6;
      case 6: {
        if (tag == 50) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicMessage.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int64 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional string data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicMessage.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TopicMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TopicMessage)
  return false;
#undef DO_
}

void TopicMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TopicMessage)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_id(), output);
  }

  // optional int64 created_at = 4;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->created_at(), output);
  }

  // optional int64 expires_at = 5;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expires_at(), output);
  }

  // optional string handle = 6;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->handle(), output);
  }

  // optional int64 type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->type(), output);
  }

  // optional string data = 8;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TopicMessage)
}

::google::protobuf::uint8* TopicMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TopicMessage)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // optional string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_id(), target);
  }

  // optional int64 created_at = 4;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->created_at(), target);
  }

  // optional int64 expires_at = 5;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expires_at(), target);
  }

  // optional string handle = 6;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->handle(), target);
  }

  // optional int64 type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->type(), target);
  }

  // optional string data = 8;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TopicMessage)
  return target;
}

size_t TopicMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TopicMessage)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // optional string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // optional int64 created_at = 4;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 expires_at = 5;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  // optional string handle = 6;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // optional int64 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());
  }

  // optional string data = 8;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TopicMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopicMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicMessage)
    UnsafeMergeFrom(*source);
  }
}

void TopicMessage::MergeFrom(const TopicMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopicMessage::UnsafeMergeFrom(const TopicMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TopicMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TopicMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMessage::CopyFrom(const TopicMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopicMessage::IsInitialized() const {

  return true;
}

void TopicMessage::Swap(TopicMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicMessage::InternalSwap(TopicMessage* other) {
  std::swap(topic_, other->topic_);
  user_id_.Swap(&other->user_id_);
  message_id_.Swap(&other->message_id_);
  std::swap(created_at_, other->created_at_);
  std::swap(expires_at_, other->expires_at_);
  handle_.Swap(&other->handle_);
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMessage_descriptor_;
  metadata.reflection = TopicMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicMessage

// optional .server.TopicId topic = 1;
bool TopicMessage::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TopicMessage::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TopicMessage::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TopicMessage::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.topic)
  return topic_;
}
::server::TopicId* TopicMessage::release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TopicMessage::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.topic)
}

// optional string user_id = 2;
void TopicMessage::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::user_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.user_id)
}
void TopicMessage::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.user_id)
}
void TopicMessage::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.user_id)
}
::std::string* TopicMessage::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.user_id)
}

// optional string message_id = 3;
void TopicMessage::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::message_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.message_id)
}
void TopicMessage::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.message_id)
}
void TopicMessage::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.message_id)
}
::std::string* TopicMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.message_id)
}

// optional int64 created_at = 4;
void TopicMessage::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TopicMessage::created_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.created_at)
  return created_at_;
}
void TopicMessage::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.created_at)
}

// optional int64 expires_at = 5;
void TopicMessage::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TopicMessage::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.expires_at)
  return expires_at_;
}
void TopicMessage::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.expires_at)
}

// optional string handle = 6;
void TopicMessage::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::handle() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.handle)
}
void TopicMessage::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.handle)
}
void TopicMessage::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.handle)
}
::std::string* TopicMessage::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_handle() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.handle)
}

// optional int64 type = 7;
void TopicMessage::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TopicMessage::type() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.type)
  return type_;
}
void TopicMessage::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.type)
}

// optional string data = 8;
void TopicMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::data() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.data)
}
void TopicMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.data)
}
void TopicMessage::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.data)
}
::std::string* TopicMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_data() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.data)
}

inline const TopicMessage* TopicMessage::internal_default_instance() {
  return &TopicMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessagesList::kUserIdFieldNumber;
const int TTopicMessagesList::kRoomFieldNumber;
const int TTopicMessagesList::kGroupIdFieldNumber;
const int TTopicMessagesList::kCursorFieldNumber;
const int TTopicMessagesList::kForwardFieldNumber;
const int TTopicMessagesList::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessagesList::TTopicMessagesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessagesList)
}

void TTopicMessagesList::InitAsDefaultInstance() {
  TTopicMessagesList_default_oneof_instance_->user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicMessagesList_default_oneof_instance_->room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicMessagesList_default_oneof_instance_->group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TTopicMessagesList::TTopicMessagesList(const TTopicMessagesList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessagesList)
}

void TTopicMessagesList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, reinterpret_cast<char*>(&forward_) -
    reinterpret_cast<char*>(&limit_) + sizeof(forward_));
  clear_has_id();
  _cached_size_ = 0;
}

TTopicMessagesList::~TTopicMessagesList() {
  // @@protoc_insertion_point(destructor:server.TTopicMessagesList)
  SharedDtor();
}

void TTopicMessagesList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_id()) {
    clear_id();
  }
}

void TTopicMessagesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessagesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessagesList_descriptor_;
}

const TTopicMessagesList& TTopicMessagesList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessagesList> TTopicMessagesList_default_instance_;

TTopicMessagesList* TTopicMessagesList::New(::google::protobuf::Arena* arena) const {
  TTopicMessagesList* n = new TTopicMessagesList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessagesList::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TTopicMessagesList)
  switch (id_case()) {
    case kUserId: {
      id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRoom: {
      id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGroupId: {
      id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TTopicMessagesList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessagesList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TTopicMessagesList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TTopicMessagesList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(limit_, forward_);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_id();
}

bool TTopicMessagesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessagesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessagesList.user_id"));
        } else {
          goto handle_unusual;
        }
        goto after_group_id;
        break;
      }

      // optional string room = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessagesList.room"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional string group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessagesList.group_id"));
        } else {
          goto handle_unusual;
        }
       after_group_id:
        if (input->ExpectTag(34)) goto parse_cursor;
        break;
      }

      // optional string cursor = 4;
      case 4: {
        if (tag == 34) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessagesList.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_forward;
        break;
      }

      // optional bool forward = 5;
      case 5: {
        if (tag == 40) {
         parse_forward:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }

      // optional int64 limit = 6;
      case 6: {
        if (tag == 48) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessagesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessagesList)
  return false;
#undef DO_
}

void TTopicMessagesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessagesList)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  // optional string group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_id(), output);
  }

  // optional string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cursor(), output);
  }

  // optional bool forward = 5;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forward(), output);
  }

  // optional int64 limit = 6;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessagesList)
}

::google::protobuf::uint8* TTopicMessagesList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessagesList)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  // optional string group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_id(), target);
  }

  // optional string cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessagesList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cursor(), target);
  }

  // optional bool forward = 5;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forward(), target);
  }

  // optional int64 limit = 6;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessagesList)
  return target;
}

size_t TTopicMessagesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessagesList)
  size_t total_size = 0;

  // optional string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // optional bool forward = 5;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  switch (id_case()) {
    // optional string user_id = 1;
    case kUserId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
      break;
    }
    // optional string room = 2;
    case kRoom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room());
      break;
    }
    // optional string group_id = 3;
    case kGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessagesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessagesList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessagesList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessagesList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessagesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessagesList)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessagesList::MergeFrom(const TTopicMessagesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessagesList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessagesList::UnsafeMergeFrom(const TTopicMessagesList& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUserId: {
      set_user_id(from.user_id());
      break;
    }
    case kRoom: {
      set_room(from.room());
      break;
    }
    case kGroupId: {
      set_group_id(from.group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void TTopicMessagesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessagesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessagesList::CopyFrom(const TTopicMessagesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessagesList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessagesList::IsInitialized() const {

  return true;
}

void TTopicMessagesList::Swap(TTopicMessagesList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessagesList::InternalSwap(TTopicMessagesList* other) {
  cursor_.Swap(&other->cursor_);
  std::swap(forward_, other->forward_);
  std::swap(limit_, other->limit_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessagesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessagesList_descriptor_;
  metadata.reflection = TTopicMessagesList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessagesList

// optional string user_id = 1;
bool TTopicMessagesList::has_user_id() const {
  return id_case() == kUserId;
}
void TTopicMessagesList::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
void TTopicMessagesList::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicMessagesList::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicMessagesList::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
}
void TTopicMessagesList::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.user_id)
}
void TTopicMessagesList::set_user_id(const char* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.user_id)
}
::std::string* TTopicMessagesList::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicMessagesList::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.user_id)
}

// optional string room = 2;
bool TTopicMessagesList::has_room() const {
  return id_case() == kRoom;
}
void TTopicMessagesList::set_has_room() {
  _oneof_case_[0] = kRoom;
}
void TTopicMessagesList::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicMessagesList::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicMessagesList::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
}
void TTopicMessagesList::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.room)
}
void TTopicMessagesList::set_room(const char* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.room)
}
::std::string* TTopicMessagesList::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicMessagesList::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.room)
}

// optional string group_id = 3;
bool TTopicMessagesList::has_group_id() const {
  return id_case() == kGroupId;
}
void TTopicMessagesList::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
void TTopicMessagesList::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicMessagesList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicMessagesList::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
}
void TTopicMessagesList::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.group_id)
}
void TTopicMessagesList::set_group_id(const char* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.group_id)
}
::std::string* TTopicMessagesList::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicMessagesList::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.group_id)
}

// optional string cursor = 4;
void TTopicMessagesList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessagesList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessagesList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.cursor)
}
void TTopicMessagesList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.cursor)
}
void TTopicMessagesList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.cursor)
}
::std::string* TTopicMessagesList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessagesList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.cursor)
}

// optional bool forward = 5;
void TTopicMessagesList::clear_forward() {
  forward_ = false;
}
bool TTopicMessagesList::forward() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.forward)
  return forward_;
}
void TTopicMessagesList::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.forward)
}

// optional int64 limit = 6;
void TTopicMessagesList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TTopicMessagesList::limit() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.limit)
  return limit_;
}
void TTopicMessagesList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.limit)
}

bool TTopicMessagesList::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TTopicMessagesList::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TTopicMessagesList::IdCase TTopicMessagesList::id_case() const {
  return TTopicMessagesList::IdCase(_oneof_case_[0]);
}
inline const TTopicMessagesList* TTopicMessagesList::internal_default_instance() {
  return &TTopicMessagesList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessages::kMessagesFieldNumber;
const int TTopicMessages::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessages::TTopicMessages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessages)
}

void TTopicMessages::InitAsDefaultInstance() {
}

TTopicMessages::TTopicMessages(const TTopicMessages& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessages)
}

void TTopicMessages::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TTopicMessages::~TTopicMessages() {
  // @@protoc_insertion_point(destructor:server.TTopicMessages)
  SharedDtor();
}

void TTopicMessages::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TTopicMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessages_descriptor_;
}

const TTopicMessages& TTopicMessages::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessages> TTopicMessages_default_instance_;

TTopicMessages* TTopicMessages::New(::google::protobuf::Arena* arena) const {
  TTopicMessages* n = new TTopicMessages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessages)
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.Clear();
}

bool TTopicMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TopicMessage messages = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional string cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessages.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessages)
  return false;
#undef DO_
}

void TTopicMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessages)
  // repeated .server.TopicMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessages.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessages)
}

::google::protobuf::uint8* TTopicMessages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessages)
  // repeated .server.TopicMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->messages(i), false, target);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessages.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessages)
  return target;
}

size_t TTopicMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessages)
  size_t total_size = 0;

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // repeated .server.TopicMessage messages = 1;
  {
    unsigned int count = this->messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessages)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessages)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessages::MergeFrom(const TTopicMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessages)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessages::UnsafeMergeFrom(const TTopicMessages& from) {
  GOOGLE_DCHECK(&from != this);
  messages_.MergeFrom(from.messages_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TTopicMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessages::CopyFrom(const TTopicMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessages)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessages::IsInitialized() const {

  return true;
}

void TTopicMessages::Swap(TTopicMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessages::InternalSwap(TTopicMessages* other) {
  messages_.UnsafeArenaSwap(&other->messages_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessages_descriptor_;
  metadata.reflection = TTopicMessages_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessages

// repeated .server.TopicMessage messages = 1;
int TTopicMessages::messages_size() const {
  return messages_.size();
}
void TTopicMessages::clear_messages() {
  messages_.Clear();
}
const ::server::TopicMessage& TTopicMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.messages)
  return messages_.Get(index);
}
::server::TopicMessage* TTopicMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.messages)
  return messages_.Mutable(index);
}
::server::TopicMessage* TTopicMessages::add_messages() {
  // @@protoc_insertion_point(field_add:server.TTopicMessages.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TopicMessage >*
TTopicMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicMessages.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TopicMessage >&
TTopicMessages::messages() const {
  // @@protoc_insertion_point(field_list:server.TTopicMessages.messages)
  return messages_;
}

// optional string cursor = 2;
void TTopicMessages::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessages::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessages::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessages.cursor)
}
void TTopicMessages::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessages.cursor)
}
void TTopicMessages::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessages.cursor)
}
::std::string* TTopicMessages::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessages::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessages.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessages::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessages.cursor)
}

inline const TTopicMessages* TTopicMessages::internal_default_instance() {
  return &TTopicMessages_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicPresence::kTopicFieldNumber;
const int TopicPresence::kJoinsFieldNumber;
const int TopicPresence::kLeavesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicPresence::TopicPresence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TopicPresence)
}

void TopicPresence::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
}

TopicPresence::TopicPresence(const TopicPresence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TopicPresence)
}

void TopicPresence::SharedCtor() {
  topic_ = NULL;
  _cached_size_ = 0;
}

TopicPresence::~TopicPresence() {
  // @@protoc_insertion_point(destructor:server.TopicPresence)
  SharedDtor();
}

void TopicPresence::SharedDtor() {
  if (this != &TopicPresence_default_instance_.get()) {
    delete topic_;
  }
}

void TopicPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicPresence_descriptor_;
}

const TopicPresence& TopicPresence::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopicPresence> TopicPresence_default_instance_;

TopicPresence* TopicPresence::New(::google::protobuf::Arena* arena) const {
  TopicPresence* n = new TopicPresence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TopicPresence)
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  joins_.Clear();
  leaves_.Clear();
}

bool TopicPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TopicPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_joins;
        break;
      }

      // repeated .server.UserPresence joins = 2;
      case 2: {
        if (tag == 18) {
         parse_joins:
          DO_(input->IncrementRecursionDepth());
         parse_loop_joins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_joins;
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .server.UserPresence leaves = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_leaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_leaves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TopicPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TopicPresence)
  return false;
#undef DO_
}

void TopicPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TopicPresence)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joins(i), output);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaves(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TopicPresence)
}

::google::protobuf::uint8* TopicPresence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TopicPresence)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->joins(i), false, target);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->leaves(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TopicPresence)
  return target;
}

size_t TopicPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TopicPresence)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // repeated .server.UserPresence joins = 2;
  {
    unsigned int count = this->joins_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joins(i));
    }
  }

  // repeated .server.UserPresence leaves = 3;
  {
    unsigned int count = this->leaves_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaves(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicPresence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TopicPresence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopicPresence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicPresence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicPresence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicPresence)
    UnsafeMergeFrom(*source);
  }
}

void TopicPresence::MergeFrom(const TopicPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicPresence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopicPresence::UnsafeMergeFrom(const TopicPresence& from) {
  GOOGLE_DCHECK(&from != this);
  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
}

void TopicPresence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TopicPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicPresence::CopyFrom(const TopicPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicPresence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopicPresence::IsInitialized() const {

  return true;
}

void TopicPresence::Swap(TopicPresence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicPresence::InternalSwap(TopicPresence* other) {
  std::swap(topic_, other->topic_);
  joins_.UnsafeArenaSwap(&other->joins_);
  leaves_.UnsafeArenaSwap(&other->leaves_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicPresence_descriptor_;
  metadata.reflection = TopicPresence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicPresence

// optional .server.TopicId topic = 1;
bool TopicPresence::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TopicPresence::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TopicPresence::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TopicPresence::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.topic)
  return topic_;
}
::server::TopicId* TopicPresence::release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicPresence.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TopicPresence::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicPresence.topic)
}

// repeated .server.UserPresence joins = 2;
int TopicPresence::joins_size() const {
  return joins_.size();
}
void TopicPresence::clear_joins() {
  joins_.Clear();
}
const ::server::UserPresence& TopicPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.joins)
  return joins_.Get(index);
}
::server::UserPresence* TopicPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.joins)
  return joins_.Mutable(index);
}
::server::UserPresence* TopicPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.joins)
  return joins_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.joins)
  return &joins_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
int TopicPresence::leaves_size() const {
  return leaves_.size();
}
void TopicPresence::clear_leaves() {
  leaves_.Clear();
}
const ::server::UserPresence& TopicPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.leaves)
  return leaves_.Get(index);
}
::server::UserPresence* TopicPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.leaves)
  return leaves_.Mutable(index);
}
::server::UserPresence* TopicPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.leaves)
  return leaves_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.leaves)
  return &leaves_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.leaves)
  return leaves_;
}

inline const TopicPresence* TopicPresence::internal_default_instance() {
  return &TopicPresence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyPair_StringSet::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyPair_StringSet::PropertyPair_StringSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.PropertyPair.StringSet)
}

void PropertyPair_StringSet::InitAsDefaultInstance() {
}

PropertyPair_StringSet::PropertyPair_StringSet(const PropertyPair_StringSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.PropertyPair.StringSet)
}

void PropertyPair_StringSet::SharedCtor() {
  _cached_size_ = 0;
}

PropertyPair_StringSet::~PropertyPair_StringSet() {
  // @@protoc_insertion_point(destructor:server.PropertyPair.StringSet)
  SharedDtor();
}

void PropertyPair_StringSet::SharedDtor() {
}

void PropertyPair_StringSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyPair_StringSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyPair_StringSet_descriptor_;
}

const PropertyPair_StringSet& PropertyPair_StringSet::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PropertyPair_StringSet> PropertyPair_StringSet_default_instance_;

PropertyPair_StringSet* PropertyPair_StringSet::New(::google::protobuf::Arena* arena) const {
  PropertyPair_StringSet* n = new PropertyPair_StringSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyPair_StringSet::Clear() {
// @@protoc_insertion_point(message_clear_start:server.PropertyPair.StringSet)
  values_.Clear();
}

bool PropertyPair_StringSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.PropertyPair.StringSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (tag == 10) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.PropertyPair.StringSet.values"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.PropertyPair.StringSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.PropertyPair.StringSet)
  return false;
#undef DO_
}

void PropertyPair_StringSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.PropertyPair.StringSet)
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.PropertyPair.StringSet.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.PropertyPair.StringSet)
}

::google::protobuf::uint8* PropertyPair_StringSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.PropertyPair.StringSet)
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.PropertyPair.StringSet.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.PropertyPair.StringSet)
  return target;
}

size_t PropertyPair_StringSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.PropertyPair.StringSet)
  size_t total_size = 0;

  // repeated string values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyPair_StringSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.PropertyPair.StringSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PropertyPair_StringSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyPair_StringSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.PropertyPair.StringSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.PropertyPair.StringSet)
    UnsafeMergeFrom(*source);
  }
}

void PropertyPair_StringSet::MergeFrom(const PropertyPair_StringSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.PropertyPair.StringSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PropertyPair_StringSet::UnsafeMergeFrom(const PropertyPair_StringSet& from) {
  GOOGLE_DCHECK(&from != this);
  values_.UnsafeMergeFrom(from.values_);
}

void PropertyPair_StringSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.PropertyPair.StringSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyPair_StringSet::CopyFrom(const PropertyPair_StringSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.PropertyPair.StringSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PropertyPair_StringSet::IsInitialized() const {

  return true;
}

void PropertyPair_StringSet::Swap(PropertyPair_StringSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyPair_StringSet::InternalSwap(PropertyPair_StringSet* other) {
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyPair_StringSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyPair_StringSet_descriptor_;
  metadata.reflection = PropertyPair_StringSet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyPair::kKeyFieldNumber;
const int PropertyPair::kStringSetFieldNumber;
const int PropertyPair::kBoolValueFieldNumber;
const int PropertyPair::kIntValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyPair::PropertyPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.PropertyPair)
}

void PropertyPair::InitAsDefaultInstance() {
  PropertyPair_default_oneof_instance_->stringset_ = const_cast< ::server::PropertyPair_StringSet*>(
      ::server::PropertyPair_StringSet::internal_default_instance());
  PropertyPair_default_oneof_instance_->boolvalue_ = false;
  PropertyPair_default_oneof_instance_->intvalue_ = GOOGLE_LONGLONG(0);
}

PropertyPair::PropertyPair(const PropertyPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.PropertyPair)
}

void PropertyPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
  _cached_size_ = 0;
}

PropertyPair::~PropertyPair() {
  // @@protoc_insertion_point(destructor:server.PropertyPair)
  SharedDtor();
}

void PropertyPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void PropertyPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyPair_descriptor_;
}

const PropertyPair& PropertyPair::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PropertyPair> PropertyPair_default_instance_;

PropertyPair* PropertyPair::New(::google::protobuf::Arena* arena) const {
  PropertyPair* n = new PropertyPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyPair::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:server.PropertyPair)
  switch (value_case()) {
    case kStringSet: {
      delete value_.stringset_;
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void PropertyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:server.PropertyPair)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool PropertyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.PropertyPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.PropertyPair.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stringSet;
        break;
      }

      // optional .server.PropertyPair.StringSet stringSet = 2;
      case 2: {
        if (tag == 18) {
         parse_stringSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringset()));
        } else {
          goto handle_unusual;
        }
        goto after_intvalue;
        break;
      }

      // optional bool boolValue = 3;
      case 3: {
        if (tag == 24) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_intValue;
        break;
      }

      // optional int64 intValue = 4;
      case 4: {
        if (tag == 32) {
         parse_intValue:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_unusual;
        }
       after_intvalue:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.PropertyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.PropertyPair)
  return false;
#undef DO_
}

void PropertyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.PropertyPair)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.PropertyPair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .server.PropertyPair.StringSet stringSet = 2;
  if (has_stringset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.stringset_, output);
  }

  // optional bool boolValue = 3;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->boolvalue(), output);
  }

  // optional int64 intValue = 4;
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->intvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.PropertyPair)
}

::google::protobuf::uint8* PropertyPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.PropertyPair)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.PropertyPair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .server.PropertyPair.StringSet stringSet = 2;
  if (has_stringset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *value_.stringset_, false, target);
  }

  // optional bool boolValue = 3;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->boolvalue(), target);
  }

  // optional int64 intValue = 4;
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->intvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.PropertyPair)
  return target;
}

size_t PropertyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.PropertyPair)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  switch (value_case()) {
    // optional .server.PropertyPair.StringSet stringSet = 2;
    case kStringSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.stringset_);
      break;
    }
    // optional bool boolValue = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // optional int64 intValue = 4;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.PropertyPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PropertyPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.PropertyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.PropertyPair)
    UnsafeMergeFrom(*source);
  }
}

void PropertyPair::MergeFrom(const PropertyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.PropertyPair)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PropertyPair::UnsafeMergeFrom(const PropertyPair& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.value_case()) {
    case kStringSet: {
      mutable_stringset()->::server::PropertyPair_StringSet::MergeFrom(from.stringset());
      break;
    }
    case kBoolValue: {
      set_boolvalue(from.boolvalue());
      break;
    }
    case kIntValue: {
      set_intvalue(from.intvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void PropertyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.PropertyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyPair::CopyFrom(const PropertyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.PropertyPair)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PropertyPair::IsInitialized() const {

  return true;
}

void PropertyPair::Swap(PropertyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyPair::InternalSwap(PropertyPair* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyPair_descriptor_;
  metadata.reflection = PropertyPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyPair_StringSet

// repeated string values = 1;
int PropertyPair_StringSet::values_size() const {
  return values_.size();
}
void PropertyPair_StringSet::clear_values() {
  values_.Clear();
}
const ::std::string& PropertyPair_StringSet::values(int index) const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.StringSet.values)
  return values_.Get(index);
}
::std::string* PropertyPair_StringSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.StringSet.values)
  return values_.Mutable(index);
}
void PropertyPair_StringSet::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.PropertyPair.StringSet.values)
  values_.Mutable(index)->assign(value);
}
void PropertyPair_StringSet::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.PropertyPair.StringSet.values)
}
void PropertyPair_StringSet::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.PropertyPair.StringSet.values)
}
::std::string* PropertyPair_StringSet::add_values() {
  // @@protoc_insertion_point(field_add_mutable:server.PropertyPair.StringSet.values)
  return values_.Add();
}
void PropertyPair_StringSet::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.PropertyPair.StringSet.values)
}
void PropertyPair_StringSet::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.PropertyPair.StringSet.values)
}
void PropertyPair_StringSet::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.PropertyPair.StringSet.values)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PropertyPair_StringSet::values() const {
  // @@protoc_insertion_point(field_list:server.PropertyPair.StringSet.values)
  return values_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PropertyPair_StringSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:server.PropertyPair.StringSet.values)
  return &values_;
}

inline const PropertyPair_StringSet* PropertyPair_StringSet::internal_default_instance() {
  return &PropertyPair_StringSet_default_instance_.get();
}
// -------------------------------------------------------------------

// PropertyPair

// optional string key = 1;
void PropertyPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PropertyPair::key() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.PropertyPair.key)
}
void PropertyPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.PropertyPair.key)
}
void PropertyPair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.PropertyPair.key)
}
::std::string* PropertyPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyPair::release_key() {
  // @@protoc_insertion_point(field_release:server.PropertyPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:server.PropertyPair.key)
}

// optional .server.PropertyPair.StringSet stringSet = 2;
bool PropertyPair::has_stringset() const {
  return value_case() == kStringSet;
}
void PropertyPair::set_has_stringset() {
  _oneof_case_[0] = kStringSet;
}
void PropertyPair::clear_stringset() {
  if (has_stringset()) {
    delete value_.stringset_;
    clear_has_value();
  }
}
 const ::server::PropertyPair_StringSet& PropertyPair::stringset() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.stringSet)
  return has_stringset()
      ? *value_.stringset_
      : ::server::PropertyPair_StringSet::default_instance();
}
::server::PropertyPair_StringSet* PropertyPair::mutable_stringset() {
  if (!has_stringset()) {
    clear_value();
    set_has_stringset();
    value_.stringset_ = new ::server::PropertyPair_StringSet;
  }
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.stringSet)
  return value_.stringset_;
}
::server::PropertyPair_StringSet* PropertyPair::release_stringset() {
  // @@protoc_insertion_point(field_release:server.PropertyPair.stringSet)
  if (has_stringset()) {
    clear_has_value();
    ::server::PropertyPair_StringSet* temp = value_.stringset_;
    value_.stringset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PropertyPair::set_allocated_stringset(::server::PropertyPair_StringSet* stringset) {
  clear_value();
  if (stringset) {
    set_has_stringset();
    value_.stringset_ = stringset;
  }
  // @@protoc_insertion_point(field_set_allocated:server.PropertyPair.stringSet)
}

// optional bool boolValue = 3;
bool PropertyPair::has_boolvalue() const {
  return value_case() == kBoolValue;
}
void PropertyPair::set_has_boolvalue() {
  _oneof_case_[0] = kBoolValue;
}
void PropertyPair::clear_boolvalue() {
  if (has_boolvalue()) {
    value_.boolvalue_ = false;
    clear_has_value();
  }
}
bool PropertyPair::boolvalue() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.boolValue)
  if (has_boolvalue()) {
    return value_.boolvalue_;
  }
  return false;
}
void PropertyPair::set_boolvalue(bool value) {
  if (!has_boolvalue()) {
    clear_value();
    set_has_boolvalue();
  }
  value_.boolvalue_ = value;
  // @@protoc_insertion_point(field_set:server.PropertyPair.boolValue)
}

// optional int64 intValue = 4;
bool PropertyPair::has_intvalue() const {
  return value_case() == kIntValue;
}
void PropertyPair::set_has_intvalue() {
  _oneof_case_[0] = kIntValue;
}
void PropertyPair::clear_intvalue() {
  if (has_intvalue()) {
    value_.intvalue_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 PropertyPair::intvalue() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.intValue)
  if (has_intvalue()) {
    return value_.intvalue_;
  }
  return GOOGLE_LONGLONG(0);
}
void PropertyPair::set_intvalue(::google::protobuf::int64 value) {
  if (!has_intvalue()) {
    clear_value();
    set_has_intvalue();
  }
  value_.intvalue_ = value;
  // @@protoc_insertion_point(field_set:server.PropertyPair.intValue)
}

bool PropertyPair::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void PropertyPair::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
PropertyPair::ValueCase PropertyPair::value_case() const {
  return PropertyPair::ValueCase(_oneof_case_[0]);
}
inline const PropertyPair* PropertyPair::internal_default_instance() {
  return &PropertyPair_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchmakeFilter_TermFilter::kTermsFieldNumber;
const int MatchmakeFilter_TermFilter::kMatchAllTermsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchmakeFilter_TermFilter::MatchmakeFilter_TermFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchmakeFilter.TermFilter)
}

void MatchmakeFilter_TermFilter::InitAsDefaultInstance() {
}

MatchmakeFilter_TermFilter::MatchmakeFilter_TermFilter(const MatchmakeFilter_TermFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchmakeFilter.TermFilter)
}

void MatchmakeFilter_TermFilter::SharedCtor() {
  matchallterms_ = false;
  _cached_size_ = 0;
}

MatchmakeFilter_TermFilter::~MatchmakeFilter_TermFilter() {
  // @@protoc_insertion_point(destructor:server.MatchmakeFilter.TermFilter)
  SharedDtor();
}

void MatchmakeFilter_TermFilter::SharedDtor() {
}

void MatchmakeFilter_TermFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakeFilter_TermFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakeFilter_TermFilter_descriptor_;
}

const MatchmakeFilter_TermFilter& MatchmakeFilter_TermFilter::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchmakeFilter_TermFilter> MatchmakeFilter_TermFilter_default_instance_;

MatchmakeFilter_TermFilter* MatchmakeFilter_TermFilter::New(::google::protobuf::Arena* arena) const {
  MatchmakeFilter_TermFilter* n = new MatchmakeFilter_TermFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchmakeFilter_TermFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchmakeFilter.TermFilter)
  matchallterms_ = false;
  terms_.Clear();
}

bool MatchmakeFilter_TermFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchmakeFilter.TermFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string terms = 1;
      case 1: {
        if (tag == 10) {
         parse_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_terms()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->terms(this->terms_size() - 1).data(),
            this->terms(this->terms_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchmakeFilter.TermFilter.terms"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_terms;
        if (input->ExpectTag(16)) goto parse_matchAllTerms;
        break;
      }

      // optional bool matchAllTerms = 2;
      case 2: {
        if (tag == 16) {
         parse_matchAllTerms:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matchallterms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchmakeFilter.TermFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchmakeFilter.TermFilter)
  return false;
#undef DO_
}

void MatchmakeFilter_TermFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchmakeFilter.TermFilter)
  // repeated string terms = 1;
  for (int i = 0; i < this->terms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->terms(i).data(), this->terms(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeFilter.TermFilter.terms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->terms(i), output);
  }

  // optional bool matchAllTerms = 2;
  if (this->matchallterms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->matchallterms(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchmakeFilter.TermFilter)
}

::google::protobuf::uint8* MatchmakeFilter_TermFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeFilter.TermFilter)
  // repeated string terms = 1;
  for (int i = 0; i < this->terms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->terms(i).data(), this->terms(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeFilter.TermFilter.terms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->terms(i), target);
  }

  // optional bool matchAllTerms = 2;
  if (this->matchallterms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->matchallterms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeFilter.TermFilter)
  return target;
}

size_t MatchmakeFilter_TermFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeFilter.TermFilter)
  size_t total_size = 0;

  // optional bool matchAllTerms = 2;
  if (this->matchallterms() != 0) {
    total_size += 1 + 1;
  }

  // repeated string terms = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->terms_size());
  for (int i = 0; i < this->terms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->terms(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakeFilter_TermFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeFilter.TermFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchmakeFilter_TermFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchmakeFilter_TermFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeFilter.TermFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeFilter.TermFilter)
    UnsafeMergeFrom(*source);
  }
}

void MatchmakeFilter_TermFilter::MergeFrom(const MatchmakeFilter_TermFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeFilter.TermFilter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchmakeFilter_TermFilter::UnsafeMergeFrom(const MatchmakeFilter_TermFilter& from) {
  GOOGLE_DCHECK(&from != this);
  terms_.UnsafeMergeFrom(from.terms_);
  if (from.matchallterms() != 0) {
    set_matchallterms(from.matchallterms());
  }
}

void MatchmakeFilter_TermFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeFilter.TermFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakeFilter_TermFilter::CopyFrom(const MatchmakeFilter_TermFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeFilter.TermFilter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchmakeFilter_TermFilter::IsInitialized() const {

  return true;
}

void MatchmakeFilter_TermFilter::Swap(MatchmakeFilter_TermFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchmakeFilter_TermFilter::InternalSwap(MatchmakeFilter_TermFilter* other) {
  terms_.UnsafeArenaSwap(&other->terms_);
  std::swap(matchallterms_, other->matchallterms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchmakeFilter_TermFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakeFilter_TermFilter_descriptor_;
  metadata.reflection = MatchmakeFilter_TermFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchmakeFilter_RangeFilter::kLowerBoundFieldNumber;
const int MatchmakeFilter_RangeFilter::kUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchmakeFilter_RangeFilter::MatchmakeFilter_RangeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchmakeFilter.RangeFilter)
}

void MatchmakeFilter_RangeFilter::InitAsDefaultInstance() {
}

MatchmakeFilter_RangeFilter::MatchmakeFilter_RangeFilter(const MatchmakeFilter_RangeFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchmakeFilter.RangeFilter)
}

void MatchmakeFilter_RangeFilter::SharedCtor() {
  ::memset(&lower_bound_, 0, reinterpret_cast<char*>(&upper_bound_) -
    reinterpret_cast<char*>(&lower_bound_) + sizeof(upper_bound_));
  _cached_size_ = 0;
}

MatchmakeFilter_RangeFilter::~MatchmakeFilter_RangeFilter() {
  // @@protoc_insertion_point(destructor:server.MatchmakeFilter.RangeFilter)
  SharedDtor();
}

void MatchmakeFilter_RangeFilter::SharedDtor() {
}

void MatchmakeFilter_RangeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakeFilter_RangeFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakeFilter_RangeFilter_descriptor_;
}

const MatchmakeFilter_RangeFilter& MatchmakeFilter_RangeFilter::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchmakeFilter_RangeFilter> MatchmakeFilter_RangeFilter_default_instance_;

MatchmakeFilter_RangeFilter* MatchmakeFilter_RangeFilter::New(::google::protobuf::Arena* arena) const {
  MatchmakeFilter_RangeFilter* n = new MatchmakeFilter_RangeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchmakeFilter_RangeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchmakeFilter.RangeFilter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MatchmakeFilter_RangeFilter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatchmakeFilter_RangeFilter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lower_bound_, upper_bound_);

#undef ZR_HELPER_
#undef ZR_

}

bool MatchmakeFilter_RangeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchmakeFilter.RangeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lower_bound = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lower_bound_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upper_bound;
        break;
      }

      // optional int64 upper_bound = 2;
      case 2: {
        if (tag == 16) {
         parse_upper_bound:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upper_bound_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchmakeFilter.RangeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchmakeFilter.RangeFilter)
  return false;
#undef DO_
}

void MatchmakeFilter_RangeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchmakeFilter.RangeFilter)
  // optional int64 lower_bound = 1;
  if (this->lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lower_bound(), output);
  }

  // optional int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upper_bound(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchmakeFilter.RangeFilter)
}

::google::protobuf::uint8* MatchmakeFilter_RangeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeFilter.RangeFilter)
  // optional int64 lower_bound = 1;
  if (this->lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lower_bound(), target);
  }

  // optional int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upper_bound(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeFilter.RangeFilter)
  return target;
}

size_t MatchmakeFilter_RangeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeFilter.RangeFilter)
  size_t total_size = 0;

  // optional int64 lower_bound = 1;
  if (this->lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lower_bound());
  }

  // optional int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upper_bound());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakeFilter_RangeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeFilter.RangeFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchmakeFilter_RangeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchmakeFilter_RangeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeFilter.RangeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeFilter.RangeFilter)
    UnsafeMergeFrom(*source);
  }
}

void MatchmakeFilter_RangeFilter::MergeFrom(const MatchmakeFilter_RangeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeFilter.RangeFilter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchmakeFilter_RangeFilter::UnsafeMergeFrom(const MatchmakeFilter_RangeFilter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.lower_bound() != 0) {
    set_lower_bound(from.lower_bound());
  }
  if (from.upper_bound() != 0) {
    set_upper_bound(from.upper_bound());
  }
}

void MatchmakeFilter_RangeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeFilter.RangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakeFilter_RangeFilter::CopyFrom(const MatchmakeFilter_RangeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeFilter.RangeFilter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchmakeFilter_RangeFilter::IsInitialized() const {

  return true;
}

void MatchmakeFilter_RangeFilter::Swap(MatchmakeFilter_RangeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchmakeFilter_RangeFilter::InternalSwap(MatchmakeFilter_RangeFilter* other) {
  std::swap(lower_bound_, other->lower_bound_);
  std::swap(upper_bound_, other->upper_bound_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchmakeFilter_RangeFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakeFilter_RangeFilter_descriptor_;
  metadata.reflection = MatchmakeFilter_RangeFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchmakeFilter::kNameFieldNumber;
const int MatchmakeFilter::kTermFieldNumber;
const int MatchmakeFilter::kRangeFieldNumber;
const int MatchmakeFilter::kCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchmakeFilter::MatchmakeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchmakeFilter)
}

void MatchmakeFilter::InitAsDefaultInstance() {
  MatchmakeFilter_default_oneof_instance_->term_ = const_cast< ::server::MatchmakeFilter_TermFilter*>(
      ::server::MatchmakeFilter_TermFilter::internal_default_instance());
  MatchmakeFilter_default_oneof_instance_->range_ = const_cast< ::server::MatchmakeFilter_RangeFilter*>(
      ::server::MatchmakeFilter_RangeFilter::internal_default_instance());
  MatchmakeFilter_default_oneof_instance_->check_ = false;
}

MatchmakeFilter::MatchmakeFilter(const MatchmakeFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchmakeFilter)
}

void MatchmakeFilter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
  _cached_size_ = 0;
}

MatchmakeFilter::~MatchmakeFilter() {
  // @@protoc_insertion_point(destructor:server.MatchmakeFilter)
  SharedDtor();
}

void MatchmakeFilter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void MatchmakeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakeFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakeFilter_descriptor_;
}

const MatchmakeFilter& MatchmakeFilter::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchmakeFilter> MatchmakeFilter_default_instance_;

MatchmakeFilter* MatchmakeFilter::New(::google::protobuf::Arena* arena) const {
  MatchmakeFilter* n = new MatchmakeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchmakeFilter::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:server.MatchmakeFilter)
  switch (value_case()) {
    case kTerm: {
      delete value_.term_;
      break;
    }
    case kRange: {
      delete value_.range_;
      break;
    }
    case kCheck: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void MatchmakeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchmakeFilter)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool MatchmakeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchmakeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchmakeFilter.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_term;
        break;
      }

      // optional .server.MatchmakeFilter.TermFilter term = 2;
      case 2: {
        if (tag == 18) {
         parse_term:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_term()));
        } else {
          goto handle_unusual;
        }
        goto after_check;
        break;
      }

      // optional .server.MatchmakeFilter.RangeFilter range = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_check;
        break;
      }

      // optional bool check = 4;
      case 4: {
        if (tag == 32) {
         parse_check:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
       after_check:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchmakeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchmakeFilter)
  return false;
#undef DO_
}

void MatchmakeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchmakeFilter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeFilter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .server.MatchmakeFilter.TermFilter term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.term_, output);
  }

  // optional .server.MatchmakeFilter.RangeFilter range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.range_, output);
  }

  // optional bool check = 4;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->check(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchmakeFilter)
}

::google::protobuf::uint8* MatchmakeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeFilter)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeFilter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .server.MatchmakeFilter.TermFilter term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *value_.term_, false, target);
  }

  // optional .server.MatchmakeFilter.RangeFilter range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *value_.range_, false, target);
  }

  // optional bool check = 4;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->check(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeFilter)
  return target;
}

size_t MatchmakeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeFilter)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (value_case()) {
    // optional .server.MatchmakeFilter.TermFilter term = 2;
    case kTerm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.term_);
      break;
    }
    // optional .server.MatchmakeFilter.RangeFilter range = 3;
    case kRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.range_);
      break;
    }
    // optional bool check = 4;
    case kCheck: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchmakeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchmakeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeFilter)
    UnsafeMergeFrom(*source);
  }
}

void MatchmakeFilter::MergeFrom(const MatchmakeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeFilter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchmakeFilter::UnsafeMergeFrom(const MatchmakeFilter& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.value_case()) {
    case kTerm: {
      mutable_term()->::server::MatchmakeFilter_TermFilter::MergeFrom(from.term());
      break;
    }
    case kRange: {
      mutable_range()->::server::MatchmakeFilter_RangeFilter::MergeFrom(from.range());
      break;
    }
    case kCheck: {
      set_check(from.check());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MatchmakeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakeFilter::CopyFrom(const MatchmakeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeFilter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchmakeFilter::IsInitialized() const {

  return true;
}

void MatchmakeFilter::Swap(MatchmakeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchmakeFilter::InternalSwap(MatchmakeFilter* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchmakeFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakeFilter_descriptor_;
  metadata.reflection = MatchmakeFilter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchmakeFilter_TermFilter

// repeated string terms = 1;
int MatchmakeFilter_TermFilter::terms_size() const {
  return terms_.size();
}
void MatchmakeFilter_TermFilter::clear_terms() {
  terms_.Clear();
}
const ::std::string& MatchmakeFilter_TermFilter::terms(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.TermFilter.terms)
  return terms_.Get(index);
}
::std::string* MatchmakeFilter_TermFilter::mutable_terms(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.TermFilter.terms)
  return terms_.Mutable(index);
}
void MatchmakeFilter_TermFilter::set_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.TermFilter.terms)
  terms_.Mutable(index)->assign(value);
}
void MatchmakeFilter_TermFilter::set_terms(int index, const char* value) {
  terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.MatchmakeFilter.TermFilter.terms)
}
void MatchmakeFilter_TermFilter::set_terms(int index, const char* value, size_t size) {
  terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeFilter.TermFilter.terms)
}
::std::string* MatchmakeFilter_TermFilter::add_terms() {
  // @@protoc_insertion_point(field_add_mutable:server.MatchmakeFilter.TermFilter.terms)
  return terms_.Add();
}
void MatchmakeFilter_TermFilter::add_terms(const ::std::string& value) {
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.MatchmakeFilter.TermFilter.terms)
}
void MatchmakeFilter_TermFilter::add_terms(const char* value) {
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.MatchmakeFilter.TermFilter.terms)
}
void MatchmakeFilter_TermFilter::add_terms(const char* value, size_t size) {
  terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.MatchmakeFilter.TermFilter.terms)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MatchmakeFilter_TermFilter::terms() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeFilter.TermFilter.terms)
  return terms_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MatchmakeFilter_TermFilter::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeFilter.TermFilter.terms)
  return &terms_;
}

// optional bool matchAllTerms = 2;
void MatchmakeFilter_TermFilter::clear_matchallterms() {
  matchallterms_ = false;
}
bool MatchmakeFilter_TermFilter::matchallterms() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.TermFilter.matchAllTerms)
  return matchallterms_;
}
void MatchmakeFilter_TermFilter::set_matchallterms(bool value) {
  
  matchallterms_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.TermFilter.matchAllTerms)
}

inline const MatchmakeFilter_TermFilter* MatchmakeFilter_TermFilter::internal_default_instance() {
  return &MatchmakeFilter_TermFilter_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeFilter_RangeFilter

// optional int64 lower_bound = 1;
void MatchmakeFilter_RangeFilter::clear_lower_bound() {
  lower_bound_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MatchmakeFilter_RangeFilter::lower_bound() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.RangeFilter.lower_bound)
  return lower_bound_;
}
void MatchmakeFilter_RangeFilter::set_lower_bound(::google::protobuf::int64 value) {
  
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.RangeFilter.lower_bound)
}

// optional int64 upper_bound = 2;
void MatchmakeFilter_RangeFilter::clear_upper_bound() {
  upper_bound_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MatchmakeFilter_RangeFilter::upper_bound() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.RangeFilter.upper_bound)
  return upper_bound_;
}
void MatchmakeFilter_RangeFilter::set_upper_bound(::google::protobuf::int64 value) {
  
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.RangeFilter.upper_bound)
}

inline const MatchmakeFilter_RangeFilter* MatchmakeFilter_RangeFilter::internal_default_instance() {
  return &MatchmakeFilter_RangeFilter_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeFilter

// optional string name = 1;
void MatchmakeFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchmakeFilter::name() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeFilter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.name)
}
void MatchmakeFilter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeFilter.name)
}
void MatchmakeFilter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeFilter.name)
}
::std::string* MatchmakeFilter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchmakeFilter::release_name() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.name)
}

// optional .server.MatchmakeFilter.TermFilter term = 2;
bool MatchmakeFilter::has_term() const {
  return value_case() == kTerm;
}
void MatchmakeFilter::set_has_term() {
  _oneof_case_[0] = kTerm;
}
void MatchmakeFilter::clear_term() {
  if (has_term()) {
    delete value_.term_;
    clear_has_value();
  }
}
 const ::server::MatchmakeFilter_TermFilter& MatchmakeFilter::term() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.term)
  return has_term()
      ? *value_.term_
      : ::server::MatchmakeFilter_TermFilter::default_instance();
}
::server::MatchmakeFilter_TermFilter* MatchmakeFilter::mutable_term() {
  if (!has_term()) {
    clear_value();
    set_has_term();
    value_.term_ = new ::server::MatchmakeFilter_TermFilter;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.term)
  return value_.term_;
}
::server::MatchmakeFilter_TermFilter* MatchmakeFilter::release_term() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.term)
  if (has_term()) {
    clear_has_value();
    ::server::MatchmakeFilter_TermFilter* temp = value_.term_;
    value_.term_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MatchmakeFilter::set_allocated_term(::server::MatchmakeFilter_TermFilter* term) {
  clear_value();
  if (term) {
    set_has_term();
    value_.term_ = term;
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.term)
}

// optional .server.MatchmakeFilter.RangeFilter range = 3;
bool MatchmakeFilter::has_range() const {
  return value_case() == kRange;
}
void MatchmakeFilter::set_has_range() {
  _oneof_case_[0] = kRange;
}
void MatchmakeFilter::clear_range() {
  if (has_range()) {
    delete value_.range_;
    clear_has_value();
  }
}
 const ::server::MatchmakeFilter_RangeFilter& MatchmakeFilter::range() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.range)
  return has_range()
      ? *value_.range_
      : ::server::MatchmakeFilter_RangeFilter::default_instance();
}
::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::mutable_range() {
  if (!has_range()) {
    clear_value();
    set_has_range();
    value_.range_ = new ::server::MatchmakeFilter_RangeFilter;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.range)
  return value_.range_;
}
::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::release_range() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.range)
  if (has_range()) {
    clear_has_value();
    ::server::MatchmakeFilter_RangeFilter* temp = value_.range_;
    value_.range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MatchmakeFilter::set_allocated_range(::server::MatchmakeFilter_RangeFilter* range) {
  clear_value();
  if (range) {
    set_has_range();
    value_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.range)
}

// optional bool check = 4;
bool MatchmakeFilter::has_check() const {
  return value_case() == kCheck;
}
void MatchmakeFilter::set_has_check() {
  _oneof_case_[0] = kCheck;
}
void MatchmakeFilter::clear_check() {
  if (has_check()) {
    value_.check_ = false;
    clear_has_value();
  }
}
bool MatchmakeFilter::check() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.check)
  if (has_check()) {
    return value_.check_;
  }
  return false;
}
void MatchmakeFilter::set_check(bool value) {
  if (!has_check()) {
    clear_value();
    set_has_check();
  }
  value_.check_ = value;
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.check)
}

bool MatchmakeFilter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void MatchmakeFilter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
MatchmakeFilter::ValueCase MatchmakeFilter::value_case() const {
  return MatchmakeFilter::ValueCase(_oneof_case_[0]);
}
inline const MatchmakeFilter* MatchmakeFilter::internal_default_instance() {
  return &MatchmakeFilter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchmakeAdd::kRequiredCountFieldNumber;
const int TMatchmakeAdd::kFiltersFieldNumber;
const int TMatchmakeAdd::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchmakeAdd::TMatchmakeAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchmakeAdd)
}

void TMatchmakeAdd::InitAsDefaultInstance() {
}

TMatchmakeAdd::TMatchmakeAdd(const TMatchmakeAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchmakeAdd)
}

void TMatchmakeAdd::SharedCtor() {
  required_count_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TMatchmakeAdd::~TMatchmakeAdd() {
  // @@protoc_insertion_point(destructor:server.TMatchmakeAdd)
  SharedDtor();
}

void TMatchmakeAdd::SharedDtor() {
}

void TMatchmakeAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchmakeAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchmakeAdd_descriptor_;
}

const TMatchmakeAdd& TMatchmakeAdd::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchmakeAdd> TMatchmakeAdd_default_instance_;

TMatchmakeAdd* TMatchmakeAdd::New(::google::protobuf::Arena* arena) const {
  TMatchmakeAdd* n = new TMatchmakeAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchmakeAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchmakeAdd)
  required_count_ = GOOGLE_LONGLONG(0);
  filters_.Clear();
  properties_.Clear();
}

bool TMatchmakeAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchmakeAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 required_count = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &required_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filters;
        break;
      }

      // repeated .server.MatchmakeFilter filters = 2;
      case 2: {
        if (tag == 18) {
         parse_filters:
          DO_(input->IncrementRecursionDepth());
         parse_loop_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_filters;
        if (input->ExpectTag(26)) goto parse_loop_properties;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .server.PropertyPair properties = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_properties;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchmakeAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchmakeAdd)
  return false;
#undef DO_
}

void TMatchmakeAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchmakeAdd)
  // optional int64 required_count = 1;
  if (this->required_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->required_count(), output);
  }

  // repeated .server.MatchmakeFilter filters = 2;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filters(i), output);
  }

  // repeated .server.PropertyPair properties = 3;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->properties(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchmakeAdd)
}

::google::protobuf::uint8* TMatchmakeAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchmakeAdd)
  // optional int64 required_count = 1;
  if (this->required_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->required_count(), target);
  }

  // repeated .server.MatchmakeFilter filters = 2;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->filters(i), false, target);
  }

  // repeated .server.PropertyPair properties = 3;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->properties(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchmakeAdd)
  return target;
}

size_t TMatchmakeAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchmakeAdd)
  size_t total_size = 0;

  // optional int64 required_count = 1;
  if (this->required_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->required_count());
  }

  // repeated .server.MatchmakeFilter filters = 2;
  {
    unsigned int count = this->filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(i));
    }
  }

  // repeated .server.PropertyPair properties = 3;
  {
    unsigned int count = this->properties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchmakeAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchmakeAdd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchmakeAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchmakeAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchmakeAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchmakeAdd)
    UnsafeMergeFrom(*source);
  }
}

void TMatchmakeAdd::MergeFrom(const TMatchmakeAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchmakeAdd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchmakeAdd::UnsafeMergeFrom(const TMatchmakeAdd& from) {
  GOOGLE_DCHECK(&from != this);
  filters_.MergeFrom(from.filters_);
  properties_.MergeFrom(from.properties_);
  if (from.required_count() != 0) {
    set_required_count(from.required_count());
  }
}

void TMatchmakeAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchmakeAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchmakeAdd::CopyFrom(const TMatchmakeAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchmakeAdd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchmakeAdd::IsInitialized() const {

  return true;
}

void TMatchmakeAdd::Swap(TMatchmakeAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchmakeAdd::InternalSwap(TMatchmakeAdd* other) {
  std::swap(required_count_, other->required_count_);
  filters_.UnsafeArenaSwap(&other->filters_);
  properties_.UnsafeArenaSwap(&other->properties_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchmakeAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchmakeAdd_descriptor_;
  metadata.reflection = TMatchmakeAdd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchmakeAdd

// optional int64 required_count = 1;
void TMatchmakeAdd::clear_required_count() {
  required_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TMatchmakeAdd::required_count() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.required_count)
  return required_count_;
}
void TMatchmakeAdd::set_required_count(::google::protobuf::int64 value) {
  
  required_count_ = value;
  // @@protoc_insertion_point(field_set:server.TMatchmakeAdd.required_count)
}

// repeated .server.MatchmakeFilter filters = 2;
int TMatchmakeAdd::filters_size() const {
  return filters_.size();
}
void TMatchmakeAdd::clear_filters() {
  filters_.Clear();
}
const ::server::MatchmakeFilter& TMatchmakeAdd::filters(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.filters)
  return filters_.Get(index);
}
::server::MatchmakeFilter* TMatchmakeAdd::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeAdd.filters)
  return filters_.Mutable(index);
}
::server::MatchmakeFilter* TMatchmakeAdd::add_filters() {
  // @@protoc_insertion_point(field_add:server.TMatchmakeAdd.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >*
TMatchmakeAdd::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchmakeAdd.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >&
TMatchmakeAdd::filters() const {
  // @@protoc_insertion_point(field_list:server.TMatchmakeAdd.filters)
  return filters_;
}

// repeated .server.PropertyPair properties = 3;
int TMatchmakeAdd::properties_size() const {
  return properties_.size();
}
void TMatchmakeAdd::clear_properties() {
  properties_.Clear();
}
const ::server::PropertyPair& TMatchmakeAdd::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.properties)
  return properties_.Get(index);
}
::server::PropertyPair* TMatchmakeAdd::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeAdd.properties)
  return properties_.Mutable(index);
}
::server::PropertyPair* TMatchmakeAdd::add_properties() {
  // @@protoc_insertion_point(field_add:server.TMatchmakeAdd.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::PropertyPair >*
TMatchmakeAdd::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchmakeAdd.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >&
TMatchmakeAdd::properties() const {
  // @@protoc_insertion_point(field_list:server.TMatchmakeAdd.properties)
  return properties_;
}

inline const TMatchmakeAdd* TMatchmakeAdd::internal_default_instance() {
  return &TMatchmakeAdd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchmakeTicket::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchmakeTicket::TMatchmakeTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchmakeTicket)
}

void TMatchmakeTicket::InitAsDefaultInstance() {
}

TMatchmakeTicket::TMatchmakeTicket(const TMatchmakeTicket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchmakeTicket)
}

void TMatchmakeTicket::SharedCtor() {
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TMatchmakeTicket::~TMatchmakeTicket() {
  // @@protoc_insertion_point(destructor:server.TMatchmakeTicket)
  SharedDtor();
}

void TMatchmakeTicket::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TMatchmakeTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchmakeTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchmakeTicket_descriptor_;
}

const TMatchmakeTicket& TMatchmakeTicket::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchmakeTicket> TMatchmakeTicket_default_instance_;

TMatchmakeTicket* TMatchmakeTicket::New(::google::protobuf::Arena* arena) const {
  TMatchmakeTicket* n = new TMatchmakeTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchmakeTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchmakeTicket)
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TMatchmakeTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchmakeTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ticket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TMatchmakeTicket.ticket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchmakeTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchmakeTicket)
  return false;
#undef DO_
}

void TMatchmakeTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchmakeTicket)
  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchmakeTicket.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticket(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchmakeTicket)
}

::google::protobuf::uint8* TMatchmakeTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchmakeTicket)
  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchmakeTicket.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchmakeTicket)
  return target;
}

size_t TMatchmakeTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchmakeTicket)
  size_t total_size = 0;

  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchmakeTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchmakeTicket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchmakeTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchmakeTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchmakeTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchmakeTicket)
    UnsafeMergeFrom(*source);
  }
}

void TMatchmakeTicket::MergeFrom(const TMatchmakeTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchmakeTicket)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchmakeTicket::UnsafeMergeFrom(const TMatchmakeTicket& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
}

void TMatchmakeTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchmakeTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchmakeTicket::CopyFrom(const TMatchmakeTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchmakeTicket)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchmakeTicket::IsInitialized() const {

  return true;
}

void TMatchmakeTicket::Swap(TMatchmakeTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchmakeTicket::InternalSwap(TMatchmakeTicket* other) {
  ticket_.Swap(&other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchmakeTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchmakeTicket_descriptor_;
  metadata.reflection = TMatchmakeTicket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchmakeTicket

// optional string ticket = 1;
void TMatchmakeTicket::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TMatchmakeTicket::ticket() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeTicket.ticket)
  return ticket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchmakeTicket::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchmakeTicket.ticket)
}
void TMatchmakeTicket::set_ticket(const char* value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchmakeTicket.ticket)
}
void TMatchmakeTicket::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchmakeTicket.ticket)
}
::std::string* TMatchmakeTicket::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeTicket.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchmakeTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:server.TMatchmakeTicket.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchmakeTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchmakeTicket.ticket)
}

inline const TMatchmakeTicket* TMatchmakeTicket::internal_default_instance() {
  return &TMatchmakeTicket_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchmakeRemove::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchmakeRemove::TMatchmakeRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchmakeRemove)
}

void TMatchmakeRemove::InitAsDefaultInstance() {
}

TMatchmakeRemove::TMatchmakeRemove(const TMatchmakeRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchmakeRemove)
}

void TMatchmakeRemove::SharedCtor() {
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TMatchmakeRemove::~TMatchmakeRemove() {
  // @@protoc_insertion_point(destructor:server.TMatchmakeRemove)
  SharedDtor();
}

void TMatchmakeRemove::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TMatchmakeRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchmakeRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchmakeRemove_descriptor_;
}

const TMatchmakeRemove& TMatchmakeRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchmakeRemove> TMatchmakeRemove_default_instance_;

TMatchmakeRemove* TMatchmakeRemove::New(::google::protobuf::Arena* arena) const {
  TMatchmakeRemove* n = new TMatchmakeRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchmakeRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchmakeRemove)
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TMatchmakeRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchmakeRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ticket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TMatchmakeRemove.ticket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchmakeRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchmakeRemove)
  return false;
#undef DO_
}

void TMatchmakeRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchmakeRemove)
  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchmakeRemove.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticket(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchmakeRemove)
}

::google::protobuf::uint8* TMatchmakeRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchmakeRemove)
  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchmakeRemove.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchmakeRemove)
  return target;
}

size_t TMatchmakeRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchmakeRemove)
  size_t total_size = 0;

  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchmakeRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchmakeRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchmakeRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchmakeRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchmakeRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchmakeRemove)
    UnsafeMergeFrom(*source);
  }
}

void TMatchmakeRemove::MergeFrom(const TMatchmakeRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchmakeRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchmakeRemove::UnsafeMergeFrom(const TMatchmakeRemove& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
}

void TMatchmakeRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchmakeRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchmakeRemove::CopyFrom(const TMatchmakeRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchmakeRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchmakeRemove::IsInitialized() const {

  return true;
}

void TMatchmakeRemove::Swap(TMatchmakeRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchmakeRemove::InternalSwap(TMatchmakeRemove* other) {
  ticket_.Swap(&other->ticket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchmakeRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchmakeRemove_descriptor_;
  metadata.reflection = TMatchmakeRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchmakeRemove

// optional string ticket = 1;
void TMatchmakeRemove::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TMatchmakeRemove::ticket() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeRemove.ticket)
  return ticket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchmakeRemove::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchmakeRemove.ticket)
}
void TMatchmakeRemove::set_ticket(const char* value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchmakeRemove.ticket)
}
void TMatchmakeRemove::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchmakeRemove.ticket)
}
::std::string* TMatchmakeRemove::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeRemove.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchmakeRemove::release_ticket() {
  // @@protoc_insertion_point(field_release:server.TMatchmakeRemove.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchmakeRemove::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchmakeRemove.ticket)
}

inline const TMatchmakeRemove* TMatchmakeRemove::internal_default_instance() {
  return &TMatchmakeRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchmakeMatched_UserProperty::kUserIdFieldNumber;
const int MatchmakeMatched_UserProperty::kPropertiesFieldNumber;
const int MatchmakeMatched_UserProperty::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchmakeMatched_UserProperty::MatchmakeMatched_UserProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchmakeMatched.UserProperty)
}

void MatchmakeMatched_UserProperty::InitAsDefaultInstance() {
}

MatchmakeMatched_UserProperty::MatchmakeMatched_UserProperty(const MatchmakeMatched_UserProperty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchmakeMatched.UserProperty)
}

void MatchmakeMatched_UserProperty::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MatchmakeMatched_UserProperty::~MatchmakeMatched_UserProperty() {
  // @@protoc_insertion_point(destructor:server.MatchmakeMatched.UserProperty)
  SharedDtor();
}

void MatchmakeMatched_UserProperty::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchmakeMatched_UserProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakeMatched_UserProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakeMatched_UserProperty_descriptor_;
}

const MatchmakeMatched_UserProperty& MatchmakeMatched_UserProperty::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchmakeMatched_UserProperty> MatchmakeMatched_UserProperty_default_instance_;

MatchmakeMatched_UserProperty* MatchmakeMatched_UserProperty::New(::google::protobuf::Arena* arena) const {
  MatchmakeMatched_UserProperty* n = new MatchmakeMatched_UserProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchmakeMatched_UserProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchmakeMatched.UserProperty)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.Clear();
  filters_.Clear();
}

bool MatchmakeMatched_UserProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchmakeMatched.UserProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchmakeMatched.UserProperty.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }

      // repeated .server.PropertyPair properties = 2;
      case 2: {
        if (tag == 18) {
         parse_properties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_properties;
        if (input->ExpectTag(26)) goto parse_loop_filters;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .server.MatchmakeFilter filters = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_filters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchmakeMatched.UserProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchmakeMatched.UserProperty)
  return false;
#undef DO_
}

void MatchmakeMatched_UserProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchmakeMatched.UserProperty)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeMatched.UserProperty.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // repeated .server.PropertyPair properties = 2;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->properties(i), output);
  }

  // repeated .server.MatchmakeFilter filters = 3;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchmakeMatched.UserProperty)
}

::google::protobuf::uint8* MatchmakeMatched_UserProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeMatched.UserProperty)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeMatched.UserProperty.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // repeated .server.PropertyPair properties = 2;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->properties(i), false, target);
  }

  // repeated .server.MatchmakeFilter filters = 3;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->filters(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeMatched.UserProperty)
  return target;
}

size_t MatchmakeMatched_UserProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeMatched.UserProperty)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // repeated .server.PropertyPair properties = 2;
  {
    unsigned int count = this->properties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties(i));
    }
  }

  // repeated .server.MatchmakeFilter filters = 3;
  {
    unsigned int count = this->filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakeMatched_UserProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeMatched.UserProperty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchmakeMatched_UserProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchmakeMatched_UserProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeMatched.UserProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeMatched.UserProperty)
    UnsafeMergeFrom(*source);
  }
}

void MatchmakeMatched_UserProperty::MergeFrom(const MatchmakeMatched_UserProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeMatched.UserProperty)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchmakeMatched_UserProperty::UnsafeMergeFrom(const MatchmakeMatched_UserProperty& from) {
  GOOGLE_DCHECK(&from != this);
  properties_.MergeFrom(from.properties_);
  filters_.MergeFrom(from.filters_);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void MatchmakeMatched_UserProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeMatched.UserProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakeMatched_UserProperty::CopyFrom(const MatchmakeMatched_UserProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeMatched.UserProperty)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchmakeMatched_UserProperty::IsInitialized() const {

  return true;
}

void MatchmakeMatched_UserProperty::Swap(MatchmakeMatched_UserProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchmakeMatched_UserProperty::InternalSwap(MatchmakeMatched_UserProperty* other) {
  user_id_.Swap(&other->user_id_);
  properties_.UnsafeArenaSwap(&other->properties_);
  filters_.UnsafeArenaSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchmakeMatched_UserProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakeMatched_UserProperty_descriptor_;
  metadata.reflection = MatchmakeMatched_UserProperty_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchmakeMatched::kTicketFieldNumber;
const int MatchmakeMatched::kTokenFieldNumber;
const int MatchmakeMatched::kPresencesFieldNumber;
const int MatchmakeMatched::kSelfFieldNumber;
const int MatchmakeMatched::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchmakeMatched::MatchmakeMatched()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchmakeMatched)
}

void MatchmakeMatched::InitAsDefaultInstance() {
  self_ = const_cast< ::server::UserPresence*>(
      ::server::UserPresence::internal_default_instance());
}

MatchmakeMatched::MatchmakeMatched(const MatchmakeMatched& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchmakeMatched)
}

void MatchmakeMatched::SharedCtor() {
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_ = NULL;
  _cached_size_ = 0;
}

MatchmakeMatched::~MatchmakeMatched() {
  // @@protoc_insertion_point(destructor:server.MatchmakeMatched)
  SharedDtor();
}

void MatchmakeMatched::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MatchmakeMatched_default_instance_.get()) {
    delete self_;
  }
}

void MatchmakeMatched::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchmakeMatched::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchmakeMatched_descriptor_;
}

const MatchmakeMatched& MatchmakeMatched::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchmakeMatched> MatchmakeMatched_default_instance_;

MatchmakeMatched* MatchmakeMatched::New(::google::protobuf::Arena* arena) const {
  MatchmakeMatched* n = new MatchmakeMatched;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchmakeMatched::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchmakeMatched)
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
  presences_.Clear();
  properties_.Clear();
}

bool MatchmakeMatched::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchmakeMatched)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ticket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchmakeMatched.ticket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchmakeMatched.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_presences;
        break;
      }

      // repeated .server.UserPresence presences = 3;
      case 3: {
        if (tag == 26) {
         parse_presences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_presences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_presences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_presences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_self;
        break;
      }

      // optional .server.UserPresence self = 4;
      case 4: {
        if (tag == 34) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_properties;
        break;
      }

      // repeated .server.MatchmakeMatched.UserProperty properties = 5;
      case 5: {
        if (tag == 42) {
         parse_properties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_properties;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchmakeMatched)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchmakeMatched)
  return false;
#undef DO_
}

void MatchmakeMatched::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchmakeMatched)
  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeMatched.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticket(), output);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeMatched.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // repeated .server.UserPresence presences = 3;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->presences(i), output);
  }

  // optional .server.UserPresence self = 4;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->self_, output);
  }

  // repeated .server.MatchmakeMatched.UserProperty properties = 5;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->properties(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchmakeMatched)
}

::google::protobuf::uint8* MatchmakeMatched::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeMatched)
  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeMatched.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticket(), target);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchmakeMatched.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // repeated .server.UserPresence presences = 3;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->presences(i), false, target);
  }

  // optional .server.UserPresence self = 4;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->self_, false, target);
  }

  // repeated .server.MatchmakeMatched.UserProperty properties = 5;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->properties(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeMatched)
  return target;
}

size_t MatchmakeMatched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeMatched)
  size_t total_size = 0;

  // optional string ticket = 1;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticket());
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional .server.UserPresence self = 4;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_);
  }

  // repeated .server.UserPresence presences = 3;
  {
    unsigned int count = this->presences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presences(i));
    }
  }

  // repeated .server.MatchmakeMatched.UserProperty properties = 5;
  {
    unsigned int count = this->properties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchmakeMatched::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeMatched)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchmakeMatched* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchmakeMatched>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeMatched)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeMatched)
    UnsafeMergeFrom(*source);
  }
}

void MatchmakeMatched::MergeFrom(const MatchmakeMatched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeMatched)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchmakeMatched::UnsafeMergeFrom(const MatchmakeMatched& from) {
  GOOGLE_DCHECK(&from != this);
  presences_.MergeFrom(from.presences_);
  properties_.MergeFrom(from.properties_);
  if (from.ticket().size() > 0) {

    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_self()) {
    mutable_self()->::server::UserPresence::MergeFrom(from.self());
  }
}

void MatchmakeMatched::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakeMatched::CopyFrom(const MatchmakeMatched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeMatched)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchmakeMatched::IsInitialized() const {

  return true;
}

void MatchmakeMatched::Swap(MatchmakeMatched* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchmakeMatched::InternalSwap(MatchmakeMatched* other) {
  ticket_.Swap(&other->ticket_);
  token_.Swap(&other->token_);
  presences_.UnsafeArenaSwap(&other->presences_);
  std::swap(self_, other->self_);
  properties_.UnsafeArenaSwap(&other->properties_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchmakeMatched::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchmakeMatched_descriptor_;
  metadata.reflection = MatchmakeMatched_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchmakeMatched_UserProperty

// optional string user_id = 1;
void MatchmakeMatched_UserProperty::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchmakeMatched_UserProperty::user_id() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeMatched_UserProperty::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.UserProperty.user_id)
}
void MatchmakeMatched_UserProperty::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.UserProperty.user_id)
}
void MatchmakeMatched_UserProperty::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.UserProperty.user_id)
}
::std::string* MatchmakeMatched_UserProperty::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchmakeMatched_UserProperty::release_user_id() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.UserProperty.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeMatched_UserProperty::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.UserProperty.user_id)
}

// repeated .server.PropertyPair properties = 2;
int MatchmakeMatched_UserProperty::properties_size() const {
  return properties_.size();
}
void MatchmakeMatched_UserProperty::clear_properties() {
  properties_.Clear();
}
const ::server::PropertyPair& MatchmakeMatched_UserProperty::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.properties)
  return properties_.Get(index);
}
::server::PropertyPair* MatchmakeMatched_UserProperty::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.properties)
  return properties_.Mutable(index);
}
::server::PropertyPair* MatchmakeMatched_UserProperty::add_properties() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.UserProperty.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::PropertyPair >*
MatchmakeMatched_UserProperty::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.UserProperty.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::server::PropertyPair >&
MatchmakeMatched_UserProperty::properties() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.UserProperty.properties)
  return properties_;
}

// repeated .server.MatchmakeFilter filters = 3;
int MatchmakeMatched_UserProperty::filters_size() const {
  return filters_.size();
}
void MatchmakeMatched_UserProperty::clear_filters() {
  filters_.Clear();
}
const ::server::MatchmakeFilter& MatchmakeMatched_UserProperty::filters(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.filters)
  return filters_.Get(index);
}
::server::MatchmakeFilter* MatchmakeMatched_UserProperty::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.filters)
  return filters_.Mutable(index);
}
::server::MatchmakeFilter* MatchmakeMatched_UserProperty::add_filters() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.UserProperty.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >*
MatchmakeMatched_UserProperty::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.UserProperty.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeFilter >&
MatchmakeMatched_UserProperty::filters() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.UserProperty.filters)
  return filters_;
}

inline const MatchmakeMatched_UserProperty* MatchmakeMatched_UserProperty::internal_default_instance() {
  return &MatchmakeMatched_UserProperty_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchmakeMatched

// optional string ticket = 1;
void MatchmakeMatched::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchmakeMatched::ticket() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.ticket)
  return ticket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeMatched::set_ticket(const ::std::string& value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.ticket)
}
void MatchmakeMatched::set_ticket(const char* value) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.ticket)
}
void MatchmakeMatched::set_ticket(const char* value, size_t size) {
  
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.ticket)
}
::std::string* MatchmakeMatched::mutable_ticket() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchmakeMatched::release_ticket() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.ticket)
  
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeMatched::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    
  } else {
    
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.ticket)
}

// optional string token = 2;
void MatchmakeMatched::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchmakeMatched::token() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeMatched::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.token)
}
void MatchmakeMatched::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.token)
}
void MatchmakeMatched::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.token)
}
::std::string* MatchmakeMatched::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchmakeMatched::release_token() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchmakeMatched::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.token)
}

// repeated .server.UserPresence presences = 3;
int MatchmakeMatched::presences_size() const {
  return presences_.size();
}
void MatchmakeMatched::clear_presences() {
  presences_.Clear();
}
const ::server::UserPresence& MatchmakeMatched::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.presences)
  return presences_.Get(index);
}
::server::UserPresence* MatchmakeMatched::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.presences)
  return presences_.Mutable(index);
}
::server::UserPresence* MatchmakeMatched::add_presences() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.presences)
  return presences_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchmakeMatched::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.presences)
  return &presences_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchmakeMatched::presences() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.presences)
  return presences_;
}

// optional .server.UserPresence self = 4;
bool MatchmakeMatched::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
void MatchmakeMatched::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
const ::server::UserPresence& MatchmakeMatched::self() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
::server::UserPresence* MatchmakeMatched::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.self)
  return self_;
}
::server::UserPresence* MatchmakeMatched::release_self() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
void MatchmakeMatched::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.self)
}

// repeated .server.MatchmakeMatched.UserProperty properties = 5;
int MatchmakeMatched::properties_size() const {
  return properties_.size();
}
void MatchmakeMatched::clear_properties() {
  properties_.Clear();
}
const ::server::MatchmakeMatched_UserProperty& MatchmakeMatched::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.properties)
  return properties_.Get(index);
}
::server::MatchmakeMatched_UserProperty* MatchmakeMatched::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.properties)
  return properties_.Mutable(index);
}
::server::MatchmakeMatched_UserProperty* MatchmakeMatched::add_properties() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >*
MatchmakeMatched::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >&
MatchmakeMatched::properties() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.properties)
  return properties_;
}

inline const MatchmakeMatched* MatchmakeMatched::internal_default_instance() {
  return &MatchmakeMatched_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kMatchIdFieldNumber;
const int Match::kPresencesFieldNumber;
const int Match::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Match)
}

void Match::InitAsDefaultInstance() {
  self_ = const_cast< ::server::UserPresence*>(
      ::server::UserPresence::internal_default_instance());
}

Match::Match(const Match& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Match)
}

void Match::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_ = NULL;
  _cached_size_ = 0;
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:server.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Match_default_instance_.get()) {
    delete self_;
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_descriptor_;
}

const Match& Match::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Match> Match_default_instance_;

Match* Match::New(::google::protobuf::Arena* arena) const {
  Match* n = new Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Match)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
  presences_.Clear();
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_id().data(), this->match_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Match.match_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_presences;
        break;
      }

      // repeated .server.UserPresence presences = 2;
      case 2: {
        if (tag == 18) {
         parse_presences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_presences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_presences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_presences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_self;
        break;
      }

      // optional .server.UserPresence self = 3;
      case 3: {
        if (tag == 26) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Match)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Match.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_id(), output);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->presences(i), output);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->self_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.Match)
}

::google::protobuf::uint8* Match::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Match)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Match.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_id(), target);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->presences(i), false, target);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->self_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Match)
  size_t total_size = 0;

  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_);
  }

  // repeated .server.UserPresence presences = 2;
  {
    unsigned int count = this->presences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Match)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Match* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Match)
    UnsafeMergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Match)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Match::UnsafeMergeFrom(const Match& from) {
  GOOGLE_DCHECK(&from != this);
  presences_.MergeFrom(from.presences_);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.has_self()) {
    mutable_self()->::server::UserPresence::MergeFrom(from.self());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Match)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Match::IsInitialized() const {

  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  match_id_.Swap(&other->match_id_);
  presences_.UnsafeArenaSwap(&other->presences_);
  std::swap(self_, other->self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_descriptor_;
  metadata.reflection = Match_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Match

// optional string match_id = 1;
void Match::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Match::match_id() const {
  // @@protoc_insertion_point(field_get:server.Match.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Match::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Match.match_id)
}
void Match::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Match.match_id)
}
void Match::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Match.match_id)
}
::std::string* Match::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Match.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Match::release_match_id() {
  // @@protoc_insertion_point(field_release:server.Match.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Match::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.Match.match_id)
}

// repeated .server.UserPresence presences = 2;
int Match::presences_size() const {
  return presences_.size();
}
void Match::clear_presences() {
  presences_.Clear();
}
const ::server::UserPresence& Match::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.Match.presences)
  return presences_.Get(index);
}
::server::UserPresence* Match::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.Match.presences)
  return presences_.Mutable(index);
}
::server::UserPresence* Match::add_presences() {
  // @@protoc_insertion_point(field_add:server.Match.presences)
  return presences_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
Match::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.Match.presences)
  return &presences_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
Match::presences() const {
  // @@protoc_insertion_point(field_list:server.Match.presences)
  return presences_;
}

// optional .server.UserPresence self = 3;
bool Match::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
void Match::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
const ::server::UserPresence& Match::self() const {
  // @@protoc_insertion_point(field_get:server.Match.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
::server::UserPresence* Match::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Match.self)
  return self_;
}
::server::UserPresence* Match::release_self() {
  // @@protoc_insertion_point(field_release:server.Match.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
void Match::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Match.self)
}

inline const Match* Match::internal_default_instance() {
  return &Match_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchPresence::kMatchIdFieldNumber;
const int MatchPresence::kJoinsFieldNumber;
const int MatchPresence::kLeavesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchPresence::MatchPresence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchPresence)
}

void MatchPresence::InitAsDefaultInstance() {
}

MatchPresence::MatchPresence(const MatchPresence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchPresence)
}

void MatchPresence::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MatchPresence::~MatchPresence() {
  // @@protoc_insertion_point(destructor:server.MatchPresence)
  SharedDtor();
}

void MatchPresence::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchPresence_descriptor_;
}

const MatchPresence& MatchPresence::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchPresence> MatchPresence_default_instance_;

MatchPresence* MatchPresence::New(::google::protobuf::Arena* arena) const {
  MatchPresence* n = new MatchPresence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchPresence)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joins_.Clear();
  leaves_.Clear();
}

bool MatchPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_id().data(), this->match_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchPresence.match_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_joins;
        break;
      }

      // repeated .server.UserPresence joins = 2;
      case 2: {
        if (tag == 18) {
         parse_joins:
          DO_(input->IncrementRecursionDepth());
         parse_loop_joins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_joins;
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .server.UserPresence leaves = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_leaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_leaves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchPresence)
  return false;
#undef DO_
}

void MatchPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchPresence)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchPresence.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_id(), output);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joins(i), output);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaves(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchPresence)
}

::google::protobuf::uint8* MatchPresence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchPresence)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchPresence.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_id(), target);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->joins(i), false, target);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->leaves(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchPresence)
  return target;
}

size_t MatchPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchPresence)
  size_t total_size = 0;

  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  // repeated .server.UserPresence joins = 2;
  {
    unsigned int count = this->joins_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joins(i));
    }
  }

  // repeated .server.UserPresence leaves = 3;
  {
    unsigned int count = this->leaves_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaves(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchPresence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchPresence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchPresence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchPresence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchPresence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchPresence)
    UnsafeMergeFrom(*source);
  }
}

void MatchPresence::MergeFrom(const MatchPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchPresence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchPresence::UnsafeMergeFrom(const MatchPresence& from) {
  GOOGLE_DCHECK(&from != this);
  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
}

void MatchPresence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPresence::CopyFrom(const MatchPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchPresence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchPresence::IsInitialized() const {

  return true;
}

void MatchPresence::Swap(MatchPresence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchPresence::InternalSwap(MatchPresence* other) {
  match_id_.Swap(&other->match_id_);
  joins_.UnsafeArenaSwap(&other->joins_);
  leaves_.UnsafeArenaSwap(&other->leaves_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchPresence_descriptor_;
  metadata.reflection = MatchPresence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchPresence

// optional string match_id = 1;
void MatchPresence::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchPresence::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchPresence::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchPresence.match_id)
}
void MatchPresence::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchPresence.match_id)
}
void MatchPresence::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchPresence.match_id)
}
::std::string* MatchPresence::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchPresence::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchPresence.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchPresence::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchPresence.match_id)
}

// repeated .server.UserPresence joins = 2;
int MatchPresence::joins_size() const {
  return joins_.size();
}
void MatchPresence::clear_joins() {
  joins_.Clear();
}
const ::server::UserPresence& MatchPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.joins)
  return joins_.Get(index);
}
::server::UserPresence* MatchPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.joins)
  return joins_.Mutable(index);
}
::server::UserPresence* MatchPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.joins)
  return joins_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.joins)
  return &joins_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
int MatchPresence::leaves_size() const {
  return leaves_.size();
}
void MatchPresence::clear_leaves() {
  leaves_.Clear();
}
const ::server::UserPresence& MatchPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.leaves)
  return leaves_.Get(index);
}
::server::UserPresence* MatchPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.leaves)
  return leaves_.Mutable(index);
}
::server::UserPresence* MatchPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.leaves)
  return leaves_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.leaves)
  return &leaves_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.leaves)
  return leaves_;
}

inline const MatchPresence* MatchPresence::internal_default_instance() {
  return &MatchPresence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchCreate::TMatchCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchCreate)
}

void TMatchCreate::InitAsDefaultInstance() {
}

TMatchCreate::TMatchCreate(const TMatchCreate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchCreate)
}

void TMatchCreate::SharedCtor() {
  _cached_size_ = 0;
}

TMatchCreate::~TMatchCreate() {
  // @@protoc_insertion_point(destructor:server.TMatchCreate)
  SharedDtor();
}

void TMatchCreate::SharedDtor() {
}

void TMatchCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchCreate_descriptor_;
}

const TMatchCreate& TMatchCreate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchCreate> TMatchCreate_default_instance_;

TMatchCreate* TMatchCreate::New(::google::protobuf::Arena* arena) const {
  TMatchCreate* n = new TMatchCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchCreate)
}

bool TMatchCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchCreate)
  return false;
#undef DO_
}

void TMatchCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchCreate)
  // @@protoc_insertion_point(serialize_end:server.TMatchCreate)
}

::google::protobuf::uint8* TMatchCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchCreate)
  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchCreate)
  return target;
}

size_t TMatchCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchCreate)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchCreate)
    UnsafeMergeFrom(*source);
  }
}

void TMatchCreate::MergeFrom(const TMatchCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchCreate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchCreate::UnsafeMergeFrom(const TMatchCreate& from) {
  GOOGLE_DCHECK(&from != this);
}

void TMatchCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchCreate::CopyFrom(const TMatchCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchCreate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchCreate::IsInitialized() const {

  return true;
}

void TMatchCreate::Swap(TMatchCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchCreate::InternalSwap(TMatchCreate* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchCreate_descriptor_;
  metadata.reflection = TMatchCreate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchCreate

inline const TMatchCreate* TMatchCreate::internal_default_instance() {
  return &TMatchCreate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatch::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatch::TMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatch)
}

void TMatch::InitAsDefaultInstance() {
  match_ = const_cast< ::server::Match*>(
      ::server::Match::internal_default_instance());
}

TMatch::TMatch(const TMatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatch)
}

void TMatch::SharedCtor() {
  match_ = NULL;
  _cached_size_ = 0;
}

TMatch::~TMatch() {
  // @@protoc_insertion_point(destructor:server.TMatch)
  SharedDtor();
}

void TMatch::SharedDtor() {
  if (this != &TMatch_default_instance_.get()) {
    delete match_;
  }
}

void TMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatch_descriptor_;
}

const TMatch& TMatch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatch> TMatch_default_instance_;

TMatch* TMatch::New(::google::protobuf::Arena* arena) const {
  TMatch* n = new TMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatch)
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}

bool TMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.Match match = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatch)
  return false;
#undef DO_
}

void TMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatch)
  // optional .server.Match match = 1;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatch)
}

::google::protobuf::uint8* TMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatch)
  // optional .server.Match match = 1;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatch)
  return target;
}

size_t TMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatch)
  size_t total_size = 0;

  // optional .server.Match match = 1;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatch)
    UnsafeMergeFrom(*source);
  }
}

void TMatch::MergeFrom(const TMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatch::UnsafeMergeFrom(const TMatch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_match()) {
    mutable_match()->::server::Match::MergeFrom(from.match());
  }
}

void TMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatch::CopyFrom(const TMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatch::IsInitialized() const {

  return true;
}

void TMatch::Swap(TMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatch::InternalSwap(TMatch* other) {
  std::swap(match_, other->match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatch_descriptor_;
  metadata.reflection = TMatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatch

// optional .server.Match match = 1;
bool TMatch::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
void TMatch::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
const ::server::Match& TMatch::match() const {
  // @@protoc_insertion_point(field_get:server.TMatch.match)
  return match_ != NULL ? *match_
                         : *::server::Match::internal_default_instance();
}
::server::Match* TMatch::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::server::Match;
  }
  // @@protoc_insertion_point(field_mutable:server.TMatch.match)
  return match_;
}
::server::Match* TMatch::release_match() {
  // @@protoc_insertion_point(field_release:server.TMatch.match)
  
  ::server::Match* temp = match_;
  match_ = NULL;
  return temp;
}
void TMatch::set_allocated_match(::server::Match* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatch.match)
}

inline const TMatch* TMatch::internal_default_instance() {
  return &TMatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchesJoin_MatchJoin::kMatchIdFieldNumber;
const int TMatchesJoin_MatchJoin::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchesJoin_MatchJoin::TMatchesJoin_MatchJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchesJoin.MatchJoin)
}

void TMatchesJoin_MatchJoin::InitAsDefaultInstance() {
  TMatchesJoin_MatchJoin_default_oneof_instance_->match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TMatchesJoin_MatchJoin_default_oneof_instance_->token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TMatchesJoin_MatchJoin::TMatchesJoin_MatchJoin(const TMatchesJoin_MatchJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchesJoin.MatchJoin)
}

void TMatchesJoin_MatchJoin::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TMatchesJoin_MatchJoin::~TMatchesJoin_MatchJoin() {
  // @@protoc_insertion_point(destructor:server.TMatchesJoin.MatchJoin)
  SharedDtor();
}

void TMatchesJoin_MatchJoin::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TMatchesJoin_MatchJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchesJoin_MatchJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchesJoin_MatchJoin_descriptor_;
}

const TMatchesJoin_MatchJoin& TMatchesJoin_MatchJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchesJoin_MatchJoin> TMatchesJoin_MatchJoin_default_instance_;

TMatchesJoin_MatchJoin* TMatchesJoin_MatchJoin::New(::google::protobuf::Arena* arena) const {
  TMatchesJoin_MatchJoin* n = new TMatchesJoin_MatchJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchesJoin_MatchJoin::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TMatchesJoin.MatchJoin)
  switch (id_case()) {
    case kMatchId: {
      id_.match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kToken: {
      id_.token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TMatchesJoin_MatchJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchesJoin.MatchJoin)
  clear_id();
}

bool TMatchesJoin_MatchJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchesJoin.MatchJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_id().data(), this->match_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TMatchesJoin.MatchJoin.match_id"));
        } else {
          goto handle_unusual;
        }
        goto after_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TMatchesJoin.MatchJoin.token"));
        } else {
          goto handle_unusual;
        }
       after_token:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchesJoin.MatchJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchesJoin.MatchJoin)
  return false;
#undef DO_
}

void TMatchesJoin_MatchJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchesJoin.MatchJoin)
  // optional string match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchesJoin.MatchJoin.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_id(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchesJoin.MatchJoin.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchesJoin.MatchJoin)
}

::google::protobuf::uint8* TMatchesJoin_MatchJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchesJoin.MatchJoin)
  // optional string match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchesJoin.MatchJoin.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_id(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchesJoin.MatchJoin.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchesJoin.MatchJoin)
  return target;
}

size_t TMatchesJoin_MatchJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchesJoin.MatchJoin)
  size_t total_size = 0;

  switch (id_case()) {
    // optional string match_id = 1;
    case kMatchId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_id());
      break;
    }
    // optional string token = 2;
    case kToken: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchesJoin_MatchJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchesJoin.MatchJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchesJoin_MatchJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchesJoin_MatchJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchesJoin.MatchJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchesJoin.MatchJoin)
    UnsafeMergeFrom(*source);
  }
}

void TMatchesJoin_MatchJoin::MergeFrom(const TMatchesJoin_MatchJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchesJoin.MatchJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchesJoin_MatchJoin::UnsafeMergeFrom(const TMatchesJoin_MatchJoin& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kMatchId: {
      set_match_id(from.match_id());
      break;
    }
    case kToken: {
      set_token(from.token());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TMatchesJoin_MatchJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchesJoin.MatchJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchesJoin_MatchJoin::CopyFrom(const TMatchesJoin_MatchJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchesJoin.MatchJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchesJoin_MatchJoin::IsInitialized() const {

  return true;
}

void TMatchesJoin_MatchJoin::Swap(TMatchesJoin_MatchJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchesJoin_MatchJoin::InternalSwap(TMatchesJoin_MatchJoin* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchesJoin_MatchJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchesJoin_MatchJoin_descriptor_;
  metadata.reflection = TMatchesJoin_MatchJoin_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchesJoin::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchesJoin::TMatchesJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchesJoin)
}

void TMatchesJoin::InitAsDefaultInstance() {
}

TMatchesJoin::TMatchesJoin(const TMatchesJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchesJoin)
}

void TMatchesJoin::SharedCtor() {
  _cached_size_ = 0;
}

TMatchesJoin::~TMatchesJoin() {
  // @@protoc_insertion_point(destructor:server.TMatchesJoin)
  SharedDtor();
}

void TMatchesJoin::SharedDtor() {
}

void TMatchesJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchesJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchesJoin_descriptor_;
}

const TMatchesJoin& TMatchesJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchesJoin> TMatchesJoin_default_instance_;

TMatchesJoin* TMatchesJoin::New(::google::protobuf::Arena* arena) const {
  TMatchesJoin* n = new TMatchesJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchesJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchesJoin)
  matches_.Clear();
}

bool TMatchesJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchesJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TMatchesJoin.MatchJoin matches = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchesJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchesJoin)
  return false;
#undef DO_
}

void TMatchesJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchesJoin)
  // repeated .server.TMatchesJoin.MatchJoin matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchesJoin)
}

::google::protobuf::uint8* TMatchesJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchesJoin)
  // repeated .server.TMatchesJoin.MatchJoin matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->matches(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchesJoin)
  return target;
}

size_t TMatchesJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchesJoin)
  size_t total_size = 0;

  // repeated .server.TMatchesJoin.MatchJoin matches = 1;
  {
    unsigned int count = this->matches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matches(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchesJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchesJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchesJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchesJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchesJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchesJoin)
    UnsafeMergeFrom(*source);
  }
}

void TMatchesJoin::MergeFrom(const TMatchesJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchesJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchesJoin::UnsafeMergeFrom(const TMatchesJoin& from) {
  GOOGLE_DCHECK(&from != this);
  matches_.MergeFrom(from.matches_);
}

void TMatchesJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchesJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchesJoin::CopyFrom(const TMatchesJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchesJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchesJoin::IsInitialized() const {

  return true;
}

void TMatchesJoin::Swap(TMatchesJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchesJoin::InternalSwap(TMatchesJoin* other) {
  matches_.UnsafeArenaSwap(&other->matches_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchesJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchesJoin_descriptor_;
  metadata.reflection = TMatchesJoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchesJoin_MatchJoin

// optional string match_id = 1;
bool TMatchesJoin_MatchJoin::has_match_id() const {
  return id_case() == kMatchId;
}
void TMatchesJoin_MatchJoin::set_has_match_id() {
  _oneof_case_[0] = kMatchId;
}
void TMatchesJoin_MatchJoin::clear_match_id() {
  if (has_match_id()) {
    id_.match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TMatchesJoin_MatchJoin::match_id() const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.MatchJoin.match_id)
  if (has_match_id()) {
    return id_.match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TMatchesJoin_MatchJoin::set_match_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.match_id)
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.match_id)
}
void TMatchesJoin_MatchJoin::set_match_id(const char* value) {
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchesJoin.MatchJoin.match_id)
}
void TMatchesJoin_MatchJoin::set_match_id(const char* value, size_t size) {
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesJoin.MatchJoin.match_id)
}
::std::string* TMatchesJoin_MatchJoin::mutable_match_id() {
  if (!has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.MatchJoin.match_id)
  return id_.match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchesJoin_MatchJoin::release_match_id() {
  // @@protoc_insertion_point(field_release:server.TMatchesJoin.MatchJoin.match_id)
  if (has_match_id()) {
    clear_has_id();
    return id_.match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TMatchesJoin_MatchJoin::set_allocated_match_id(::std::string* match_id) {
  if (!has_match_id()) {
    id_.match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (match_id != NULL) {
    set_has_match_id();
    id_.match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        match_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatchesJoin.MatchJoin.match_id)
}

// optional string token = 2;
bool TMatchesJoin_MatchJoin::has_token() const {
  return id_case() == kToken;
}
void TMatchesJoin_MatchJoin::set_has_token() {
  _oneof_case_[0] = kToken;
}
void TMatchesJoin_MatchJoin::clear_token() {
  if (has_token()) {
    id_.token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TMatchesJoin_MatchJoin::token() const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.MatchJoin.token)
  if (has_token()) {
    return id_.token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TMatchesJoin_MatchJoin::set_token(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.token)
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.token)
}
void TMatchesJoin_MatchJoin::set_token(const char* value) {
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchesJoin.MatchJoin.token)
}
void TMatchesJoin_MatchJoin::set_token(const char* value, size_t size) {
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesJoin.MatchJoin.token)
}
::std::string* TMatchesJoin_MatchJoin::mutable_token() {
  if (!has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.MatchJoin.token)
  return id_.token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchesJoin_MatchJoin::release_token() {
  // @@protoc_insertion_point(field_release:server.TMatchesJoin.MatchJoin.token)
  if (has_token()) {
    clear_has_id();
    return id_.token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TMatchesJoin_MatchJoin::set_allocated_token(::std::string* token) {
  if (!has_token()) {
    id_.token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (token != NULL) {
    set_has_token();
    id_.token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        token);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatchesJoin.MatchJoin.token)
}

bool TMatchesJoin_MatchJoin::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TMatchesJoin_MatchJoin::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TMatchesJoin_MatchJoin::IdCase TMatchesJoin_MatchJoin::id_case() const {
  return TMatchesJoin_MatchJoin::IdCase(_oneof_case_[0]);
}
inline const TMatchesJoin_MatchJoin* TMatchesJoin_MatchJoin::internal_default_instance() {
  return &TMatchesJoin_MatchJoin_default_instance_.get();
}
// -------------------------------------------------------------------

// TMatchesJoin

// repeated .server.TMatchesJoin.MatchJoin matches = 1;
int TMatchesJoin::matches_size() const {
  return matches_.size();
}
void TMatchesJoin::clear_matches() {
  matches_.Clear();
}
const ::server::TMatchesJoin_MatchJoin& TMatchesJoin::matches(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.matches)
  return matches_.Get(index);
}
::server::TMatchesJoin_MatchJoin* TMatchesJoin::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.matches)
  return matches_.Mutable(index);
}
::server::TMatchesJoin_MatchJoin* TMatchesJoin::add_matches() {
  // @@protoc_insertion_point(field_add:server.TMatchesJoin.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >*
TMatchesJoin::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchesJoin.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >&
TMatchesJoin::matches() const {
  // @@protoc_insertion_point(field_list:server.TMatchesJoin.matches)
  return matches_;
}

inline const TMatchesJoin* TMatchesJoin::internal_default_instance() {
  return &TMatchesJoin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatches::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatches::TMatches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatches)
}

void TMatches::InitAsDefaultInstance() {
}

TMatches::TMatches(const TMatches& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatches)
}

void TMatches::SharedCtor() {
  _cached_size_ = 0;
}

TMatches::~TMatches() {
  // @@protoc_insertion_point(destructor:server.TMatches)
  SharedDtor();
}

void TMatches::SharedDtor() {
}

void TMatches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatches_descriptor_;
}

const TMatches& TMatches::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatches> TMatches_default_instance_;

TMatches* TMatches::New(::google::protobuf::Arena* arena) const {
  TMatches* n = new TMatches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatches::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatches)
  matches_.Clear();
}

bool TMatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Match matches = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatches)
  return false;
#undef DO_
}

void TMatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatches)
  // repeated .server.Match matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatches)
}

::google::protobuf::uint8* TMatches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatches)
  // repeated .server.Match matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->matches(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatches)
  return target;
}

size_t TMatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatches)
  size_t total_size = 0;

  // repeated .server.Match matches = 1;
  {
    unsigned int count = this->matches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matches(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatches)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatches)
    UnsafeMergeFrom(*source);
  }
}

void TMatches::MergeFrom(const TMatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatches)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatches::UnsafeMergeFrom(const TMatches& from) {
  GOOGLE_DCHECK(&from != this);
  matches_.MergeFrom(from.matches_);
}

void TMatches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatches::CopyFrom(const TMatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatches)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatches::IsInitialized() const {

  return true;
}

void TMatches::Swap(TMatches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatches::InternalSwap(TMatches* other) {
  matches_.UnsafeArenaSwap(&other->matches_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatches_descriptor_;
  metadata.reflection = TMatches_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatches

// repeated .server.Match matches = 1;
int TMatches::matches_size() const {
  return matches_.size();
}
void TMatches::clear_matches() {
  matches_.Clear();
}
const ::server::Match& TMatches::matches(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatches.matches)
  return matches_.Get(index);
}
::server::Match* TMatches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatches.matches)
  return matches_.Mutable(index);
}
::server::Match* TMatches::add_matches() {
  // @@protoc_insertion_point(field_add:server.TMatches.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Match >*
TMatches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatches.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Match >&
TMatches::matches() const {
  // @@protoc_insertion_point(field_list:server.TMatches.matches)
  return matches_;
}

inline const TMatches* TMatches::internal_default_instance() {
  return &TMatches_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchDataSend::kMatchIdFieldNumber;
const int MatchDataSend::kOpCodeFieldNumber;
const int MatchDataSend::kDataFieldNumber;
const int MatchDataSend::kPresencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchDataSend::MatchDataSend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchDataSend)
}

void MatchDataSend::InitAsDefaultInstance() {
}

MatchDataSend::MatchDataSend(const MatchDataSend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchDataSend)
}

void MatchDataSend::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_code_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MatchDataSend::~MatchDataSend() {
  // @@protoc_insertion_point(destructor:server.MatchDataSend)
  SharedDtor();
}

void MatchDataSend::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchDataSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchDataSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchDataSend_descriptor_;
}

const MatchDataSend& MatchDataSend::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchDataSend> MatchDataSend_default_instance_;

MatchDataSend* MatchDataSend::New(::google::protobuf::Arena* arena) const {
  MatchDataSend* n = new MatchDataSend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchDataSend::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchDataSend)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_code_ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presences_.Clear();
}

bool MatchDataSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchDataSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_id().data(), this->match_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchDataSend.match_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_op_code;
        break;
      }

      // optional int64 op_code = 2;
      case 2: {
        if (tag == 16) {
         parse_op_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_presences;
        break;
      }

      // repeated .server.UserPresence presences = 4;
      case 4: {
        if (tag == 34) {
         parse_presences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_presences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_presences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_presences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchDataSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchDataSend)
  return false;
#undef DO_
}

void MatchDataSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchDataSend)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchDataSend.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_id(), output);
  }

  // optional int64 op_code = 2;
  if (this->op_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->op_code(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // repeated .server.UserPresence presences = 4;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->presences(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchDataSend)
}

::google::protobuf::uint8* MatchDataSend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchDataSend)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchDataSend.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_id(), target);
  }

  // optional int64 op_code = 2;
  if (this->op_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->op_code(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // repeated .server.UserPresence presences = 4;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->presences(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchDataSend)
  return target;
}

size_t MatchDataSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchDataSend)
  size_t total_size = 0;

  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  // optional int64 op_code = 2;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_code());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // repeated .server.UserPresence presences = 4;
  {
    unsigned int count = this->presences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchDataSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchDataSend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchDataSend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchDataSend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchDataSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchDataSend)
    UnsafeMergeFrom(*source);
  }
}

void MatchDataSend::MergeFrom(const MatchDataSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchDataSend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchDataSend::UnsafeMergeFrom(const MatchDataSend& from) {
  GOOGLE_DCHECK(&from != this);
  presences_.MergeFrom(from.presences_);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.op_code() != 0) {
    set_op_code(from.op_code());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void MatchDataSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchDataSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchDataSend::CopyFrom(const MatchDataSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchDataSend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchDataSend::IsInitialized() const {

  return true;
}

void MatchDataSend::Swap(MatchDataSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchDataSend::InternalSwap(MatchDataSend* other) {
  match_id_.Swap(&other->match_id_);
  std::swap(op_code_, other->op_code_);
  data_.Swap(&other->data_);
  presences_.UnsafeArenaSwap(&other->presences_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchDataSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchDataSend_descriptor_;
  metadata.reflection = MatchDataSend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchDataSend

// optional string match_id = 1;
void MatchDataSend::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchDataSend::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchDataSend::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchDataSend.match_id)
}
void MatchDataSend::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchDataSend.match_id)
}
void MatchDataSend::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchDataSend.match_id)
}
::std::string* MatchDataSend::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchDataSend::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchDataSend.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchDataSend::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchDataSend.match_id)
}

// optional int64 op_code = 2;
void MatchDataSend::clear_op_code() {
  op_code_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MatchDataSend::op_code() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.op_code)
  return op_code_;
}
void MatchDataSend::set_op_code(::google::protobuf::int64 value) {
  
  op_code_ = value;
  // @@protoc_insertion_point(field_set:server.MatchDataSend.op_code)
}

// optional bytes data = 3;
void MatchDataSend::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchDataSend::data() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchDataSend::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchDataSend.data)
}
void MatchDataSend::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchDataSend.data)
}
void MatchDataSend::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchDataSend.data)
}
::std::string* MatchDataSend::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchDataSend::release_data() {
  // @@protoc_insertion_point(field_release:server.MatchDataSend.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchDataSend::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.MatchDataSend.data)
}

// repeated .server.UserPresence presences = 4;
int MatchDataSend::presences_size() const {
  return presences_.size();
}
void MatchDataSend::clear_presences() {
  presences_.Clear();
}
const ::server::UserPresence& MatchDataSend::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.presences)
  return presences_.Get(index);
}
::server::UserPresence* MatchDataSend::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.presences)
  return presences_.Mutable(index);
}
::server::UserPresence* MatchDataSend::add_presences() {
  // @@protoc_insertion_point(field_add:server.MatchDataSend.presences)
  return presences_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchDataSend::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchDataSend.presences)
  return &presences_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchDataSend::presences() const {
  // @@protoc_insertion_point(field_list:server.MatchDataSend.presences)
  return presences_;
}

inline const MatchDataSend* MatchDataSend::internal_default_instance() {
  return &MatchDataSend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchData::kMatchIdFieldNumber;
const int MatchData::kPresenceFieldNumber;
const int MatchData::kOpCodeFieldNumber;
const int MatchData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchData::MatchData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchData)
}

void MatchData::InitAsDefaultInstance() {
  presence_ = const_cast< ::server::UserPresence*>(
      ::server::UserPresence::internal_default_instance());
}

MatchData::MatchData(const MatchData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchData)
}

void MatchData::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presence_ = NULL;
  op_code_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MatchData::~MatchData() {
  // @@protoc_insertion_point(destructor:server.MatchData)
  SharedDtor();
}

void MatchData::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MatchData_default_instance_.get()) {
    delete presence_;
  }
}

void MatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchData_descriptor_;
}

const MatchData& MatchData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchData> MatchData_default_instance_;

MatchData* MatchData::New(::google::protobuf::Arena* arena) const {
  MatchData* n = new MatchData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchData)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && presence_ != NULL) delete presence_;
  presence_ = NULL;
  op_code_ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_id().data(), this->match_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.MatchData.match_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_presence;
        break;
      }

      // optional .server.UserPresence presence = 2;
      case 2: {
        if (tag == 18) {
         parse_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op_code;
        break;
      }

      // optional int64 op_code = 3;
      case 3: {
        if (tag == 24) {
         parse_op_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchData)
  return false;
#undef DO_
}

void MatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchData)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchData.match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_id(), output);
  }

  // optional .server.UserPresence presence = 2;
  if (this->has_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->presence_, output);
  }

  // optional int64 op_code = 3;
  if (this->op_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->op_code(), output);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchData)
}

::google::protobuf::uint8* MatchData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchData)
  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_id().data(), this->match_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.MatchData.match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_id(), target);
  }

  // optional .server.UserPresence presence = 2;
  if (this->has_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->presence_, false, target);
  }

  // optional int64 op_code = 3;
  if (this->op_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->op_code(), target);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchData)
  return target;
}

size_t MatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchData)
  size_t total_size = 0;

  // optional string match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_id());
  }

  // optional .server.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->presence_);
  }

  // optional int64 op_code = 3;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_code());
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchData)
    UnsafeMergeFrom(*source);
  }
}

void MatchData::MergeFrom(const MatchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchData::UnsafeMergeFrom(const MatchData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.has_presence()) {
    mutable_presence()->::server::UserPresence::MergeFrom(from.presence());
  }
  if (from.op_code() != 0) {
    set_op_code(from.op_code());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void MatchData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchData::CopyFrom(const MatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchData::IsInitialized() const {

  return true;
}

void MatchData::Swap(MatchData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchData::InternalSwap(MatchData* other) {
  match_id_.Swap(&other->match_id_);
  std::swap(presence_, other->presence_);
  std::swap(op_code_, other->op_code_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchData_descriptor_;
  metadata.reflection = MatchData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchData

// optional string match_id = 1;
void MatchData::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchData::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchData.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchData.match_id)
}
void MatchData::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchData.match_id)
}
void MatchData::set_match_id(const char* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.match_id)
}
::std::string* MatchData::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchData.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchData::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchData.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.match_id)
}

// optional .server.UserPresence presence = 2;
bool MatchData::has_presence() const {
  return this != internal_default_instance() && presence_ != NULL;
}
void MatchData::clear_presence() {
  if (GetArenaNoVirtual() == NULL && presence_ != NULL) delete presence_;
  presence_ = NULL;
}
const ::server::UserPresence& MatchData::presence() const {
  // @@protoc_insertion_point(field_get:server.MatchData.presence)
  return presence_ != NULL ? *presence_
                         : *::server::UserPresence::internal_default_instance();
}
::server::UserPresence* MatchData::mutable_presence() {
  
  if (presence_ == NULL) {
    presence_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchData.presence)
  return presence_;
}
::server::UserPresence* MatchData::release_presence() {
  // @@protoc_insertion_point(field_release:server.MatchData.presence)
  
  ::server::UserPresence* temp = presence_;
  presence_ = NULL;
  return temp;
}
void MatchData::set_allocated_presence(::server::UserPresence* presence) {
  delete presence_;
  presence_ = presence;
  if (presence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.presence)
}

// optional int64 op_code = 3;
void MatchData::clear_op_code() {
  op_code_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MatchData::op_code() const {
  // @@protoc_insertion_point(field_get:server.MatchData.op_code)
  return op_code_;
}
void MatchData::set_op_code(::google::protobuf::int64 value) {
  
  op_code_ = value;
  // @@protoc_insertion_point(field_set:server.MatchData.op_code)
}

// optional bytes data = 4;
void MatchData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchData::data() const {
  // @@protoc_insertion_point(field_get:server.MatchData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchData.data)
}
void MatchData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchData.data)
}
void MatchData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.data)
}
::std::string* MatchData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchData::release_data() {
  // @@protoc_insertion_point(field_release:server.MatchData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.data)
}

inline const MatchData* MatchData::internal_default_instance() {
  return &MatchData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchesLeave::kMatchIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchesLeave::TMatchesLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchesLeave)
}

void TMatchesLeave::InitAsDefaultInstance() {
}

TMatchesLeave::TMatchesLeave(const TMatchesLeave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchesLeave)
}

void TMatchesLeave::SharedCtor() {
  _cached_size_ = 0;
}

TMatchesLeave::~TMatchesLeave() {
  // @@protoc_insertion_point(destructor:server.TMatchesLeave)
  SharedDtor();
}

void TMatchesLeave::SharedDtor() {
}

void TMatchesLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchesLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchesLeave_descriptor_;
}

const TMatchesLeave& TMatchesLeave::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchesLeave> TMatchesLeave_default_instance_;

TMatchesLeave* TMatchesLeave::New(::google::protobuf::Arena* arena) const {
  TMatchesLeave* n = new TMatchesLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchesLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchesLeave)
  match_ids_.Clear();
}

bool TMatchesLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchesLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string match_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_match_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_match_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_ids(this->match_ids_size() - 1).data(),
            this->match_ids(this->match_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TMatchesLeave.match_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_match_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchesLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchesLeave)
  return false;
#undef DO_
}

void TMatchesLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchesLeave)
  // repeated string match_ids = 1;
  for (int i = 0; i < this->match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_ids(i).data(), this->match_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchesLeave.match_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->match_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchesLeave)
}

::google::protobuf::uint8* TMatchesLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchesLeave)
  // repeated string match_ids = 1;
  for (int i = 0; i < this->match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_ids(i).data(), this->match_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TMatchesLeave.match_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->match_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchesLeave)
  return target;
}

size_t TMatchesLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchesLeave)
  size_t total_size = 0;

  // repeated string match_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->match_ids_size());
  for (int i = 0; i < this->match_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->match_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchesLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchesLeave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchesLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchesLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchesLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchesLeave)
    UnsafeMergeFrom(*source);
  }
}

void TMatchesLeave::MergeFrom(const TMatchesLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchesLeave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchesLeave::UnsafeMergeFrom(const TMatchesLeave& from) {
  GOOGLE_DCHECK(&from != this);
  match_ids_.UnsafeMergeFrom(from.match_ids_);
}

void TMatchesLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchesLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchesLeave::CopyFrom(const TMatchesLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchesLeave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchesLeave::IsInitialized() const {

  return true;
}

void TMatchesLeave::Swap(TMatchesLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchesLeave::InternalSwap(TMatchesLeave* other) {
  match_ids_.UnsafeArenaSwap(&other->match_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchesLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchesLeave_descriptor_;
  metadata.reflection = TMatchesLeave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchesLeave

// repeated string match_ids = 1;
int TMatchesLeave::match_ids_size() const {
  return match_ids_.size();
}
void TMatchesLeave::clear_match_ids() {
  match_ids_.Clear();
}
const ::std::string& TMatchesLeave::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchesLeave.match_ids)
  return match_ids_.Get(index);
}
::std::string* TMatchesLeave::mutable_match_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchesLeave.match_ids)
  return match_ids_.Mutable(index);
}
void TMatchesLeave::set_match_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesLeave.match_ids)
  match_ids_.Mutable(index)->assign(value);
}
void TMatchesLeave::set_match_ids(int index, const char* value) {
  match_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TMatchesLeave.match_ids)
}
void TMatchesLeave::set_match_ids(int index, const char* value, size_t size) {
  match_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesLeave.match_ids)
}
::std::string* TMatchesLeave::add_match_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TMatchesLeave.match_ids)
  return match_ids_.Add();
}
void TMatchesLeave::add_match_ids(const ::std::string& value) {
  match_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TMatchesLeave.match_ids)
}
void TMatchesLeave::add_match_ids(const char* value) {
  match_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TMatchesLeave.match_ids)
}
void TMatchesLeave::add_match_ids(const char* value, size_t size) {
  match_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TMatchesLeave.match_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TMatchesLeave::match_ids() const {
  // @@protoc_insertion_point(field_list:server.TMatchesLeave.match_ids)
  return match_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TMatchesLeave::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchesLeave.match_ids)
  return &match_ids_;
}

inline const TMatchesLeave* TMatchesLeave::internal_default_instance() {
  return &TMatchesLeave_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageList::kUserIdFieldNumber;
const int TStorageList::kBucketFieldNumber;
const int TStorageList::kCollectionFieldNumber;
const int TStorageList::kLimitFieldNumber;
const int TStorageList::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageList::TStorageList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageList)
}

void TStorageList::InitAsDefaultInstance() {
}

TStorageList::TStorageList(const TStorageList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageList)
}

void TStorageList::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TStorageList::~TStorageList() {
  // @@protoc_insertion_point(destructor:server.TStorageList)
  SharedDtor();
}

void TStorageList::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageList_descriptor_;
}

const TStorageList& TStorageList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageList> TStorageList_default_instance_;

TStorageList* TStorageList::New(::google::protobuf::Arena* arena) const {
  TStorageList* n = new TStorageList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageList)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = GOOGLE_LONGLONG(0);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageList.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bucket;
        break;
      }

      // optional string bucket = 2;
      case 2: {
        if (tag == 18) {
         parse_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageList.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collection;
        break;
      }

      // optional string collection = 3;
      case 3: {
        if (tag == 26) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageList.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // optional int64 limit = 4;
      case 4: {
        if (tag == 32) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cursor;
        break;
      }

      // optional string cursor = 5;
      case 5: {
        if (tag == 42) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageList.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageList)
  return false;
#undef DO_
}

void TStorageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageList)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string bucket = 2;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bucket(), output);
  }

  // optional string collection = 3;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection(), output);
  }

  // optional int64 limit = 4;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->limit(), output);
  }

  // optional string cursor = 5;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageList)
}

::google::protobuf::uint8* TStorageList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageList)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string bucket = 2;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bucket(), target);
  }

  // optional string collection = 3;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->collection(), target);
  }

  // optional int64 limit = 4;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->limit(), target);
  }

  // optional string cursor = 5;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageList)
  return target;
}

size_t TStorageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageList)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string bucket = 2;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 3;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional int64 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // optional string cursor = 5;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageList)
    UnsafeMergeFrom(*source);
  }
}

void TStorageList::MergeFrom(const TStorageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageList::UnsafeMergeFrom(const TStorageList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TStorageList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageList::CopyFrom(const TStorageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageList::IsInitialized() const {

  return true;
}

void TStorageList::Swap(TStorageList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageList::InternalSwap(TStorageList* other) {
  user_id_.Swap(&other->user_id_);
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  std::swap(limit_, other->limit_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageList_descriptor_;
  metadata.reflection = TStorageList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageList

// optional string user_id = 1;
void TStorageList::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageList::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.user_id)
}
void TStorageList::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.user_id)
}
void TStorageList::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.user_id)
}
::std::string* TStorageList::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageList::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageList.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.user_id)
}

// optional string bucket = 2;
void TStorageList::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageList::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.bucket)
}
void TStorageList::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.bucket)
}
void TStorageList::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.bucket)
}
::std::string* TStorageList::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageList::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageList.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.bucket)
}

// optional string collection = 3;
void TStorageList::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageList::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.collection)
}
void TStorageList::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.collection)
}
void TStorageList::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.collection)
}
::std::string* TStorageList::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageList::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageList.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.collection)
}

// optional int64 limit = 4;
void TStorageList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageList::limit() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.limit)
  return limit_;
}
void TStorageList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageList.limit)
}

// optional string cursor = 5;
void TStorageList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageList.cursor)
}
void TStorageList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageList.cursor)
}
void TStorageList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.cursor)
}
::std::string* TStorageList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TStorageList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.cursor)
}

inline const TStorageList* TStorageList::internal_default_instance() {
  return &TStorageList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageFetch_StorageKey::kBucketFieldNumber;
const int TStorageFetch_StorageKey::kCollectionFieldNumber;
const int TStorageFetch_StorageKey::kRecordFieldNumber;
const int TStorageFetch_StorageKey::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageFetch_StorageKey::TStorageFetch_StorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageFetch.StorageKey)
}

void TStorageFetch_StorageKey::InitAsDefaultInstance() {
}

TStorageFetch_StorageKey::TStorageFetch_StorageKey(const TStorageFetch_StorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageFetch.StorageKey)
}

void TStorageFetch_StorageKey::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageFetch_StorageKey::~TStorageFetch_StorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageFetch.StorageKey)
  SharedDtor();
}

void TStorageFetch_StorageKey::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageFetch_StorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageFetch_StorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageFetch_StorageKey_descriptor_;
}

const TStorageFetch_StorageKey& TStorageFetch_StorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageFetch_StorageKey> TStorageFetch_StorageKey_default_instance_;

TStorageFetch_StorageKey* TStorageFetch_StorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageFetch_StorageKey* n = new TStorageFetch_StorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageFetch_StorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageFetch.StorageKey)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageFetch_StorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageFetch.StorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageFetch.StorageKey.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageFetch.StorageKey.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageFetch.StorageKey.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageFetch.StorageKey.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageFetch.StorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageFetch.StorageKey)
  return false;
#undef DO_
}

void TStorageFetch_StorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageFetch.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageFetch.StorageKey)
}

::google::protobuf::uint8* TStorageFetch_StorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageFetch.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageFetch.StorageKey)
  return target;
}

size_t TStorageFetch_StorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageFetch.StorageKey)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageFetch_StorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageFetch.StorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageFetch_StorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageFetch_StorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageFetch.StorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageFetch.StorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageFetch_StorageKey::MergeFrom(const TStorageFetch_StorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageFetch.StorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageFetch_StorageKey::UnsafeMergeFrom(const TStorageFetch_StorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TStorageFetch_StorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageFetch.StorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageFetch_StorageKey::CopyFrom(const TStorageFetch_StorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageFetch.StorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageFetch_StorageKey::IsInitialized() const {

  return true;
}

void TStorageFetch_StorageKey::Swap(TStorageFetch_StorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageFetch_StorageKey::InternalSwap(TStorageFetch_StorageKey* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageFetch_StorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageFetch_StorageKey_descriptor_;
  metadata.reflection = TStorageFetch_StorageKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageFetch::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageFetch::TStorageFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageFetch)
}

void TStorageFetch::InitAsDefaultInstance() {
}

TStorageFetch::TStorageFetch(const TStorageFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageFetch)
}

void TStorageFetch::SharedCtor() {
  _cached_size_ = 0;
}

TStorageFetch::~TStorageFetch() {
  // @@protoc_insertion_point(destructor:server.TStorageFetch)
  SharedDtor();
}

void TStorageFetch::SharedDtor() {
}

void TStorageFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageFetch_descriptor_;
}

const TStorageFetch& TStorageFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageFetch> TStorageFetch_default_instance_;

TStorageFetch* TStorageFetch::New(::google::protobuf::Arena* arena) const {
  TStorageFetch* n = new TStorageFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageFetch)
  keys_.Clear();
}

bool TStorageFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageFetch.StorageKey keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageFetch)
  return false;
#undef DO_
}

void TStorageFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageFetch)
  // repeated .server.TStorageFetch.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageFetch)
}

::google::protobuf::uint8* TStorageFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageFetch)
  // repeated .server.TStorageFetch.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageFetch)
  return target;
}

size_t TStorageFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageFetch)
  size_t total_size = 0;

  // repeated .server.TStorageFetch.StorageKey keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageFetch)
    UnsafeMergeFrom(*source);
  }
}

void TStorageFetch::MergeFrom(const TStorageFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageFetch::UnsafeMergeFrom(const TStorageFetch& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void TStorageFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageFetch::CopyFrom(const TStorageFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageFetch::IsInitialized() const {

  return true;
}

void TStorageFetch::Swap(TStorageFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageFetch::InternalSwap(TStorageFetch* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageFetch_descriptor_;
  metadata.reflection = TStorageFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageFetch_StorageKey

// optional string bucket = 1;
void TStorageFetch_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.bucket)
}
void TStorageFetch_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.bucket)
}
void TStorageFetch_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.bucket)
}
::std::string* TStorageFetch_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.bucket)
}

// optional string collection = 2;
void TStorageFetch_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.collection)
}
void TStorageFetch_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.collection)
}
void TStorageFetch_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.collection)
}
::std::string* TStorageFetch_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.collection)
}

// optional string record = 3;
void TStorageFetch_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.record)
}
void TStorageFetch_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.record)
}
void TStorageFetch_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.record)
}
::std::string* TStorageFetch_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.record)
}

// optional string user_id = 4;
void TStorageFetch_StorageKey::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.user_id)
}
void TStorageFetch_StorageKey::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.user_id)
}
void TStorageFetch_StorageKey::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.user_id)
}
::std::string* TStorageFetch_StorageKey::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.user_id)
}

inline const TStorageFetch_StorageKey* TStorageFetch_StorageKey::internal_default_instance() {
  return &TStorageFetch_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageFetch

// repeated .server.TStorageFetch.StorageKey keys = 1;
int TStorageFetch::keys_size() const {
  return keys_.size();
}
void TStorageFetch::clear_keys() {
  keys_.Clear();
}
const ::server::TStorageFetch_StorageKey& TStorageFetch::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.keys)
  return keys_.Get(index);
}
::server::TStorageFetch_StorageKey* TStorageFetch::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.keys)
  return keys_.Mutable(index);
}
::server::TStorageFetch_StorageKey* TStorageFetch::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageFetch.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >*
TStorageFetch::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageFetch.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >&
TStorageFetch::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageFetch.keys)
  return keys_;
}

inline const TStorageFetch* TStorageFetch::internal_default_instance() {
  return &TStorageFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageData_StorageData::kBucketFieldNumber;
const int TStorageData_StorageData::kCollectionFieldNumber;
const int TStorageData_StorageData::kRecordFieldNumber;
const int TStorageData_StorageData::kUserIdFieldNumber;
const int TStorageData_StorageData::kValueFieldNumber;
const int TStorageData_StorageData::kVersionFieldNumber;
const int TStorageData_StorageData::kPermissionReadFieldNumber;
const int TStorageData_StorageData::kPermissionWriteFieldNumber;
const int TStorageData_StorageData::kCreatedAtFieldNumber;
const int TStorageData_StorageData::kUpdatedAtFieldNumber;
const int TStorageData_StorageData::kExpiresAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageData_StorageData::TStorageData_StorageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageData.StorageData)
}

void TStorageData_StorageData::InitAsDefaultInstance() {
}

TStorageData_StorageData::TStorageData_StorageData(const TStorageData_StorageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageData.StorageData)
}

void TStorageData_StorageData::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&permission_read_, 0, reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&permission_read_) + sizeof(expires_at_));
  _cached_size_ = 0;
}

TStorageData_StorageData::~TStorageData_StorageData() {
  // @@protoc_insertion_point(destructor:server.TStorageData.StorageData)
  SharedDtor();
}

void TStorageData_StorageData::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageData_StorageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageData_StorageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageData_StorageData_descriptor_;
}

const TStorageData_StorageData& TStorageData_StorageData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageData_StorageData> TStorageData_StorageData_default_instance_;

TStorageData_StorageData* TStorageData_StorageData::New(::google::protobuf::Arena* arena) const {
  TStorageData_StorageData* n = new TStorageData_StorageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageData_StorageData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageData.StorageData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TStorageData_StorageData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TStorageData_StorageData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(permission_read_, permission_write_);
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(created_at_, expires_at_);

#undef ZR_HELPER_
#undef ZR_

}

bool TStorageData_StorageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageData.StorageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional string value = 5;
      case 5: {
        if (tag == 42) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (tag == 50) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_permission_read;
        break;
      }

      // optional int32 permission_read = 7;
      case 7: {
        if (tag == 56) {
         parse_permission_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_permission_write;
        break;
      }

      // optional int32 permission_write = 8;
      case 8: {
        if (tag == 64) {
         parse_permission_write:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_write_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 9;
      case 9: {
        if (tag == 72) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_updated_at;
        break;
      }

      // optional int64 updated_at = 10;
      case 10: {
        if (tag == 80) {
         parse_updated_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 11;
      case 11: {
        if (tag == 88) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageData.StorageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageData.StorageData)
  return false;
#undef DO_
}

void TStorageData_StorageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageData.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // optional string value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  // optional string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // optional int32 permission_read = 7;
  if (this->permission_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->permission_read(), output);
  }

  // optional int32 permission_write = 8;
  if (this->permission_write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->permission_write(), output);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->created_at(), output);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updated_at(), output);
  }

  // optional int64 expires_at = 11;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->expires_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageData.StorageData)
}

::google::protobuf::uint8* TStorageData_StorageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageData.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // optional string value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  // optional string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // optional int32 permission_read = 7;
  if (this->permission_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->permission_read(), target);
  }

  // optional int32 permission_write = 8;
  if (this->permission_write() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->permission_write(), target);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->created_at(), target);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updated_at(), target);
  }

  // optional int64 expires_at = 11;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->expires_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageData.StorageData)
  return target;
}

size_t TStorageData_StorageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageData.StorageData)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional string version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional int32 permission_read = 7;
  if (this->permission_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_read());
  }

  // optional int32 permission_write = 8;
  if (this->permission_write() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_write());
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updated_at());
  }

  // optional int64 expires_at = 11;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageData_StorageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageData.StorageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageData_StorageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageData_StorageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageData.StorageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageData.StorageData)
    UnsafeMergeFrom(*source);
  }
}

void TStorageData_StorageData::MergeFrom(const TStorageData_StorageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageData.StorageData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageData_StorageData::UnsafeMergeFrom(const TStorageData_StorageData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.permission_read() != 0) {
    set_permission_read(from.permission_read());
  }
  if (from.permission_write() != 0) {
    set_permission_write(from.permission_write());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
}

void TStorageData_StorageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageData.StorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageData_StorageData::CopyFrom(const TStorageData_StorageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageData.StorageData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageData_StorageData::IsInitialized() const {

  return true;
}

void TStorageData_StorageData::Swap(TStorageData_StorageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageData_StorageData::InternalSwap(TStorageData_StorageData* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  user_id_.Swap(&other->user_id_);
  value_.Swap(&other->value_);
  version_.Swap(&other->version_);
  std::swap(permission_read_, other->permission_read_);
  std::swap(permission_write_, other->permission_write_);
  std::swap(created_at_, other->created_at_);
  std::swap(updated_at_, other->updated_at_);
  std::swap(expires_at_, other->expires_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageData_StorageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageData_StorageData_descriptor_;
  metadata.reflection = TStorageData_StorageData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageData::kDataFieldNumber;
const int TStorageData::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageData::TStorageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageData)
}

void TStorageData::InitAsDefaultInstance() {
}

TStorageData::TStorageData(const TStorageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageData)
}

void TStorageData::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageData::~TStorageData() {
  // @@protoc_insertion_point(destructor:server.TStorageData)
  SharedDtor();
}

void TStorageData::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageData_descriptor_;
}

const TStorageData& TStorageData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageData> TStorageData_default_instance_;

TStorageData* TStorageData::New(::google::protobuf::Arena* arena) const {
  TStorageData* n = new TStorageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageData)
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.Clear();
}

bool TStorageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageData.StorageData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional string cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageData)
  return false;
#undef DO_
}

void TStorageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageData)
  // repeated .server.TStorageData.StorageData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageData)
}

::google::protobuf::uint8* TStorageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageData)
  // repeated .server.TStorageData.StorageData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), false, target);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageData)
  return target;
}

size_t TStorageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageData)
  size_t total_size = 0;

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // repeated .server.TStorageData.StorageData data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageData)
    UnsafeMergeFrom(*source);
  }
}

void TStorageData::MergeFrom(const TStorageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageData::UnsafeMergeFrom(const TStorageData& from) {
  GOOGLE_DCHECK(&from != this);
  data_.MergeFrom(from.data_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TStorageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageData::CopyFrom(const TStorageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageData::IsInitialized() const {

  return true;
}

void TStorageData::Swap(TStorageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageData::InternalSwap(TStorageData* other) {
  data_.UnsafeArenaSwap(&other->data_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageData_descriptor_;
  metadata.reflection = TStorageData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageData_StorageData

// optional string bucket = 1;
void TStorageData_StorageData::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.bucket)
}
void TStorageData_StorageData::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.bucket)
}
void TStorageData_StorageData::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.bucket)
}
::std::string* TStorageData_StorageData::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.bucket)
}

// optional string collection = 2;
void TStorageData_StorageData::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.collection)
}
void TStorageData_StorageData::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.collection)
}
void TStorageData_StorageData::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.collection)
}
::std::string* TStorageData_StorageData::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.collection)
}

// optional string record = 3;
void TStorageData_StorageData::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.record)
}
void TStorageData_StorageData::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.record)
}
void TStorageData_StorageData::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.record)
}
::std::string* TStorageData_StorageData::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.record)
}

// optional string user_id = 4;
void TStorageData_StorageData::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.user_id)
}
void TStorageData_StorageData::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.user_id)
}
void TStorageData_StorageData::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.user_id)
}
::std::string* TStorageData_StorageData::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.user_id)
}

// optional string value = 5;
void TStorageData_StorageData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.value)
}
void TStorageData_StorageData::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.value)
}
void TStorageData_StorageData::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.value)
}
::std::string* TStorageData_StorageData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.value)
}

// optional string version = 6;
void TStorageData_StorageData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.version)
}
void TStorageData_StorageData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.version)
}
void TStorageData_StorageData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.version)
}
::std::string* TStorageData_StorageData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.version)
}

// optional int32 permission_read = 7;
void TStorageData_StorageData::clear_permission_read() {
  permission_read_ = 0;
}
::google::protobuf::int32 TStorageData_StorageData::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_read)
  return permission_read_;
}
void TStorageData_StorageData::set_permission_read(::google::protobuf::int32 value) {
  
  permission_read_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_read)
}

// optional int32 permission_write = 8;
void TStorageData_StorageData::clear_permission_write() {
  permission_write_ = 0;
}
::google::protobuf::int32 TStorageData_StorageData::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_write)
  return permission_write_;
}
void TStorageData_StorageData::set_permission_write(::google::protobuf::int32 value) {
  
  permission_write_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_write)
}

// optional int64 created_at = 9;
void TStorageData_StorageData::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::created_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.created_at)
  return created_at_;
}
void TStorageData_StorageData::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.created_at)
}

// optional int64 updated_at = 10;
void TStorageData_StorageData::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::updated_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.updated_at)
  return updated_at_;
}
void TStorageData_StorageData::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.updated_at)
}

// optional int64 expires_at = 11;
void TStorageData_StorageData::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.expires_at)
  return expires_at_;
}
void TStorageData_StorageData::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.expires_at)
}

inline const TStorageData_StorageData* TStorageData_StorageData::internal_default_instance() {
  return &TStorageData_StorageData_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageData

// repeated .server.TStorageData.StorageData data = 1;
int TStorageData::data_size() const {
  return data_.size();
}
void TStorageData::clear_data() {
  data_.Clear();
}
const ::server::TStorageData_StorageData& TStorageData::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageData.data)
  return data_.Get(index);
}
::server::TStorageData_StorageData* TStorageData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.data)
  return data_.Mutable(index);
}
::server::TStorageData_StorageData* TStorageData::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageData.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >*
TStorageData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageData.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >&
TStorageData::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageData.data)
  return data_;
}

// optional string cursor = 2;
void TStorageData::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData::cursor() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.cursor)
}
void TStorageData::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.cursor)
}
void TStorageData::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.cursor)
}
::std::string* TStorageData::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TStorageData.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.cursor)
}

inline const TStorageData* TStorageData::internal_default_instance() {
  return &TStorageData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageWrite_StorageData::kBucketFieldNumber;
const int TStorageWrite_StorageData::kCollectionFieldNumber;
const int TStorageWrite_StorageData::kRecordFieldNumber;
const int TStorageWrite_StorageData::kValueFieldNumber;
const int TStorageWrite_StorageData::kVersionFieldNumber;
const int TStorageWrite_StorageData::kPermissionReadFieldNumber;
const int TStorageWrite_StorageData::kPermissionWriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageWrite_StorageData::TStorageWrite_StorageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageWrite.StorageData)
}

void TStorageWrite_StorageData::InitAsDefaultInstance() {
}

TStorageWrite_StorageData::TStorageWrite_StorageData(const TStorageWrite_StorageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageWrite.StorageData)
}

void TStorageWrite_StorageData::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&permission_read_, 0, reinterpret_cast<char*>(&permission_write_) -
    reinterpret_cast<char*>(&permission_read_) + sizeof(permission_write_));
  _cached_size_ = 0;
}

TStorageWrite_StorageData::~TStorageWrite_StorageData() {
  // @@protoc_insertion_point(destructor:server.TStorageWrite.StorageData)
  SharedDtor();
}

void TStorageWrite_StorageData::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageWrite_StorageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageWrite_StorageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageWrite_StorageData_descriptor_;
}

const TStorageWrite_StorageData& TStorageWrite_StorageData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageWrite_StorageData> TStorageWrite_StorageData_default_instance_;

TStorageWrite_StorageData* TStorageWrite_StorageData::New(::google::protobuf::Arena* arena) const {
  TStorageWrite_StorageData* n = new TStorageWrite_StorageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageWrite_StorageData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageWrite.StorageData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TStorageWrite_StorageData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TStorageWrite_StorageData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(permission_read_, permission_write_);
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TStorageWrite_StorageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageWrite.StorageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional string value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional string version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_permission_read;
        break;
      }

      // optional int32 permission_read = 6;
      case 6: {
        if (tag == 48) {
         parse_permission_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_permission_write;
        break;
      }

      // optional int32 permission_write = 7;
      case 7: {
        if (tag == 56) {
         parse_permission_write:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_write_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageWrite.StorageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageWrite.StorageData)
  return false;
#undef DO_
}

void TStorageWrite_StorageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageWrite.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // optional int32 permission_read = 6;
  if (this->permission_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->permission_read(), output);
  }

  // optional int32 permission_write = 7;
  if (this->permission_write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->permission_write(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageWrite.StorageData)
}

::google::protobuf::uint8* TStorageWrite_StorageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageWrite.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // optional int32 permission_read = 6;
  if (this->permission_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->permission_read(), target);
  }

  // optional int32 permission_write = 7;
  if (this->permission_write() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->permission_write(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageWrite.StorageData)
  return target;
}

size_t TStorageWrite_StorageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageWrite.StorageData)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional int32 permission_read = 6;
  if (this->permission_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_read());
  }

  // optional int32 permission_write = 7;
  if (this->permission_write() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_write());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageWrite_StorageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageWrite.StorageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageWrite_StorageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageWrite_StorageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageWrite.StorageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageWrite.StorageData)
    UnsafeMergeFrom(*source);
  }
}

void TStorageWrite_StorageData::MergeFrom(const TStorageWrite_StorageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageWrite.StorageData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageWrite_StorageData::UnsafeMergeFrom(const TStorageWrite_StorageData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.permission_read() != 0) {
    set_permission_read(from.permission_read());
  }
  if (from.permission_write() != 0) {
    set_permission_write(from.permission_write());
  }
}

void TStorageWrite_StorageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageWrite.StorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageWrite_StorageData::CopyFrom(const TStorageWrite_StorageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageWrite.StorageData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageWrite_StorageData::IsInitialized() const {

  return true;
}

void TStorageWrite_StorageData::Swap(TStorageWrite_StorageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageWrite_StorageData::InternalSwap(TStorageWrite_StorageData* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  value_.Swap(&other->value_);
  version_.Swap(&other->version_);
  std::swap(permission_read_, other->permission_read_);
  std::swap(permission_write_, other->permission_write_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageWrite_StorageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageWrite_StorageData_descriptor_;
  metadata.reflection = TStorageWrite_StorageData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageWrite::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageWrite::TStorageWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageWrite)
}

void TStorageWrite::InitAsDefaultInstance() {
}

TStorageWrite::TStorageWrite(const TStorageWrite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageWrite)
}

void TStorageWrite::SharedCtor() {
  _cached_size_ = 0;
}

TStorageWrite::~TStorageWrite() {
  // @@protoc_insertion_point(destructor:server.TStorageWrite)
  SharedDtor();
}

void TStorageWrite::SharedDtor() {
}

void TStorageWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageWrite_descriptor_;
}

const TStorageWrite& TStorageWrite::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageWrite> TStorageWrite_default_instance_;

TStorageWrite* TStorageWrite::New(::google::protobuf::Arena* arena) const {
  TStorageWrite* n = new TStorageWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageWrite)
  data_.Clear();
}

bool TStorageWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageWrite.StorageData data = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageWrite)
  return false;
#undef DO_
}

void TStorageWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageWrite)
  // repeated .server.TStorageWrite.StorageData data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageWrite)
}

::google::protobuf::uint8* TStorageWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageWrite)
  // repeated .server.TStorageWrite.StorageData data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageWrite)
  return target;
}

size_t TStorageWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageWrite)
  size_t total_size = 0;

  // repeated .server.TStorageWrite.StorageData data = 3;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageWrite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageWrite)
    UnsafeMergeFrom(*source);
  }
}

void TStorageWrite::MergeFrom(const TStorageWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageWrite)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageWrite::UnsafeMergeFrom(const TStorageWrite& from) {
  GOOGLE_DCHECK(&from != this);
  data_.MergeFrom(from.data_);
}

void TStorageWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageWrite::CopyFrom(const TStorageWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageWrite)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageWrite::IsInitialized() const {

  return true;
}

void TStorageWrite::Swap(TStorageWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageWrite::InternalSwap(TStorageWrite* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageWrite_descriptor_;
  metadata.reflection = TStorageWrite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageWrite_StorageData

// optional string bucket = 1;
void TStorageWrite_StorageData::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.bucket)
}
void TStorageWrite_StorageData::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.bucket)
}
void TStorageWrite_StorageData::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.bucket)
}
::std::string* TStorageWrite_StorageData::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.bucket)
}

// optional string collection = 2;
void TStorageWrite_StorageData::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.collection)
}
void TStorageWrite_StorageData::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.collection)
}
void TStorageWrite_StorageData::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.collection)
}
::std::string* TStorageWrite_StorageData::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.collection)
}

// optional string record = 3;
void TStorageWrite_StorageData::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.record)
}
void TStorageWrite_StorageData::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.record)
}
void TStorageWrite_StorageData::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.record)
}
::std::string* TStorageWrite_StorageData::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.record)
}

// optional string value = 4;
void TStorageWrite_StorageData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.value)
}
void TStorageWrite_StorageData::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.value)
}
void TStorageWrite_StorageData::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.value)
}
::std::string* TStorageWrite_StorageData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.value)
}

// optional string version = 5;
void TStorageWrite_StorageData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.version)
}
void TStorageWrite_StorageData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.version)
}
void TStorageWrite_StorageData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.version)
}
::std::string* TStorageWrite_StorageData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.version)
}

// optional int32 permission_read = 6;
void TStorageWrite_StorageData::clear_permission_read() {
  permission_read_ = 0;
}
::google::protobuf::int32 TStorageWrite_StorageData::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.permission_read)
  return permission_read_;
}
void TStorageWrite_StorageData::set_permission_read(::google::protobuf::int32 value) {
  
  permission_read_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.permission_read)
}

// optional int32 permission_write = 7;
void TStorageWrite_StorageData::clear_permission_write() {
  permission_write_ = 0;
}
::google::protobuf::int32 TStorageWrite_StorageData::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.permission_write)
  return permission_write_;
}
void TStorageWrite_StorageData::set_permission_write(::google::protobuf::int32 value) {
  
  permission_write_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.permission_write)
}

inline const TStorageWrite_StorageData* TStorageWrite_StorageData::internal_default_instance() {
  return &TStorageWrite_StorageData_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageWrite

// repeated .server.TStorageWrite.StorageData data = 3;
int TStorageWrite::data_size() const {
  return data_.size();
}
void TStorageWrite::clear_data() {
  data_.Clear();
}
const ::server::TStorageWrite_StorageData& TStorageWrite::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.data)
  return data_.Get(index);
}
::server::TStorageWrite_StorageData* TStorageWrite::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.data)
  return data_.Mutable(index);
}
::server::TStorageWrite_StorageData* TStorageWrite::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageWrite.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >*
TStorageWrite::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageWrite.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >&
TStorageWrite::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageWrite.data)
  return data_;
}

inline const TStorageWrite* TStorageWrite::internal_default_instance() {
  return &TStorageWrite_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor_;
}
bool TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::ADD;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::APPEND;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::COPY;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::INCR;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::INIT;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::MERGE;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::MOVE;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::PATCH;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::REMOVE;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::REPLACE;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::TEST;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::COMPARE;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::UpdateOpCode_MIN;
const TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::UpdateOpCode_MAX;
const int TStorageUpdate_StorageUpdate_UpdateOp::UpdateOpCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageUpdate_StorageUpdate_UpdateOp::kOpFieldNumber;
const int TStorageUpdate_StorageUpdate_UpdateOp::kPathFieldNumber;
const int TStorageUpdate_StorageUpdate_UpdateOp::kValueFieldNumber;
const int TStorageUpdate_StorageUpdate_UpdateOp::kFromFieldNumber;
const int TStorageUpdate_StorageUpdate_UpdateOp::kConditionalFieldNumber;
const int TStorageUpdate_StorageUpdate_UpdateOp::kAssertFieldNumber;
const int TStorageUpdate_StorageUpdate_UpdateOp::kOpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageUpdate_StorageUpdate_UpdateOp::TStorageUpdate_StorageUpdate_UpdateOp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageUpdate.StorageUpdate.UpdateOp)
}

void TStorageUpdate_StorageUpdate_UpdateOp::InitAsDefaultInstance() {
}

TStorageUpdate_StorageUpdate_UpdateOp::TStorageUpdate_StorageUpdate_UpdateOp(const TStorageUpdate_StorageUpdate_UpdateOp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageUpdate.StorageUpdate.UpdateOp)
}

void TStorageUpdate_StorageUpdate_UpdateOp::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_, 0, reinterpret_cast<char*>(&assert_) -
    reinterpret_cast<char*>(&op_) + sizeof(assert_));
  _cached_size_ = 0;
}

TStorageUpdate_StorageUpdate_UpdateOp::~TStorageUpdate_StorageUpdate_UpdateOp() {
  // @@protoc_insertion_point(destructor:server.TStorageUpdate.StorageUpdate.UpdateOp)
  SharedDtor();
}

void TStorageUpdate_StorageUpdate_UpdateOp::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageUpdate_StorageUpdate_UpdateOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageUpdate_StorageUpdate_UpdateOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageUpdate_StorageUpdate_UpdateOp_descriptor_;
}

const TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate_UpdateOp::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate_UpdateOp> TStorageUpdate_StorageUpdate_UpdateOp_default_instance_;

TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::New(::google::protobuf::Arena* arena) const {
  TStorageUpdate_StorageUpdate_UpdateOp* n = new TStorageUpdate_StorageUpdate_UpdateOp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageUpdate_StorageUpdate_UpdateOp::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TStorageUpdate_StorageUpdate_UpdateOp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TStorageUpdate_StorageUpdate_UpdateOp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(op_, assert_);
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  ops_.Clear();
}

bool TStorageUpdate_StorageUpdate_UpdateOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageUpdate.StorageUpdate.UpdateOp.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageUpdate.StorageUpdate.UpdateOp.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_from;
        break;
      }

      // optional string from = 4;
      case 4: {
        if (tag == 34) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageUpdate.StorageUpdate.UpdateOp.from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_conditional;
        break;
      }

      // optional bool conditional = 5;
      case 5: {
        if (tag == 40) {
         parse_conditional:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conditional_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_assert;
        break;
      }

      // optional int64 assert = 6;
      case 6: {
        if (tag == 48) {
         parse_assert:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &assert_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ops;
        break;
      }

      // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
      case 7: {
        if (tag == 58) {
         parse_ops:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_ops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageUpdate.StorageUpdate.UpdateOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageUpdate.StorageUpdate.UpdateOp)
  return false;
#undef DO_
}

void TStorageUpdate_StorageUpdate_UpdateOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  // optional int32 op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.UpdateOp.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.UpdateOp.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // optional string from = 4;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.UpdateOp.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from(), output);
  }

  // optional bool conditional = 5;
  if (this->conditional() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->conditional(), output);
  }

  // optional int64 assert = 6;
  if (this->assert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->assert(), output);
  }

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ops(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageUpdate.StorageUpdate.UpdateOp)
}

::google::protobuf::uint8* TStorageUpdate_StorageUpdate_UpdateOp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  // optional int32 op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.UpdateOp.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.UpdateOp.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional string from = 4;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.UpdateOp.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from(), target);
  }

  // optional bool conditional = 5;
  if (this->conditional() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->conditional(), target);
  }

  // optional int64 assert = 6;
  if (this->assert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->assert(), target);
  }

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->ops(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate.StorageUpdate.UpdateOp)
  return target;
}

size_t TStorageUpdate_StorageUpdate_UpdateOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  size_t total_size = 0;

  // optional int32 op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->op());
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional string from = 4;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // optional bool conditional = 5;
  if (this->conditional() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 assert = 6;
  if (this->assert() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->assert());
  }

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
  {
    unsigned int count = this->ops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ops(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageUpdate_StorageUpdate_UpdateOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageUpdate_StorageUpdate_UpdateOp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageUpdate_StorageUpdate_UpdateOp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate.StorageUpdate.UpdateOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate.StorageUpdate.UpdateOp)
    UnsafeMergeFrom(*source);
  }
}

void TStorageUpdate_StorageUpdate_UpdateOp::MergeFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageUpdate_StorageUpdate_UpdateOp::UnsafeMergeFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from) {
  GOOGLE_DCHECK(&from != this);
  ops_.MergeFrom(from.ops_);
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.conditional() != 0) {
    set_conditional(from.conditional());
  }
  if (from.assert() != 0) {
    set_assert(from.assert());
  }
}

void TStorageUpdate_StorageUpdate_UpdateOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageUpdate_StorageUpdate_UpdateOp::CopyFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageUpdate_StorageUpdate_UpdateOp::IsInitialized() const {

  return true;
}

void TStorageUpdate_StorageUpdate_UpdateOp::Swap(TStorageUpdate_StorageUpdate_UpdateOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageUpdate_StorageUpdate_UpdateOp::InternalSwap(TStorageUpdate_StorageUpdate_UpdateOp* other) {
  std::swap(op_, other->op_);
  path_.Swap(&other->path_);
  value_.Swap(&other->value_);
  from_.Swap(&other->from_);
  std::swap(conditional_, other->conditional_);
  std::swap(assert_, other->assert_);
  ops_.UnsafeArenaSwap(&other->ops_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageUpdate_StorageUpdate_UpdateOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageUpdate_StorageUpdate_UpdateOp_descriptor_;
  metadata.reflection = TStorageUpdate_StorageUpdate_UpdateOp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageUpdate_StorageUpdate_StorageKey::kBucketFieldNumber;
const int TStorageUpdate_StorageUpdate_StorageKey::kCollectionFieldNumber;
const int TStorageUpdate_StorageUpdate_StorageKey::kRecordFieldNumber;
const int TStorageUpdate_StorageUpdate_StorageKey::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageUpdate_StorageUpdate_StorageKey::TStorageUpdate_StorageUpdate_StorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageUpdate.StorageUpdate.StorageKey)
}

void TStorageUpdate_StorageUpdate_StorageKey::InitAsDefaultInstance() {
}

TStorageUpdate_StorageUpdate_StorageKey::TStorageUpdate_StorageUpdate_StorageKey(const TStorageUpdate_StorageUpdate_StorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageUpdate.StorageUpdate.StorageKey)
}

void TStorageUpdate_StorageUpdate_StorageKey::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageUpdate_StorageUpdate_StorageKey::~TStorageUpdate_StorageUpdate_StorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageUpdate.StorageUpdate.StorageKey)
  SharedDtor();
}

void TStorageUpdate_StorageUpdate_StorageKey::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageUpdate_StorageUpdate_StorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageUpdate_StorageUpdate_StorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageUpdate_StorageUpdate_StorageKey_descriptor_;
}

const TStorageUpdate_StorageUpdate_StorageKey& TStorageUpdate_StorageUpdate_StorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate_StorageKey> TStorageUpdate_StorageUpdate_StorageKey_default_instance_;

TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate_StorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageUpdate_StorageUpdate_StorageKey* n = new TStorageUpdate_StorageUpdate_StorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageUpdate_StorageUpdate_StorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageUpdate_StorageUpdate_StorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageUpdate.StorageUpdate.StorageKey.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageUpdate.StorageUpdate.StorageKey.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageUpdate.StorageUpdate.StorageKey.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageUpdate.StorageUpdate.StorageKey.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageUpdate.StorageUpdate.StorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageUpdate.StorageUpdate.StorageKey)
  return false;
#undef DO_
}

void TStorageUpdate_StorageUpdate_StorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageUpdate.StorageUpdate.StorageKey)
}

::google::protobuf::uint8* TStorageUpdate_StorageUpdate_StorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageUpdate.StorageUpdate.StorageKey.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate.StorageUpdate.StorageKey)
  return target;
}

size_t TStorageUpdate_StorageUpdate_StorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageUpdate_StorageUpdate_StorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageUpdate_StorageUpdate_StorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageUpdate_StorageUpdate_StorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate.StorageUpdate.StorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate.StorageUpdate.StorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageUpdate_StorageUpdate_StorageKey::MergeFrom(const TStorageUpdate_StorageUpdate_StorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageUpdate_StorageUpdate_StorageKey::UnsafeMergeFrom(const TStorageUpdate_StorageUpdate_StorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void TStorageUpdate_StorageUpdate_StorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageUpdate_StorageUpdate_StorageKey::CopyFrom(const TStorageUpdate_StorageUpdate_StorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageUpdate_StorageUpdate_StorageKey::IsInitialized() const {

  return true;
}

void TStorageUpdate_StorageUpdate_StorageKey::Swap(TStorageUpdate_StorageUpdate_StorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageUpdate_StorageUpdate_StorageKey::InternalSwap(TStorageUpdate_StorageUpdate_StorageKey* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageUpdate_StorageUpdate_StorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageUpdate_StorageUpdate_StorageKey_descriptor_;
  metadata.reflection = TStorageUpdate_StorageUpdate_StorageKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageUpdate_StorageUpdate::kKeyFieldNumber;
const int TStorageUpdate_StorageUpdate::kPermissionReadFieldNumber;
const int TStorageUpdate_StorageUpdate::kPermissionWriteFieldNumber;
const int TStorageUpdate_StorageUpdate::kOpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageUpdate_StorageUpdate::TStorageUpdate_StorageUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageUpdate.StorageUpdate)
}

void TStorageUpdate_StorageUpdate::InitAsDefaultInstance() {
  key_ = const_cast< ::server::TStorageUpdate_StorageUpdate_StorageKey*>(
      ::server::TStorageUpdate_StorageUpdate_StorageKey::internal_default_instance());
}

TStorageUpdate_StorageUpdate::TStorageUpdate_StorageUpdate(const TStorageUpdate_StorageUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageUpdate.StorageUpdate)
}

void TStorageUpdate_StorageUpdate::SharedCtor() {
  key_ = NULL;
  ::memset(&permission_read_, 0, reinterpret_cast<char*>(&permission_write_) -
    reinterpret_cast<char*>(&permission_read_) + sizeof(permission_write_));
  _cached_size_ = 0;
}

TStorageUpdate_StorageUpdate::~TStorageUpdate_StorageUpdate() {
  // @@protoc_insertion_point(destructor:server.TStorageUpdate.StorageUpdate)
  SharedDtor();
}

void TStorageUpdate_StorageUpdate::SharedDtor() {
  if (this != &TStorageUpdate_StorageUpdate_default_instance_.get()) {
    delete key_;
  }
}

void TStorageUpdate_StorageUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageUpdate_StorageUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageUpdate_StorageUpdate_descriptor_;
}

const TStorageUpdate_StorageUpdate& TStorageUpdate_StorageUpdate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate> TStorageUpdate_StorageUpdate_default_instance_;

TStorageUpdate_StorageUpdate* TStorageUpdate_StorageUpdate::New(::google::protobuf::Arena* arena) const {
  TStorageUpdate_StorageUpdate* n = new TStorageUpdate_StorageUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageUpdate_StorageUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate.StorageUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TStorageUpdate_StorageUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TStorageUpdate_StorageUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(permission_read_, permission_write_);
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  ops_.Clear();
}

bool TStorageUpdate_StorageUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageUpdate.StorageUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permission_read;
        break;
      }

      // optional int32 permission_read = 2;
      case 2: {
        if (tag == 16) {
         parse_permission_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_permission_write;
        break;
      }

      // optional int32 permission_write = 3;
      case 3: {
        if (tag == 24) {
         parse_permission_write:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_write_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ops;
        break;
      }

      // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
      case 4: {
        if (tag == 34) {
         parse_ops:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_ops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageUpdate.StorageUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageUpdate.StorageUpdate)
  return false;
#undef DO_
}

void TStorageUpdate_StorageUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageUpdate.StorageUpdate)
  // optional .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // optional int32 permission_read = 2;
  if (this->permission_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->permission_read(), output);
  }

  // optional int32 permission_write = 3;
  if (this->permission_write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->permission_write(), output);
  }

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ops(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageUpdate.StorageUpdate)
}

::google::protobuf::uint8* TStorageUpdate_StorageUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate.StorageUpdate)
  // optional .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, false, target);
  }

  // optional int32 permission_read = 2;
  if (this->permission_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->permission_read(), target);
  }

  // optional int32 permission_write = 3;
  if (this->permission_write() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->permission_write(), target);
  }

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->ops(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate.StorageUpdate)
  return target;
}

size_t TStorageUpdate_StorageUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate.StorageUpdate)
  size_t total_size = 0;

  // optional .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional int32 permission_read = 2;
  if (this->permission_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_read());
  }

  // optional int32 permission_write = 3;
  if (this->permission_write() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission_write());
  }

  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
  {
    unsigned int count = this->ops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ops(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageUpdate_StorageUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate.StorageUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageUpdate_StorageUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageUpdate_StorageUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate.StorageUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate.StorageUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TStorageUpdate_StorageUpdate::MergeFrom(const TStorageUpdate_StorageUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate.StorageUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageUpdate_StorageUpdate::UnsafeMergeFrom(const TStorageUpdate_StorageUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  ops_.MergeFrom(from.ops_);
  if (from.has_key()) {
    mutable_key()->::server::TStorageUpdate_StorageUpdate_StorageKey::MergeFrom(from.key());
  }
  if (from.permission_read() != 0) {
    set_permission_read(from.permission_read());
  }
  if (from.permission_write() != 0) {
    set_permission_write(from.permission_write());
  }
}

void TStorageUpdate_StorageUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate.StorageUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageUpdate_StorageUpdate::CopyFrom(const TStorageUpdate_StorageUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate.StorageUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageUpdate_StorageUpdate::IsInitialized() const {

  return true;
}

void TStorageUpdate_StorageUpdate::Swap(TStorageUpdate_StorageUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageUpdate_StorageUpdate::InternalSwap(TStorageUpdate_StorageUpdate* other) {
  std::swap(key_, other->key_);
  std::swap(permission_read_, other->permission_read_);
  std::swap(permission_write_, other->permission_write_);
  ops_.UnsafeArenaSwap(&other->ops_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageUpdate_StorageUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageUpdate_StorageUpdate_descriptor_;
  metadata.reflection = TStorageUpdate_StorageUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageUpdate::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageUpdate::TStorageUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageUpdate)
}

void TStorageUpdate::InitAsDefaultInstance() {
}

TStorageUpdate::TStorageUpdate(const TStorageUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageUpdate)
}

void TStorageUpdate::SharedCtor() {
  _cached_size_ = 0;
}

TStorageUpdate::~TStorageUpdate() {
  // @@protoc_insertion_point(destructor:server.TStorageUpdate)
  SharedDtor();
}

void TStorageUpdate::SharedDtor() {
}

void TStorageUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageUpdate_descriptor_;
}

const TStorageUpdate& TStorageUpdate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageUpdate> TStorageUpdate_default_instance_;

TStorageUpdate* TStorageUpdate::New(::google::protobuf::Arena* arena) const {
  TStorageUpdate* n = new TStorageUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate)
  updates_.Clear();
}

bool TStorageUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageUpdate.StorageUpdate updates = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_updates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageUpdate)
  return false;
#undef DO_
}

void TStorageUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageUpdate)
  // repeated .server.TStorageUpdate.StorageUpdate updates = 1;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updates(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageUpdate)
}

::google::protobuf::uint8* TStorageUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate)
  // repeated .server.TStorageUpdate.StorageUpdate updates = 1;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->updates(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate)
  return target;
}

size_t TStorageUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate)
  size_t total_size = 0;

  // repeated .server.TStorageUpdate.StorageUpdate updates = 1;
  {
    unsigned int count = this->updates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updates(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TStorageUpdate::MergeFrom(const TStorageUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageUpdate::UnsafeMergeFrom(const TStorageUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  updates_.MergeFrom(from.updates_);
}

void TStorageUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageUpdate::CopyFrom(const TStorageUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageUpdate::IsInitialized() const {

  return true;
}

void TStorageUpdate::Swap(TStorageUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageUpdate::InternalSwap(TStorageUpdate* other) {
  updates_.UnsafeArenaSwap(&other->updates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageUpdate_descriptor_;
  metadata.reflection = TStorageUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageUpdate_StorageUpdate_UpdateOp

// optional int32 op = 1;
void TStorageUpdate_StorageUpdate_UpdateOp::clear_op() {
  op_ = 0;
}
::google::protobuf::int32 TStorageUpdate_StorageUpdate_UpdateOp::op() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.op)
  return op_;
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_op(::google::protobuf::int32 value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.op)
}

// optional string path = 2;
void TStorageUpdate_StorageUpdate_UpdateOp::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageUpdate_StorageUpdate_UpdateOp::path() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
::std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_path() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}

// optional string value = 3;
void TStorageUpdate_StorageUpdate_UpdateOp::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageUpdate_StorageUpdate_UpdateOp::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
::std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}

// optional string from = 4;
void TStorageUpdate_StorageUpdate_UpdateOp::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageUpdate_StorageUpdate_UpdateOp::from() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
::std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_from() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}

// optional bool conditional = 5;
void TStorageUpdate_StorageUpdate_UpdateOp::clear_conditional() {
  conditional_ = false;
}
bool TStorageUpdate_StorageUpdate_UpdateOp::conditional() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.conditional)
  return conditional_;
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_conditional(bool value) {
  
  conditional_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.conditional)
}

// optional int64 assert = 6;
void TStorageUpdate_StorageUpdate_UpdateOp::clear_assert() {
  assert_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageUpdate_StorageUpdate_UpdateOp::assert() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.assert)
  return assert_;
}
void TStorageUpdate_StorageUpdate_UpdateOp::set_assert(::google::protobuf::int64 value) {
  
  assert_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.assert)
}

// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
int TStorageUpdate_StorageUpdate_UpdateOp::ops_size() const {
  return ops_.size();
}
void TStorageUpdate_StorageUpdate_UpdateOp::clear_ops() {
  ops_.Clear();
}
const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate_UpdateOp::ops(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_.Get(index);
}
::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_.Mutable(index);
}
::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::add_ops() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
TStorageUpdate_StorageUpdate_UpdateOp::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return &ops_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
TStorageUpdate_StorageUpdate_UpdateOp::ops() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_;
}

inline const TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::internal_default_instance() {
  return &TStorageUpdate_StorageUpdate_UpdateOp_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate_StorageKey

// optional string bucket = 1;
void TStorageUpdate_StorageUpdate_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}

// optional string collection = 2;
void TStorageUpdate_StorageUpdate_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}

// optional string record = 3;
void TStorageUpdate_StorageUpdate_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}

// optional string version = 4;
void TStorageUpdate_StorageUpdate_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageUpdate_StorageUpdate_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
void TStorageUpdate_StorageUpdate_StorageKey::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageUpdate_StorageUpdate_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}

inline const TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate_StorageKey::internal_default_instance() {
  return &TStorageUpdate_StorageUpdate_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate

// optional .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
bool TStorageUpdate_StorageUpdate::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void TStorageUpdate_StorageUpdate::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::server::TStorageUpdate_StorageUpdate_StorageKey& TStorageUpdate_StorageUpdate::key() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.key)
  return key_ != NULL ? *key_
                         : *::server::TStorageUpdate_StorageUpdate_StorageKey::internal_default_instance();
}
::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::server::TStorageUpdate_StorageUpdate_StorageKey;
  }
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.key)
  return key_;
}
::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::release_key() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.key)
  
  ::server::TStorageUpdate_StorageUpdate_StorageKey* temp = key_;
  key_ = NULL;
  return temp;
}
void TStorageUpdate_StorageUpdate::set_allocated_key(::server::TStorageUpdate_StorageUpdate_StorageKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.key)
}

// optional int32 permission_read = 2;
void TStorageUpdate_StorageUpdate::clear_permission_read() {
  permission_read_ = 0;
}
::google::protobuf::int32 TStorageUpdate_StorageUpdate::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.permission_read)
  return permission_read_;
}
void TStorageUpdate_StorageUpdate::set_permission_read(::google::protobuf::int32 value) {
  
  permission_read_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.permission_read)
}

// optional int32 permission_write = 3;
void TStorageUpdate_StorageUpdate::clear_permission_write() {
  permission_write_ = 0;
}
::google::protobuf::int32 TStorageUpdate_StorageUpdate::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.permission_write)
  return permission_write_;
}
void TStorageUpdate_StorageUpdate::set_permission_write(::google::protobuf::int32 value) {
  
  permission_write_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.permission_write)
}

// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
int TStorageUpdate_StorageUpdate::ops_size() const {
  return ops_.size();
}
void TStorageUpdate_StorageUpdate::clear_ops() {
  ops_.Clear();
}
const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate::ops(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.ops)
  return ops_.Get(index);
}
::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.ops)
  return ops_.Mutable(index);
}
::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate::add_ops() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.StorageUpdate.ops)
  return ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
TStorageUpdate_StorageUpdate::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.StorageUpdate.ops)
  return &ops_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
TStorageUpdate_StorageUpdate::ops() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.StorageUpdate.ops)
  return ops_;
}

inline const TStorageUpdate_StorageUpdate* TStorageUpdate_StorageUpdate::internal_default_instance() {
  return &TStorageUpdate_StorageUpdate_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageUpdate

// repeated .server.TStorageUpdate.StorageUpdate updates = 1;
int TStorageUpdate::updates_size() const {
  return updates_.size();
}
void TStorageUpdate::clear_updates() {
  updates_.Clear();
}
const ::server::TStorageUpdate_StorageUpdate& TStorageUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.updates)
  return updates_.Get(index);
}
::server::TStorageUpdate_StorageUpdate* TStorageUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.updates)
  return updates_.Mutable(index);
}
::server::TStorageUpdate_StorageUpdate* TStorageUpdate::add_updates() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.updates)
  return updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >*
TStorageUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.updates)
  return &updates_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >&
TStorageUpdate::updates() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.updates)
  return updates_;
}

inline const TStorageUpdate* TStorageUpdate::internal_default_instance() {
  return &TStorageUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageKeys_StorageKey::kBucketFieldNumber;
const int TStorageKeys_StorageKey::kCollectionFieldNumber;
const int TStorageKeys_StorageKey::kRecordFieldNumber;
const int TStorageKeys_StorageKey::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageKeys_StorageKey::TStorageKeys_StorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageKeys.StorageKey)
}

void TStorageKeys_StorageKey::InitAsDefaultInstance() {
}

TStorageKeys_StorageKey::TStorageKeys_StorageKey(const TStorageKeys_StorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageKeys.StorageKey)
}

void TStorageKeys_StorageKey::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageKeys_StorageKey::~TStorageKeys_StorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageKeys.StorageKey)
  SharedDtor();
}

void TStorageKeys_StorageKey::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageKeys_StorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageKeys_StorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageKeys_StorageKey_descriptor_;
}

const TStorageKeys_StorageKey& TStorageKeys_StorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageKeys_StorageKey> TStorageKeys_StorageKey_default_instance_;

TStorageKeys_StorageKey* TStorageKeys_StorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageKeys_StorageKey* n = new TStorageKeys_StorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageKeys_StorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageKeys.StorageKey)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageKeys_StorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageKeys.StorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageKeys.StorageKey.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageKeys.StorageKey.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageKeys.StorageKey.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageKeys.StorageKey.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageKeys.StorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageKeys.StorageKey)
  return false;
#undef DO_
}

void TStorageKeys_StorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageKeys.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageKeys.StorageKey)
}

::google::protobuf::uint8* TStorageKeys_StorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageKeys.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKeys.StorageKey.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageKeys.StorageKey)
  return target;
}

size_t TStorageKeys_StorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageKeys.StorageKey)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageKeys_StorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageKeys.StorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageKeys_StorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageKeys_StorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageKeys.StorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageKeys.StorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageKeys_StorageKey::MergeFrom(const TStorageKeys_StorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageKeys.StorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageKeys_StorageKey::UnsafeMergeFrom(const TStorageKeys_StorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void TStorageKeys_StorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageKeys.StorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageKeys_StorageKey::CopyFrom(const TStorageKeys_StorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageKeys.StorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageKeys_StorageKey::IsInitialized() const {

  return true;
}

void TStorageKeys_StorageKey::Swap(TStorageKeys_StorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageKeys_StorageKey::InternalSwap(TStorageKeys_StorageKey* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageKeys_StorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageKeys_StorageKey_descriptor_;
  metadata.reflection = TStorageKeys_StorageKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageKeys::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageKeys::TStorageKeys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageKeys)
}

void TStorageKeys::InitAsDefaultInstance() {
}

TStorageKeys::TStorageKeys(const TStorageKeys& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageKeys)
}

void TStorageKeys::SharedCtor() {
  _cached_size_ = 0;
}

TStorageKeys::~TStorageKeys() {
  // @@protoc_insertion_point(destructor:server.TStorageKeys)
  SharedDtor();
}

void TStorageKeys::SharedDtor() {
}

void TStorageKeys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageKeys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageKeys_descriptor_;
}

const TStorageKeys& TStorageKeys::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageKeys> TStorageKeys_default_instance_;

TStorageKeys* TStorageKeys::New(::google::protobuf::Arena* arena) const {
  TStorageKeys* n = new TStorageKeys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageKeys)
  keys_.Clear();
}

bool TStorageKeys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageKeys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageKeys.StorageKey keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageKeys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageKeys)
  return false;
#undef DO_
}

void TStorageKeys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageKeys)
  // repeated .server.TStorageKeys.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageKeys)
}

::google::protobuf::uint8* TStorageKeys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageKeys)
  // repeated .server.TStorageKeys.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageKeys)
  return target;
}

size_t TStorageKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageKeys)
  size_t total_size = 0;

  // repeated .server.TStorageKeys.StorageKey keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageKeys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageKeys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageKeys* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageKeys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageKeys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageKeys)
    UnsafeMergeFrom(*source);
  }
}

void TStorageKeys::MergeFrom(const TStorageKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageKeys)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageKeys::UnsafeMergeFrom(const TStorageKeys& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void TStorageKeys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageKeys::CopyFrom(const TStorageKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageKeys)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageKeys::IsInitialized() const {

  return true;
}

void TStorageKeys::Swap(TStorageKeys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageKeys::InternalSwap(TStorageKeys* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageKeys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageKeys_descriptor_;
  metadata.reflection = TStorageKeys_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageKeys_StorageKey

// optional string bucket = 1;
void TStorageKeys_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKeys_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.bucket)
}
void TStorageKeys_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.bucket)
}
void TStorageKeys_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.bucket)
}
::std::string* TStorageKeys_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKeys_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.bucket)
}

// optional string collection = 2;
void TStorageKeys_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKeys_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.collection)
}
void TStorageKeys_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.collection)
}
void TStorageKeys_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.collection)
}
::std::string* TStorageKeys_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKeys_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.collection)
}

// optional string record = 3;
void TStorageKeys_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKeys_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.record)
}
void TStorageKeys_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.record)
}
void TStorageKeys_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.record)
}
::std::string* TStorageKeys_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKeys_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.record)
}

// optional string version = 4;
void TStorageKeys_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKeys_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.version)
}
void TStorageKeys_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.version)
}
void TStorageKeys_StorageKey::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.version)
}
::std::string* TStorageKeys_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKeys_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKeys_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.version)
}

inline const TStorageKeys_StorageKey* TStorageKeys_StorageKey::internal_default_instance() {
  return &TStorageKeys_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageKeys

// repeated .server.TStorageKeys.StorageKey keys = 1;
int TStorageKeys::keys_size() const {
  return keys_.size();
}
void TStorageKeys::clear_keys() {
  keys_.Clear();
}
const ::server::TStorageKeys_StorageKey& TStorageKeys::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.keys)
  return keys_.Get(index);
}
::server::TStorageKeys_StorageKey* TStorageKeys::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.keys)
  return keys_.Mutable(index);
}
::server::TStorageKeys_StorageKey* TStorageKeys::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageKeys.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageKeys_StorageKey >*
TStorageKeys::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageKeys.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageKeys_StorageKey >&
TStorageKeys::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageKeys.keys)
  return keys_;
}

inline const TStorageKeys* TStorageKeys::internal_default_instance() {
  return &TStorageKeys_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageRemove_StorageKey::kBucketFieldNumber;
const int TStorageRemove_StorageKey::kCollectionFieldNumber;
const int TStorageRemove_StorageKey::kRecordFieldNumber;
const int TStorageRemove_StorageKey::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageRemove_StorageKey::TStorageRemove_StorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageRemove.StorageKey)
}

void TStorageRemove_StorageKey::InitAsDefaultInstance() {
}

TStorageRemove_StorageKey::TStorageRemove_StorageKey(const TStorageRemove_StorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageRemove.StorageKey)
}

void TStorageRemove_StorageKey::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageRemove_StorageKey::~TStorageRemove_StorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageRemove.StorageKey)
  SharedDtor();
}

void TStorageRemove_StorageKey::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageRemove_StorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageRemove_StorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageRemove_StorageKey_descriptor_;
}

const TStorageRemove_StorageKey& TStorageRemove_StorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageRemove_StorageKey> TStorageRemove_StorageKey_default_instance_;

TStorageRemove_StorageKey* TStorageRemove_StorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageRemove_StorageKey* n = new TStorageRemove_StorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageRemove_StorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageRemove.StorageKey)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageRemove_StorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageRemove.StorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageRemove.StorageKey.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageRemove.StorageKey.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageRemove.StorageKey.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageRemove.StorageKey.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageRemove.StorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageRemove.StorageKey)
  return false;
#undef DO_
}

void TStorageRemove_StorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageRemove.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageRemove.StorageKey)
}

::google::protobuf::uint8* TStorageRemove_StorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageRemove.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageRemove.StorageKey)
  return target;
}

size_t TStorageRemove_StorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageRemove.StorageKey)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageRemove_StorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageRemove.StorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageRemove_StorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageRemove_StorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageRemove.StorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageRemove.StorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageRemove_StorageKey::MergeFrom(const TStorageRemove_StorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageRemove.StorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageRemove_StorageKey::UnsafeMergeFrom(const TStorageRemove_StorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void TStorageRemove_StorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageRemove.StorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageRemove_StorageKey::CopyFrom(const TStorageRemove_StorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageRemove.StorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageRemove_StorageKey::IsInitialized() const {

  return true;
}

void TStorageRemove_StorageKey::Swap(TStorageRemove_StorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageRemove_StorageKey::InternalSwap(TStorageRemove_StorageKey* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageRemove_StorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageRemove_StorageKey_descriptor_;
  metadata.reflection = TStorageRemove_StorageKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageRemove::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageRemove::TStorageRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageRemove)
}

void TStorageRemove::InitAsDefaultInstance() {
}

TStorageRemove::TStorageRemove(const TStorageRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageRemove)
}

void TStorageRemove::SharedCtor() {
  _cached_size_ = 0;
}

TStorageRemove::~TStorageRemove() {
  // @@protoc_insertion_point(destructor:server.TStorageRemove)
  SharedDtor();
}

void TStorageRemove::SharedDtor() {
}

void TStorageRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageRemove_descriptor_;
}

const TStorageRemove& TStorageRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageRemove> TStorageRemove_default_instance_;

TStorageRemove* TStorageRemove::New(::google::protobuf::Arena* arena) const {
  TStorageRemove* n = new TStorageRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageRemove)
  keys_.Clear();
}

bool TStorageRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageRemove.StorageKey keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageRemove)
  return false;
#undef DO_
}

void TStorageRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageRemove)
  // repeated .server.TStorageRemove.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageRemove)
}

::google::protobuf::uint8* TStorageRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageRemove)
  // repeated .server.TStorageRemove.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageRemove)
  return target;
}

size_t TStorageRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageRemove)
  size_t total_size = 0;

  // repeated .server.TStorageRemove.StorageKey keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageRemove)
    UnsafeMergeFrom(*source);
  }
}

void TStorageRemove::MergeFrom(const TStorageRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageRemove::UnsafeMergeFrom(const TStorageRemove& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void TStorageRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageRemove::CopyFrom(const TStorageRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageRemove::IsInitialized() const {

  return true;
}

void TStorageRemove::Swap(TStorageRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageRemove::InternalSwap(TStorageRemove* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageRemove_descriptor_;
  metadata.reflection = TStorageRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageRemove_StorageKey

// optional string bucket = 1;
void TStorageRemove_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.bucket)
}
void TStorageRemove_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.bucket)
}
void TStorageRemove_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.bucket)
}
::std::string* TStorageRemove_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.bucket)
}

// optional string collection = 2;
void TStorageRemove_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.collection)
}
void TStorageRemove_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.collection)
}
void TStorageRemove_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.collection)
}
::std::string* TStorageRemove_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.collection)
}

// optional string record = 3;
void TStorageRemove_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.record)
}
void TStorageRemove_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.record)
}
void TStorageRemove_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.record)
}
::std::string* TStorageRemove_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.record)
}

// optional string version = 4;
void TStorageRemove_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.version)
}
void TStorageRemove_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.version)
}
void TStorageRemove_StorageKey::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.version)
}
::std::string* TStorageRemove_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.version)
}

inline const TStorageRemove_StorageKey* TStorageRemove_StorageKey::internal_default_instance() {
  return &TStorageRemove_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageRemove

// repeated .server.TStorageRemove.StorageKey keys = 1;
int TStorageRemove::keys_size() const {
  return keys_.size();
}
void TStorageRemove::clear_keys() {
  keys_.Clear();
}
const ::server::TStorageRemove_StorageKey& TStorageRemove::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.keys)
  return keys_.Get(index);
}
::server::TStorageRemove_StorageKey* TStorageRemove::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.keys)
  return keys_.Mutable(index);
}
::server::TStorageRemove_StorageKey* TStorageRemove::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageRemove.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >*
TStorageRemove::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageRemove.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >&
TStorageRemove::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageRemove.keys)
  return keys_;
}

inline const TStorageRemove* TStorageRemove::internal_default_instance() {
  return &TStorageRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaderboard::kIdFieldNumber;
const int Leaderboard::kAuthoritativeFieldNumber;
const int Leaderboard::kSortFieldNumber;
const int Leaderboard::kCountFieldNumber;
const int Leaderboard::kResetScheduleFieldNumber;
const int Leaderboard::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaderboard::Leaderboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Leaderboard)
}

void Leaderboard::InitAsDefaultInstance() {
}

Leaderboard::Leaderboard(const Leaderboard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Leaderboard)
}

void Leaderboard::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reset_schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_, 0, reinterpret_cast<char*>(&authoritative_) -
    reinterpret_cast<char*>(&sort_) + sizeof(authoritative_));
  _cached_size_ = 0;
}

Leaderboard::~Leaderboard() {
  // @@protoc_insertion_point(destructor:server.Leaderboard)
  SharedDtor();
}

void Leaderboard::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reset_schedule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Leaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaderboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Leaderboard_descriptor_;
}

const Leaderboard& Leaderboard::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Leaderboard> Leaderboard_default_instance_;

Leaderboard* Leaderboard::New(::google::protobuf::Arena* arena) const {
  Leaderboard* n = new Leaderboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Leaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Leaderboard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Leaderboard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Leaderboard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sort_, authoritative_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reset_schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Leaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Leaderboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Leaderboard.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_authoritative;
        break;
      }

      // optional bool authoritative = 2;
      case 2: {
        if (tag == 16) {
         parse_authoritative:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authoritative_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sort;
        break;
      }

      // optional int64 sort = 3;
      case 3: {
        if (tag == 24) {
         parse_sort:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sort_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int64 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reset_schedule;
        break;
      }

      // optional string reset_schedule = 5;
      case 5: {
        if (tag == 42) {
         parse_reset_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reset_schedule()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reset_schedule().data(), this->reset_schedule().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Leaderboard.reset_schedule"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_metadata;
        break;
      }

      // optional string metadata = 6;
      case 6: {
        if (tag == 50) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Leaderboard.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Leaderboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Leaderboard)
  return false;
#undef DO_
}

void Leaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Leaderboard)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Leaderboard.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional bool authoritative = 2;
  if (this->authoritative() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->authoritative(), output);
  }

  // optional int64 sort = 3;
  if (this->sort() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sort(), output);
  }

  // optional int64 count = 4;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->count(), output);
  }

  // optional string reset_schedule = 5;
  if (this->reset_schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reset_schedule().data(), this->reset_schedule().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Leaderboard.reset_schedule");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reset_schedule(), output);
  }

  // optional string metadata = 6;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Leaderboard.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->metadata(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Leaderboard)
}

::google::protobuf::uint8* Leaderboard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Leaderboard)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Leaderboard.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool authoritative = 2;
  if (this->authoritative() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->authoritative(), target);
  }

  // optional int64 sort = 3;
  if (this->sort() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sort(), target);
  }

  // optional int64 count = 4;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->count(), target);
  }

  // optional string reset_schedule = 5;
  if (this->reset_schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reset_schedule().data(), this->reset_schedule().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Leaderboard.reset_schedule");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reset_schedule(), target);
  }

  // optional string metadata = 6;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Leaderboard.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metadata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Leaderboard)
  return target;
}

size_t Leaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Leaderboard)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional bool authoritative = 2;
  if (this->authoritative() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 sort = 3;
  if (this->sort() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sort());
  }

  // optional int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // optional string reset_schedule = 5;
  if (this->reset_schedule().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reset_schedule());
  }

  // optional string metadata = 6;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaderboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Leaderboard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Leaderboard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaderboard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Leaderboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Leaderboard)
    UnsafeMergeFrom(*source);
  }
}

void Leaderboard::MergeFrom(const Leaderboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Leaderboard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Leaderboard::UnsafeMergeFrom(const Leaderboard& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.authoritative() != 0) {
    set_authoritative(from.authoritative());
  }
  if (from.sort() != 0) {
    set_sort(from.sort());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.reset_schedule().size() > 0) {

    reset_schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reset_schedule_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
}

void Leaderboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Leaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaderboard::CopyFrom(const Leaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Leaderboard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Leaderboard::IsInitialized() const {

  return true;
}

void Leaderboard::Swap(Leaderboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leaderboard::InternalSwap(Leaderboard* other) {
  id_.Swap(&other->id_);
  std::swap(authoritative_, other->authoritative_);
  std::swap(sort_, other->sort_);
  std::swap(count_, other->count_);
  reset_schedule_.Swap(&other->reset_schedule_);
  metadata_.Swap(&other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leaderboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Leaderboard_descriptor_;
  metadata.reflection = Leaderboard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leaderboard

// optional string id = 1;
void Leaderboard::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Leaderboard::id() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.id)
}
void Leaderboard::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.id)
}
void Leaderboard::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.id)
}
::std::string* Leaderboard::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Leaderboard::release_id() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.id)
}

// optional bool authoritative = 2;
void Leaderboard::clear_authoritative() {
  authoritative_ = false;
}
bool Leaderboard::authoritative() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.authoritative)
  return authoritative_;
}
void Leaderboard::set_authoritative(bool value) {
  
  authoritative_ = value;
  // @@protoc_insertion_point(field_set:server.Leaderboard.authoritative)
}

// optional int64 sort = 3;
void Leaderboard::clear_sort() {
  sort_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Leaderboard::sort() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.sort)
  return sort_;
}
void Leaderboard::set_sort(::google::protobuf::int64 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:server.Leaderboard.sort)
}

// optional int64 count = 4;
void Leaderboard::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Leaderboard::count() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.count)
  return count_;
}
void Leaderboard::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:server.Leaderboard.count)
}

// optional string reset_schedule = 5;
void Leaderboard::clear_reset_schedule() {
  reset_schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Leaderboard::reset_schedule() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.reset_schedule)
  return reset_schedule_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_reset_schedule(const ::std::string& value) {
  
  reset_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.reset_schedule)
}
void Leaderboard::set_reset_schedule(const char* value) {
  
  reset_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.reset_schedule)
}
void Leaderboard::set_reset_schedule(const char* value, size_t size) {
  
  reset_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.reset_schedule)
}
::std::string* Leaderboard::mutable_reset_schedule() {
  
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.reset_schedule)
  return reset_schedule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Leaderboard::release_reset_schedule() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.reset_schedule)
  
  return reset_schedule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_allocated_reset_schedule(::std::string* reset_schedule) {
  if (reset_schedule != NULL) {
    
  } else {
    
  }
  reset_schedule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reset_schedule);
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.reset_schedule)
}

// optional string metadata = 6;
void Leaderboard::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Leaderboard::metadata() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.metadata)
}
void Leaderboard::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.metadata)
}
void Leaderboard::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.metadata)
}
::std::string* Leaderboard::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Leaderboard::release_metadata() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Leaderboard::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.metadata)
}

inline const Leaderboard* Leaderboard::internal_default_instance() {
  return &Leaderboard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderboardRecord::kLeaderboardIdFieldNumber;
const int LeaderboardRecord::kOwnerIdFieldNumber;
const int LeaderboardRecord::kHandleFieldNumber;
const int LeaderboardRecord::kLangFieldNumber;
const int LeaderboardRecord::kLocationFieldNumber;
const int LeaderboardRecord::kTimezoneFieldNumber;
const int LeaderboardRecord::kRankFieldNumber;
const int LeaderboardRecord::kScoreFieldNumber;
const int LeaderboardRecord::kNumScoreFieldNumber;
const int LeaderboardRecord::kMetadataFieldNumber;
const int LeaderboardRecord::kRankedAtFieldNumber;
const int LeaderboardRecord::kUpdatedAtFieldNumber;
const int LeaderboardRecord::kExpiresAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderboardRecord::LeaderboardRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.LeaderboardRecord)
}

void LeaderboardRecord::InitAsDefaultInstance() {
}

LeaderboardRecord::LeaderboardRecord(const LeaderboardRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.LeaderboardRecord)
}

void LeaderboardRecord::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&rank_) + sizeof(expires_at_));
  _cached_size_ = 0;
}

LeaderboardRecord::~LeaderboardRecord() {
  // @@protoc_insertion_point(destructor:server.LeaderboardRecord)
  SharedDtor();
}

void LeaderboardRecord::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderboardRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderboardRecord_descriptor_;
}

const LeaderboardRecord& LeaderboardRecord::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LeaderboardRecord> LeaderboardRecord_default_instance_;

LeaderboardRecord* LeaderboardRecord::New(::google::protobuf::Arena* arena) const {
  LeaderboardRecord* n = new LeaderboardRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderboardRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:server.LeaderboardRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LeaderboardRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LeaderboardRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rank_, score_);
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(num_score_, expires_at_);
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LeaderboardRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.LeaderboardRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string leaderboard_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), this->leaderboard_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.LeaderboardRecord.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_owner_id;
        break;
      }

      // optional string owner_id = 2;
      case 2: {
        if (tag == 18) {
         parse_owner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), this->owner_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.LeaderboardRecord.owner_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_handle;
        break;
      }

      // optional string handle = 3;
      case 3: {
        if (tag == 26) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.LeaderboardRecord.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lang;
        break;
      }

      // optional string lang = 4;
      case 4: {
        if (tag == 34) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.LeaderboardRecord.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_location;
        break;
      }

      // optional string location = 5;
      case 5: {
        if (tag == 42) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.LeaderboardRecord.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timezone;
        break;
      }

      // optional string timezone = 6;
      case 6: {
        if (tag == 50) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.LeaderboardRecord.timezone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rank;
        break;
      }

      // optional int64 rank = 7;
      case 7: {
        if (tag == 56) {
         parse_rank:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_score;
        break;
      }

      // optional int64 score = 8;
      case 8: {
        if (tag == 64) {
         parse_score:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_score;
        break;
      }

      // optional int64 num_score = 9;
      case 9: {
        if (tag == 72) {
         parse_num_score:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_metadata;
        break;
      }

      // optional string metadata = 10;
      case 10: {
        if (tag == 82) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.LeaderboardRecord.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ranked_at;
        break;
      }

      // optional int64 ranked_at = 11;
      case 11: {
        if (tag == 88) {
         parse_ranked_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ranked_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_updated_at;
        break;
      }

      // optional int64 updated_at = 12;
      case 12: {
        if (tag == 96) {
         parse_updated_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 13;
      case 13: {
        if (tag == 104) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.LeaderboardRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.LeaderboardRecord)
  return false;
#undef DO_
}

void LeaderboardRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.LeaderboardRecord)
  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), this->leaderboard_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  // optional string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), this->owner_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_id(), output);
  }

  // optional string handle = 3;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->handle(), output);
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lang(), output);
  }

  // optional string location = 5;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location(), output);
  }

  // optional string timezone = 6;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timezone(), output);
  }

  // optional int64 rank = 7;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->rank(), output);
  }

  // optional int64 score = 8;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->score(), output);
  }

  // optional int64 num_score = 9;
  if (this->num_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->num_score(), output);
  }

  // optional string metadata = 10;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->metadata(), output);
  }

  // optional int64 ranked_at = 11;
  if (this->ranked_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->ranked_at(), output);
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->updated_at(), output);
  }

  // optional int64 expires_at = 13;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->expires_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.LeaderboardRecord)
}

::google::protobuf::uint8* LeaderboardRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.LeaderboardRecord)
  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), this->leaderboard_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  // optional string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), this->owner_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_id(), target);
  }

  // optional string handle = 3;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->handle(), target);
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lang(), target);
  }

  // optional string location = 5;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location(), target);
  }

  // optional string timezone = 6;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timezone(), target);
  }

  // optional int64 rank = 7;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->rank(), target);
  }

  // optional int64 score = 8;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->score(), target);
  }

  // optional int64 num_score = 9;
  if (this->num_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->num_score(), target);
  }

  // optional string metadata = 10;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.LeaderboardRecord.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->metadata(), target);
  }

  // optional int64 ranked_at = 11;
  if (this->ranked_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->ranked_at(), target);
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->updated_at(), target);
  }

  // optional int64 expires_at = 13;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->expires_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.LeaderboardRecord)
  return target;
}

size_t LeaderboardRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.LeaderboardRecord)
  size_t total_size = 0;

  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  // optional string owner_id = 2;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_id());
  }

  // optional string handle = 3;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional string location = 5;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string timezone = 6;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // optional int64 rank = 7;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rank());
  }

  // optional int64 score = 8;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  // optional int64 num_score = 9;
  if (this->num_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_score());
  }

  // optional string metadata = 10;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // optional int64 ranked_at = 11;
  if (this->ranked_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ranked_at());
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updated_at());
  }

  // optional int64 expires_at = 13;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderboardRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.LeaderboardRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LeaderboardRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderboardRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.LeaderboardRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.LeaderboardRecord)
    UnsafeMergeFrom(*source);
  }
}

void LeaderboardRecord::MergeFrom(const LeaderboardRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.LeaderboardRecord)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LeaderboardRecord::UnsafeMergeFrom(const LeaderboardRecord& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.owner_id().size() > 0) {

    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.num_score() != 0) {
    set_num_score(from.num_score());
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.ranked_at() != 0) {
    set_ranked_at(from.ranked_at());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
}

void LeaderboardRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.LeaderboardRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardRecord::CopyFrom(const LeaderboardRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.LeaderboardRecord)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LeaderboardRecord::IsInitialized() const {

  return true;
}

void LeaderboardRecord::Swap(LeaderboardRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderboardRecord::InternalSwap(LeaderboardRecord* other) {
  leaderboard_id_.Swap(&other->leaderboard_id_);
  owner_id_.Swap(&other->owner_id_);
  handle_.Swap(&other->handle_);
  lang_.Swap(&other->lang_);
  location_.Swap(&other->location_);
  timezone_.Swap(&other->timezone_);
  std::swap(rank_, other->rank_);
  std::swap(score_, other->score_);
  std::swap(num_score_, other->num_score_);
  metadata_.Swap(&other->metadata_);
  std::swap(ranked_at_, other->ranked_at_);
  std::swap(updated_at_, other->updated_at_);
  std::swap(expires_at_, other->expires_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderboardRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderboardRecord_descriptor_;
  metadata.reflection = LeaderboardRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaderboardRecord

// optional string leaderboard_id = 1;
void LeaderboardRecord::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderboardRecord::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.leaderboard_id)
  return leaderboard_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_leaderboard_id(const ::std::string& value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.leaderboard_id)
}
void LeaderboardRecord::set_leaderboard_id(const char* value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.leaderboard_id)
}
void LeaderboardRecord::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.leaderboard_id)
}
::std::string* LeaderboardRecord::mutable_leaderboard_id() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.leaderboard_id)
  return leaderboard_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderboardRecord::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_allocated_leaderboard_id(::std::string* leaderboard_id) {
  if (leaderboard_id != NULL) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.leaderboard_id)
}

// optional string owner_id = 2;
void LeaderboardRecord::clear_owner_id() {
  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderboardRecord::owner_id() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.owner_id)
  return owner_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_owner_id(const ::std::string& value) {
  
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.owner_id)
}
void LeaderboardRecord::set_owner_id(const char* value) {
  
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.owner_id)
}
void LeaderboardRecord::set_owner_id(const char* value, size_t size) {
  
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.owner_id)
}
::std::string* LeaderboardRecord::mutable_owner_id() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.owner_id)
  return owner_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderboardRecord::release_owner_id() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.owner_id)
  
  return owner_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_allocated_owner_id(::std::string* owner_id) {
  if (owner_id != NULL) {
    
  } else {
    
  }
  owner_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_id);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.owner_id)
}

// optional string handle = 3;
void LeaderboardRecord::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderboardRecord::handle() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.handle)
}
void LeaderboardRecord::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.handle)
}
void LeaderboardRecord::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.handle)
}
::std::string* LeaderboardRecord::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderboardRecord::release_handle() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.handle)
}

// optional string lang = 4;
void LeaderboardRecord::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderboardRecord::lang() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.lang)
}
void LeaderboardRecord::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.lang)
}
void LeaderboardRecord::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.lang)
}
::std::string* LeaderboardRecord::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderboardRecord::release_lang() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.lang)
}

// optional string location = 5;
void LeaderboardRecord::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderboardRecord::location() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.location)
}
void LeaderboardRecord::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.location)
}
void LeaderboardRecord::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.location)
}
::std::string* LeaderboardRecord::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderboardRecord::release_location() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.location)
}

// optional string timezone = 6;
void LeaderboardRecord::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderboardRecord::timezone() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.timezone)
}
void LeaderboardRecord::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.timezone)
}
void LeaderboardRecord::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.timezone)
}
::std::string* LeaderboardRecord::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderboardRecord::release_timezone() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.timezone)
}

// optional int64 rank = 7;
void LeaderboardRecord::clear_rank() {
  rank_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaderboardRecord::rank() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.rank)
  return rank_;
}
void LeaderboardRecord::set_rank(::google::protobuf::int64 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.rank)
}

// optional int64 score = 8;
void LeaderboardRecord::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaderboardRecord::score() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.score)
  return score_;
}
void LeaderboardRecord::set_score(::google::protobuf::int64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.score)
}

// optional int64 num_score = 9;
void LeaderboardRecord::clear_num_score() {
  num_score_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaderboardRecord::num_score() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.num_score)
  return num_score_;
}
void LeaderboardRecord::set_num_score(::google::protobuf::int64 value) {
  
  num_score_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.num_score)
}

// optional string metadata = 10;
void LeaderboardRecord::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderboardRecord::metadata() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.metadata)
}
void LeaderboardRecord::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.metadata)
}
void LeaderboardRecord::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.metadata)
}
::std::string* LeaderboardRecord::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderboardRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderboardRecord::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.metadata)
}

// optional int64 ranked_at = 11;
void LeaderboardRecord::clear_ranked_at() {
  ranked_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaderboardRecord::ranked_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.ranked_at)
  return ranked_at_;
}
void LeaderboardRecord::set_ranked_at(::google::protobuf::int64 value) {
  
  ranked_at_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.ranked_at)
}

// optional int64 updated_at = 12;
void LeaderboardRecord::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaderboardRecord::updated_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.updated_at)
  return updated_at_;
}
void LeaderboardRecord::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.updated_at)
}

// optional int64 expires_at = 13;
void LeaderboardRecord::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LeaderboardRecord::expires_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.expires_at)
  return expires_at_;
}
void LeaderboardRecord::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.expires_at)
}

inline const LeaderboardRecord* LeaderboardRecord::internal_default_instance() {
  return &LeaderboardRecord_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboardsList::kLimitFieldNumber;
const int TLeaderboardsList::kCursorFieldNumber;
const int TLeaderboardsList::kFilterLeaderboardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboardsList::TLeaderboardsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboardsList)
}

void TLeaderboardsList::InitAsDefaultInstance() {
}

TLeaderboardsList::TLeaderboardsList(const TLeaderboardsList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboardsList)
}

void TLeaderboardsList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TLeaderboardsList::~TLeaderboardsList() {
  // @@protoc_insertion_point(destructor:server.TLeaderboardsList)
  SharedDtor();
}

void TLeaderboardsList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboardsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboardsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboardsList_descriptor_;
}

const TLeaderboardsList& TLeaderboardsList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardsList> TLeaderboardsList_default_instance_;

TLeaderboardsList* TLeaderboardsList::New(::google::protobuf::Arena* arena) const {
  TLeaderboardsList* n = new TLeaderboardsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboardsList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboardsList)
  limit_ = GOOGLE_LONGLONG(0);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_leaderboard_id_.Clear();
}

bool TLeaderboardsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboardsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 limit = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional string cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardsList.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filter_leaderboard_id;
        break;
      }

      // repeated string filter_leaderboard_id = 3;
      case 3: {
        if (tag == 26) {
         parse_filter_leaderboard_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter_leaderboard_id(this->filter_leaderboard_id_size() - 1).data(),
            this->filter_leaderboard_id(this->filter_leaderboard_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardsList.filter_leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filter_leaderboard_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboardsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboardsList)
  return false;
#undef DO_
}

void TLeaderboardsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboardsList)
  // optional int64 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->limit(), output);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardsList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  // repeated string filter_leaderboard_id = 3;
  for (int i = 0; i < this->filter_leaderboard_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_leaderboard_id(i).data(), this->filter_leaderboard_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardsList.filter_leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filter_leaderboard_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboardsList)
}

::google::protobuf::uint8* TLeaderboardsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardsList)
  // optional int64 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->limit(), target);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardsList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  // repeated string filter_leaderboard_id = 3;
  for (int i = 0; i < this->filter_leaderboard_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_leaderboard_id(i).data(), this->filter_leaderboard_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardsList.filter_leaderboard_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->filter_leaderboard_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardsList)
  return target;
}

size_t TLeaderboardsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardsList)
  size_t total_size = 0;

  // optional int64 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // repeated string filter_leaderboard_id = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filter_leaderboard_id_size());
  for (int i = 0; i < this->filter_leaderboard_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter_leaderboard_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboardsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardsList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboardsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboardsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardsList)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboardsList::MergeFrom(const TLeaderboardsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardsList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboardsList::UnsafeMergeFrom(const TLeaderboardsList& from) {
  GOOGLE_DCHECK(&from != this);
  filter_leaderboard_id_.UnsafeMergeFrom(from.filter_leaderboard_id_);
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TLeaderboardsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboardsList::CopyFrom(const TLeaderboardsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardsList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboardsList::IsInitialized() const {

  return true;
}

void TLeaderboardsList::Swap(TLeaderboardsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboardsList::InternalSwap(TLeaderboardsList* other) {
  std::swap(limit_, other->limit_);
  cursor_.Swap(&other->cursor_);
  filter_leaderboard_id_.UnsafeArenaSwap(&other->filter_leaderboard_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboardsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboardsList_descriptor_;
  metadata.reflection = TLeaderboardsList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLeaderboardsList

// optional int64 limit = 1;
void TLeaderboardsList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TLeaderboardsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.limit)
  return limit_;
}
void TLeaderboardsList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.limit)
}

// optional string cursor = 2;
void TLeaderboardsList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardsList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.cursor)
}
void TLeaderboardsList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardsList.cursor)
}
void TLeaderboardsList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardsList.cursor)
}
::std::string* TLeaderboardsList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardsList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardsList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardsList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardsList.cursor)
}

// repeated string filter_leaderboard_id = 3;
int TLeaderboardsList::filter_leaderboard_id_size() const {
  return filter_leaderboard_id_.size();
}
void TLeaderboardsList::clear_filter_leaderboard_id() {
  filter_leaderboard_id_.Clear();
}
const ::std::string& TLeaderboardsList::filter_leaderboard_id(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_.Get(index);
}
::std::string* TLeaderboardsList::mutable_filter_leaderboard_id(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_.Mutable(index);
}
void TLeaderboardsList::set_filter_leaderboard_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.filter_leaderboard_id)
  filter_leaderboard_id_.Mutable(index)->assign(value);
}
void TLeaderboardsList::set_filter_leaderboard_id(int index, const char* value) {
  filter_leaderboard_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardsList.filter_leaderboard_id)
}
void TLeaderboardsList::set_filter_leaderboard_id(int index, const char* value, size_t size) {
  filter_leaderboard_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardsList.filter_leaderboard_id)
}
::std::string* TLeaderboardsList::add_filter_leaderboard_id() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_.Add();
}
void TLeaderboardsList::add_filter_leaderboard_id(const ::std::string& value) {
  filter_leaderboard_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardsList.filter_leaderboard_id)
}
void TLeaderboardsList::add_filter_leaderboard_id(const char* value) {
  filter_leaderboard_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardsList.filter_leaderboard_id)
}
void TLeaderboardsList::add_filter_leaderboard_id(const char* value, size_t size) {
  filter_leaderboard_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardsList.filter_leaderboard_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLeaderboardsList::filter_leaderboard_id() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TLeaderboardsList::mutable_filter_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardsList.filter_leaderboard_id)
  return &filter_leaderboard_id_;
}

inline const TLeaderboardsList* TLeaderboardsList::internal_default_instance() {
  return &TLeaderboardsList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboards::kLeaderboardsFieldNumber;
const int TLeaderboards::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboards::TLeaderboards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboards)
}

void TLeaderboards::InitAsDefaultInstance() {
}

TLeaderboards::TLeaderboards(const TLeaderboards& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboards)
}

void TLeaderboards::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TLeaderboards::~TLeaderboards() {
  // @@protoc_insertion_point(destructor:server.TLeaderboards)
  SharedDtor();
}

void TLeaderboards::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboards_descriptor_;
}

const TLeaderboards& TLeaderboards::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboards> TLeaderboards_default_instance_;

TLeaderboards* TLeaderboards::New(::google::protobuf::Arena* arena) const {
  TLeaderboards* n = new TLeaderboards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboards::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboards)
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leaderboards_.Clear();
}

bool TLeaderboards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Leaderboard leaderboards = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_leaderboards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_leaderboards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_leaderboards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional string cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboards.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboards)
  return false;
#undef DO_
}

void TLeaderboards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboards)
  // repeated .server.Leaderboard leaderboards = 1;
  for (unsigned int i = 0, n = this->leaderboards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leaderboards(i), output);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboards.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboards)
}

::google::protobuf::uint8* TLeaderboards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboards)
  // repeated .server.Leaderboard leaderboards = 1;
  for (unsigned int i = 0, n = this->leaderboards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->leaderboards(i), false, target);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboards.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboards)
  return target;
}

size_t TLeaderboards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboards)
  size_t total_size = 0;

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // repeated .server.Leaderboard leaderboards = 1;
  {
    unsigned int count = this->leaderboards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderboards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboards)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboards)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboards::MergeFrom(const TLeaderboards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboards)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboards::UnsafeMergeFrom(const TLeaderboards& from) {
  GOOGLE_DCHECK(&from != this);
  leaderboards_.MergeFrom(from.leaderboards_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TLeaderboards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboards::CopyFrom(const TLeaderboards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboards)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboards::IsInitialized() const {

  return true;
}

void TLeaderboards::Swap(TLeaderboards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboards::InternalSwap(TLeaderboards* other) {
  leaderboards_.UnsafeArenaSwap(&other->leaderboards_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboards_descriptor_;
  metadata.reflection = TLeaderboards_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLeaderboards

// repeated .server.Leaderboard leaderboards = 1;
int TLeaderboards::leaderboards_size() const {
  return leaderboards_.size();
}
void TLeaderboards::clear_leaderboards() {
  leaderboards_.Clear();
}
const ::server::Leaderboard& TLeaderboards::leaderboards(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboards.leaderboards)
  return leaderboards_.Get(index);
}
::server::Leaderboard* TLeaderboards::mutable_leaderboards(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboards.leaderboards)
  return leaderboards_.Mutable(index);
}
::server::Leaderboard* TLeaderboards::add_leaderboards() {
  // @@protoc_insertion_point(field_add:server.TLeaderboards.leaderboards)
  return leaderboards_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Leaderboard >*
TLeaderboards::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboards.leaderboards)
  return &leaderboards_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Leaderboard >&
TLeaderboards::leaderboards() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboards.leaderboards)
  return leaderboards_;
}

// optional string cursor = 2;
void TLeaderboards::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboards::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboards.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboards::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboards.cursor)
}
void TLeaderboards::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboards.cursor)
}
void TLeaderboards::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboards.cursor)
}
::std::string* TLeaderboards::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboards.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboards::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboards.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboards::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboards.cursor)
}

inline const TLeaderboards* TLeaderboards::internal_default_instance() {
  return &TLeaderboards_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kLeaderboardIdFieldNumber;
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kIncrFieldNumber;
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kDecrFieldNumber;
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kSetFieldNumber;
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kBestFieldNumber;
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kLocationFieldNumber;
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kTimezoneFieldNumber;
const int TLeaderboardRecordsWrite_LeaderboardRecordWrite::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboardRecordsWrite_LeaderboardRecordWrite::TLeaderboardRecordsWrite_LeaderboardRecordWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::InitAsDefaultInstance() {
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_->incr_ = GOOGLE_LONGLONG(0);
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_->decr_ = GOOGLE_LONGLONG(0);
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_->set_ = GOOGLE_LONGLONG(0);
  TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_oneof_instance_->best_ = GOOGLE_LONGLONG(0);
}

TLeaderboardRecordsWrite_LeaderboardRecordWrite::TLeaderboardRecordsWrite_LeaderboardRecordWrite(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_op();
  _cached_size_ = 0;
}

TLeaderboardRecordsWrite_LeaderboardRecordWrite::~TLeaderboardRecordsWrite_LeaderboardRecordWrite() {
  // @@protoc_insertion_point(destructor:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  SharedDtor();
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_op()) {
    clear_op();
  }
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboardRecordsWrite_LeaderboardRecordWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboardRecordsWrite_LeaderboardRecordWrite_descriptor_;
}

const TLeaderboardRecordsWrite_LeaderboardRecordWrite& TLeaderboardRecordsWrite_LeaderboardRecordWrite::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsWrite_LeaderboardRecordWrite> TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_;

TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite_LeaderboardRecordWrite::New(::google::protobuf::Arena* arena) const {
  TLeaderboardRecordsWrite_LeaderboardRecordWrite* n = new TLeaderboardRecordsWrite_LeaderboardRecordWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  switch (op_case()) {
    case kIncr: {
      // No need to clear
      break;
    }
    case kDecr: {
      // No need to clear
      break;
    }
    case kSet: {
      // No need to clear
      break;
    }
    case kBest: {
      // No need to clear
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void TLeaderboardRecordsWrite_LeaderboardRecordWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_op();
}

bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string leaderboard_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), this->leaderboard_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_incr;
        break;
      }

      // optional int64 incr = 2;
      case 2: {
        if (tag == 16) {
         parse_incr:
          clear_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_.incr_)));
          set_has_incr();
        } else {
          goto handle_unusual;
        }
        goto after_best;
        break;
      }

      // optional int64 decr = 3;
      case 3: {
        if (tag == 24) {
          clear_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_.decr_)));
          set_has_decr();
        } else {
          goto handle_unusual;
        }
        goto after_best;
        break;
      }

      // optional int64 set = 4;
      case 4: {
        if (tag == 32) {
          clear_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_.set_)));
          set_has_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_best;
        break;
      }

      // optional int64 best = 5;
      case 5: {
        if (tag == 40) {
         parse_best:
          clear_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_.best_)));
          set_has_best();
        } else {
          goto handle_unusual;
        }
       after_best:
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional string location = 6;
      case 6: {
        if (tag == 50) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_timezone;
        break;
      }

      // optional string timezone = 7;
      case 7: {
        if (tag == 58) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_metadata;
        break;
      }

      // optional string metadata = 8;
      case 8: {
        if (tag == 66) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  return false;
#undef DO_
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), this->leaderboard_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  // optional int64 incr = 2;
  if (has_incr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->incr(), output);
  }

  // optional int64 decr = 3;
  if (has_decr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->decr(), output);
  }

  // optional int64 set = 4;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->set(), output);
  }

  // optional int64 best = 5;
  if (has_best()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->best(), output);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->location(), output);
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone(), output);
  }

  // optional string metadata = 8;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->metadata(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
}

::google::protobuf::uint8* TLeaderboardRecordsWrite_LeaderboardRecordWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), this->leaderboard_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  // optional int64 incr = 2;
  if (has_incr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->incr(), target);
  }

  // optional int64 decr = 3;
  if (has_decr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->decr(), target);
  }

  // optional int64 set = 4;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->set(), target);
  }

  // optional int64 best = 5;
  if (has_best()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->best(), target);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timezone(), target);
  }

  // optional string metadata = 8;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->metadata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  return target;
}

size_t TLeaderboardRecordsWrite_LeaderboardRecordWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  size_t total_size = 0;

  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // optional string metadata = 8;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  switch (op_case()) {
    // optional int64 incr = 2;
    case kIncr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->incr());
      break;
    }
    // optional int64 decr = 3;
    case kDecr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->decr());
      break;
    }
    // optional int64 set = 4;
    case kSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->set());
      break;
    }
    // optional int64 best = 5;
    case kBest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->best());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboardRecordsWrite_LeaderboardRecordWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboardRecordsWrite_LeaderboardRecordWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::MergeFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::UnsafeMergeFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.op_case()) {
    case kIncr: {
      set_incr(from.incr());
      break;
    }
    case kDecr: {
      set_decr(from.decr());
      break;
    }
    case kSet: {
      set_set(from.set());
      break;
    }
    case kBest: {
      set_best(from.best());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::CopyFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::IsInitialized() const {

  return true;
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::Swap(TLeaderboardRecordsWrite_LeaderboardRecordWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::InternalSwap(TLeaderboardRecordsWrite_LeaderboardRecordWrite* other) {
  leaderboard_id_.Swap(&other->leaderboard_id_);
  location_.Swap(&other->location_);
  timezone_.Swap(&other->timezone_);
  metadata_.Swap(&other->metadata_);
  std::swap(op_, other->op_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboardRecordsWrite_LeaderboardRecordWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboardRecordsWrite_LeaderboardRecordWrite_descriptor_;
  metadata.reflection = TLeaderboardRecordsWrite_LeaderboardRecordWrite_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboardRecordsWrite::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboardRecordsWrite::TLeaderboardRecordsWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboardRecordsWrite)
}

void TLeaderboardRecordsWrite::InitAsDefaultInstance() {
}

TLeaderboardRecordsWrite::TLeaderboardRecordsWrite(const TLeaderboardRecordsWrite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsWrite)
}

void TLeaderboardRecordsWrite::SharedCtor() {
  _cached_size_ = 0;
}

TLeaderboardRecordsWrite::~TLeaderboardRecordsWrite() {
  // @@protoc_insertion_point(destructor:server.TLeaderboardRecordsWrite)
  SharedDtor();
}

void TLeaderboardRecordsWrite::SharedDtor() {
}

void TLeaderboardRecordsWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboardRecordsWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboardRecordsWrite_descriptor_;
}

const TLeaderboardRecordsWrite& TLeaderboardRecordsWrite::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsWrite> TLeaderboardRecordsWrite_default_instance_;

TLeaderboardRecordsWrite* TLeaderboardRecordsWrite::New(::google::protobuf::Arena* arena) const {
  TLeaderboardRecordsWrite* n = new TLeaderboardRecordsWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboardRecordsWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsWrite)
  records_.Clear();
}

bool TLeaderboardRecordsWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboardRecordsWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_records;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboardRecordsWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboardRecordsWrite)
  return false;
#undef DO_
}

void TLeaderboardRecordsWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboardRecordsWrite)
  // repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboardRecordsWrite)
}

::google::protobuf::uint8* TLeaderboardRecordsWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsWrite)
  // repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsWrite)
  return target;
}

size_t TLeaderboardRecordsWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsWrite)
  size_t total_size = 0;

  // repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
  {
    unsigned int count = this->records_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboardRecordsWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsWrite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboardRecordsWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboardRecordsWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsWrite)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboardRecordsWrite::MergeFrom(const TLeaderboardRecordsWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsWrite)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboardRecordsWrite::UnsafeMergeFrom(const TLeaderboardRecordsWrite& from) {
  GOOGLE_DCHECK(&from != this);
  records_.MergeFrom(from.records_);
}

void TLeaderboardRecordsWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboardRecordsWrite::CopyFrom(const TLeaderboardRecordsWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsWrite)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboardRecordsWrite::IsInitialized() const {

  return true;
}

void TLeaderboardRecordsWrite::Swap(TLeaderboardRecordsWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboardRecordsWrite::InternalSwap(TLeaderboardRecordsWrite* other) {
  records_.UnsafeArenaSwap(&other->records_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboardRecordsWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboardRecordsWrite_descriptor_;
  metadata.reflection = TLeaderboardRecordsWrite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLeaderboardRecordsWrite_LeaderboardRecordWrite

// optional string leaderboard_id = 1;
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  return leaderboard_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const ::std::string& value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const char* value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_leaderboard_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  return leaderboard_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_leaderboard_id(::std::string* leaderboard_id) {
  if (leaderboard_id != NULL) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}

// optional int64 incr = 2;
bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_incr() const {
  return op_case() == kIncr;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_incr() {
  _oneof_case_[0] = kIncr;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_incr() {
  if (has_incr()) {
    op_.incr_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::incr() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.incr)
  if (has_incr()) {
    return op_.incr_;
  }
  return GOOGLE_LONGLONG(0);
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_incr(::google::protobuf::int64 value) {
  if (!has_incr()) {
    clear_op();
    set_has_incr();
  }
  op_.incr_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.incr)
}

// optional int64 decr = 3;
bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_decr() const {
  return op_case() == kDecr;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_decr() {
  _oneof_case_[0] = kDecr;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_decr() {
  if (has_decr()) {
    op_.decr_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::decr() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.decr)
  if (has_decr()) {
    return op_.decr_;
  }
  return GOOGLE_LONGLONG(0);
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_decr(::google::protobuf::int64 value) {
  if (!has_decr()) {
    clear_op();
    set_has_decr();
  }
  op_.decr_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.decr)
}

// optional int64 set = 4;
bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_set() const {
  return op_case() == kSet;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_set() {
  _oneof_case_[0] = kSet;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_set() {
  if (has_set()) {
    op_.set_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::set() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.set)
  if (has_set()) {
    return op_.set_;
  }
  return GOOGLE_LONGLONG(0);
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_set(::google::protobuf::int64 value) {
  if (!has_set()) {
    clear_op();
    set_has_set();
  }
  op_.set_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.set)
}

// optional int64 best = 5;
bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_best() const {
  return op_case() == kBest;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_best() {
  _oneof_case_[0] = kBest;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_best() {
  if (has_best()) {
    op_.best_ = GOOGLE_LONGLONG(0);
    clear_has_op();
  }
}
::google::protobuf::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::best() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.best)
  if (has_best()) {
    return op_.best_;
  }
  return GOOGLE_LONGLONG(0);
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_best(::google::protobuf::int64 value) {
  if (!has_best()) {
    clear_op();
    set_has_best();
  }
  op_.best_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.best)
}

// optional string location = 6;
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::location() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_location() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}

// optional string timezone = 7;
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::timezone() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}

// optional string metadata = 8;
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::metadata() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}

bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_op() const {
  return op_case() != OP_NOT_SET;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
TLeaderboardRecordsWrite_LeaderboardRecordWrite::OpCase TLeaderboardRecordsWrite_LeaderboardRecordWrite::op_case() const {
  return TLeaderboardRecordsWrite_LeaderboardRecordWrite::OpCase(_oneof_case_[0]);
}
inline const TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite_LeaderboardRecordWrite::internal_default_instance() {
  return &TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecordsWrite

// repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
int TLeaderboardRecordsWrite::records_size() const {
  return records_.size();
}
void TLeaderboardRecordsWrite::clear_records() {
  records_.Clear();
}
const ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite& TLeaderboardRecordsWrite::records(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.records)
  return records_.Get(index);
}
::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.records)
  return records_.Mutable(index);
}
::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite::add_records() {
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsWrite.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >*
TLeaderboardRecordsWrite::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsWrite.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >&
TLeaderboardRecordsWrite::records() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsWrite.records)
  return records_;
}

inline const TLeaderboardRecordsWrite* TLeaderboardRecordsWrite::internal_default_instance() {
  return &TLeaderboardRecordsWrite_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboardRecordsFetch::kLeaderboardIdsFieldNumber;
const int TLeaderboardRecordsFetch::kLimitFieldNumber;
const int TLeaderboardRecordsFetch::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboardRecordsFetch::TLeaderboardRecordsFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboardRecordsFetch)
}

void TLeaderboardRecordsFetch::InitAsDefaultInstance() {
}

TLeaderboardRecordsFetch::TLeaderboardRecordsFetch(const TLeaderboardRecordsFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsFetch)
}

void TLeaderboardRecordsFetch::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TLeaderboardRecordsFetch::~TLeaderboardRecordsFetch() {
  // @@protoc_insertion_point(destructor:server.TLeaderboardRecordsFetch)
  SharedDtor();
}

void TLeaderboardRecordsFetch::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboardRecordsFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboardRecordsFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboardRecordsFetch_descriptor_;
}

const TLeaderboardRecordsFetch& TLeaderboardRecordsFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsFetch> TLeaderboardRecordsFetch_default_instance_;

TLeaderboardRecordsFetch* TLeaderboardRecordsFetch::New(::google::protobuf::Arena* arena) const {
  TLeaderboardRecordsFetch* n = new TLeaderboardRecordsFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboardRecordsFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsFetch)
  limit_ = GOOGLE_LONGLONG(0);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leaderboard_ids_.Clear();
}

bool TLeaderboardRecordsFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboardRecordsFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string leaderboard_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_leaderboard_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_leaderboard_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_ids(this->leaderboard_ids_size() - 1).data(),
            this->leaderboard_ids(this->leaderboard_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsFetch.leaderboard_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_leaderboard_ids;
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional int64 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cursor;
        break;
      }

      // optional string cursor = 3;
      case 3: {
        if (tag == 26) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsFetch.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboardRecordsFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboardRecordsFetch)
  return false;
#undef DO_
}

void TLeaderboardRecordsFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboardRecordsFetch)
  // repeated string leaderboard_ids = 1;
  for (int i = 0; i < this->leaderboard_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_ids(i).data(), this->leaderboard_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsFetch.leaderboard_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->leaderboard_ids(i), output);
  }

  // optional int64 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->limit(), output);
  }

  // optional string cursor = 3;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsFetch.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboardRecordsFetch)
}

::google::protobuf::uint8* TLeaderboardRecordsFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsFetch)
  // repeated string leaderboard_ids = 1;
  for (int i = 0; i < this->leaderboard_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_ids(i).data(), this->leaderboard_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsFetch.leaderboard_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->leaderboard_ids(i), target);
  }

  // optional int64 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->limit(), target);
  }

  // optional string cursor = 3;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsFetch.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsFetch)
  return target;
}

size_t TLeaderboardRecordsFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsFetch)
  size_t total_size = 0;

  // optional int64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // optional string cursor = 3;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // repeated string leaderboard_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->leaderboard_ids_size());
  for (int i = 0; i < this->leaderboard_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->leaderboard_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboardRecordsFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboardRecordsFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboardRecordsFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsFetch)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboardRecordsFetch::MergeFrom(const TLeaderboardRecordsFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboardRecordsFetch::UnsafeMergeFrom(const TLeaderboardRecordsFetch& from) {
  GOOGLE_DCHECK(&from != this);
  leaderboard_ids_.UnsafeMergeFrom(from.leaderboard_ids_);
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TLeaderboardRecordsFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboardRecordsFetch::CopyFrom(const TLeaderboardRecordsFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboardRecordsFetch::IsInitialized() const {

  return true;
}

void TLeaderboardRecordsFetch::Swap(TLeaderboardRecordsFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboardRecordsFetch::InternalSwap(TLeaderboardRecordsFetch* other) {
  leaderboard_ids_.UnsafeArenaSwap(&other->leaderboard_ids_);
  std::swap(limit_, other->limit_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboardRecordsFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboardRecordsFetch_descriptor_;
  metadata.reflection = TLeaderboardRecordsFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLeaderboardRecordsFetch

// repeated string leaderboard_ids = 1;
int TLeaderboardRecordsFetch::leaderboard_ids_size() const {
  return leaderboard_ids_.size();
}
void TLeaderboardRecordsFetch::clear_leaderboard_ids() {
  leaderboard_ids_.Clear();
}
const ::std::string& TLeaderboardRecordsFetch::leaderboard_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_.Get(index);
}
::std::string* TLeaderboardRecordsFetch::mutable_leaderboard_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_.Mutable(index);
}
void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.leaderboard_ids)
  leaderboard_ids_.Mutable(index)->assign(value);
}
void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const char* value) {
  leaderboard_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const char* value, size_t size) {
  leaderboard_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
::std::string* TLeaderboardRecordsFetch::add_leaderboard_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_.Add();
}
void TLeaderboardRecordsFetch::add_leaderboard_ids(const ::std::string& value) {
  leaderboard_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
void TLeaderboardRecordsFetch::add_leaderboard_ids(const char* value) {
  leaderboard_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
void TLeaderboardRecordsFetch::add_leaderboard_ids(const char* value, size_t size) {
  leaderboard_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLeaderboardRecordsFetch::leaderboard_ids() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TLeaderboardRecordsFetch::mutable_leaderboard_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return &leaderboard_ids_;
}

// optional int64 limit = 2;
void TLeaderboardRecordsFetch::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TLeaderboardRecordsFetch::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.limit)
  return limit_;
}
void TLeaderboardRecordsFetch::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.limit)
}

// optional string cursor = 3;
void TLeaderboardRecordsFetch::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecordsFetch::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsFetch::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.cursor)
}
void TLeaderboardRecordsFetch::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsFetch.cursor)
}
void TLeaderboardRecordsFetch::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsFetch.cursor)
}
::std::string* TLeaderboardRecordsFetch::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsFetch.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsFetch::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsFetch.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsFetch::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsFetch.cursor)
}

inline const TLeaderboardRecordsFetch* TLeaderboardRecordsFetch::internal_default_instance() {
  return &TLeaderboardRecordsFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboardRecordsList_Owners::kOwnerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboardRecordsList_Owners::TLeaderboardRecordsList_Owners()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboardRecordsList.Owners)
}

void TLeaderboardRecordsList_Owners::InitAsDefaultInstance() {
}

TLeaderboardRecordsList_Owners::TLeaderboardRecordsList_Owners(const TLeaderboardRecordsList_Owners& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsList.Owners)
}

void TLeaderboardRecordsList_Owners::SharedCtor() {
  _cached_size_ = 0;
}

TLeaderboardRecordsList_Owners::~TLeaderboardRecordsList_Owners() {
  // @@protoc_insertion_point(destructor:server.TLeaderboardRecordsList.Owners)
  SharedDtor();
}

void TLeaderboardRecordsList_Owners::SharedDtor() {
}

void TLeaderboardRecordsList_Owners::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboardRecordsList_Owners::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboardRecordsList_Owners_descriptor_;
}

const TLeaderboardRecordsList_Owners& TLeaderboardRecordsList_Owners::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsList_Owners> TLeaderboardRecordsList_Owners_default_instance_;

TLeaderboardRecordsList_Owners* TLeaderboardRecordsList_Owners::New(::google::protobuf::Arena* arena) const {
  TLeaderboardRecordsList_Owners* n = new TLeaderboardRecordsList_Owners;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboardRecordsList_Owners::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsList.Owners)
  owner_ids_.Clear();
}

bool TLeaderboardRecordsList_Owners::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboardRecordsList.Owners)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string owner_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_owner_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_owner_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_ids(this->owner_ids_size() - 1).data(),
            this->owner_ids(this->owner_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsList.Owners.owner_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_owner_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboardRecordsList.Owners)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboardRecordsList.Owners)
  return false;
#undef DO_
}

void TLeaderboardRecordsList_Owners::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboardRecordsList.Owners)
  // repeated string owner_ids = 1;
  for (int i = 0; i < this->owner_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_ids(i).data(), this->owner_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.Owners.owner_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->owner_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboardRecordsList.Owners)
}

::google::protobuf::uint8* TLeaderboardRecordsList_Owners::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsList.Owners)
  // repeated string owner_ids = 1;
  for (int i = 0; i < this->owner_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_ids(i).data(), this->owner_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.Owners.owner_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->owner_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsList.Owners)
  return target;
}

size_t TLeaderboardRecordsList_Owners::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsList.Owners)
  size_t total_size = 0;

  // repeated string owner_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->owner_ids_size());
  for (int i = 0; i < this->owner_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->owner_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboardRecordsList_Owners::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsList.Owners)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboardRecordsList_Owners* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboardRecordsList_Owners>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsList.Owners)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsList.Owners)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboardRecordsList_Owners::MergeFrom(const TLeaderboardRecordsList_Owners& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsList.Owners)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboardRecordsList_Owners::UnsafeMergeFrom(const TLeaderboardRecordsList_Owners& from) {
  GOOGLE_DCHECK(&from != this);
  owner_ids_.UnsafeMergeFrom(from.owner_ids_);
}

void TLeaderboardRecordsList_Owners::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsList.Owners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboardRecordsList_Owners::CopyFrom(const TLeaderboardRecordsList_Owners& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsList.Owners)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboardRecordsList_Owners::IsInitialized() const {

  return true;
}

void TLeaderboardRecordsList_Owners::Swap(TLeaderboardRecordsList_Owners* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboardRecordsList_Owners::InternalSwap(TLeaderboardRecordsList_Owners* other) {
  owner_ids_.UnsafeArenaSwap(&other->owner_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboardRecordsList_Owners::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboardRecordsList_Owners_descriptor_;
  metadata.reflection = TLeaderboardRecordsList_Owners_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboardRecordsList::kLeaderboardIdFieldNumber;
const int TLeaderboardRecordsList::kOwnerIdFieldNumber;
const int TLeaderboardRecordsList::kOwnerIdsFieldNumber;
const int TLeaderboardRecordsList::kLangFieldNumber;
const int TLeaderboardRecordsList::kLocationFieldNumber;
const int TLeaderboardRecordsList::kTimezoneFieldNumber;
const int TLeaderboardRecordsList::kLimitFieldNumber;
const int TLeaderboardRecordsList::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboardRecordsList::TLeaderboardRecordsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboardRecordsList)
}

void TLeaderboardRecordsList::InitAsDefaultInstance() {
  TLeaderboardRecordsList_default_oneof_instance_->owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLeaderboardRecordsList_default_oneof_instance_->owner_ids_ = const_cast< ::server::TLeaderboardRecordsList_Owners*>(
      ::server::TLeaderboardRecordsList_Owners::internal_default_instance());
  TLeaderboardRecordsList_default_oneof_instance_->lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLeaderboardRecordsList_default_oneof_instance_->location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLeaderboardRecordsList_default_oneof_instance_->timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TLeaderboardRecordsList::TLeaderboardRecordsList(const TLeaderboardRecordsList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsList)
}

void TLeaderboardRecordsList::SharedCtor() {
  leaderboard_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = GOOGLE_LONGLONG(0);
  clear_has_filter();
  _cached_size_ = 0;
}

TLeaderboardRecordsList::~TLeaderboardRecordsList() {
  // @@protoc_insertion_point(destructor:server.TLeaderboardRecordsList)
  SharedDtor();
}

void TLeaderboardRecordsList::SharedDtor() {
  leaderboard_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_filter()) {
    clear_filter();
  }
}

void TLeaderboardRecordsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboardRecordsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboardRecordsList_descriptor_;
}

const TLeaderboardRecordsList& TLeaderboardRecordsList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecordsList> TLeaderboardRecordsList_default_instance_;

TLeaderboardRecordsList* TLeaderboardRecordsList::New(::google::protobuf::Arena* arena) const {
  TLeaderboardRecordsList* n = new TLeaderboardRecordsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboardRecordsList::clear_filter() {
// @@protoc_insertion_point(one_of_clear_start:server.TLeaderboardRecordsList)
  switch (filter_case()) {
    case kOwnerId: {
      filter_.owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOwnerIds: {
      delete filter_.owner_ids_;
      break;
    }
    case kLang: {
      filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kLocation: {
      filter_.location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTimezone: {
      filter_.timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_NOT_SET;
}


void TLeaderboardRecordsList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsList)
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = GOOGLE_LONGLONG(0);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_filter();
}

bool TLeaderboardRecordsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboardRecordsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string leaderboard_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderboard_id().data(), this->leaderboard_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsList.leaderboard_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_owner_id;
        break;
      }

      // optional string owner_id = 2;
      case 2: {
        if (tag == 18) {
         parse_owner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), this->owner_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsList.owner_id"));
        } else {
          goto handle_unusual;
        }
        goto after_timezone;
        break;
      }

      // optional .server.TLeaderboardRecordsList.Owners owner_ids = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_ids()));
        } else {
          goto handle_unusual;
        }
        goto after_timezone;
        break;
      }

      // optional string lang = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsList.lang"));
        } else {
          goto handle_unusual;
        }
        goto after_timezone;
        break;
      }

      // optional string location = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsList.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timezone;
        break;
      }

      // optional string timezone = 6;
      case 6: {
        if (tag == 50) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsList.timezone"));
        } else {
          goto handle_unusual;
        }
       after_timezone:
        if (input->ExpectTag(56)) goto parse_limit;
        break;
      }

      // optional int64 limit = 7;
      case 7: {
        if (tag == 56) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cursor;
        break;
      }

      // optional string cursor = 8;
      case 8: {
        if (tag == 66) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecordsList.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboardRecordsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboardRecordsList)
  return false;
#undef DO_
}

void TLeaderboardRecordsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboardRecordsList)
  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), this->leaderboard_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.leaderboard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leaderboard_id(), output);
  }

  // optional string owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), this->owner_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_id(), output);
  }

  // optional .server.TLeaderboardRecordsList.Owners owner_ids = 3;
  if (has_owner_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *filter_.owner_ids_, output);
  }

  // optional string lang = 4;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lang(), output);
  }

  // optional string location = 5;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location(), output);
  }

  // optional string timezone = 6;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timezone(), output);
  }

  // optional int64 limit = 7;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->limit(), output);
  }

  // optional string cursor = 8;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboardRecordsList)
}

::google::protobuf::uint8* TLeaderboardRecordsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsList)
  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderboard_id().data(), this->leaderboard_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.leaderboard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leaderboard_id(), target);
  }

  // optional string owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), this->owner_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_id(), target);
  }

  // optional .server.TLeaderboardRecordsList.Owners owner_ids = 3;
  if (has_owner_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *filter_.owner_ids_, false, target);
  }

  // optional string lang = 4;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lang(), target);
  }

  // optional string location = 5;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location(), target);
  }

  // optional string timezone = 6;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timezone(), target);
  }

  // optional int64 limit = 7;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->limit(), target);
  }

  // optional string cursor = 8;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecordsList.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsList)
  return target;
}

size_t TLeaderboardRecordsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsList)
  size_t total_size = 0;

  // optional string leaderboard_id = 1;
  if (this->leaderboard_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderboard_id());
  }

  // optional int64 limit = 7;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // optional string cursor = 8;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  switch (filter_case()) {
    // optional string owner_id = 2;
    case kOwnerId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_id());
      break;
    }
    // optional .server.TLeaderboardRecordsList.Owners owner_ids = 3;
    case kOwnerIds: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_.owner_ids_);
      break;
    }
    // optional string lang = 4;
    case kLang: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
      break;
    }
    // optional string location = 5;
    case kLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
      break;
    }
    // optional string timezone = 6;
    case kTimezone: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboardRecordsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboardRecordsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboardRecordsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsList)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboardRecordsList::MergeFrom(const TLeaderboardRecordsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboardRecordsList::UnsafeMergeFrom(const TLeaderboardRecordsList& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.filter_case()) {
    case kOwnerId: {
      set_owner_id(from.owner_id());
      break;
    }
    case kOwnerIds: {
      mutable_owner_ids()->::server::TLeaderboardRecordsList_Owners::MergeFrom(from.owner_ids());
      break;
    }
    case kLang: {
      set_lang(from.lang());
      break;
    }
    case kLocation: {
      set_location(from.location());
      break;
    }
    case kTimezone: {
      set_timezone(from.timezone());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  if (from.leaderboard_id().size() > 0) {

    leaderboard_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderboard_id_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TLeaderboardRecordsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboardRecordsList::CopyFrom(const TLeaderboardRecordsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboardRecordsList::IsInitialized() const {

  return true;
}

void TLeaderboardRecordsList::Swap(TLeaderboardRecordsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboardRecordsList::InternalSwap(TLeaderboardRecordsList* other) {
  leaderboard_id_.Swap(&other->leaderboard_id_);
  std::swap(limit_, other->limit_);
  cursor_.Swap(&other->cursor_);
  std::swap(filter_, other->filter_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboardRecordsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboardRecordsList_descriptor_;
  metadata.reflection = TLeaderboardRecordsList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLeaderboardRecordsList_Owners

// repeated string owner_ids = 1;
int TLeaderboardRecordsList_Owners::owner_ids_size() const {
  return owner_ids_.size();
}
void TLeaderboardRecordsList_Owners::clear_owner_ids() {
  owner_ids_.Clear();
}
const ::std::string& TLeaderboardRecordsList_Owners::owner_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_.Get(index);
}
::std::string* TLeaderboardRecordsList_Owners::mutable_owner_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_.Mutable(index);
}
void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.Owners.owner_ids)
  owner_ids_.Mutable(index)->assign(value);
}
void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const char* value) {
  owner_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.Owners.owner_ids)
}
void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const char* value, size_t size) {
  owner_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.Owners.owner_ids)
}
::std::string* TLeaderboardRecordsList_Owners::add_owner_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_.Add();
}
void TLeaderboardRecordsList_Owners::add_owner_ids(const ::std::string& value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsList.Owners.owner_ids)
}
void TLeaderboardRecordsList_Owners::add_owner_ids(const char* value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardRecordsList.Owners.owner_ids)
}
void TLeaderboardRecordsList_Owners::add_owner_ids(const char* value, size_t size) {
  owner_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardRecordsList.Owners.owner_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLeaderboardRecordsList_Owners::owner_ids() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TLeaderboardRecordsList_Owners::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsList.Owners.owner_ids)
  return &owner_ids_;
}

inline const TLeaderboardRecordsList_Owners* TLeaderboardRecordsList_Owners::internal_default_instance() {
  return &TLeaderboardRecordsList_Owners_default_instance_.get();
}
// -------------------------------------------------------------------

// TLeaderboardRecordsList

// optional string leaderboard_id = 1;
void TLeaderboardRecordsList::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecordsList::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.leaderboard_id)
  return leaderboard_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsList::set_leaderboard_id(const ::std::string& value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.leaderboard_id)
}
void TLeaderboardRecordsList::set_leaderboard_id(const char* value) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.leaderboard_id)
}
void TLeaderboardRecordsList::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.leaderboard_id)
}
::std::string* TLeaderboardRecordsList::mutable_leaderboard_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.leaderboard_id)
  return leaderboard_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsList::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsList::set_allocated_leaderboard_id(::std::string* leaderboard_id) {
  if (leaderboard_id != NULL) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.leaderboard_id)
}

// optional string owner_id = 2;
bool TLeaderboardRecordsList::has_owner_id() const {
  return filter_case() == kOwnerId;
}
void TLeaderboardRecordsList::set_has_owner_id() {
  _oneof_case_[0] = kOwnerId;
}
void TLeaderboardRecordsList::clear_owner_id() {
  if (has_owner_id()) {
    filter_.owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& TLeaderboardRecordsList::owner_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.owner_id)
  if (has_owner_id()) {
    return filter_.owner_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLeaderboardRecordsList::set_owner_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.owner_id)
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.owner_id)
}
void TLeaderboardRecordsList::set_owner_id(const char* value) {
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.owner_id)
}
void TLeaderboardRecordsList::set_owner_id(const char* value, size_t size) {
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.owner_id)
}
::std::string* TLeaderboardRecordsList::mutable_owner_id() {
  if (!has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.owner_id)
  return filter_.owner_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsList::release_owner_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.owner_id)
  if (has_owner_id()) {
    clear_has_filter();
    return filter_.owner_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLeaderboardRecordsList::set_allocated_owner_id(::std::string* owner_id) {
  if (!has_owner_id()) {
    filter_.owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (owner_id != NULL) {
    set_has_owner_id();
    filter_.owner_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        owner_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.owner_id)
}

// optional .server.TLeaderboardRecordsList.Owners owner_ids = 3;
bool TLeaderboardRecordsList::has_owner_ids() const {
  return filter_case() == kOwnerIds;
}
void TLeaderboardRecordsList::set_has_owner_ids() {
  _oneof_case_[0] = kOwnerIds;
}
void TLeaderboardRecordsList::clear_owner_ids() {
  if (has_owner_ids()) {
    delete filter_.owner_ids_;
    clear_has_filter();
  }
}
 const ::server::TLeaderboardRecordsList_Owners& TLeaderboardRecordsList::owner_ids() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.owner_ids)
  return has_owner_ids()
      ? *filter_.owner_ids_
      : ::server::TLeaderboardRecordsList_Owners::default_instance();
}
::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::mutable_owner_ids() {
  if (!has_owner_ids()) {
    clear_filter();
    set_has_owner_ids();
    filter_.owner_ids_ = new ::server::TLeaderboardRecordsList_Owners;
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.owner_ids)
  return filter_.owner_ids_;
}
::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::release_owner_ids() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.owner_ids)
  if (has_owner_ids()) {
    clear_has_filter();
    ::server::TLeaderboardRecordsList_Owners* temp = filter_.owner_ids_;
    filter_.owner_ids_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TLeaderboardRecordsList::set_allocated_owner_ids(::server::TLeaderboardRecordsList_Owners* owner_ids) {
  clear_filter();
  if (owner_ids) {
    set_has_owner_ids();
    filter_.owner_ids_ = owner_ids;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.owner_ids)
}

// optional string lang = 4;
bool TLeaderboardRecordsList::has_lang() const {
  return filter_case() == kLang;
}
void TLeaderboardRecordsList::set_has_lang() {
  _oneof_case_[0] = kLang;
}
void TLeaderboardRecordsList::clear_lang() {
  if (has_lang()) {
    filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& TLeaderboardRecordsList::lang() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.lang)
  if (has_lang()) {
    return filter_.lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLeaderboardRecordsList::set_lang(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.lang)
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.lang)
}
void TLeaderboardRecordsList::set_lang(const char* value) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.lang)
}
void TLeaderboardRecordsList::set_lang(const char* value, size_t size) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.lang)
}
::std::string* TLeaderboardRecordsList::mutable_lang() {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.lang)
  return filter_.lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsList::release_lang() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.lang)
  if (has_lang()) {
    clear_has_filter();
    return filter_.lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLeaderboardRecordsList::set_allocated_lang(::std::string* lang) {
  if (!has_lang()) {
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (lang != NULL) {
    set_has_lang();
    filter_.lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        lang);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.lang)
}

// optional string location = 5;
bool TLeaderboardRecordsList::has_location() const {
  return filter_case() == kLocation;
}
void TLeaderboardRecordsList::set_has_location() {
  _oneof_case_[0] = kLocation;
}
void TLeaderboardRecordsList::clear_location() {
  if (has_location()) {
    filter_.location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& TLeaderboardRecordsList::location() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.location)
  if (has_location()) {
    return filter_.location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLeaderboardRecordsList::set_location(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.location)
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.location)
}
void TLeaderboardRecordsList::set_location(const char* value) {
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.location)
}
void TLeaderboardRecordsList::set_location(const char* value, size_t size) {
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.location)
}
::std::string* TLeaderboardRecordsList::mutable_location() {
  if (!has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.location)
  return filter_.location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsList::release_location() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.location)
  if (has_location()) {
    clear_has_filter();
    return filter_.location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLeaderboardRecordsList::set_allocated_location(::std::string* location) {
  if (!has_location()) {
    filter_.location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (location != NULL) {
    set_has_location();
    filter_.location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        location);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.location)
}

// optional string timezone = 6;
bool TLeaderboardRecordsList::has_timezone() const {
  return filter_case() == kTimezone;
}
void TLeaderboardRecordsList::set_has_timezone() {
  _oneof_case_[0] = kTimezone;
}
void TLeaderboardRecordsList::clear_timezone() {
  if (has_timezone()) {
    filter_.timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& TLeaderboardRecordsList::timezone() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.timezone)
  if (has_timezone()) {
    return filter_.timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLeaderboardRecordsList::set_timezone(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.timezone)
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.timezone)
}
void TLeaderboardRecordsList::set_timezone(const char* value) {
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.timezone)
}
void TLeaderboardRecordsList::set_timezone(const char* value, size_t size) {
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.timezone)
}
::std::string* TLeaderboardRecordsList::mutable_timezone() {
  if (!has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.timezone)
  return filter_.timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsList::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.timezone)
  if (has_timezone()) {
    clear_has_filter();
    return filter_.timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLeaderboardRecordsList::set_allocated_timezone(::std::string* timezone) {
  if (!has_timezone()) {
    filter_.timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (timezone != NULL) {
    set_has_timezone();
    filter_.timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        timezone);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.timezone)
}

// optional int64 limit = 7;
void TLeaderboardRecordsList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TLeaderboardRecordsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.limit)
  return limit_;
}
void TLeaderboardRecordsList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.limit)
}

// optional string cursor = 8;
void TLeaderboardRecordsList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecordsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.cursor)
}
void TLeaderboardRecordsList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.cursor)
}
void TLeaderboardRecordsList::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.cursor)
}
::std::string* TLeaderboardRecordsList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecordsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecordsList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.cursor)
}

bool TLeaderboardRecordsList::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
void TLeaderboardRecordsList::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
TLeaderboardRecordsList::FilterCase TLeaderboardRecordsList::filter_case() const {
  return TLeaderboardRecordsList::FilterCase(_oneof_case_[0]);
}
inline const TLeaderboardRecordsList* TLeaderboardRecordsList::internal_default_instance() {
  return &TLeaderboardRecordsList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLeaderboardRecords::kRecordsFieldNumber;
const int TLeaderboardRecords::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLeaderboardRecords::TLeaderboardRecords()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLeaderboardRecords)
}

void TLeaderboardRecords::InitAsDefaultInstance() {
}

TLeaderboardRecords::TLeaderboardRecords(const TLeaderboardRecords& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecords)
}

void TLeaderboardRecords::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TLeaderboardRecords::~TLeaderboardRecords() {
  // @@protoc_insertion_point(destructor:server.TLeaderboardRecords)
  SharedDtor();
}

void TLeaderboardRecords::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboardRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLeaderboardRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLeaderboardRecords_descriptor_;
}

const TLeaderboardRecords& TLeaderboardRecords::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLeaderboardRecords> TLeaderboardRecords_default_instance_;

TLeaderboardRecords* TLeaderboardRecords::New(::google::protobuf::Arena* arena) const {
  TLeaderboardRecords* n = new TLeaderboardRecords;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLeaderboardRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecords)
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  records_.Clear();
}

bool TLeaderboardRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLeaderboardRecords)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.LeaderboardRecord records = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_records;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional string cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cursor().data(), this->cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLeaderboardRecords.cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLeaderboardRecords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLeaderboardRecords)
  return false;
#undef DO_
}

void TLeaderboardRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLeaderboardRecords)
  // repeated .server.LeaderboardRecord records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecords.cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLeaderboardRecords)
}

::google::protobuf::uint8* TLeaderboardRecords::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecords)
  // repeated .server.LeaderboardRecord records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(i), false, target);
  }

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cursor().data(), this->cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLeaderboardRecords.cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecords)
  return target;
}

size_t TLeaderboardRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecords)
  size_t total_size = 0;

  // optional string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cursor());
  }

  // repeated .server.LeaderboardRecord records = 1;
  {
    unsigned int count = this->records_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLeaderboardRecords::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecords)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLeaderboardRecords* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLeaderboardRecords>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecords)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecords)
    UnsafeMergeFrom(*source);
  }
}

void TLeaderboardRecords::MergeFrom(const TLeaderboardRecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecords)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLeaderboardRecords::UnsafeMergeFrom(const TLeaderboardRecords& from) {
  GOOGLE_DCHECK(&from != this);
  records_.MergeFrom(from.records_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TLeaderboardRecords::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLeaderboardRecords::CopyFrom(const TLeaderboardRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecords)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLeaderboardRecords::IsInitialized() const {

  return true;
}

void TLeaderboardRecords::Swap(TLeaderboardRecords* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLeaderboardRecords::InternalSwap(TLeaderboardRecords* other) {
  records_.UnsafeArenaSwap(&other->records_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLeaderboardRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLeaderboardRecords_descriptor_;
  metadata.reflection = TLeaderboardRecords_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLeaderboardRecords

// repeated .server.LeaderboardRecord records = 1;
int TLeaderboardRecords::records_size() const {
  return records_.size();
}
void TLeaderboardRecords::clear_records() {
  records_.Clear();
}
const ::server::LeaderboardRecord& TLeaderboardRecords::records(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecords.records)
  return records_.Get(index);
}
::server::LeaderboardRecord* TLeaderboardRecords::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecords.records)
  return records_.Mutable(index);
}
::server::LeaderboardRecord* TLeaderboardRecords::add_records() {
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecords.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::LeaderboardRecord >*
TLeaderboardRecords::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecords.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::server::LeaderboardRecord >&
TLeaderboardRecords::records() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecords.records)
  return records_;
}

// optional string cursor = 2;
void TLeaderboardRecords::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TLeaderboardRecords::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecords.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecords::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecords.cursor)
}
void TLeaderboardRecords::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecords.cursor)
}
void TLeaderboardRecords::set_cursor(const char* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecords.cursor)
}
::std::string* TLeaderboardRecords::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecords.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLeaderboardRecords::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecords.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TLeaderboardRecords::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecords.cursor)
}

inline const TLeaderboardRecords* TLeaderboardRecords::internal_default_instance() {
  return &TLeaderboardRecords_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TRpc::kIdFieldNumber;
const int TRpc::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TRpc::TRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TRpc)
}

void TRpc::InitAsDefaultInstance() {
}

TRpc::TRpc(const TRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TRpc)
}

void TRpc::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TRpc::~TRpc() {
  // @@protoc_insertion_point(destructor:server.TRpc)
  SharedDtor();
}

void TRpc::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRpc_descriptor_;
}

const TRpc& TRpc::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TRpc> TRpc_default_instance_;

TRpc* TRpc::New(::google::protobuf::Arena* arena) const {
  TRpc* n = new TRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TRpc)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TRpc.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional string payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TRpc.payload"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TRpc)
  return false;
#undef DO_
}

void TRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TRpc)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TRpc.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TRpc.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TRpc)
}

::google::protobuf::uint8* TRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TRpc)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TRpc.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TRpc.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TRpc)
  return target;
}

size_t TRpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TRpc)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TRpc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TRpc)
    UnsafeMergeFrom(*source);
  }
}

void TRpc::MergeFrom(const TRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TRpc)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TRpc::UnsafeMergeFrom(const TRpc& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void TRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRpc::CopyFrom(const TRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TRpc)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TRpc::IsInitialized() const {

  return true;
}

void TRpc::Swap(TRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TRpc::InternalSwap(TRpc* other) {
  id_.Swap(&other->id_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRpc_descriptor_;
  metadata.reflection = TRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TRpc

// optional string id = 1;
void TRpc::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TRpc::id() const {
  // @@protoc_insertion_point(field_get:server.TRpc.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TRpc::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TRpc.id)
}
void TRpc::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TRpc.id)
}
void TRpc::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TRpc.id)
}
::std::string* TRpc::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TRpc.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TRpc::release_id() {
  // @@protoc_insertion_point(field_release:server.TRpc.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TRpc::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.TRpc.id)
}

// optional string payload = 2;
void TRpc::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TRpc::payload() const {
  // @@protoc_insertion_point(field_get:server.TRpc.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TRpc::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TRpc.payload)
}
void TRpc::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TRpc.payload)
}
void TRpc::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TRpc.payload)
}
::std::string* TRpc::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:server.TRpc.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TRpc::release_payload() {
  // @@protoc_insertion_point(field_release:server.TRpc.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TRpc::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:server.TRpc.payload)
}

inline const TRpc* TRpc::internal_default_instance() {
  return &TRpc_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPurchaseValidation_ApplePurchase::kProductIdFieldNumber;
const int TPurchaseValidation_ApplePurchase::kReceiptDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPurchaseValidation_ApplePurchase::TPurchaseValidation_ApplePurchase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TPurchaseValidation.ApplePurchase)
}

void TPurchaseValidation_ApplePurchase::InitAsDefaultInstance() {
}

TPurchaseValidation_ApplePurchase::TPurchaseValidation_ApplePurchase(const TPurchaseValidation_ApplePurchase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TPurchaseValidation.ApplePurchase)
}

void TPurchaseValidation_ApplePurchase::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receipt_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TPurchaseValidation_ApplePurchase::~TPurchaseValidation_ApplePurchase() {
  // @@protoc_insertion_point(destructor:server.TPurchaseValidation.ApplePurchase)
  SharedDtor();
}

void TPurchaseValidation_ApplePurchase::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receipt_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TPurchaseValidation_ApplePurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPurchaseValidation_ApplePurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPurchaseValidation_ApplePurchase_descriptor_;
}

const TPurchaseValidation_ApplePurchase& TPurchaseValidation_ApplePurchase::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TPurchaseValidation_ApplePurchase> TPurchaseValidation_ApplePurchase_default_instance_;

TPurchaseValidation_ApplePurchase* TPurchaseValidation_ApplePurchase::New(::google::protobuf::Arena* arena) const {
  TPurchaseValidation_ApplePurchase* n = new TPurchaseValidation_ApplePurchase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TPurchaseValidation_ApplePurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TPurchaseValidation.ApplePurchase)
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receipt_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TPurchaseValidation_ApplePurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TPurchaseValidation.ApplePurchase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TPurchaseValidation.ApplePurchase.product_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_receipt_data;
        break;
      }

      // optional string receipt_data = 2;
      case 2: {
        if (tag == 18) {
         parse_receipt_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receipt_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receipt_data().data(), this->receipt_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TPurchaseValidation.ApplePurchase.receipt_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TPurchaseValidation.ApplePurchase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TPurchaseValidation.ApplePurchase)
  return false;
#undef DO_
}

void TPurchaseValidation_ApplePurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TPurchaseValidation.ApplePurchase)
  // optional string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.ApplePurchase.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // optional string receipt_data = 2;
  if (this->receipt_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receipt_data().data(), this->receipt_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.ApplePurchase.receipt_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->receipt_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TPurchaseValidation.ApplePurchase)
}

::google::protobuf::uint8* TPurchaseValidation_ApplePurchase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseValidation.ApplePurchase)
  // optional string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.ApplePurchase.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // optional string receipt_data = 2;
  if (this->receipt_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receipt_data().data(), this->receipt_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.ApplePurchase.receipt_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->receipt_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseValidation.ApplePurchase)
  return target;
}

size_t TPurchaseValidation_ApplePurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseValidation.ApplePurchase)
  size_t total_size = 0;

  // optional string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // optional string receipt_data = 2;
  if (this->receipt_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receipt_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPurchaseValidation_ApplePurchase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseValidation.ApplePurchase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TPurchaseValidation_ApplePurchase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TPurchaseValidation_ApplePurchase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseValidation.ApplePurchase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseValidation.ApplePurchase)
    UnsafeMergeFrom(*source);
  }
}

void TPurchaseValidation_ApplePurchase::MergeFrom(const TPurchaseValidation_ApplePurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseValidation.ApplePurchase)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TPurchaseValidation_ApplePurchase::UnsafeMergeFrom(const TPurchaseValidation_ApplePurchase& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.receipt_data().size() > 0) {

    receipt_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receipt_data_);
  }
}

void TPurchaseValidation_ApplePurchase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseValidation.ApplePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPurchaseValidation_ApplePurchase::CopyFrom(const TPurchaseValidation_ApplePurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseValidation.ApplePurchase)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TPurchaseValidation_ApplePurchase::IsInitialized() const {

  return true;
}

void TPurchaseValidation_ApplePurchase::Swap(TPurchaseValidation_ApplePurchase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TPurchaseValidation_ApplePurchase::InternalSwap(TPurchaseValidation_ApplePurchase* other) {
  product_id_.Swap(&other->product_id_);
  receipt_data_.Swap(&other->receipt_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TPurchaseValidation_ApplePurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPurchaseValidation_ApplePurchase_descriptor_;
  metadata.reflection = TPurchaseValidation_ApplePurchase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPurchaseValidation_GooglePurchase::kProductIdFieldNumber;
const int TPurchaseValidation_GooglePurchase::kProductTypeFieldNumber;
const int TPurchaseValidation_GooglePurchase::kPurchaseTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPurchaseValidation_GooglePurchase::TPurchaseValidation_GooglePurchase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TPurchaseValidation.GooglePurchase)
}

void TPurchaseValidation_GooglePurchase::InitAsDefaultInstance() {
}

TPurchaseValidation_GooglePurchase::TPurchaseValidation_GooglePurchase(const TPurchaseValidation_GooglePurchase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TPurchaseValidation.GooglePurchase)
}

void TPurchaseValidation_GooglePurchase::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  purchase_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TPurchaseValidation_GooglePurchase::~TPurchaseValidation_GooglePurchase() {
  // @@protoc_insertion_point(destructor:server.TPurchaseValidation.GooglePurchase)
  SharedDtor();
}

void TPurchaseValidation_GooglePurchase::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  purchase_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TPurchaseValidation_GooglePurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPurchaseValidation_GooglePurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPurchaseValidation_GooglePurchase_descriptor_;
}

const TPurchaseValidation_GooglePurchase& TPurchaseValidation_GooglePurchase::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TPurchaseValidation_GooglePurchase> TPurchaseValidation_GooglePurchase_default_instance_;

TPurchaseValidation_GooglePurchase* TPurchaseValidation_GooglePurchase::New(::google::protobuf::Arena* arena) const {
  TPurchaseValidation_GooglePurchase* n = new TPurchaseValidation_GooglePurchase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TPurchaseValidation_GooglePurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TPurchaseValidation.GooglePurchase)
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  purchase_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TPurchaseValidation_GooglePurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TPurchaseValidation.GooglePurchase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TPurchaseValidation.GooglePurchase.product_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_product_type;
        break;
      }

      // optional string product_type = 2;
      case 2: {
        if (tag == 18) {
         parse_product_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_type().data(), this->product_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TPurchaseValidation.GooglePurchase.product_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_purchase_token;
        break;
      }

      // optional string purchase_token = 3;
      case 3: {
        if (tag == 26) {
         parse_purchase_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->purchase_token().data(), this->purchase_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TPurchaseValidation.GooglePurchase.purchase_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TPurchaseValidation.GooglePurchase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TPurchaseValidation.GooglePurchase)
  return false;
#undef DO_
}

void TPurchaseValidation_GooglePurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TPurchaseValidation.GooglePurchase)
  // optional string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.GooglePurchase.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // optional string product_type = 2;
  if (this->product_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_type().data(), this->product_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.GooglePurchase.product_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_type(), output);
  }

  // optional string purchase_token = 3;
  if (this->purchase_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->purchase_token().data(), this->purchase_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.GooglePurchase.purchase_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->purchase_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TPurchaseValidation.GooglePurchase)
}

::google::protobuf::uint8* TPurchaseValidation_GooglePurchase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseValidation.GooglePurchase)
  // optional string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.GooglePurchase.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // optional string product_type = 2;
  if (this->product_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_type().data(), this->product_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.GooglePurchase.product_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product_type(), target);
  }

  // optional string purchase_token = 3;
  if (this->purchase_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->purchase_token().data(), this->purchase_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseValidation.GooglePurchase.purchase_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->purchase_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseValidation.GooglePurchase)
  return target;
}

size_t TPurchaseValidation_GooglePurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseValidation.GooglePurchase)
  size_t total_size = 0;

  // optional string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // optional string product_type = 2;
  if (this->product_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_type());
  }

  // optional string purchase_token = 3;
  if (this->purchase_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->purchase_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPurchaseValidation_GooglePurchase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseValidation.GooglePurchase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TPurchaseValidation_GooglePurchase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TPurchaseValidation_GooglePurchase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseValidation.GooglePurchase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseValidation.GooglePurchase)
    UnsafeMergeFrom(*source);
  }
}

void TPurchaseValidation_GooglePurchase::MergeFrom(const TPurchaseValidation_GooglePurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseValidation.GooglePurchase)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TPurchaseValidation_GooglePurchase::UnsafeMergeFrom(const TPurchaseValidation_GooglePurchase& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.product_type().size() > 0) {

    product_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_type_);
  }
  if (from.purchase_token().size() > 0) {

    purchase_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.purchase_token_);
  }
}

void TPurchaseValidation_GooglePurchase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseValidation.GooglePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPurchaseValidation_GooglePurchase::CopyFrom(const TPurchaseValidation_GooglePurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseValidation.GooglePurchase)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TPurchaseValidation_GooglePurchase::IsInitialized() const {

  return true;
}

void TPurchaseValidation_GooglePurchase::Swap(TPurchaseValidation_GooglePurchase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TPurchaseValidation_GooglePurchase::InternalSwap(TPurchaseValidation_GooglePurchase* other) {
  product_id_.Swap(&other->product_id_);
  product_type_.Swap(&other->product_type_);
  purchase_token_.Swap(&other->purchase_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TPurchaseValidation_GooglePurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPurchaseValidation_GooglePurchase_descriptor_;
  metadata.reflection = TPurchaseValidation_GooglePurchase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPurchaseValidation::kApplePurchaseFieldNumber;
const int TPurchaseValidation::kGooglePurchaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPurchaseValidation::TPurchaseValidation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TPurchaseValidation)
}

void TPurchaseValidation::InitAsDefaultInstance() {
  TPurchaseValidation_default_oneof_instance_->apple_purchase_ = const_cast< ::server::TPurchaseValidation_ApplePurchase*>(
      ::server::TPurchaseValidation_ApplePurchase::internal_default_instance());
  TPurchaseValidation_default_oneof_instance_->google_purchase_ = const_cast< ::server::TPurchaseValidation_GooglePurchase*>(
      ::server::TPurchaseValidation_GooglePurchase::internal_default_instance());
}

TPurchaseValidation::TPurchaseValidation(const TPurchaseValidation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TPurchaseValidation)
}

void TPurchaseValidation::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TPurchaseValidation::~TPurchaseValidation() {
  // @@protoc_insertion_point(destructor:server.TPurchaseValidation)
  SharedDtor();
}

void TPurchaseValidation::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TPurchaseValidation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPurchaseValidation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPurchaseValidation_descriptor_;
}

const TPurchaseValidation& TPurchaseValidation::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TPurchaseValidation> TPurchaseValidation_default_instance_;

TPurchaseValidation* TPurchaseValidation::New(::google::protobuf::Arena* arena) const {
  TPurchaseValidation* n = new TPurchaseValidation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TPurchaseValidation::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TPurchaseValidation)
  switch (id_case()) {
    case kApplePurchase: {
      delete id_.apple_purchase_;
      break;
    }
    case kGooglePurchase: {
      delete id_.google_purchase_;
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TPurchaseValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TPurchaseValidation)
  clear_id();
}

bool TPurchaseValidation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TPurchaseValidation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apple_purchase()));
        } else {
          goto handle_unusual;
        }
        goto after_google_purchase;
        break;
      }

      // optional .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_purchase()));
        } else {
          goto handle_unusual;
        }
       after_google_purchase:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TPurchaseValidation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TPurchaseValidation)
  return false;
#undef DO_
}

void TPurchaseValidation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TPurchaseValidation)
  // optional .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
  if (has_apple_purchase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *id_.apple_purchase_, output);
  }

  // optional .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
  if (has_google_purchase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *id_.google_purchase_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TPurchaseValidation)
}

::google::protobuf::uint8* TPurchaseValidation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseValidation)
  // optional .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
  if (has_apple_purchase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *id_.apple_purchase_, false, target);
  }

  // optional .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
  if (has_google_purchase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *id_.google_purchase_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseValidation)
  return target;
}

size_t TPurchaseValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseValidation)
  size_t total_size = 0;

  switch (id_case()) {
    // optional .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
    case kApplePurchase: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.apple_purchase_);
      break;
    }
    // optional .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
    case kGooglePurchase: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *id_.google_purchase_);
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPurchaseValidation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseValidation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TPurchaseValidation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TPurchaseValidation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseValidation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseValidation)
    UnsafeMergeFrom(*source);
  }
}

void TPurchaseValidation::MergeFrom(const TPurchaseValidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseValidation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TPurchaseValidation::UnsafeMergeFrom(const TPurchaseValidation& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kApplePurchase: {
      mutable_apple_purchase()->::server::TPurchaseValidation_ApplePurchase::MergeFrom(from.apple_purchase());
      break;
    }
    case kGooglePurchase: {
      mutable_google_purchase()->::server::TPurchaseValidation_GooglePurchase::MergeFrom(from.google_purchase());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TPurchaseValidation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPurchaseValidation::CopyFrom(const TPurchaseValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseValidation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TPurchaseValidation::IsInitialized() const {

  return true;
}

void TPurchaseValidation::Swap(TPurchaseValidation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TPurchaseValidation::InternalSwap(TPurchaseValidation* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TPurchaseValidation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPurchaseValidation_descriptor_;
  metadata.reflection = TPurchaseValidation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TPurchaseValidation_ApplePurchase

// optional string product_id = 1;
void TPurchaseValidation_ApplePurchase::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TPurchaseValidation_ApplePurchase::product_id() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.ApplePurchase.product_id)
  return product_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_ApplePurchase::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.ApplePurchase.product_id)
}
void TPurchaseValidation_ApplePurchase::set_product_id(const char* value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.ApplePurchase.product_id)
}
void TPurchaseValidation_ApplePurchase::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.ApplePurchase.product_id)
}
::std::string* TPurchaseValidation_ApplePurchase::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.ApplePurchase.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TPurchaseValidation_ApplePurchase::release_product_id() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.ApplePurchase.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_ApplePurchase::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.ApplePurchase.product_id)
}

// optional string receipt_data = 2;
void TPurchaseValidation_ApplePurchase::clear_receipt_data() {
  receipt_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TPurchaseValidation_ApplePurchase::receipt_data() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.ApplePurchase.receipt_data)
  return receipt_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_ApplePurchase::set_receipt_data(const ::std::string& value) {
  
  receipt_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
void TPurchaseValidation_ApplePurchase::set_receipt_data(const char* value) {
  
  receipt_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
void TPurchaseValidation_ApplePurchase::set_receipt_data(const char* value, size_t size) {
  
  receipt_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
::std::string* TPurchaseValidation_ApplePurchase::mutable_receipt_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.ApplePurchase.receipt_data)
  return receipt_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TPurchaseValidation_ApplePurchase::release_receipt_data() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.ApplePurchase.receipt_data)
  
  return receipt_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_ApplePurchase::set_allocated_receipt_data(::std::string* receipt_data) {
  if (receipt_data != NULL) {
    
  } else {
    
  }
  receipt_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receipt_data);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.ApplePurchase.receipt_data)
}

inline const TPurchaseValidation_ApplePurchase* TPurchaseValidation_ApplePurchase::internal_default_instance() {
  return &TPurchaseValidation_ApplePurchase_default_instance_.get();
}
// -------------------------------------------------------------------

// TPurchaseValidation_GooglePurchase

// optional string product_id = 1;
void TPurchaseValidation_GooglePurchase::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TPurchaseValidation_GooglePurchase::product_id() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.product_id)
  return product_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_GooglePurchase::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.product_id)
}
void TPurchaseValidation_GooglePurchase::set_product_id(const char* value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.product_id)
}
void TPurchaseValidation_GooglePurchase::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.product_id)
}
::std::string* TPurchaseValidation_GooglePurchase::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TPurchaseValidation_GooglePurchase::release_product_id() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_GooglePurchase::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.product_id)
}

// optional string product_type = 2;
void TPurchaseValidation_GooglePurchase::clear_product_type() {
  product_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TPurchaseValidation_GooglePurchase::product_type() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.product_type)
  return product_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_GooglePurchase::set_product_type(const ::std::string& value) {
  
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.product_type)
}
void TPurchaseValidation_GooglePurchase::set_product_type(const char* value) {
  
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.product_type)
}
void TPurchaseValidation_GooglePurchase::set_product_type(const char* value, size_t size) {
  
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.product_type)
}
::std::string* TPurchaseValidation_GooglePurchase::mutable_product_type() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.product_type)
  return product_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TPurchaseValidation_GooglePurchase::release_product_type() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.product_type)
  
  return product_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_GooglePurchase::set_allocated_product_type(::std::string* product_type) {
  if (product_type != NULL) {
    
  } else {
    
  }
  product_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_type);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.product_type)
}

// optional string purchase_token = 3;
void TPurchaseValidation_GooglePurchase::clear_purchase_token() {
  purchase_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TPurchaseValidation_GooglePurchase::purchase_token() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.purchase_token)
  return purchase_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_GooglePurchase::set_purchase_token(const ::std::string& value) {
  
  purchase_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
void TPurchaseValidation_GooglePurchase::set_purchase_token(const char* value) {
  
  purchase_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
void TPurchaseValidation_GooglePurchase::set_purchase_token(const char* value, size_t size) {
  
  purchase_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
::std::string* TPurchaseValidation_GooglePurchase::mutable_purchase_token() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.purchase_token)
  return purchase_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TPurchaseValidation_GooglePurchase::release_purchase_token() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.purchase_token)
  
  return purchase_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseValidation_GooglePurchase::set_allocated_purchase_token(::std::string* purchase_token) {
  if (purchase_token != NULL) {
    
  } else {
    
  }
  purchase_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), purchase_token);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.purchase_token)
}

inline const TPurchaseValidation_GooglePurchase* TPurchaseValidation_GooglePurchase::internal_default_instance() {
  return &TPurchaseValidation_GooglePurchase_default_instance_.get();
}
// -------------------------------------------------------------------

// TPurchaseValidation

// optional .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
bool TPurchaseValidation::has_apple_purchase() const {
  return id_case() == kApplePurchase;
}
void TPurchaseValidation::set_has_apple_purchase() {
  _oneof_case_[0] = kApplePurchase;
}
void TPurchaseValidation::clear_apple_purchase() {
  if (has_apple_purchase()) {
    delete id_.apple_purchase_;
    clear_has_id();
  }
}
 const ::server::TPurchaseValidation_ApplePurchase& TPurchaseValidation::apple_purchase() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.apple_purchase)
  return has_apple_purchase()
      ? *id_.apple_purchase_
      : ::server::TPurchaseValidation_ApplePurchase::default_instance();
}
::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::mutable_apple_purchase() {
  if (!has_apple_purchase()) {
    clear_id();
    set_has_apple_purchase();
    id_.apple_purchase_ = new ::server::TPurchaseValidation_ApplePurchase;
  }
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.apple_purchase)
  return id_.apple_purchase_;
}
::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::release_apple_purchase() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.apple_purchase)
  if (has_apple_purchase()) {
    clear_has_id();
    ::server::TPurchaseValidation_ApplePurchase* temp = id_.apple_purchase_;
    id_.apple_purchase_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TPurchaseValidation::set_allocated_apple_purchase(::server::TPurchaseValidation_ApplePurchase* apple_purchase) {
  clear_id();
  if (apple_purchase) {
    set_has_apple_purchase();
    id_.apple_purchase_ = apple_purchase;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.apple_purchase)
}

// optional .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
bool TPurchaseValidation::has_google_purchase() const {
  return id_case() == kGooglePurchase;
}
void TPurchaseValidation::set_has_google_purchase() {
  _oneof_case_[0] = kGooglePurchase;
}
void TPurchaseValidation::clear_google_purchase() {
  if (has_google_purchase()) {
    delete id_.google_purchase_;
    clear_has_id();
  }
}
 const ::server::TPurchaseValidation_GooglePurchase& TPurchaseValidation::google_purchase() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.google_purchase)
  return has_google_purchase()
      ? *id_.google_purchase_
      : ::server::TPurchaseValidation_GooglePurchase::default_instance();
}
::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::mutable_google_purchase() {
  if (!has_google_purchase()) {
    clear_id();
    set_has_google_purchase();
    id_.google_purchase_ = new ::server::TPurchaseValidation_GooglePurchase;
  }
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.google_purchase)
  return id_.google_purchase_;
}
::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::release_google_purchase() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.google_purchase)
  if (has_google_purchase()) {
    clear_has_id();
    ::server::TPurchaseValidation_GooglePurchase* temp = id_.google_purchase_;
    id_.google_purchase_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TPurchaseValidation::set_allocated_google_purchase(::server::TPurchaseValidation_GooglePurchase* google_purchase) {
  clear_id();
  if (google_purchase) {
    set_has_google_purchase();
    id_.google_purchase_ = google_purchase;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.google_purchase)
}

bool TPurchaseValidation::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TPurchaseValidation::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TPurchaseValidation::IdCase TPurchaseValidation::id_case() const {
  return TPurchaseValidation::IdCase(_oneof_case_[0]);
}
inline const TPurchaseValidation* TPurchaseValidation::internal_default_instance() {
  return &TPurchaseValidation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPurchaseRecord::kSuccessFieldNumber;
const int TPurchaseRecord::kSeenBeforeFieldNumber;
const int TPurchaseRecord::kPurchaseProviderReachableFieldNumber;
const int TPurchaseRecord::kMessageFieldNumber;
const int TPurchaseRecord::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPurchaseRecord::TPurchaseRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TPurchaseRecord)
}

void TPurchaseRecord::InitAsDefaultInstance() {
}

TPurchaseRecord::TPurchaseRecord(const TPurchaseRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TPurchaseRecord)
}

void TPurchaseRecord::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, reinterpret_cast<char*>(&purchase_provider_reachable_) -
    reinterpret_cast<char*>(&success_) + sizeof(purchase_provider_reachable_));
  _cached_size_ = 0;
}

TPurchaseRecord::~TPurchaseRecord() {
  // @@protoc_insertion_point(destructor:server.TPurchaseRecord)
  SharedDtor();
}

void TPurchaseRecord::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TPurchaseRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPurchaseRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPurchaseRecord_descriptor_;
}

const TPurchaseRecord& TPurchaseRecord::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TPurchaseRecord> TPurchaseRecord_default_instance_;

TPurchaseRecord* TPurchaseRecord::New(::google::protobuf::Arena* arena) const {
  TPurchaseRecord* n = new TPurchaseRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TPurchaseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TPurchaseRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TPurchaseRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TPurchaseRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(success_, purchase_provider_reachable_);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TPurchaseRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TPurchaseRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seen_before;
        break;
      }

      // optional bool seen_before = 2;
      case 2: {
        if (tag == 16) {
         parse_seen_before:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seen_before_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_purchase_provider_reachable;
        break;
      }

      // optional bool purchase_provider_reachable = 3;
      case 3: {
        if (tag == 24) {
         parse_purchase_provider_reachable:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchase_provider_reachable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional string data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TPurchaseRecord.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }

      // optional string message = 6;
      case 6: {
        if (tag == 50) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TPurchaseRecord.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TPurchaseRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TPurchaseRecord)
  return false;
#undef DO_
}

void TPurchaseRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TPurchaseRecord)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional bool seen_before = 2;
  if (this->seen_before() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->seen_before(), output);
  }

  // optional bool purchase_provider_reachable = 3;
  if (this->purchase_provider_reachable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->purchase_provider_reachable(), output);
  }

  // optional string data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseRecord.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseRecord.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TPurchaseRecord)
}

::google::protobuf::uint8* TPurchaseRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseRecord)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional bool seen_before = 2;
  if (this->seen_before() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->seen_before(), target);
  }

  // optional bool purchase_provider_reachable = 3;
  if (this->purchase_provider_reachable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->purchase_provider_reachable(), target);
  }

  // optional string data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseRecord.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TPurchaseRecord.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseRecord)
  return target;
}

size_t TPurchaseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseRecord)
  size_t total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional bool seen_before = 2;
  if (this->seen_before() != 0) {
    total_size += 1 + 1;
  }

  // optional bool purchase_provider_reachable = 3;
  if (this->purchase_provider_reachable() != 0) {
    total_size += 1 + 1;
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional string data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPurchaseRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TPurchaseRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TPurchaseRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseRecord)
    UnsafeMergeFrom(*source);
  }
}

void TPurchaseRecord::MergeFrom(const TPurchaseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseRecord)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TPurchaseRecord::UnsafeMergeFrom(const TPurchaseRecord& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.seen_before() != 0) {
    set_seen_before(from.seen_before());
  }
  if (from.purchase_provider_reachable() != 0) {
    set_purchase_provider_reachable(from.purchase_provider_reachable());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TPurchaseRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPurchaseRecord::CopyFrom(const TPurchaseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseRecord)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TPurchaseRecord::IsInitialized() const {

  return true;
}

void TPurchaseRecord::Swap(TPurchaseRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TPurchaseRecord::InternalSwap(TPurchaseRecord* other) {
  std::swap(success_, other->success_);
  std::swap(seen_before_, other->seen_before_);
  std::swap(purchase_provider_reachable_, other->purchase_provider_reachable_);
  message_.Swap(&other->message_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TPurchaseRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPurchaseRecord_descriptor_;
  metadata.reflection = TPurchaseRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TPurchaseRecord

// optional bool success = 1;
void TPurchaseRecord::clear_success() {
  success_ = false;
}
bool TPurchaseRecord::success() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.success)
  return success_;
}
void TPurchaseRecord::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.success)
}

// optional bool seen_before = 2;
void TPurchaseRecord::clear_seen_before() {
  seen_before_ = false;
}
bool TPurchaseRecord::seen_before() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.seen_before)
  return seen_before_;
}
void TPurchaseRecord::set_seen_before(bool value) {
  
  seen_before_ = value;
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.seen_before)
}

// optional bool purchase_provider_reachable = 3;
void TPurchaseRecord::clear_purchase_provider_reachable() {
  purchase_provider_reachable_ = false;
}
bool TPurchaseRecord::purchase_provider_reachable() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.purchase_provider_reachable)
  return purchase_provider_reachable_;
}
void TPurchaseRecord::set_purchase_provider_reachable(bool value) {
  
  purchase_provider_reachable_ = value;
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.purchase_provider_reachable)
}

// optional string message = 6;
void TPurchaseRecord::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TPurchaseRecord::message() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseRecord::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.message)
}
void TPurchaseRecord::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseRecord.message)
}
void TPurchaseRecord::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseRecord.message)
}
::std::string* TPurchaseRecord::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseRecord.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TPurchaseRecord::release_message() {
  // @@protoc_insertion_point(field_release:server.TPurchaseRecord.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseRecord::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseRecord.message)
}

// optional string data = 5;
void TPurchaseRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TPurchaseRecord::data() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseRecord::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.data)
}
void TPurchaseRecord::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TPurchaseRecord.data)
}
void TPurchaseRecord::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseRecord.data)
}
::std::string* TPurchaseRecord::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TPurchaseRecord.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TPurchaseRecord::release_data() {
  // @@protoc_insertion_point(field_release:server.TPurchaseRecord.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TPurchaseRecord::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseRecord.data)
}

inline const TPurchaseRecord* TPurchaseRecord::internal_default_instance() {
  return &TPurchaseRecord_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notification::kIdFieldNumber;
const int Notification::kSubjectFieldNumber;
const int Notification::kContentFieldNumber;
const int Notification::kCodeFieldNumber;
const int Notification::kSenderIdFieldNumber;
const int Notification::kCreatedAtFieldNumber;
const int Notification::kExpiresAtFieldNumber;
const int Notification::kPersistentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notification::Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Notification)
}

void Notification::InitAsDefaultInstance() {
}

Notification::Notification(const Notification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Notification)
}

void Notification::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, reinterpret_cast<char*>(&persistent_) -
    reinterpret_cast<char*>(&code_) + sizeof(persistent_));
  _cached_size_ = 0;
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:server.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notification_descriptor_;
}

const Notification& Notification::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Notification> Notification_default_instance_;

Notification* Notification::New(::google::protobuf::Arena* arena) const {
  Notification* n = new Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Notification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Notification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Notification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(code_, persistent_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Notification.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subject;
        break;
      }

      // optional string subject = 2;
      case 2: {
        if (tag == 18) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Notification.subject"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Notification.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional int64 code = 4;
      case 4: {
        if (tag == 32) {
         parse_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sender_id;
        break;
      }

      // optional string sender_id = 5;
      case 5: {
        if (tag == 42) {
         parse_sender_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id().data(), this->sender_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Notification.sender_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 6;
      case 6: {
        if (tag == 48) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 7;
      case 7: {
        if (tag == 56) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_persistent;
        break;
      }

      // optional bool persistent = 8;
      case 8: {
        if (tag == 64) {
         parse_persistent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persistent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Notification)
  return false;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Notification)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string subject = 2;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject(), output);
  }

  // optional string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional int64 code = 4;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->code(), output);
  }

  // optional string sender_id = 5;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.sender_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sender_id(), output);
  }

  // optional int64 created_at = 6;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->created_at(), output);
  }

  // optional int64 expires_at = 7;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expires_at(), output);
  }

  // optional bool persistent = 8;
  if (this->persistent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->persistent(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Notification)
}

::google::protobuf::uint8* Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Notification)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string subject = 2;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subject(), target);
  }

  // optional string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional int64 code = 4;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->code(), target);
  }

  // optional string sender_id = 5;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Notification.sender_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender_id(), target);
  }

  // optional int64 created_at = 6;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->created_at(), target);
  }

  // optional int64 expires_at = 7;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->expires_at(), target);
  }

  // optional bool persistent = 8;
  if (this->persistent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->persistent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Notification)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string subject = 2;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subject());
  }

  // optional string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // optional int64 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->code());
  }

  // optional string sender_id = 5;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_id());
  }

  // optional int64 created_at = 6;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 expires_at = 7;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  // optional bool persistent = 8;
  if (this->persistent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Notification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Notification)
    UnsafeMergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Notification)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Notification::UnsafeMergeFrom(const Notification& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.subject().size() > 0) {

    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
  if (from.persistent() != 0) {
    set_persistent(from.persistent());
  }
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Notification)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Notification::IsInitialized() const {

  return true;
}

void Notification::Swap(Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notification::InternalSwap(Notification* other) {
  id_.Swap(&other->id_);
  subject_.Swap(&other->subject_);
  content_.Swap(&other->content_);
  std::swap(code_, other->code_);
  sender_id_.Swap(&other->sender_id_);
  std::swap(created_at_, other->created_at_);
  std::swap(expires_at_, other->expires_at_);
  std::swap(persistent_, other->persistent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notification_descriptor_;
  metadata.reflection = Notification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Notification

// optional string id = 1;
void Notification::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Notification::id() const {
  // @@protoc_insertion_point(field_get:server.Notification.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.id)
}
void Notification::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.id)
}
void Notification::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.id)
}
::std::string* Notification::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Notification::release_id() {
  // @@protoc_insertion_point(field_release:server.Notification.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.id)
}

// optional string subject = 2;
void Notification::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Notification::subject() const {
  // @@protoc_insertion_point(field_get:server.Notification.subject)
  return subject_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.subject)
}
void Notification::set_subject(const char* value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.subject)
}
void Notification::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.subject)
}
::std::string* Notification::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Notification::release_subject() {
  // @@protoc_insertion_point(field_release:server.Notification.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.subject)
}

// optional string content = 3;
void Notification::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Notification::content() const {
  // @@protoc_insertion_point(field_get:server.Notification.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.content)
}
void Notification::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.content)
}
void Notification::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.content)
}
::std::string* Notification::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Notification::release_content() {
  // @@protoc_insertion_point(field_release:server.Notification.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.content)
}

// optional int64 code = 4;
void Notification::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Notification::code() const {
  // @@protoc_insertion_point(field_get:server.Notification.code)
  return code_;
}
void Notification::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.code)
}

// optional string sender_id = 5;
void Notification::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Notification::sender_id() const {
  // @@protoc_insertion_point(field_get:server.Notification.sender_id)
  return sender_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_sender_id(const ::std::string& value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Notification.sender_id)
}
void Notification::set_sender_id(const char* value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Notification.sender_id)
}
void Notification::set_sender_id(const char* value, size_t size) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Notification.sender_id)
}
::std::string* Notification::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Notification.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Notification::release_sender_id() {
  // @@protoc_insertion_point(field_release:server.Notification.sender_id)
  
  return sender_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Notification::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:server.Notification.sender_id)
}

// optional int64 created_at = 6;
void Notification::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Notification::created_at() const {
  // @@protoc_insertion_point(field_get:server.Notification.created_at)
  return created_at_;
}
void Notification::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.created_at)
}

// optional int64 expires_at = 7;
void Notification::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Notification::expires_at() const {
  // @@protoc_insertion_point(field_get:server.Notification.expires_at)
  return expires_at_;
}
void Notification::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.expires_at)
}

// optional bool persistent = 8;
void Notification::clear_persistent() {
  persistent_ = false;
}
bool Notification::persistent() const {
  // @@protoc_insertion_point(field_get:server.Notification.persistent)
  return persistent_;
}
void Notification::set_persistent(bool value) {
  
  persistent_ = value;
  // @@protoc_insertion_point(field_set:server.Notification.persistent)
}

inline const Notification* Notification::internal_default_instance() {
  return &Notification_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notifications::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notifications::Notifications()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Notifications)
}

void Notifications::InitAsDefaultInstance() {
}

Notifications::Notifications(const Notifications& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Notifications)
}

void Notifications::SharedCtor() {
  _cached_size_ = 0;
}

Notifications::~Notifications() {
  // @@protoc_insertion_point(destructor:server.Notifications)
  SharedDtor();
}

void Notifications::SharedDtor() {
}

void Notifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notifications::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notifications_descriptor_;
}

const Notifications& Notifications::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Notifications> Notifications_default_instance_;

Notifications* Notifications::New(::google::protobuf::Arena* arena) const {
  Notifications* n = new Notifications;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Notifications::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Notifications)
  notifications_.Clear();
}

bool Notifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Notifications)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Notification notifications = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_notifications;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Notifications)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Notifications)
  return false;
#undef DO_
}

void Notifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Notifications)
  // repeated .server.Notification notifications = 1;
  for (unsigned int i = 0, n = this->notifications_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifications(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Notifications)
}

::google::protobuf::uint8* Notifications::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Notifications)
  // repeated .server.Notification notifications = 1;
  for (unsigned int i = 0, n = this->notifications_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->notifications(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Notifications)
  return target;
}

size_t Notifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Notifications)
  size_t total_size = 0;

  // repeated .server.Notification notifications = 1;
  {
    unsigned int count = this->notifications_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifications(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notifications::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Notifications)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Notifications* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notifications>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Notifications)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Notifications)
    UnsafeMergeFrom(*source);
  }
}

void Notifications::MergeFrom(const Notifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Notifications)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Notifications::UnsafeMergeFrom(const Notifications& from) {
  GOOGLE_DCHECK(&from != this);
  notifications_.MergeFrom(from.notifications_);
}

void Notifications::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Notifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notifications::CopyFrom(const Notifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Notifications)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Notifications::IsInitialized() const {

  return true;
}

void Notifications::Swap(Notifications* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notifications::InternalSwap(Notifications* other) {
  notifications_.UnsafeArenaSwap(&other->notifications_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Notifications::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notifications_descriptor_;
  metadata.reflection = Notifications_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Notifications

// repeated .server.Notification notifications = 1;
int Notifications::notifications_size() const {
  return notifications_.size();
}
void Notifications::clear_notifications() {
  notifications_.Clear();
}
const ::server::Notification& Notifications::notifications(int index) const {
  // @@protoc_insertion_point(field_get:server.Notifications.notifications)
  return notifications_.Get(index);
}
::server::Notification* Notifications::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:server.Notifications.notifications)
  return notifications_.Mutable(index);
}
::server::Notification* Notifications::add_notifications() {
  // @@protoc_insertion_point(field_add:server.Notifications.notifications)
  return notifications_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Notification >*
Notifications::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:server.Notifications.notifications)
  return &notifications_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Notification >&
Notifications::notifications() const {
  // @@protoc_insertion_point(field_list:server.Notifications.notifications)
  return notifications_;
}

inline const Notifications* Notifications::internal_default_instance() {
  return &Notifications_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TNotificationsList::kLimitFieldNumber;
const int TNotificationsList::kResumableCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TNotificationsList::TNotificationsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TNotificationsList)
}

void TNotificationsList::InitAsDefaultInstance() {
}

TNotificationsList::TNotificationsList(const TNotificationsList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TNotificationsList)
}

void TNotificationsList::SharedCtor() {
  resumable_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TNotificationsList::~TNotificationsList() {
  // @@protoc_insertion_point(destructor:server.TNotificationsList)
  SharedDtor();
}

void TNotificationsList::SharedDtor() {
  resumable_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TNotificationsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TNotificationsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNotificationsList_descriptor_;
}

const TNotificationsList& TNotificationsList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TNotificationsList> TNotificationsList_default_instance_;

TNotificationsList* TNotificationsList::New(::google::protobuf::Arena* arena) const {
  TNotificationsList* n = new TNotificationsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TNotificationsList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TNotificationsList)
  limit_ = GOOGLE_LONGLONG(0);
  resumable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TNotificationsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TNotificationsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 limit = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resumable_cursor;
        break;
      }

      // optional string resumable_cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_resumable_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resumable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resumable_cursor().data(), this->resumable_cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TNotificationsList.resumable_cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TNotificationsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TNotificationsList)
  return false;
#undef DO_
}

void TNotificationsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TNotificationsList)
  // optional int64 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->limit(), output);
  }

  // optional string resumable_cursor = 2;
  if (this->resumable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resumable_cursor().data(), this->resumable_cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TNotificationsList.resumable_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resumable_cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TNotificationsList)
}

::google::protobuf::uint8* TNotificationsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TNotificationsList)
  // optional int64 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->limit(), target);
  }

  // optional string resumable_cursor = 2;
  if (this->resumable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resumable_cursor().data(), this->resumable_cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TNotificationsList.resumable_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resumable_cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TNotificationsList)
  return target;
}

size_t TNotificationsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TNotificationsList)
  size_t total_size = 0;

  // optional int64 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // optional string resumable_cursor = 2;
  if (this->resumable_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resumable_cursor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TNotificationsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TNotificationsList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TNotificationsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TNotificationsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TNotificationsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TNotificationsList)
    UnsafeMergeFrom(*source);
  }
}

void TNotificationsList::MergeFrom(const TNotificationsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TNotificationsList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TNotificationsList::UnsafeMergeFrom(const TNotificationsList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.resumable_cursor().size() > 0) {

    resumable_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resumable_cursor_);
  }
}

void TNotificationsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TNotificationsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TNotificationsList::CopyFrom(const TNotificationsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TNotificationsList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TNotificationsList::IsInitialized() const {

  return true;
}

void TNotificationsList::Swap(TNotificationsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TNotificationsList::InternalSwap(TNotificationsList* other) {
  std::swap(limit_, other->limit_);
  resumable_cursor_.Swap(&other->resumable_cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TNotificationsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TNotificationsList_descriptor_;
  metadata.reflection = TNotificationsList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TNotificationsList

// optional int64 limit = 1;
void TNotificationsList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TNotificationsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TNotificationsList.limit)
  return limit_;
}
void TNotificationsList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TNotificationsList.limit)
}

// optional string resumable_cursor = 2;
void TNotificationsList::clear_resumable_cursor() {
  resumable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TNotificationsList::resumable_cursor() const {
  // @@protoc_insertion_point(field_get:server.TNotificationsList.resumable_cursor)
  return resumable_cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TNotificationsList::set_resumable_cursor(const ::std::string& value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TNotificationsList.resumable_cursor)
}
void TNotificationsList::set_resumable_cursor(const char* value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TNotificationsList.resumable_cursor)
}
void TNotificationsList::set_resumable_cursor(const char* value, size_t size) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TNotificationsList.resumable_cursor)
}
::std::string* TNotificationsList::mutable_resumable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TNotificationsList.resumable_cursor)
  return resumable_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TNotificationsList::release_resumable_cursor() {
  // @@protoc_insertion_point(field_release:server.TNotificationsList.resumable_cursor)
  
  return resumable_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TNotificationsList::set_allocated_resumable_cursor(::std::string* resumable_cursor) {
  if (resumable_cursor != NULL) {
    
  } else {
    
  }
  resumable_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resumable_cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TNotificationsList.resumable_cursor)
}

inline const TNotificationsList* TNotificationsList::internal_default_instance() {
  return &TNotificationsList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TNotifications::kNotificationsFieldNumber;
const int TNotifications::kResumableCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TNotifications::TNotifications()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TNotifications)
}

void TNotifications::InitAsDefaultInstance() {
}

TNotifications::TNotifications(const TNotifications& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TNotifications)
}

void TNotifications::SharedCtor() {
  resumable_cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TNotifications::~TNotifications() {
  // @@protoc_insertion_point(destructor:server.TNotifications)
  SharedDtor();
}

void TNotifications::SharedDtor() {
  resumable_cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TNotifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TNotifications::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNotifications_descriptor_;
}

const TNotifications& TNotifications::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TNotifications> TNotifications_default_instance_;

TNotifications* TNotifications::New(::google::protobuf::Arena* arena) const {
  TNotifications* n = new TNotifications;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TNotifications::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TNotifications)
  resumable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notifications_.Clear();
}

bool TNotifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TNotifications)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Notification notifications = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_notifications;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_resumable_cursor;
        break;
      }

      // optional string resumable_cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_resumable_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resumable_cursor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resumable_cursor().data(), this->resumable_cursor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TNotifications.resumable_cursor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TNotifications)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TNotifications)
  return false;
#undef DO_
}

void TNotifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TNotifications)
  // repeated .server.Notification notifications = 1;
  for (unsigned int i = 0, n = this->notifications_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifications(i), output);
  }

  // optional string resumable_cursor = 2;
  if (this->resumable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resumable_cursor().data(), this->resumable_cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TNotifications.resumable_cursor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resumable_cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TNotifications)
}

::google::protobuf::uint8* TNotifications::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TNotifications)
  // repeated .server.Notification notifications = 1;
  for (unsigned int i = 0, n = this->notifications_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->notifications(i), false, target);
  }

  // optional string resumable_cursor = 2;
  if (this->resumable_cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resumable_cursor().data(), this->resumable_cursor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TNotifications.resumable_cursor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resumable_cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TNotifications)
  return target;
}

size_t TNotifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TNotifications)
  size_t total_size = 0;

  // optional string resumable_cursor = 2;
  if (this->resumable_cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resumable_cursor());
  }

  // repeated .server.Notification notifications = 1;
  {
    unsigned int count = this->notifications_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifications(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TNotifications::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TNotifications)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TNotifications* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TNotifications>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TNotifications)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TNotifications)
    UnsafeMergeFrom(*source);
  }
}

void TNotifications::MergeFrom(const TNotifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TNotifications)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TNotifications::UnsafeMergeFrom(const TNotifications& from) {
  GOOGLE_DCHECK(&from != this);
  notifications_.MergeFrom(from.notifications_);
  if (from.resumable_cursor().size() > 0) {

    resumable_cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resumable_cursor_);
  }
}

void TNotifications::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TNotifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TNotifications::CopyFrom(const TNotifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TNotifications)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TNotifications::IsInitialized() const {

  return true;
}

void TNotifications::Swap(TNotifications* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TNotifications::InternalSwap(TNotifications* other) {
  notifications_.UnsafeArenaSwap(&other->notifications_);
  resumable_cursor_.Swap(&other->resumable_cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TNotifications::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TNotifications_descriptor_;
  metadata.reflection = TNotifications_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TNotifications

// repeated .server.Notification notifications = 1;
int TNotifications::notifications_size() const {
  return notifications_.size();
}
void TNotifications::clear_notifications() {
  notifications_.Clear();
}
const ::server::Notification& TNotifications::notifications(int index) const {
  // @@protoc_insertion_point(field_get:server.TNotifications.notifications)
  return notifications_.Get(index);
}
::server::Notification* TNotifications::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:server.TNotifications.notifications)
  return notifications_.Mutable(index);
}
::server::Notification* TNotifications::add_notifications() {
  // @@protoc_insertion_point(field_add:server.TNotifications.notifications)
  return notifications_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Notification >*
TNotifications::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:server.TNotifications.notifications)
  return &notifications_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Notification >&
TNotifications::notifications() const {
  // @@protoc_insertion_point(field_list:server.TNotifications.notifications)
  return notifications_;
}

// optional string resumable_cursor = 2;
void TNotifications::clear_resumable_cursor() {
  resumable_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TNotifications::resumable_cursor() const {
  // @@protoc_insertion_point(field_get:server.TNotifications.resumable_cursor)
  return resumable_cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TNotifications::set_resumable_cursor(const ::std::string& value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TNotifications.resumable_cursor)
}
void TNotifications::set_resumable_cursor(const char* value) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TNotifications.resumable_cursor)
}
void TNotifications::set_resumable_cursor(const char* value, size_t size) {
  
  resumable_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TNotifications.resumable_cursor)
}
::std::string* TNotifications::mutable_resumable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TNotifications.resumable_cursor)
  return resumable_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TNotifications::release_resumable_cursor() {
  // @@protoc_insertion_point(field_release:server.TNotifications.resumable_cursor)
  
  return resumable_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TNotifications::set_allocated_resumable_cursor(::std::string* resumable_cursor) {
  if (resumable_cursor != NULL) {
    
  } else {
    
  }
  resumable_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resumable_cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TNotifications.resumable_cursor)
}

inline const TNotifications* TNotifications::internal_default_instance() {
  return &TNotifications_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TNotificationsRemove::kNotificationIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TNotificationsRemove::TNotificationsRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TNotificationsRemove)
}

void TNotificationsRemove::InitAsDefaultInstance() {
}

TNotificationsRemove::TNotificationsRemove(const TNotificationsRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TNotificationsRemove)
}

void TNotificationsRemove::SharedCtor() {
  _cached_size_ = 0;
}

TNotificationsRemove::~TNotificationsRemove() {
  // @@protoc_insertion_point(destructor:server.TNotificationsRemove)
  SharedDtor();
}

void TNotificationsRemove::SharedDtor() {
}

void TNotificationsRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TNotificationsRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNotificationsRemove_descriptor_;
}

const TNotificationsRemove& TNotificationsRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TNotificationsRemove> TNotificationsRemove_default_instance_;

TNotificationsRemove* TNotificationsRemove::New(::google::protobuf::Arena* arena) const {
  TNotificationsRemove* n = new TNotificationsRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TNotificationsRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TNotificationsRemove)
  notification_ids_.Clear();
}

bool TNotificationsRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TNotificationsRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string notification_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_notification_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_notification_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notification_ids(this->notification_ids_size() - 1).data(),
            this->notification_ids(this->notification_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TNotificationsRemove.notification_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_notification_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TNotificationsRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TNotificationsRemove)
  return false;
#undef DO_
}

void TNotificationsRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TNotificationsRemove)
  // repeated string notification_ids = 1;
  for (int i = 0; i < this->notification_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notification_ids(i).data(), this->notification_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TNotificationsRemove.notification_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notification_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TNotificationsRemove)
}

::google::protobuf::uint8* TNotificationsRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TNotificationsRemove)
  // repeated string notification_ids = 1;
  for (int i = 0; i < this->notification_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notification_ids(i).data(), this->notification_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TNotificationsRemove.notification_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->notification_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TNotificationsRemove)
  return target;
}

size_t TNotificationsRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TNotificationsRemove)
  size_t total_size = 0;

  // repeated string notification_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->notification_ids_size());
  for (int i = 0; i < this->notification_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->notification_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TNotificationsRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TNotificationsRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TNotificationsRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TNotificationsRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TNotificationsRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TNotificationsRemove)
    UnsafeMergeFrom(*source);
  }
}

void TNotificationsRemove::MergeFrom(const TNotificationsRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TNotificationsRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TNotificationsRemove::UnsafeMergeFrom(const TNotificationsRemove& from) {
  GOOGLE_DCHECK(&from != this);
  notification_ids_.UnsafeMergeFrom(from.notification_ids_);
}

void TNotificationsRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TNotificationsRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TNotificationsRemove::CopyFrom(const TNotificationsRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TNotificationsRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TNotificationsRemove::IsInitialized() const {

  return true;
}

void TNotificationsRemove::Swap(TNotificationsRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TNotificationsRemove::InternalSwap(TNotificationsRemove* other) {
  notification_ids_.UnsafeArenaSwap(&other->notification_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TNotificationsRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TNotificationsRemove_descriptor_;
  metadata.reflection = TNotificationsRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TNotificationsRemove

// repeated string notification_ids = 1;
int TNotificationsRemove::notification_ids_size() const {
  return notification_ids_.size();
}
void TNotificationsRemove::clear_notification_ids() {
  notification_ids_.Clear();
}
const ::std::string& TNotificationsRemove::notification_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TNotificationsRemove.notification_ids)
  return notification_ids_.Get(index);
}
::std::string* TNotificationsRemove::mutable_notification_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TNotificationsRemove.notification_ids)
  return notification_ids_.Mutable(index);
}
void TNotificationsRemove::set_notification_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TNotificationsRemove.notification_ids)
  notification_ids_.Mutable(index)->assign(value);
}
void TNotificationsRemove::set_notification_ids(int index, const char* value) {
  notification_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TNotificationsRemove.notification_ids)
}
void TNotificationsRemove::set_notification_ids(int index, const char* value, size_t size) {
  notification_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TNotificationsRemove.notification_ids)
}
::std::string* TNotificationsRemove::add_notification_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TNotificationsRemove.notification_ids)
  return notification_ids_.Add();
}
void TNotificationsRemove::add_notification_ids(const ::std::string& value) {
  notification_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TNotificationsRemove.notification_ids)
}
void TNotificationsRemove::add_notification_ids(const char* value) {
  notification_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TNotificationsRemove.notification_ids)
}
void TNotificationsRemove::add_notification_ids(const char* value, size_t size) {
  notification_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TNotificationsRemove.notification_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TNotificationsRemove::notification_ids() const {
  // @@protoc_insertion_point(field_list:server.TNotificationsRemove.notification_ids)
  return notification_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TNotificationsRemove::mutable_notification_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TNotificationsRemove.notification_ids)
  return &notification_ids_;
}

inline const TNotificationsRemove* TNotificationsRemove::internal_default_instance() {
  return &TNotificationsRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)
#pragma warning( pop )
#pragma pop_macro("assert")
